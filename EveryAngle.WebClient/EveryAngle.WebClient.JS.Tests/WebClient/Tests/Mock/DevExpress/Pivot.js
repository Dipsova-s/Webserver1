var ASPx = ASPx || {};
var dx = dx || {};
(function () {
    ASPx.EmptyObject = {};
    ASPx.FalseFunction = function () { return false; };
    ASPx.SSLSecureBlankUrl = '/book/DXR.axd?r=1_0-s5L0g';
    ASPx.EmptyImageUrl = '/book/DXR.axd?r=1_58-s5L0g';
    ASPx.VersionInfo = 'Version=\'17.1.7.0\', File Version=\'17.1.7.0\', Date Modified=\'12/29/2017 9:04:22 am\'';
    ASPx.InvalidDimension = -10000;
    ASPx.InvalidPosition = -10000;
    ASPx.AbsoluteLeftPosition = -10000;
    ASPx.EmptyGuid = "00000000-0000-0000-0000-000000000000";
    ASPx.CallbackSeparator = ":";
    ASPx.ItemIndexSeparator = "i";
    ASPx.CallbackResultPrefix = "/*DX*/";
    ASPx.AccessibilityEmptyUrl = "javascript:;";
    ASPx.AccessibilityPronounceTimeout = 500;
    ASPx.PossibleNumberDecimalSeparators = [",", "."];
    ASPx.CultureInfo = {
        twoDigitYearMax: 2029,
        ts: ":",
        ds: "/",
        am: "AM",
        pm: "PM",
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
        genMonthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
        abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
        abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        invariantCultureDecimalPoint: ".",
        numDecimalPoint: ".",
        numPrec: 2,
        numGroupSeparator: ",",
        numGroups: [3],
        numNegPattern: 1,
        numPosInf: "Infinity",
        numNegInf: "-Infinity",
        numNan: "NaN",
        currency: "$",
        currDecimalPoint: ".",
        currPrec: 2,
        currGroupSeparator: ",",
        currGroups: [3],
        currPosPattern: 0,
        currNegPattern: 0,
        percentPattern: 0,
        shortTime: "h:mm tt",
        longTime: "h:mm:ss tt",
        shortDate: "M/d/yyyy",
        longDate: "dddd, MMMM d, yyyy",
        monthDay: "MMMM d",
        yearMonth: "MMMM yyyy"
    };
    ASPx.CultureInfo.genMonthNames = ASPx.CultureInfo.monthNames;
    ASPx.Position = {
        Left: "Left",
        Right: "Right",
        Top: "Top",
        Bottom: "Bottom"
    };
    var DateUtils = {};
    DateUtils.GetInvariantDateString = function (date) {
        if (!date)
            return "01/01/0001";
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        var result = "";
        if (month < 10)
            result += "0";
        result += month.toString() + "/";
        if (day < 10)
            result += "0";
        result += day.toString() + "/";
        if (year < 1000)
            result += "0";
        result += year.toString();
        return result;
    };
    DateUtils.GetInvariantDateTimeString = function (date) {
        var dateTimeString = DateUtils.GetInvariantDateString(date);
        var time = {
            h: date.getHours(),
            m: date.getMinutes(),
            s: date.getSeconds()
        };
        for (var key in time) {
            if (time.hasOwnProperty(key)) {
                var str = time[key].toString();
                if (str.length < 2)
                    str = "0" + str;
                time[key] = str;
            }
        }
        dateTimeString += " " + time.h + ":" + time.m + ":" + time.s;
        var msec = date.getMilliseconds();
        if (msec > 0)
            dateTimeString += "." + ("000" + msec.toString()).substr(-3);
        return dateTimeString;
    };
    DateUtils.ExpandTwoDigitYear = function (value) {
        value += 1900;
        if (value + 99 < ASPx.CultureInfo.twoDigitYearMax)
            value += 100;
        return value;
    };
    DateUtils.ToUtcTime = function (date) {
        var result = new Date();
        result.setTime(date.valueOf() + 60000 * date.getTimezoneOffset());
        return result;
    };
    DateUtils.ToLocalTime = function (date) {
        var result = new Date();
        result.setTime(date.valueOf() - 60000 * date.getTimezoneOffset());
        return result;
    };
    DateUtils.AreDatesEqualExact = function (date1, date2) {
        if (date1 == null && date2 == null)
            return true;
        if (date1 == null || date2 == null)
            return false;
        return date1.getTime() == date2.getTime();
    };
    DateUtils.FixTimezoneGap = function (oldDate, newDate) {
        var diff = newDate.getHours() - oldDate.getHours();
        if (diff == 0)
            return;
        var sign = (diff == 1 || diff == -23) ? -1 : 1;
        var trial = new Date(newDate.getTime() + sign * 3600000);
        var isDateChangedAsExpected = newDate.getHours() - trial.getHours() === diff;
        if (isDateChangedAsExpected && (sign > 0 || trial.getDate() == newDate.getDate()))
            newDate.setTime(trial.getTime());
    };
    ASPx.DateUtils = DateUtils;
    var Timer = {};
    Timer.ClearTimer = function (timerID) {
        if (timerID > -1)
            window.clearTimeout(timerID);
        return -1;
    };
    Timer.ClearInterval = function (timerID) {
        if (timerID > -1)
            window.clearInterval(timerID);
        return -1;
    };
    var setControlBoundTimer = function (handler, control, setTimerFunction, clearTimerFunction, delay) {
        var timerId;
        var getTimerId = function () { return timerId; };
        var boundHandler = function () {
            var controlExists = control && ASPx.GetControlCollection().Get(control.name) === control;
            if (controlExists)
                handler.aspxBind(control)();
            else
                clearTimerFunction(getTimerId());
        };
        timerId = setTimerFunction(boundHandler, delay);
        return timerId;
    };
    Timer.SetControlBoundTimeout = function (handler, control, delay) {
        return setControlBoundTimer(handler, control, window.setTimeout, Timer.ClearTimer, delay);
    };
    Timer.SetControlBoundInterval = function (handler, control, delay) {
        return setControlBoundTimer(handler, control, window.setInterval, Timer.ClearInterval, delay);
    };
    Timer.Throttle = function (func, delay) {
        var isThrottled = false,
            savedArgs,
            savedThis = this;
        function wrapper() {
            if (isThrottled) {
                savedArgs = arguments;
                savedThis = this;
                return;
            }
            func.apply(this, arguments);
            isThrottled = true;
            setTimeout(function () {
                isThrottled = false;
                if (savedArgs) {
                    wrapper.apply(savedThis, savedArgs);
                    savedArgs = null;
                }
            }, delay);
        }
        wrapper.cancel = function () {
            clearTimeout(delay);
            delay = savedArgs = savedThis = null;
        };
        return wrapper;
    };
    ASPx.Timer = Timer;
    var Browser = {};
    Browser.UserAgent = navigator.userAgent.toLowerCase();
    Browser.Mozilla = false;
    Browser.IE = false;
    Browser.Firefox = false;
    Browser.Netscape = false;
    Browser.Safari = false;
    Browser.Chrome = false;
    Browser.Opera = false;
    Browser.Edge = false;
    Browser.Version = undefined;
    Browser.MajorVersion = undefined;
    Browser.WindowsPlatform = false;
    Browser.MacOSPlatform = false;
    Browser.MacOSMobilePlatform = false;
    Browser.AndroidMobilePlatform = false;
    Browser.PlaformMajorVersion = false;
    Browser.WindowsPhonePlatform = false;
    Browser.AndroidDefaultBrowser = false;
    Browser.AndroidChromeBrowser = false;
    Browser.SamsungAndroidDevice = false;
    Browser.WebKitTouchUI = false;
    Browser.MSTouchUI = false;
    Browser.TouchUI = false;
    Browser.WebKitFamily = false;
    Browser.NetscapeFamily = false;
    Browser.HardwareAcceleration = false;
    Browser.VirtualKeyboardSupported = false;
    Browser.Info = "";
    function indentPlatformMajorVersion(userAgent) {
        var regex = /(?:(?:windows nt|macintosh|mac os|cpu os|cpu iphone os|android|windows phone|linux) )(\d+)(?:[-0-9_.])*/;
        var matches = regex.exec(userAgent);
        if (matches)
            Browser.PlaformMajorVersion = matches[1];
    }
    function getIECompatibleVersionString() {
        if (document.compatible) {
            for (var i = 0; i < document.compatible.length; i++)
                if (document.compatible[i].userAgent === "IE" && document.compatible[i].version)
                    return document.compatible[i].version.toLowerCase();
        }
        return "";
    }
    Browser.IdentUserAgent = function (userAgent, ignoreDocumentMode) {
        var browserTypesOrderedList = ["Mozilla", "IE", "Firefox", "Netscape", "Safari", "Chrome", "Opera", "Opera10", "Edge"];
        var defaultBrowserType = "IE";
        var defaultPlatform = "Win";
        var defaultVersions = { Safari: 2, Chrome: 0.1, Mozilla: 1.9, Netscape: 8, Firefox: 2, Opera: 9, IE: 6, Edge: 12 };
        if (!userAgent || userAgent.length == 0) {
            fillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
            return;
        }
        userAgent = userAgent.toLowerCase();
        indentPlatformMajorVersion(userAgent);
        try {
            var platformIdentStrings = {
                "Windows": "Win",
                "Macintosh": "Mac",
                "Mac OS": "Mac",
                "Mac_PowerPC": "Mac",
                "cpu os": "MacMobile",
                "cpu iphone os": "MacMobile",
                "Android": "Android",
                "!Windows Phone": "WinPhone",
                "!WPDesktop": "WinPhone",
                "!ZuneWP": "WinPhone"
            };
            var optSlashOrSpace = "(?:/|\\s*)?";
            var version = "(\\d+)(?:\\.((?:\\d+?[1-9])|\\d)0*?)?";
            var optVersion = "(?:" + version + ")?";
            var patterns = {
                Safari: "applewebkit(?:.*?(?:version/" + version + "[\\.\\w\\d]*?(?:\\s+mobile\/\\S*)?\\s+safari))?",
                Chrome: "(?:chrome|crios)(?!frame)" + optSlashOrSpace + optVersion,
                Mozilla: "mozilla(?:.*rv:" + optVersion + ".*Gecko)?",
                Netscape: "(?:netscape|navigator)\\d*/?\\s*" + optVersion,
                Firefox: "firefox" + optSlashOrSpace + optVersion,
                Opera: "(?:opera|opr)" + optSlashOrSpace + optVersion,
                Opera10: "opera.*\\s*version" + optSlashOrSpace + optVersion,
                IE: "msie\\s*" + optVersion,
                Edge: "edge" + optSlashOrSpace + optVersion
            };
            var browserType;
            var version = -1;
            for (var i = 0; i < browserTypesOrderedList.length; i++) {
                var browserTypeCandidate = browserTypesOrderedList[i];
                var regExp = new RegExp(patterns[browserTypeCandidate], "i");
                if (regExp.compile)
                    regExp.compile(patterns[browserTypeCandidate], "i");
                var matches = regExp.exec(userAgent);
                if (matches && matches.index >= 0) {
                    if (browserType == "IE" && version >= 11 && browserTypeCandidate == "Safari")
                        continue;
                    browserType = browserTypeCandidate;
                    if (browserType == "Opera10")
                        browserType = "Opera";
                    var tridentPattern = "trident" + optSlashOrSpace + optVersion;
                    version = Browser.GetBrowserVersion(userAgent, matches, tridentPattern, getIECompatibleVersionString());
                    if (browserType == "Mozilla" && version >= 11)
                        browserType = "IE";
                }
            }
            if (!browserType)
                browserType = defaultBrowserType;
            var browserVersionDetected = version != -1;
            if (!browserVersionDetected)
                version = defaultVersions[browserType];
            var platform;
            var minOccurenceIndex = Number.MAX_VALUE;
            for (var identStr in platformIdentStrings) {
                if (!platformIdentStrings.hasOwnProperty(identStr)) continue;
                var importantIdent = identStr.substr(0, 1) == "!";
                var occurenceIndex = userAgent.indexOf((importantIdent ? identStr.substr(1) : identStr).toLowerCase());
                if (occurenceIndex >= 0 && (occurenceIndex < minOccurenceIndex || importantIdent)) {
                    minOccurenceIndex = importantIdent ? 0 : occurenceIndex;
                    platform = platformIdentStrings[identStr];
                }
            }
            var samsungPattern = "SM-[A-Z]";
            var matches = userAgent.toUpperCase().match(samsungPattern);
            var isSamsungAndroidDevice = matches && matches.length > 0;
            if (platform == "WinPhone" && version < 9)
                version = Math.floor(getVersionFromTrident(userAgent, "trident" + optSlashOrSpace + optVersion));
            if (!ignoreDocumentMode && browserType == "IE" && version > 7 && document.documentMode < version)
                version = document.documentMode;
            if (platform == "WinPhone")
                version = Math.max(9, version);
            if (!platform)
                platform = defaultPlatform;
            if (platform == platformIdentStrings["cpu os"] && !browserVersionDetected)
                version = 4;
            fillUserAgentInfo(browserTypesOrderedList, browserType, version, platform, isSamsungAndroidDevice);
        } catch (e) {
            fillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
        }
    };
    function getVersionFromMatches(matches) {
        var result = -1;
        var versionStr = "";
        if (matches[1]) {
            versionStr += matches[1];
            if (matches[2])
                versionStr += "." + matches[2];
        }
        if (versionStr != "") {
            result = parseFloat(versionStr);
            if (isNaN(result))
                result = -1;
        }
        return result;
    }
    function getVersionFromTrident(userAgent, tridentPattern) {
        var tridentDiffFromVersion = 4;
        var matches = new RegExp(tridentPattern, "i").exec(userAgent);
        return getVersionFromMatches(matches) + tridentDiffFromVersion;
    }
    Browser.GetBrowserVersion = function (userAgent, matches, tridentPattern, ieCompatibleVersionString) {
        var version = getVersionFromMatches(matches);
        if (ieCompatibleVersionString) {
            var versionFromTrident = getVersionFromTrident(userAgent, tridentPattern);
            if (ieCompatibleVersionString === "edge" || parseInt(ieCompatibleVersionString) === versionFromTrident)
                return versionFromTrident;
        }
        return version;
    };
    function fillUserAgentInfo(browserTypesOrderedList, browserType, version, platform, isSamsungAndroidDevice) {
        for (var i = 0; i < browserTypesOrderedList.length; i++) {
            var type = browserTypesOrderedList[i];
            Browser[type] = type == browserType;
        }
        Browser.Version = Math.floor(10.0 * version) / 10.0;
        Browser.MajorVersion = Math.floor(Browser.Version);
        Browser.WindowsPlatform = platform == "Win" || platform == "WinPhone";
        Browser.MacOSPlatform = platform == "Mac";
        Browser.MacOSMobilePlatform = platform == "MacMobile";
        Browser.AndroidMobilePlatform = platform == "Android";
        Browser.WindowsPhonePlatform = platform == "WinPhone";
        Browser.WebKitFamily = Browser.Safari || Browser.Chrome || Browser.Opera && Browser.MajorVersion >= 15;
        Browser.NetscapeFamily = Browser.Netscape || Browser.Mozilla || Browser.Firefox;
        Browser.HardwareAcceleration = (Browser.IE && Browser.MajorVersion >= 9) || (Browser.Firefox && Browser.MajorVersion >= 4) ||
            (Browser.AndroidMobilePlatform && Browser.Chrome) || (Browser.Chrome && Browser.MajorVersion >= 37) ||
            (Browser.Safari && !Browser.WindowsPlatform) || Browser.Edge || (Browser.Opera && Browser.MajorVersion >= 46);
        Browser.WebKitTouchUI = Browser.MacOSMobilePlatform || Browser.AndroidMobilePlatform;
        var isIETouchUI = Browser.IE && Browser.MajorVersion > 9 && Browser.WindowsPlatform && Browser.UserAgent.toLowerCase().indexOf("touch") >= 0;
        Browser.MSTouchUI = isIETouchUI || (Browser.Edge && !!window.navigator.maxTouchPoints);
        Browser.TouchUI = Browser.WebKitTouchUI || Browser.MSTouchUI;
        Browser.MobileUI = Browser.WebKitTouchUI || Browser.WindowsPhonePlatform;
        Browser.AndroidDefaultBrowser = Browser.AndroidMobilePlatform && !Browser.Chrome;
        Browser.AndroidChromeBrowser = Browser.AndroidMobilePlatform && Browser.Chrome;
        if (isSamsungAndroidDevice)
            Browser.SamsungAndroidDevice = isSamsungAndroidDevice;
        if (Browser.MSTouchUI) {
            var isARMArchitecture = Browser.UserAgent.toLowerCase().indexOf("arm;") > -1;
            Browser.VirtualKeyboardSupported = isARMArchitecture || Browser.WindowsPhonePlatform;
        } else {
            Browser.VirtualKeyboardSupported = Browser.WebKitTouchUI;
        }
        fillDocumentElementBrowserTypeClassNames(browserTypesOrderedList);
    }
    function fillDocumentElementBrowserTypeClassNames(browserTypesOrderedList) {
        var documentElementClassName = "";
        var browserTypeslist = browserTypesOrderedList.concat(["WindowsPlatform", "MacOSPlatform", "MacOSMobilePlatform", "AndroidMobilePlatform",
            "WindowsPhonePlatform", "WebKitFamily", "WebKitTouchUI", "MSTouchUI", "TouchUI", "AndroidDefaultBrowser"]);
        for (var i = 0; i < browserTypeslist.length; i++) {
            var type = browserTypeslist[i];
            if (Browser[type])
                documentElementClassName += "dx" + type + " ";
        }
        documentElementClassName += "dxBrowserVersion-" + Browser.MajorVersion;
        if (document && document.documentElement) {
            if (document.documentElement.className != "")
                documentElementClassName = " " + documentElementClassName;
            document.documentElement.className += documentElementClassName;
            Browser.Info = documentElementClassName;
        }
    }
    Browser.IdentUserAgent(Browser.UserAgent);
    ASPx.Browser = Browser;
    ASPx.BlankUrl = Browser.IE ? ASPx.SSLSecureBlankUrl : (Browser.Opera ? "about:blank" : "");
    var Data = {};
    Data.ArrayInsert = function (array, element, position) {
        if (0 <= position && position < array.length) {
            for (var i = array.length; i > position; i--)
                array[i] = array[i - 1];
            array[position] = element;
        }
        else
            array.push(element);
    };
    Data.ArrayRemove = function (array, element) {
        var index = Data.ArrayIndexOf(array, element);
        if (index > -1) Data.ArrayRemoveAt(array, index);
    };
    Data.ArrayRemoveAt = function (array, index) {
        if (index >= 0 && index < array.length) {
            for (var i = index; i < array.length - 1; i++)
                array[i] = array[i + 1];
            array.pop();
        }
    };
    Data.ArrayClear = function (array) {
        while (array.length > 0)
            array.pop();
    };
    Data.ArrayIndexOf = function (array, element, comparer) {
        if (!comparer) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] == element)
                    return i;
            }
        } else {
            for (var i = 0; i < array.length; i++) {
                if (comparer(array[i], element))
                    return i;
            }
        }
        return -1;
    };
    Data.ArrayContains = function (array, element) {
        return Data.ArrayIndexOf(array, element) >= 0;
    };
    Data.ArrayEqual = function (array1, array2) {
        var count1 = array1.length;
        var count2 = array2.length;
        if (count1 != count2)
            return false;
        for (var i = 0; i < count1; i++)
            if (array1[i] != array2[i])
                return false;
        return true;
    };
    Data.ArraySame = function (array1, array2) {
        if (array1.length !== array2.length)
            return false;
        return array1.every(function (elem) { return Data.ArrayContains(array2, elem); });
    };
    Data.ArrayGetIntegerEdgeValues = function (array) {
        var arrayToSort = Data.CollectionToArray(array);
        Data.ArrayIntegerAscendingSort(arrayToSort);
        return {
            start: arrayToSort[0],
            end: arrayToSort[arrayToSort.length - 1]
        };
    };
    Data.ArrayIntegerAscendingSort = function (array) {
        Data.ArrayIntegerSort(array);
    };
    Data.ArrayIntegerSort = function (array, desc) {
        array.sort(function (i1, i2) {
            var res = 0;
            if (i1 > i2)
                res = 1;
            else if (i1 < i2)
                res = -1;
            if (desc)
                res *= -1;
            return res;
        });
    };
    Data.CollectionsUnionToArray = function (firstCollection, secondCollection) {
        var result = [];
        var firstCollectionLength = firstCollection.length;
        var secondCollectionLength = secondCollection.length;
        for (var i = 0; i < firstCollectionLength + secondCollectionLength; i++) {
            if (i < firstCollectionLength)
                result.push(firstCollection[i]);
            else
                result.push(secondCollection[i - firstCollectionLength]);
        }
        return result;
    };
    Data.CollectionToArray = function (collection) {
        var array = [];
        for (var i = 0; i < collection.length; i++)
            array.push(collection[i]);
        return array;
    };
    Data.CreateHashTableFromArray = function (array) {
        var hash = [];
        for (var i = 0; i < array.length; i++)
            hash[array[i]] = 1;
        return hash;
    };
    Data.CreateIndexHashTableFromArray = function (array) {
        var hash = [];
        for (var i = 0; i < array.length; i++)
            hash[array[i]] = i;
        return hash;
    };
    Data.ArrayToHash = function (array, getKeyFunc, getValueFunc) {
        if (!(array instanceof Array))
            return {};
        return array.reduce(function (map, element, index) {
            var key = getKeyFunc(element, index);
            var value = getValueFunc(element, index);
            map[key] = value;
            return map;
        }, {});
    };
    Data.Sum = function (array, getValueFunc) {
        if (!(array instanceof Array))
            return 0;
        return array.reduce(function (prevValue, item) {
            var value = getValueFunc ? getValueFunc(item) : item;
            if (!ASPx.IsNumber(value))
                value = 0;
            return prevValue + value;
        }, 0);
    };
    Data.Max = function (array, getValueFunc) {
        if (!(array instanceof Array))
            return 0;
        return array.reduce(function (prevValue, item) {
            var value = getValueFunc ? getValueFunc(item) : item;
            if (!ASPx.IsNumber(value))
                value = 0;
            return Math.max(value, prevValue);
        }, 0);
    };
    var defaultBinarySearchComparer = function (array, index, value) {
        var arrayElement = array[index];
        if (arrayElement == value)
            return 0;
        else
            return arrayElement < value ? -1 : 1;
    };
    Data.NearestLeftBinarySearchComparer = function (array, index, value) {
        var arrayElement = array[index];
        var leftPoint = arrayElement < value;
        var lastLeftPoint = leftPoint && index == array.length - 1;
        var nearestLeftPoint = lastLeftPoint || (leftPoint && array[index + 1] >= value);
        if (nearestLeftPoint)
            return 0;
        else
            return arrayElement < value ? -1 : 1;
    };
    Data.ArrayBinarySearch = function (array, value, binarySearchComparer, startIndex, length) {
        if (!binarySearchComparer)
            binarySearchComparer = defaultBinarySearchComparer;
        if (!ASPx.IsExists(startIndex))
            startIndex = 0;
        if (!ASPx.IsExists(length))
            length = array.length - startIndex;
        var endIndex = (startIndex + length) - 1;
        while (startIndex <= endIndex) {
            var middle = (startIndex + ((endIndex - startIndex) >> 1));
            var compareResult = binarySearchComparer(array, middle, value);
            if (compareResult == 0)
                return middle;
            if (compareResult < 0)
                startIndex = middle + 1;
            else
                endIndex = middle - 1;
        }
        return -(startIndex + 1);
    };
    Data.ArrayFlatten = function (arrayOfArrays) {
        return [].concat.apply([], arrayOfArrays);
    };
    Data.GetDistinctArray = function (array) {
        var resultArray = [];
        for (var i = 0; i < array.length; i++) {
            var currentEntry = array[i];
            if (Data.ArrayIndexOf(resultArray, currentEntry) == -1) {
                resultArray.push(currentEntry);
            }
        }
        return resultArray;
    };
    Data.ForEach = function (arr, callback) {
        if (Array.prototype.forEach) {
            Array.prototype.forEach.call(arr, callback);
        } else {
            for (var i = 0, len = arr.length; i < len; i++) {
                callback(arr[i], i, arr);
            }
        }
    };
    Data.MergeHashTables = function (target, object) {
        if (!object || typeof (object) == "string")
            return target;
        if (!target)
            target = {};
        for (var key in object)
            if (key && !(key in target))
                target[key] = object[key];
        return target;
    };
    Data.Range = function (count, start) {
        count = parseInt(count) || 0;
        start = parseInt(start) || 0;
        if (count < 0) count = 0;
        if (start < 0) start = 0;
        return Array.apply(null, Array(count)).map(function (val, i) { return start + i; });
    };
    ASPx.Data = Data;
    var Cookie = {};
    Cookie.DelCookie = function (name) {
        setCookieInternal(name, "", new Date(1970, 1, 1));
    };
    Cookie.GetCookie = function (name) {
        name = escape(name);
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = Str.Trim(cookies[i]);
            if (cookie.indexOf(name + "=") == 0)
                return unescape(cookie.substring(name.length + 1, cookie.length));
            else if (cookie.indexOf(name + ";") == 0 || cookie === name)
                return "";
        }
        return null;
    };
    Cookie.SetCookie = function (name, value, expirationDate) {
        if (!ASPx.IsExists(value)) {
            Cookie.DelCookie(name);
            return;
        }
        if (!ASPx.Ident.IsDate(expirationDate)) {
            expirationDate = new Date();
            expirationDate.setFullYear(expirationDate.getFullYear() + 1);
        }
        setCookieInternal(name, value, expirationDate);
    };
    function setCookieInternal(name, value, date) {
        document.cookie = escape(name) + "=" + escape(value.toString()) + "; expires=" + date.toGMTString() + "; path=/";
    }
    ASPx.Cookie = Cookie;
    ASPx.ImageUtils = {
        GetImageSrc: function (image) {
            return image.src;
        },
        SetImageSrc: function (image, src) {
            if (isSourceResetRequired())
                image.src = "";
            image.src = src;
        },
        SetSize: function (image, width, height) {
            image.style.width = width + "px";
            image.style.height = height + "px";
        },
        GetSize: function (image, isWidth) {
            return (isWidth ? image.offsetWidth : image.offsetHeight);
        }
    };
    var Str = {};
    Str.ApplyReplacement = function (text, replecementTable) {
        if (typeof (text) != "string")
            text = text.toString();
        for (var i = 0; i < replecementTable.length; i++) {
            var replacement = replecementTable[i];
            text = text.replace(replacement[0], replacement[1]);
        }
        return text;
    };
    Str.CompleteReplace = function (text, regexp, newSubStr) {
        if (typeof (text) != "string")
            text = text.toString();
        var textPrev;
        do {
            textPrev = text;
            text = text.replace(regexp, newSubStr);
        } while (text != textPrev);
        return text;
    };
    Str.EncodeHtml = function (html) {
        return Str.ApplyReplacement(html, [
            [/&amp;/g, '&ampx;'], [/&/g, '&amp;'],
            [/&quot;/g, '&quotx;'], [/"/g, '&quot;'],
            [/&lt;/g, '&ltx;'], [/</g, '&lt;'],
            [/&gt;/g, '&gtx;'], [/>/g, '&gt;']
        ]);
    };
    Str.DecodeHtml = function (html) {
        return Str.ApplyReplacement(html, [
            [/&gt;/g, '>'], [/&gtx;/g, '&gt;'],
            [/&lt;/g, '<'], [/&ltx;/g, '&lt;'],
            [/&quot;/g, '"'], [/&quotx;/g, '&quot;'],
            [/&amp;/g, '&'], [/&ampx;/g, '&amp;']
        ]);
    };
    Str.DecodeHtmlViaTextArea = function (html) {
        var textArea = document.createElement("TEXTAREA");
        textArea.innerHTML = html;
        return textArea.value;
    };
    Str.TrimStart = function (str) {
        return trimInternal(str, true);
    };
    Str.TrimEnd = function (str) {
        return trimInternal(str, false, true);
    };
    Str.Trim = function (str) {
        return trimInternal(str, true, true);
    };
    var whiteSpaces = {
        0x0009: 1, 0x000a: 1, 0x000b: 1, 0x000c: 1, 0x000d: 1, 0x0020: 1, 0x0085: 1,
        0x00a0: 1, 0x1680: 1, 0x180e: 1, 0x2000: 1, 0x2001: 1, 0x2002: 1, 0x2003: 1,
        0x2004: 1, 0x2005: 1, 0x2006: 1, 0x2007: 1, 0x2008: 1, 0x2009: 1, 0x200a: 1,
        0x200b: 1, 0x2028: 1, 0x2029: 1, 0x202f: 1, 0x205f: 1, 0x3000: 1
    };
    var caretWidth = 1;
    function trimInternal(source, trimStart, trimEnd) {
        var len = source.length;
        if (!len)
            return source;
        if (len < 0xBABA1) {
            var result = source;
            if (trimStart) {
                result = result.replace(/^\s+/, "");
            }
            if (trimEnd) {
                result = result.replace(/\s+$/, "");
            }
            return result;
        } else {
            var start = 0;
            if (trimEnd) {
                while (len > 0 && whiteSpaces[source.charCodeAt(len - 1)]) {
                    len--;
                }
            }
            if (trimStart && len > 0) {
                while (start < len && whiteSpaces[source.charCodeAt(start)]) {
                    start++;
                }
            }
            return source.substring(start, len);
        }
    }
    Str.Insert = function (str, subStr, index) {
        var leftText = str.slice(0, index);
        var rightText = str.slice(index);
        return leftText + subStr + rightText;
    };
    Str.InsertEx = function (str, subStr, startIndex, endIndex) {
        var leftText = str.slice(0, startIndex);
        var rightText = str.slice(endIndex);
        return leftText + subStr + rightText;
    };
    var greekSLFSigmaChar = String.fromCharCode(962);
    var greekSLSigmaChar = String.fromCharCode(963);
    Str.PrepareStringForFilter = function (s) {
        s = s.toLowerCase();
        if (ASPx.Browser.WebKitFamily) {
            return s.replace(new RegExp(greekSLFSigmaChar, "g"), greekSLSigmaChar);
        }
        return s;
    };
    Str.GetCoincideCharCount = function (text, filter, textMatchingDelegate) {
        var coincideText = ASPx.Str.PrepareStringForFilter(filter);
        var originText = ASPx.Str.PrepareStringForFilter(text);
        while (coincideText != "" && !textMatchingDelegate(originText, coincideText)) {
            coincideText = coincideText.slice(0, -1);
        }
        return coincideText.length;
    };
    ASPx.Str = Str;
    var Xml = {};
    Xml.Parse = function (xmlStr) {
        if (window.DOMParser) {
            var parser = new DOMParser();
            return parser.parseFromString(xmlStr, "text/xml");
        }
        else if (window.ActiveXObject) {
            var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
            if (xmlDoc) {
                xmlDoc.async = false;
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            }
        }
        return null;
    };
    ASPx.Xml = Xml;
    ASPx.Key = {
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        Ctrl: 17,
        Shift: 16,
        Alt: 18,
        Enter: 13,
        Home: 36,
        End: 35,
        Left: 37,
        Right: 39,
        Up: 38,
        Down: 40,
        PageUp: 33,
        PageDown: 34,
        Esc: 27,
        Space: 32,
        Tab: 9,
        Backspace: 8,
        Delete: 46,
        Insert: 45,
        ContextMenu: 93,
        Windows: 91,
        Decimal: 110
    };
    ASPx.KeyCode = {
        Backspace: 8,
        Tab: 9,
        Enter: 13,
        Pause: 19,
        CapsLock: 20,
        Esc: 27,
        Space: 32,
        PageUp: 33,
        PageDown: 34,
        End: 35,
        Home: 36,
        Left: 37,
        Up: 38,
        Right: 39,
        Down: 40,
        Insert: 45,
        Delete: 46,
        Key_0: 48,
        Key_1: 49,
        Key_2: 50,
        Key_3: 51,
        Key_4: 52,
        Key_5: 53,
        Key_6: 54,
        Key_7: 55,
        Key_8: 56,
        Key_9: 57,
        Key_a: 65,
        Key_b: 66,
        Key_c: 67,
        Key_d: 68,
        Key_e: 69,
        Key_f: 70,
        Key_g: 71,
        Key_h: 72,
        Key_i: 73,
        Key_j: 74,
        Key_k: 75,
        Key_l: 76,
        Key_m: 77,
        Key_n: 78,
        Key_o: 79,
        Key_p: 80,
        Key_q: 81,
        Key_r: 82,
        Key_s: 83,
        Key_t: 84,
        Key_u: 85,
        Key_v: 86,
        Key_w: 87,
        Key_x: 88,
        Key_y: 89,
        Key_z: 90,
        Windows: 91,
        ContextMenu: 93,
        Numpad_0: 96,
        Numpad_1: 97,
        Numpad_2: 98,
        Numpad_3: 99,
        Numpad_4: 100,
        Numpad_5: 101,
        Numpad_6: 102,
        Numpad_7: 103,
        Numpad_8: 104,
        Numpad_9: 105,
        Multiply: 106,
        Add: 107,
        Subtract: 109,
        Decimal: 110,
        Divide: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        NumLock: 144,
        ScrollLock: 145,
        Semicolon: 186,
        Equals: 187,
        Comma: 188,
        Dash: 189,
        Period: 190,
        ForwardSlash: 191,
        GraveAccent: 192,
        OpenBracket: 219,
        BackSlash: 220,
        CloseBracket: 221,
        SingleQuote: 222
    };
    ASPx.ScrollBarMode = { Hidden: 0, Visible: 1, Auto: 2 };
    ASPx.ColumnResizeMode = { None: 0, Control: 1, NextColumn: 2 };
    var Selection = {};
    Selection.Set = function (input, startPos, endPos, scrollToSelection) {
        if (!ASPx.IsExistsElement(input))
            return;
        if (Browser.VirtualKeyboardSupported && (ASPx.GetActiveElement() !== input || ASPx.VirtualKeyboardUI.getInputNativeFocusLocked()))
            return;
        var textLen = input.value.length;
        startPos = ASPx.GetDefinedValue(startPos, 0);
        endPos = ASPx.GetDefinedValue(endPos, textLen);
        if (startPos < 0)
            startPos = 0;
        if (endPos < 0 || endPos > textLen)
            endPos = textLen;
        if (startPos > endPos)
            startPos = endPos;
        var makeReadOnly = false;
        if (Browser.WebKitFamily && input.readOnly) {
            input.readOnly = false;
            makeReadOnly = true;
        }
        try {
            if (Browser.Firefox && Browser.Version >= 8)
                input.setSelectionRange(startPos, endPos, "backward");
            else if (Browser.IE && input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(true);
                range.moveStart("character", startPos);
                range.moveEnd("character", endPos - startPos);
                range.select();
            } else {
                forceScrollToSelectionRange(input, startPos, endPos);
                input.setSelectionRange(startPos, endPos);
            }
            if (Browser.Opera || Browser.Firefox || Browser.Chrome)
                input.focus();
        } catch (e) {
        }
        if (scrollToSelection && input.tagName == 'TEXTAREA') {
            var scrollHeight = input.scrollHeight;
            var approxCaretPos = startPos;
            var scrollTop = Math.max(Math.round(approxCaretPos * scrollHeight / textLen - input.clientHeight / 2), 0);
            input.scrollTop = scrollTop;
        }
        if (makeReadOnly)
            input.readOnly = true;
    };
    var getTextWidthBeforePos = function (input, pos) {
        return ASPx.GetSizeOfText(input.value.toString().substr(0, pos), ASPx.GetCurrentStyle(input)).width;
    };
    var forceScrollToSelectionRange = function (input, startPos, endPos) {
        var widthBeforeStartPos = getTextWidthBeforePos(input, startPos) - caretWidth;
        var widthBeforeEndPos = getTextWidthBeforePos(input, endPos) + caretWidth;
        var inputRawWidth = input.offsetWidth - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(input);
        if (input.scrollLeft < widthBeforeEndPos - inputRawWidth)
            input.scrollLeft = widthBeforeEndPos - inputRawWidth;
        else if (input.scrollLeft > widthBeforeStartPos)
            input.scrollLeft = widthBeforeStartPos;
    };
    Selection.GetInfo = function (input) {
        var start, end;
        if (Browser.IE && Browser.Version < 9) {
            var range = document.selection.createRange();
            var rangeCopy = range.duplicate();
            range.move('character', -input.value.length);
            range.setEndPoint('EndToStart', rangeCopy);
            start = range.text.length;
            end = start + rangeCopy.text.length;
        } else {
            try {
                start = input.selectionStart;
                end = input.selectionEnd;
            } catch (e) {
            }
        }
        return { startPos: start, endPos: end };
    };
    Selection.GetExtInfo = function (input) {
        var start = 0, end = 0, textLen = 0;
        if (Browser.IE && Browser.Version < 9) {
            var normalizedValue;
            var range, textInputRange, textInputEndRange;
            range = document.selection.createRange();
            if (range && range.parentElement() == input) {
                textLen = input.value.length;
                normalizedValue = input.value.replace(/\r\n/g, "\n");
                textInputRange = input.createTextRange();
                textInputRange.moveToBookmark(range.getBookmark());
                textInputEndRange = input.createTextRange();
                textInputEndRange.collapse(false);
                if (textInputRange.compareEndPoints("StartToEnd", textInputEndRange) > -1) {
                    start = textLen;
                    end = textLen;
                } else {
                    start = normalizedValue.slice(0, start).split("\n").length - textInputRange.moveStart("character", -textLen) - 1;
                    if (textInputRange.compareEndPoints("EndToEnd", textInputEndRange) > -1)
                        end = textLen;
                    else
                        end = normalizedValue.slice(0, end).split("\n").length - textInputRange.moveEnd("character", -textLen) - 1;
                }
            }
            return { startPos: start, endPos: end };
        }
        try {
            start = input.selectionStart;
            end = input.selectionEnd;
        } catch (e) {
        }
        return { startPos: start, endPos: end };
    };
    Selection.SetCaretPosition = function (input, caretPos) {
        if (typeof caretPos === "undefined" || caretPos < 0)
            caretPos = input.value.length;
        Selection.Set(input, caretPos, caretPos, true);
    };
    Selection.GetCaretPosition = function (element, isDialogMode) {
        var pos = 0;
        if ("selectionStart" in element) {
            pos = element.selectionStart;
        } else if ("selection" in document) {
            element.focus();
            var sel = document.selection.createRange(),
                selLength = document.selection.createRange().text.length;
            sel.moveStart("character", -element.value.length);
            pos = sel.text.length - selLength;
        }
        if (isDialogMode && !pos) {
            pos = element.value.length - 1;
        }
        return pos;
    };
    Selection.Clear = function () {
        try {
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
            else if (document.selection) {
                if (document.selection.empty)
                    document.selection.empty();
                else if (document.selection.clear)
                    document.selection.clear();
            }
        } catch (e) {
        }
    };
    Selection.ClearOnMouseMove = function (evt) {
        if (!Browser.IE || (evt.button != 0))
            Selection.Clear();
    };
    Selection.SetElementSelectionEnabled = function (element, value) {
        var userSelectValue = value ? "" : "none";
        var func = value ? Evt.DetachEventFromElement : Evt.AttachEventToElement;
        if (Browser.Firefox)
            element.style.MozUserSelect = userSelectValue;
        else if (Browser.WebKitFamily)
            element.style.webkitUserSelect = userSelectValue;
        else if (Browser.Opera)
            func(element, "mousemove", Selection.Clear);
        else {
            func(element, "selectstart", ASPx.FalseFunction);
            func(element, "mousemove", Selection.Clear);
        }
    };
    Selection.SetElementAsUnselectable = function (element, isWithChild, recursive) {
        if (element && element.nodeType == 1) {
            element.unselectable = "on";
            if (Browser.NetscapeFamily)
                element.onmousedown = ASPx.FalseFunction;
            if ((Browser.IE && Browser.Version >= 9) || Browser.WebKitFamily)
                Evt.AttachEventToElement(element, "mousedown", Evt.PreventEventAndBubble);
            if (isWithChild === true) {
                for (var j = 0; j < element.childNodes.length; j++)
                    Selection.SetElementAsUnselectable(element.childNodes[j], (!!recursive ? true : false), (!!recursive));
            }
        }
    };
    Selection.AreEqual = function (selection1, selection2) {
        return selection1.startPos === selection2.startPos && selection1.endPos === selection2.endPos;
    };
    ASPx.Selection = Selection;
    var MouseScroller = {};
    MouseScroller.MinimumOffset = 10;
    MouseScroller.Create = function (getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed) {
        var element = getElement();
        if (!element)
            return;
        if (!element.dxMouseScroller)
            element.dxMouseScroller = new MouseScroller.Extender(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed);
        return element.dxMouseScroller;
    };
    MouseScroller.Extender = function (getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed) {
        this.getElement = getElement;
        this.getScrollXElement = getScrollXElement;
        this.getScrollYElement = getScrollYElement;
        this.needPreventScrolling = needPreventScrolling;
        this.vertRecursive = !!vertRecursive;
        this.createHandlers(onMouseDown || function () { }, onMouseMove || function () { }, onMouseUp || function () { }, onMouseUpMissed || function () { });
        this.update();
    };
    MouseScroller.Extender.prototype = {
        update: function () {
            if (this.element)
                Evt.DetachEventFromElement(this.element, ASPx.TouchUIHelper.touchMouseDownEventName, this.mouseDownHandler);
            this.element = this.getElement();
            Evt.AttachEventToElement(this.element, ASPx.TouchUIHelper.touchMouseDownEventName, this.mouseDownHandler);
            Evt.AttachEventToElement(this.element, "click", this.mouseClickHandler);
            if (Browser.MSTouchUI && this.element.className.indexOf(ASPx.TouchUIHelper.msTouchDraggableClassName) < 0)
                this.element.className += " " + ASPx.TouchUIHelper.msTouchDraggableClassName;
            this.scrollXElement = this.getScrollXElement();
            this.scrollYElement = this.getScrollYElement();
        },
        createHandlers: function (onMouseDown, onMouseMove, onMouseUp, onMouseUpMissed) {
            var mouseDownCounter = 0;
            this.onMouseDown = onMouseDown;
            this.onMouseMove = onMouseMove;
            this.onMouseUp = onMouseUp;
            this.mouseDownHandler = function (e) {
                if (mouseDownCounter++ > 0) {
                    this.finishScrolling();
                    onMouseUpMissed();
                }
                var eventSource = Evt.GetEventSource(e);
                var requirePreventCustonScroll = ASPx.IsExists(ASPx.TouchUIHelper.RequirePreventCustomScroll) && ASPx.TouchUIHelper.RequirePreventCustomScroll(eventSource, this.element);
                if (requirePreventCustonScroll || this.needPreventScrolling && this.needPreventScrolling(eventSource))
                    return;
                this.scrollableTreeLine = this.GetScrollableElements();
                this.firstX = this.prevX = Evt.GetEventX(e);
                this.firstY = this.prevY = Evt.GetEventY(e);
                Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
                Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
                this.onMouseDown(e);
            }.aspxBind(this);
            this.mouseMoveHandler = function (e) {
                if (ASPx.TouchUIHelper.isGesture)
                    return;
                var x = Evt.GetEventX(e);
                var y = Evt.GetEventY(e);
                var xDiff = this.prevX - x;
                var yDiff = this.prevY - y;
                if (this.vertRecursive) {
                    var isTopDirection = yDiff < 0;
                    this.scrollYElement = this.GetElementForVertScrolling(isTopDirection, this.prevIsTopDirection, this.scrollYElement);
                    this.prevIsTopDirection = isTopDirection;
                }
                if (this.scrollXElement && xDiff != 0)
                    this.scrollXElement.scrollLeft += xDiff;
                if (this.scrollYElement && yDiff != 0) {
                    this.scrollYElement.scrollTop += yDiff;
                    var isOuterScrollableElement = this.scrollableTreeLine[this.scrollableTreeLine.length - 1] == this.scrollYElement;
                    if (isOuterScrollableElement)
                        y += yDiff;
                }
                this.prevX = x;
                this.prevY = y;
                e.preventDefault();
                this.onMouseMove(e);
            }.aspxBind(this);
            this.mouseUpHandler = function (e) {
                this.finishScrolling();
                this.onMouseUp(e);
            }.aspxBind(this);
            this.mouseClickHandler = function (e) {
                if (this.needPreventScrolling && this.needPreventScrolling(Evt.GetEventSource(e)))
                    return;
                var xDiff = this.firstX - Evt.GetEventX(e);
                var yDiff = this.firstY - Evt.GetEventY(e);
                if (xDiff > MouseScroller.MinimumOffset || yDiff > MouseScroller.MinimumOffset)
                    return Evt.PreventEventAndBubble(e);
            }.aspxBind(this);
            this.finishScrolling = function () {
                Evt.DetachEventFromDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
                Evt.DetachEventFromDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
                this.scrollableTreeLine = [];
                this.prevIsTopDirection = null;
                mouseDownCounter--;
            };
        },
        GetScrollableElements: function () {
            if (!this.vertRecursive) return [];
            var outerScrollableElementTag = ASPx.Browser.IE ? "HTML" : "BODY";
            return ASPx.GetElementTreeLine(this.element, null, function (el) { return el == document; })
                .filter(function (el) { return ASPx.IsScrollableElement(el, false, true) || el.tagName == outerScrollableElementTag; }.bind(this));
        },
        GetElementForVertScrolling: function (currentIsTop, prevIsTop, prevElement) {
            if (prevElement && currentIsTop === prevIsTop && this.GetVertScrollExcess(prevElement, currentIsTop) > 0)
                return prevElement;
            for (var i = 0; i < this.scrollableTreeLine.length; i++) {
                var element = this.scrollableTreeLine[i];
                var excess = this.GetVertScrollExcess(element, currentIsTop);
                if (excess > 0)
                    return element;
            }
            return null;
        },
        GetVertScrollExcess: function (element, isTop) {
            if (isTop)
                return element.scrollTop;
            var isBodyElement = element.tagName == "BODY";
            var clientHeight = isBodyElement ? ASPx.GetDocumentClientHeight() : element.clientHeight;
            return element.scrollHeight - clientHeight - element.scrollTop;
        }
    };
    ASPx.MouseScroller = MouseScroller;
    var Evt = {};
    Evt.GetEvent = function (evt) {
        return (typeof (event) != "undefined" && event != null && Browser.IE) ? event : evt;
    };
    Evt.IsEventPrevented = function (evt) {
        return evt.defaultPrevented || evt.returnValue === false;
    };
    Evt.PreventEvent = function (evt) {
        if (evt.preventDefault)
            evt.preventDefault();
        else
            evt.returnValue = false;
        return false;
    };
    Evt.PreventEventAndBubble = function (evt) {
        Evt.PreventEvent(evt);
        if (evt.stopPropagation)
            evt.stopPropagation();
        evt.cancelBubble = true;
        return false;
    };
    Evt.CancelBubble = function (evt) {
        evt.cancelBubble = true;
        return false;
    };
    Evt.PreventImageDragging = function (image) {
        if (image)
            image.ondragstart = function () { return false; };
    };
    Evt.PreventDragStart = function (evt) {
        evt = Evt.GetEvent(evt);
        var element = Evt.GetEventSource(evt);
        if (element.releaseCapture)
            element.releaseCapture();
        return false;
    };
    Evt.PreventElementDrag = function (element) {
        if (Browser.IE)
            Evt.AttachEventToElement(element, "dragstart", Evt.PreventEvent);
        else
            Evt.AttachEventToElement(element, "mousedown", Evt.PreventEvent);
    };
    Evt.PreventElementDragAndSelect = function (element, skipMouseMove, skipIESelect) {
        if (Browser.WebKitFamily)
            Evt.AttachEventToElement(element, "selectstart", Evt.PreventEventAndBubble);
        if (Browser.IE) {
            if (!skipIESelect)
                Evt.AttachEventToElement(element, "selectstart", ASPx.FalseFunction);
            if (!skipMouseMove)
                Evt.AttachEventToElement(element, "mousemove", Selection.ClearOnMouseMove);
            Evt.AttachEventToElement(element, "dragstart", Evt.PreventDragStart);
        }
    };
    Evt.GetEventSource = function (evt) {
        if (!ASPx.IsExists(evt)) return null;
        return evt.srcElement ? evt.srcElement : evt.target;
    };
    Evt.GetKeyCode = function (srcEvt) {
        return Browser.NetscapeFamily || Browser.Opera ? srcEvt.which : srcEvt.keyCode;
    };
    function clientEventRequiresDocScrollCorrection() {
        var isSafariVerLess3 = Browser.Safari && Browser.Version < 3,
            isMacOSMobileVerLess51 = Browser.MacOSMobilePlatform && Browser.Version < 5.1;
        return Browser.AndroidDefaultBrowser || Browser.AndroidChromeBrowser || !(isSafariVerLess3 || isMacOSMobileVerLess51);
    }
    Evt.GetEventX = function (evt) {
        if (ASPx.TouchUIHelper.isTouchEvent(evt))
            return ASPx.TouchUIHelper.getEventX(evt);
        return evt.clientX + (clientEventRequiresDocScrollCorrection() ? ASPx.GetDocumentScrollLeft() : 0);
    };
    Evt.GetEventY = function (evt) {
        if (ASPx.TouchUIHelper.isTouchEvent(evt))
            return ASPx.TouchUIHelper.getEventY(evt);
        return evt.clientY + (clientEventRequiresDocScrollCorrection() ? ASPx.GetDocumentScrollTop() : 0);
    };
    Evt.IsLeftButtonPressed = function (evt) {
        if (ASPx.TouchUIHelper.isTouchEvent(evt))
            return true;
        evt = Evt.GetEvent(evt);
        if (!evt) return false;
        if (Browser.IE && Browser.Version < 11) {
            if (Browser.MSTouchUI)
                return true;
            return evt.button % 2 == 1;
        } else if (Browser.WebKitFamily) {
            if (evt.type === "pointermove")
                return evt.buttons === 1;
            return evt.which == 1;
        } else if (Browser.NetscapeFamily || Browser.Edge || (Browser.IE && Browser.Version >= 11)) {
            if (evt.type === ASPx.TouchUIHelper.touchMouseMoveEventName)
                return evt.buttons === 1;
            return evt.which == 1;
        } else if (Browser.Opera)
            return evt.button == 0;
        return true;
    };
    Evt.IsRightButtonPressed = function (evt) {
        evt = Evt.GetEvent(evt);
        if (!ASPx.IsExists(evt)) return false;
        if (Browser.IE || Browser.Edge) {
            if (evt.type === "pointermove")
                return evt.buttons === 2;
            return evt.button == 2;
        }
        else if (Browser.NetscapeFamily || Browser.WebKitFamily)
            return evt.which == 3;
        else if (Browser.Opera)
            return evt.button == 1;
        return true;
    };
    Evt.GetWheelDelta = function (evt) {
        var ret;
        if (Browser.NetscapeFamily && Browser.MajorVersion < 17)
            ret = -evt.detail;
        else if (Browser.Safari)
            ret = evt.wheelDelta;
        else
            ret = -evt.deltaY;
        if (Browser.Opera && Browser.Version < 9)
            ret = -ret;
        return ret;
    };
    Evt.IsWheelEventWithDirection = function (evt) {
        return ASPx.Data.ArrayContains(["wheel", "mousewheel"], evt.type);
    };
    Evt.GetWheelDeltaX = function (evt) {
        if (evt.type === "wheel")
            return -evt.deltaX;
        if (evt.type === "mousewheel")
            return evt.wheelDeltaX;
    };
    Evt.GetWheelDeltaY = function (evt) {
        if (evt.type === "wheel")
            return -evt.deltaY;
        if (evt.type === "mousewheel")
            return evt.wheelDeltaY;
    };
    Evt.AttachEventToElement = function (element, eventName, func, onlyBubbling) {
        if (element.addEventListener)
            element.addEventListener(eventName, func, !onlyBubbling);
        else
            element.attachEvent("on" + eventName, func);
    };
    Evt.DetachEventFromElement = function (element, eventName, func) {
        if (element.removeEventListener)
            element.removeEventListener(eventName, func, true);
        else
            element.detachEvent("on" + eventName, func);
    };
    Evt.AttachEventToDocument = function (eventName, func) {
        var attachingAllowed = ASPx.TouchUIHelper.onEventAttachingToDocument(eventName, func);
        if (attachingAllowed)
            Evt.AttachEventToDocumentCore(eventName, func);
    };
    Evt.AttachEventToDocumentCore = function (eventName, func) {
        Evt.AttachEventToElement(document, eventName, func);
    };
    Evt.DetachEventFromDocument = function (eventName, func) {
        Evt.DetachEventFromDocumentCore(eventName, func);
        ASPx.TouchUIHelper.onEventDettachedFromDocument(eventName, func);
    };
    Evt.DetachEventFromDocumentCore = function (eventName, func) {
        Evt.DetachEventFromElement(document, eventName, func);
    };
    Evt.GetMouseWheelEventName = function () {
        if (Browser.Safari)
            return "mousewheel";
        if (Browser.NetscapeFamily && Browser.MajorVersion < 17)
            return "DOMMouseScroll";
        return "wheel";
    };
    Evt.AttachMouseEnterToElement = function (element, onMouseOverHandler, onMouseOutHandler) {
        Evt.AttachEventToElement(element, ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerOverEventName : "mouseover", function (evt) { mouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
        Evt.AttachEventToElement(element, ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerOutEventName : "mouseout", function (evt) { mouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
    };
    Evt.GetEventRelatedTarget = function (evt, isMouseOverEvent) {
        return evt.relatedTarget || (isMouseOverEvent ? evt.srcElement : evt.toElement);
    };
    function mouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler) {
        var isMouseOverExecuted = !!element.dxMouseOverExecuted;
        var isMouseOverEvent = (evt.type == "mouseover" || evt.type == ASPx.TouchUIHelper.pointerOverEventName);
        if (isMouseOverEvent && isMouseOverExecuted || !isMouseOverEvent && !isMouseOverExecuted)
            return;
        var source = Evt.GetEventRelatedTarget(evt, isMouseOverEvent);
        if (!ASPx.GetIsParent(element, source)) {
            element.dxMouseOverExecuted = isMouseOverEvent;
            if (isMouseOverEvent)
                onMouseOverHandler(element);
            else
                onMouseOutHandler(element);
        }
        else if (isMouseOverEvent && !isMouseOverExecuted) {
            element.dxMouseOverExecuted = true;
            onMouseOverHandler(element);
        }
    }
    Evt.DispatchEvent = function (target, eventName, canBubble, cancellable) {
        var event;
        if (Browser.IE && Browser.Version < 9) {
            eventName = "on" + eventName;
            if (eventName in target) {
                event = document.createEventObject();
                target.fireEvent("on" + eventName, event);
            }
        } else {
            event = document.createEvent("Event");
            event.initEvent(eventName, canBubble || false, cancellable || false);
            target.dispatchEvent(event);
        }
    };
    Evt.EmulateDocumentOnMouseDown = function (evt) {
        Evt.EmulateOnMouseDown(document, evt);
    };
    Evt.EmulateOnMouseDown = function (element, evt) {
        if (Browser.IE && Browser.Version < 9)
            element.fireEvent("onmousedown", evt);
        else if (!Browser.WebKitFamily) {
            var emulatedEvt = document.createEvent("MouseEvents");
            emulatedEvt.initMouseEvent("mousedown", true, true, window, 0, evt.screenX, evt.screenY,
                evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
            element.dispatchEvent(emulatedEvt);
        }
    };
    Evt.EmulateOnMouseEvent = function (type, element, evt) {
        evt.type = type;
        var emulatedEvt = document.createEvent("MouseEvents");
        emulatedEvt.initMouseEvent(type, true, true, window, 0, evt.screenX, evt.screenY,
            evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
        emulatedEvt.target = element;
        element.dispatchEvent(emulatedEvt);
    };
    Evt.EmulateMouseClick = function (element, evt) {
        var x = element.offsetWidth / 2;
        var y = element.offsetHeight / 2;
        if (!evt)
            evt = {
                bubbles: true,
                cancelable: true,
                view: window,
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: x,
                clientY: y,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                button: 0,
                relatedTarget: null
            };
        Evt.EmulateOnMouseEvent("mousedown", element, evt);
        Evt.EmulateOnMouseEvent("mouseup", element, evt);
        Evt.EmulateOnMouseEvent("click", element, evt);
    };
    Evt.DoElementClick = function (element) {
        try {
            element.click();
        }
        catch (e) {
        }
    };
    Evt.IsActionKeyPressed = function (evt) {
        return evt.keyCode === ASPx.Key.Space ||
            evt.keyCode === ASPx.Key.Enter ||
            (evt.keyCode === ASPx.Key.Down && evt.altKey);
    };
    Evt.InvokeMouseClickByKeyDown = function (evt, handler) {
        if (Evt.IsActionKeyPressed(evt)) {
            ASPx.Evt.PreventEvent(evt);
            if (!handler)
                ASPx.Evt.GetEventSource(evt).onclick();
            else
                handler(evt);
        }
    };
    ASPx.Evt = Evt;
    var Attr = {};
    Attr.GetAttribute = function (obj, attrName) {
        if (obj.getAttribute)
            return obj.getAttribute(attrName);
        else if (obj.getPropertyValue)
            return obj.getPropertyValue(attrName);
        return null;
    };
    Attr.SetAttribute = function (obj, attrName, value) {
        if (obj.setAttribute) {
            if (isSourceResetRequired() && attrName.toLowerCase() === "src")
                obj.setAttribute(attrName, "");
            obj.setAttribute(attrName, value);
        } else if (obj.setProperty)
            obj.setProperty(attrName, value, "");
    };
    Attr.RemoveAttribute = function (obj, attrName) {
        if (obj.removeAttribute)
            obj.removeAttribute(attrName);
        else if (obj.removeProperty)
            obj.removeProperty(attrName);
    };
    Attr.IsExistsAttribute = function (obj, attrName) {
        var value = Attr.GetAttribute(obj, attrName);
        return (value != null) && (value !== "");
    };
    Attr.SetOrRemoveAttribute = function (obj, attrName, value) {
        if (!value)
            Attr.RemoveAttribute(obj, attrName);
        else
            Attr.SetAttribute(obj, attrName, value);
    };
    Attr.SaveAttribute = function (obj, attrName, savedObj, savedAttrName) {
        if (!Attr.IsExistsAttribute(savedObj, savedAttrName)) {
            var oldValue = Attr.IsExistsAttribute(obj, attrName) ? Attr.GetAttribute(obj, attrName) : ASPx.EmptyObject;
            Attr.SetAttribute(savedObj, savedAttrName, oldValue);
        }
    };
    Attr.SaveStyleAttribute = function (obj, attrName) {
        Attr.SaveAttribute(obj.style, attrName, obj, "saved" + attrName);
    };
    Attr.ChangeAttributeExtended = function (obj, attrName, savedObj, savedAttrName, newValue) {
        Attr.SaveAttribute(obj, attrName, savedObj, savedAttrName);
        Attr.SetAttribute(obj, attrName, newValue);
    };
    Attr.ChangeAttribute = function (obj, attrName, newValue) {
        Attr.ChangeAttributeExtended(obj, attrName, obj, "saved" + attrName, newValue);
    };
    Attr.ChangeStyleAttribute = function (obj, attrName, newValue) {
        Attr.ChangeAttributeExtended(obj.style, attrName, obj, "saved" + attrName, newValue);
    };
    Attr.ResetAttributeExtended = function (obj, attrName, savedObj, savedAttrName) {
        Attr.SaveAttribute(obj, attrName, savedObj, savedAttrName);
        Attr.SetAttribute(obj, attrName, "");
        Attr.RemoveAttribute(obj, attrName);
    };
    Attr.ResetAttribute = function (obj, attrName) {
        Attr.ResetAttributeExtended(obj, attrName, obj, "saved" + attrName);
    };
    Attr.ResetStyleAttribute = function (obj, attrName) {
        Attr.ResetAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
    };
    Attr.RestoreAttributeExtended = function (obj, attrName, savedObj, savedAttrName) {
        if (Attr.IsExistsAttribute(savedObj, savedAttrName)) {
            var oldValue = Attr.GetAttribute(savedObj, savedAttrName);
            if (oldValue != ASPx.EmptyObject)
                Attr.SetAttribute(obj, attrName, oldValue);
            else
                Attr.RemoveAttribute(obj, attrName);
            Attr.RemoveAttribute(savedObj, savedAttrName);
            return true;
        }
        return false;
    };
    Attr.RestoreAttribute = function (obj, attrName) {
        return Attr.RestoreAttributeExtended(obj, attrName, obj, "saved" + attrName);
    };
    Attr.RestoreStyleAttribute = function (obj, attrName) {
        return Attr.RestoreAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
    };
    Attr.CopyAllAttributes = function (sourceElem, destElement) {
        var attrs = sourceElem.attributes;
        for (var n = 0; n < attrs.length; n++) {
            var attr = attrs[n];
            if (attr.specified) {
                var attrName = attr.nodeName;
                var attrValue = sourceElem.getAttribute(attrName, 2);
                if (attrValue == null)
                    attrValue = attr.nodeValue;
                destElement.setAttribute(attrName, attrValue, 0);
            }
        }
        if (sourceElem.style.cssText !== '')
            destElement.style.cssText = sourceElem.style.cssText;
    };
    Attr.RemoveAllAttributes = function (element, excludedAttributes) {
        var excludedAttributesHashTable = {};
        if (excludedAttributes)
            excludedAttributesHashTable = Data.CreateHashTableFromArray(excludedAttributes);
        if (element.attributes) {
            var attrArray = element.attributes;
            for (var i = 0; i < attrArray.length; i++) {
                var attrName = attrArray[i].name;
                if (!ASPx.IsExists(excludedAttributesHashTable[attrName.toLowerCase()])) {
                    try {
                        attrArray.removeNamedItem(attrName);
                    } catch (e) { }
                }
            }
        }
    };
    Attr.RemoveStyleAttribute = function (element, attrName) {
        if (element.style) {
            if (Browser.Firefox && element.style[attrName])
                element.style[attrName] = "";
            if (element.style.removeAttribute && element.style.removeAttribute != "")
                element.style.removeAttribute(attrName);
            else if (element.style.removeProperty && element.style.removeProperty != "")
                element.style.removeProperty(attrName);
        }
    };
    Attr.RemoveAllStyles = function (element) {
        if (element.style) {
            for (var key in element.style)
                Attr.RemoveStyleAttribute(element, key);
            Attr.RemoveAttribute(element, "style");
        }
    };
    Attr.GetTabIndexAttributeName = function () {
        return Browser.IE ? "tabIndex" : "tabindex";
    };
    Attr.ChangeTabIndexAttribute = function (element) {
        var attribute = Attr.GetTabIndexAttributeName();
        if (Attr.GetAttribute(element, attribute) != -1)
            Attr.ChangeAttribute(element, attribute, -1);
    };
    Attr.SaveTabIndexAttributeAndReset = function (element) {
        var attribute = Attr.GetTabIndexAttributeName();
        Attr.SaveAttribute(element, attribute, element, "saved" + attribute);
        Attr.SetAttribute(element, attribute, -1);
    };
    Attr.RestoreTabIndexAttribute = function (element) {
        var attribute = Attr.GetTabIndexAttributeName();
        if (Attr.IsExistsAttribute(element, attribute)) {
            if (Attr.GetAttribute(element, attribute) == -1) {
                if (Attr.IsExistsAttribute(element, "saved" + attribute)) {
                    var oldValue = Attr.GetAttribute(element, "saved" + attribute);
                    if (oldValue != ASPx.EmptyObject)
                        Attr.SetAttribute(element, attribute, oldValue);
                    else {
                        if (Browser.WebKitFamily)
                            Attr.SetAttribute(element, attribute, 0);
                        Attr.RemoveAttribute(element, attribute);
                    }
                    Attr.RemoveAttribute(element, "saved" + attribute);
                }
            }
        }
    };
    Attr.ChangeAttributesMethod = function (enabled) {
        return enabled ? Attr.RestoreAttribute : Attr.ResetAttribute;
    };
    Attr.InitiallyChangeAttributesMethod = function (enabled) {
        return enabled ? Attr.ChangeAttribute : Attr.ResetAttribute;
    };
    Attr.ChangeStyleAttributesMethod = function (enabled) {
        return enabled ? Attr.RestoreStyleAttribute : Attr.ResetStyleAttribute;
    };
    Attr.InitiallyChangeStyleAttributesMethod = function (enabled) {
        return enabled ? Attr.ChangeStyleAttribute : Attr.ResetStyleAttribute;
    };
    Attr.ChangeEventsMethod = function (enabled) {
        return enabled ? Evt.AttachEventToElement : Evt.DetachEventFromElement;
    };
    Attr.ChangeDocumentEventsMethod = function (enabled) {
        return enabled ? Evt.AttachEventToDocument : Evt.DetachEventFromDocument;
    };
    Attr.ChangeCellSpanCount = function (cell, value, isColumnSpan) {
        if (!cell) return;
        var propertyKey = isColumnSpan ? "colSpan" : "rowSpan";
        var prevValue = cell[propertyKey];
        if (value > 1)
            cell[propertyKey] = value;
        else if (prevValue !== 1)
            Attr.RemoveAttribute(cell, propertyKey);
    };
    function isSourceResetRequired() {
        return Browser.IE && Browser.MajorVersion >= 11;
    }
    ASPx.Attr = Attr;
    var Aria = {
        atomic: "aria-atomic",
        checked: "aria-checked",
        descendant: "aria-activedescendant",
        described: "aria-describedby",
        disabled: "aria-disabled",
        expanded: "aria-expanded",
        haspopup: "aria-haspopup",
        invalid: "aria-invalid",
        label: "aria-label",
        labelled: "aria-labelledby",
        level: "aria-level",
        owns: "aria-owns",
        posinset: "aria-posinset",
        role: "role",
        selected: "aria-selected",
        setsize: "aria-setsize",
        valuemax: "aria-valuemax",
        valuemin: "aria-valuemin",
        valuenow: "aria-valuenow"
    };
    Aria.SetOrRemoveDescendant = function (obj, value) {
        ASPx.Attr.SetOrRemoveAttribute(obj, Aria.descendant, value);
    };
    Aria.SetOrRemoveLabel = function (obj, value) {
        ASPx.Attr.SetOrRemoveAttribute(obj, Aria.label, value);
    };
    Aria.AppendLabel = function (obj, value, checkExists) {
        var currentValue = ASPx.Attr.GetAttribute(obj, Aria.label) || "";
        var resultParts = [];
        if (currentValue)
            resultParts.push(currentValue);
        var needAppendValue = value && (!checkExists || currentValue.indexOf(value) == -1);
        if (needAppendValue)
            resultParts.push(value);
        ASPx.Attr.SetAttribute(obj, Aria.label, resultParts.join(" "));
    };
    Aria.SetOrRemoveLabelled = function (obj, value) {
        ASPx.Attr.SetOrRemoveAttribute(obj, Aria.labelled, value);
    };
    Aria.SetApplicationRole = function (obj) {
        ASPx.Attr.SetAttribute(obj, Aria.role, "application");
    };
    Aria.SetSilence = function (obj) {
        ASPx.Attr.SetAttribute(obj, Aria.label, ";");
    };
    Aria.SetExpanded = function (obj, expanded) {
        if (!obj || !ASPx.Attr.GetAttribute(obj, Aria.expanded)) return;
        Aria.SetBoolAttribute(obj, Aria.expanded, expanded);
    };
    Aria.SetAtomic = function (obj, value) {
        Aria.SetBoolAttribute(obj, Aria.atomic, value);
    };
    Aria.SetBoolAttribute = function (obj, attribute, value) {
        if (value)
            ASPx.Attr.SetAttribute(obj, attribute, true);
        else
            ASPx.Attr.SetAttribute(obj, attribute, false);
    };
    ASPx.Attr.Aria = Aria;
    var Color = {};
    function _aspxToHex(d) {
        return (d < 16) ? ("0" + d.toString(16)) : d.toString(16);
    }
    Color.RGBRegexp = /rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/;
    Color.ColorToHexadecimal = function (colorValue) {
        if (typeof (colorValue) == "number") {
            var r = colorValue & 0xFF;
            var g = (colorValue >> 8) & 0xFF;
            var b = (colorValue >> 16) & 0xFF;
            return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
        }
        if (colorValue && (colorValue.substr(0, 3).toLowerCase() == "rgb")) {
            var regResult = colorValue.toLowerCase().match(Color.RGBRegexp);
            if (regResult) {
                var r = parseInt(regResult[1]);
                var g = parseInt(regResult[2]);
                var b = parseInt(regResult[3]);
                return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
            }
            return null;
        }
        if (colorValue && (colorValue.charAt(0) == "#"))
            return colorValue;
        return null;
    };
    Color.Names = {
        AddColorNames: function (stringResourcesObj) {
            if (stringResourcesObj) {
                for (var key in stringResourcesObj)
                    if (stringResourcesObj.hasOwnProperty(key))
                        this[key] = stringResourcesObj[key];
            }
        }
    };
    ASPx.Color = Color;
    var Url = {};
    Url.Navigate = function (url, target) {
        var javascriptPrefix = "javascript:";
        if (!url || url === "")
            return;
        else if (url.indexOf(javascriptPrefix) != -1)
            eval(url.substr(javascriptPrefix.length));
        else {
            try {
                if (target != "")
                    navigateTo(url, target);
                else
                    location.href = url;
            }
            catch (e) {
            }
        }
    };
    Url.NavigateByLink = function (linkElement) {
        Url.Navigate(Attr.GetAttribute(linkElement, "href"), linkElement.target);
    };
    Url.GetAbsoluteUrl = function (url) {
        if (url)
            url = Url.getURLObject(url).href;
        return url;
    };
    Url.Redirect = function (url) {
        if (!ASPx.Browser.IE)
            window.location.href = url;
        else {
            var fakeLink = document.createElement("a");
            fakeLink.href = url;
            document.body.appendChild(fakeLink);
            try { fakeLink.click(); } catch (e) { }
        }
    };
    var absolutePathPrefixes =
        ["about:", "file:///", "ftp://", "gopher://", "http://", "https://", "javascript:", "mailto:", "news:", "res://", "telnet://", "view-source:"];
    Url.isAbsoluteUrl = function (url) {
        if (url) {
            for (var i = 0; i < absolutePathPrefixes.length; i++) {
                if (url.indexOf(absolutePathPrefixes[i]) == 0)
                    return true;
            }
        }
        return false;
    };
    Url.getURLObject = function (url) {
        var link = document.createElement('A');
        link.href = url || "";
        return {
            href: link.href,
            protocol: link.protocol,
            host: link.host,
            port: link.port,
            pathname: link.pathname,
            search: link.search,
            hash: link.hash
        };
    };
    Url.getRootRelativeUrl = function (url) {
        return getRelativeUrl(url, !Url.isRootRelativeUrl(url), true);
    };
    Url.getPathRelativeUrl = function (url) {
        return getRelativeUrl(url, !Url.isPathRelativeUrl(url), false);
    };
    function getRelativeUrl(url, isValid, isRootRelative) {
        if (url && !(/data:([^;]+\/?[^;]*)(;charset=[^;]*)?(;base64,)/.test(url)) && isValid) {
            var urlObject = Url.getURLObject(url);
            var baseUrlObject = Url.getURLObject();
            if (!Url.isAbsoluteUrl(url) || urlObject.host === baseUrlObject.host && urlObject.protocol === baseUrlObject.protocol) {
                url = urlObject.pathname;
                if (!isRootRelative)
                    url = getPathRelativeUrl(baseUrlObject.pathname, url);
                url = url + urlObject.search + urlObject.hash;
            }
        }
        return url;
    }
    function getPathRelativeUrl(baseUrl, url) {
        var requestSegments = getSegments(baseUrl, false);
        var urlSegments = getSegments(url, true);
        return buildPathRelativeUrl(requestSegments, urlSegments, 0, 0, "");
    }
    function getSegments(url, addTail) {
        var segments = [];
        var startIndex = 0;
        var endIndex = -1;
        while ((endIndex = url.indexOf("/", startIndex)) != -1) {
            segments.push(url.substring(startIndex, ++endIndex));
            startIndex = endIndex;
        }
        if (addTail && startIndex < url.length)
            segments.push(url.substring(startIndex, url.length));
        return segments;
    }
    function buildPathRelativeUrl(requestSegments, urlSegments, reqIndex, urlIndex, buffer) {
        if (urlIndex >= urlSegments.length)
            return buffer;
        if (reqIndex >= requestSegments.length)
            return buildPathRelativeUrl(requestSegments, urlSegments, reqIndex, urlIndex + 1, buffer + urlSegments[urlIndex]);
        if (requestSegments[reqIndex] === urlSegments[urlIndex] && urlIndex === reqIndex)
            return buildPathRelativeUrl(requestSegments, urlSegments, reqIndex + 1, urlIndex + 1, buffer);
        return buildPathRelativeUrl(requestSegments, urlSegments, reqIndex + 1, urlIndex, buffer + "../");
    }
    Url.isPathRelativeUrl = function (url) {
        return !!url && !Url.isAbsoluteUrl(url) && url.indexOf("/") != 0;
    };
    Url.isRootRelativeUrl = function (url) {
        return !!url && !Url.isAbsoluteUrl(url) && url.indexOf("/") == 0 && url.indexOf("//") != 0;
    };
    function navigateTo(url, target) {
        var lowerCaseTarget = target.toLowerCase();
        if ("_top" == lowerCaseTarget)
            top.location.href = url;
        else if ("_self" == lowerCaseTarget)
            location.href = url;
        else if ("_search" == lowerCaseTarget)
            openInNewWindow(url);
        else if ("_media" == lowerCaseTarget)
            openInNewWindow(url);
        else if ("_parent" == lowerCaseTarget)
            window.parent.location.href = url;
        else if ("_blank" == lowerCaseTarget)
            openInNewWindow(url);
        else {
            var frame = getFrame(top.frames, target);
            if (frame != null)
                frame.location.href = url;
            else
                openInNewWindow(url);
        }
    }
    function openInNewWindow(url) {
        if (ASPx.Browser.Safari)
            openInNewWindowViaIframe(url);
        else {
            var newWindow = window.open();
            newWindow.opener = null;
            newWindow.location = url;
        }
    }
    function openInNewWindowViaIframe(url) {
        var iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        document.body.appendChild(iframe);
        var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
        var openArgs = '"' + url + '"';
        var script = iframeDoc.createElement('script');
        script.type = 'text/javascript';
        script.text = 'window.parent = null; ' +
            'window.top = null;' +
            'window.frameElement = null;' +
            'var child = window.open(' + openArgs + ');' +
            'child.opener = null';
        iframeDoc.body.appendChild(script);
        document.body.removeChild(iframe);
    }
    ASPx.Url = Url;
    var Json = {};
    function isValid(JsonString) {
        return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(JsonString.replace(/"(\\.|[^"\\])*"/g, '')));
    }
    Json.Eval = function (jsonString, controlName) {
        if (isValid(jsonString))
            return eval("(" + jsonString + ")");
        else
            throw new Error(controlName + " received incorrect JSON-data: " + jsonString);
    };
    Json.ToJson = function (param) {
        var paramType = typeof (param);
        if ((paramType == "undefined") || (param == null))
            return null;
        if ((paramType == "object") && (typeof (param.__toJson) == "function"))
            return param.__toJson();
        if ((paramType == "number") || (paramType == "boolean"))
            return param;
        if (param.constructor == Date)
            return dateToJson(param);
        if (paramType == "string") {
            var result = param.replace(/\\/g, "\\\\");
            result = result.replace(/"/g, "\\\"");
            result = result.replace(/\n/g, "\\n");
            result = result.replace(/\r/g, "\\r");
            result = result.replace(/</g, "\\u003c");
            result = result.replace(/>/g, "\\u003e");
            return "\"" + result + "\"";
        }
        if (param.constructor == Array) {
            var values = [];
            for (var i = 0; i < param.length; i++) {
                var jsonValue = Json.ToJson(param[i]);
                if (jsonValue === null)
                    jsonValue = "null";
                values.push(jsonValue);
            }
            return "[" + values.join(",") + "]";
        }
        var exceptKeys = {};
        if (ASPx.Ident.IsArray(param.__toJsonExceptKeys))
            exceptKeys = Data.CreateHashTableFromArray(param.__toJsonExceptKeys);
        exceptKeys["__toJsonExceptKeys"] = 1;
        var values = [];
        for (var key in param) {
            if (param.hasOwnProperty(key)) {
                if (ASPx.IsFunction(param[key]))
                    continue;
                if (exceptKeys[key] == 1)
                    continue;
                values.push(Json.ToJson(key) + ":" + Json.ToJson(param[key]));
            }
        }
        return "{" + values.join(",") + "}";
    };
    function dateToJson(date) {
        var result = [
            date.getFullYear(),
            date.getMonth(),
            date.getDate()
        ];
        var time = {
            h: date.getHours(),
            m: date.getMinutes(),
            s: date.getSeconds(),
            ms: date.getMilliseconds()
        };
        if (time.h || time.m || time.s || time.ms)
            result.push(time.h);
        if (time.m || time.s || time.ms)
            result.push(time.m);
        if (time.s || time.ms)
            result.push(time.s);
        if (time.ms)
            result.push(time.ms);
        return "new Date(" + result.join() + ")";
    }
    ASPx.Json = Json;
    ASPx.CreateClass = function (parentClass, properties) {
        var ret = function () {
            if (ret.preparing)
                return delete (ret.preparing);
            if (ret.constr) {
                this.constructor = ret;
                ret.constr.apply(this, arguments);
            }
        };
        ret.prototype = {};
        if (parentClass) {
            parentClass.preparing = true;
            for (var name in parentClass) {
                if (parentClass.hasOwnProperty(name) && name != 'constr' && ASPx.IsFunction(parentClass[name]) && !ret[name])
                    ret[name] = parentClass[name].aspxBind(parentClass);
            }
            ret.prototype = new parentClass;
            ret.prototype.constructor = parentClass;
            ret.constr = parentClass;
        }
        if (properties) {
            var constructorName = "constructor";
            for (var name in properties) {
                if (name != constructorName)
                    ret.prototype[name] = properties[name];
            }
            if (properties[constructorName] && properties[constructorName] != Object)
                ret.constr = properties[constructorName];
        }
        return ret;
    };
    ASPx.FormatCallbackArg = function (prefix, arg) {
        if (prefix == null && arg == null)
            return "";
        if (prefix == null) prefix = "";
        if (arg == null) arg = "";
        if (arg != null && !ASPx.IsExists(arg.length) && ASPx.IsExists(arg.value))
            arg = arg.value;
        arg = arg.toString();
        return [prefix, '|', arg.length, '|', arg].join('');
    };
    ASPx.FormatCallbackArgs = function (callbackData) {
        var sb = [];
        for (var i = 0; i < callbackData.length; i++)
            sb.push(ASPx.FormatCallbackArg(callbackData[i][0], callbackData[i][1]));
        return sb.join("");
    };
    ASPx.ParseShortcutString = function (shortcutString) {
        if (!shortcutString)
            return 0;
        var isCtrlKey = false;
        var isShiftKey = false;
        var isAltKey = false;
        var isMetaKey = false;
        var keyCode = null;
        var shcKeys = shortcutString.toString().split("+");
        if (shcKeys.length > 0) {
            for (var i = 0; i < shcKeys.length; i++) {
                var key = Str.Trim(shcKeys[i].toUpperCase());
                switch (key) {
                    case "CONTROL":
                    case "CONTROLKEY":
                    case "CTRL":
                        isCtrlKey = true;
                        break;
                    case "SHIFT":
                    case "SHIFTKEY":
                        isShiftKey = true;
                        break;
                    case "ALT":
                        isAltKey = true;
                        break;
                    case "CMD":
                        isMetaKey = true;
                        break;
                    case "F1": keyCode = ASPx.Key.F1; break;
                    case "F2": keyCode = ASPx.Key.F2; break;
                    case "F3": keyCode = ASPx.Key.F3; break;
                    case "F4": keyCode = ASPx.Key.F4; break;
                    case "F5": keyCode = ASPx.Key.F5; break;
                    case "F6": keyCode = ASPx.Key.F6; break;
                    case "F7": keyCode = ASPx.Key.F7; break;
                    case "F8": keyCode = ASPx.Key.F8; break;
                    case "F9": keyCode = ASPx.Key.F9; break;
                    case "F10": keyCode = ASPx.Key.F10; break;
                    case "F11": keyCode = ASPx.Key.F11; break;
                    case "F12": keyCode = ASPx.Key.F12; break;
                    case "RETURN":
                    case "ENTER": keyCode = ASPx.Key.Enter; break;
                    case "HOME": keyCode = ASPx.Key.Home; break;
                    case "END": keyCode = ASPx.Key.End; break;
                    case "LEFT": keyCode = ASPx.Key.Left; break;
                    case "RIGHT": keyCode = ASPx.Key.Right; break;
                    case "UP": keyCode = ASPx.Key.Up; break;
                    case "DOWN": keyCode = ASPx.Key.Down; break;
                    case "PAGEUP": keyCode = ASPx.Key.PageUp; break;
                    case "PAGEDOWN": keyCode = ASPx.Key.PageDown; break;
                    case "SPACE": keyCode = ASPx.Key.Space; break;
                    case "TAB": keyCode = ASPx.Key.Tab; break;
                    case "BACKSPACE":
                    case "BACK": keyCode = ASPx.Key.Backspace; break;
                    case "CONTEXT": keyCode = ASPx.Key.ContextMenu; break;
                    case "ESCAPE":
                    case "ESC":
                        keyCode = ASPx.Key.Esc;
                        break;
                    case "DELETE":
                    case "DEL":
                        keyCode = ASPx.Key.Delete;
                        break;
                    case "INSERT":
                    case "INS":
                        keyCode = ASPx.Key.Insert;
                        break;
                    case "PLUS":
                        keyCode = "+".charCodeAt(0);
                        break;
                    default:
                        keyCode = key.charCodeAt(0);
                        break;
                }
            }
        } else
            ASPx.ShowErrorAlert("Invalid shortcut");
        return ASPx.GetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey, isMetaKey);
    };
    ASPx.GetShortcutCode = function (keyCode, isCtrlKey, isShiftKey, isAltKey, isMetaKey) {
        var value = keyCode & 0xFFFF;
        var flags = 0;
        flags |= isCtrlKey ? 1 << 0 : 0;
        flags |= isShiftKey ? 1 << 2 : 0;
        flags |= isAltKey ? 1 << 4 : 0;
        flags |= isMetaKey ? 1 << 8 : 0;
        value |= flags << 16;
        return value;
    };
    ASPx.GetShortcutCodeByEvent = function (evt) {
        return ASPx.GetShortcutCode(Evt.GetKeyCode(evt), evt.ctrlKey, evt.shiftKey, evt.altKey, ASPx.Browser.MacOSPlatform ? evt.metaKey : false);
    };
    ASPx.IsPasteShortcut = function (evt) {
        if (evt.type === "paste")
            return true;
        var keyCode = Evt.GetKeyCode(evt);
        if (Browser.NetscapeFamily && evt.which == 0)
            keyCode = evt.keyCode;
        return (evt.ctrlKey && (keyCode == 118 || (keyCode == 86))) ||
            (evt.shiftKey && !evt.ctrlKey && !evt.altKey &&
                (keyCode == ASPx.Key.Insert));
    };
    var NotPrintableKeyCodes = null;
    ASPx.IsPrintableKey = function (keyCode) {
        if (!NotPrintableKeyCodes)
            NotPrintableKeyCodes = Object.keys(ASPx.Key).map(function (key) { return ASPx.Key[key]; });
        return !ASPx.Data.ArrayContains(NotPrintableKeyCodes, keyCode);
    };
    ASPx.SetFocus = function (element, selectAction) {
        function focusCore(element, selectAction) {
            try {
                element.focus();
                if (Browser.IE && document.activeElement != element)
                    element.focus();
                if (selectAction) {
                    var currentSelection = Selection.GetInfo(element);
                    if (currentSelection.startPos == currentSelection.endPos) {
                        switch (selectAction) {
                            case "start":
                                Selection.SetCaretPosition(element, 0);
                                break;
                            case "all":
                                Selection.Set(element);
                                break;
                        }
                    }
                }
            } catch (e) {
            }
        }
        if (ASPxClientUtils.iOSPlatform)
            focusCore(element, selectAction);
        else {
            window.setTimeout(function () {
                focusCore(element, selectAction);
            }, 100);
        }
    };
    ASPx.IsFocusableCore = function (element, skipContainerVisibilityCheck) {
        var current = element;
        while (current && current.nodeType == 1) {
            if (current == element || !skipContainerVisibilityCheck(current)) {
                if (current.tagName == "BODY")
                    return true;
                if (current.disabled || !ASPx.GetElementDisplay(current) || !ASPx.GetElementVisibility(current))
                    return false;
            }
            current = current.parentNode;
        }
        return true;
    };
    ASPx.IsFocusable = function (element) {
        return ASPx.IsFocusableCore(element, ASPx.FalseFunction);
    };
    ASPx.IsActionElement = function (element) {
        if (!ASPx.IsExistsElement(element))
            return false;
        var tabIndex = parseInt(ASPx.Attr.GetAttribute(element, ASPx.Attr.GetTabIndexAttributeName()));
        var hasTabIndex = !isNaN(tabIndex);
        var hasNonNegativeTabIndex = hasTabIndex && tabIndex > -1;
        var hasNegativeTabIndex = hasTabIndex && tabIndex < 0;
        var tagName = element.tagName;
        var focusableElementTags = ["BUTTON", "SELECT", "TEXTAREA", "OPTION", "IFRAME"];
        var isFocusableCore = ASPx.IsFocusable(element);
        var isFocusableTag = focusableElementTags.indexOf(tagName) !== -1;
        var isFocusableLink = tagName === "A" && (!!element.href || hasNonNegativeTabIndex);
        var isFocusableInput = tagName === "INPUT" && element.type.toLowerCase() !== "hidden";
        var isFocusableByTabIndex = tagName !== "INPUT" && hasNonNegativeTabIndex;
        return isFocusableCore && !hasNegativeTabIndex && (isFocusableTag || isFocusableLink || isFocusableInput || isFocusableByTabIndex);
    };
    ASPx.GetCanBeActiveElementsInContainer = function (container) {
        var canBeActiveTags = ["INPUT", "A", "UL", "BUTTON", "TEXTAREA", "SELECT", "IFRAME"],
            canBeActiveElements = [];
        Data.ForEach(canBeActiveTags, function (tag) {
            var elements = container.getElementsByTagName(tag);
            canBeActiveElements = canBeActiveElements.concat([].slice.call(elements));
        });
        return canBeActiveElements;
    };
    function isActionElementAllowedByPredicate(element, predicate) {
        var allowedByPredicate = !predicate || predicate(element);
        return allowedByPredicate && ASPx.IsActionElement(element);
    }
    ASPx.FindChildActionElements = function (container, predicate) {
        return ASPx.GetNodes(container, function (el) {
            return isActionElementAllowedByPredicate(el, predicate);
        });
    };
    ASPx.FindAllSortedActionElements = function (container, predicate) {
        var result = [];
        if (!container || !container.getElementsByTagName) return result;
        var actionElements = ASPx.FindChildActionElements(container, predicate);
        var getTabOrderValue = function (el) {
            var tabIndex = parseInt(ASPx.Attr.GetAttribute(el, ASPx.Attr.GetTabIndexAttributeName()));
            return isNaN(tabIndex) ? 0 : tabIndex;
        };
        var positiveTabIndexElements = actionElements.filter(function (x) { return getTabOrderValue(x) > 0; });
        var nonPositiveTabIndexElements = actionElements.filter(function (x) { return getTabOrderValue(x) === 0; });
        var sortedTabIndexElements = positiveTabIndexElements.sort(function (x, y) { return getTabOrderValue(x) - getTabOrderValue(y); });
        result = sortedTabIndexElements.concat(nonPositiveTabIndexElements);
        return result;
    };
    ASPx.FindFirstChildActionElement = function (container, predicate) {
        if (!container || isActionElementAllowedByPredicate(container, predicate))
            return !container ? null : container;
        var sortedActionElements = ASPx.FindAllSortedActionElements(container, predicate);
        return sortedActionElements[0];
    };
    ASPx.FindLastChildActionElement = function (container, predicate) {
        if (!container)
            return null;
        var sortedActionElements = ASPx.FindAllSortedActionElements(container, predicate);
        var actionElement = sortedActionElements[sortedActionElements.length - 1];
        if (!actionElement && isActionElementAllowedByPredicate(container, predicate))
            actionElement = container;
        return actionElement;
    };
    ASPx.GetParentClientControls = function (name) {
        nameParts = name.split("_");
        var result = [];
        var controlCollection = ASPx.GetControlCollection();
        for (var i = 1; i <= nameParts.length; i++) {
            var controlName = nameParts.slice(0, i).join("_");
            var control = controlCollection.Get(controlName);
            if (control)
                result.push(control);
        }
        return result;
    };
    ASPx.GetRootClientControl = function (childControlName) {
        var parentControls = ASPx.GetParentClientControls(childControlName);
        return parentControls[0];
    };
    ASPx.GetClientControlByElementID = function (elementID) {
        var parentControls = ASPx.GetParentClientControls(elementID);
        return parentControls[parentControls.length - 1];
    };
    ASPx.IsExists = function (obj) {
        return (typeof (obj) != "undefined") && (obj != null);
    };
    ASPx.IsFunction = function (obj) {
        return typeof (obj) == "function";
    };
    ASPx.IsNumber = function (str) {
        return !isNaN(parseFloat(str)) && isFinite(str);
    };
    ASPx.GetDefinedValue = function (value, defaultValue) {
        return (typeof (value) != "undefined") ? value : defaultValue;
    };
    ASPx.CorrectJSFloatNumber = function (number) {
        var ret = 21;
        var numString = number.toPrecision(21);
        numString = numString.replace("-", "");
        var integerDigitsCount = numString.indexOf(ASPx.PossibleNumberDecimalSeparators[0]);
        if (integerDigitsCount < 0)
            integerDigitsCount = numString.indexOf(ASPx.PossibleNumberDecimalSeparators[1]);
        var floatDigitsCount = numString.length - integerDigitsCount - 1;
        if (floatDigitsCount < 10)
            return number;
        if (integerDigitsCount > 0) {
            ret = integerDigitsCount + 12;
        }
        var toPrecisionNumber = Math.min(ret, 21);
        var newValueString = number.toPrecision(toPrecisionNumber);
        return parseFloat(newValueString, 10);
    };
    ASPx.CorrectRounding = function (number, step) {
        var regex = /[,|.](.*)/,
            isFloatValue = regex.test(number),
            isFloatStep = regex.test(step);
        if (isFloatValue || isFloatStep) {
            var valueAccuracy = (isFloatValue) ? regex.exec(number)[0].length - 1 : 0,
                stepAccuracy = (isFloatStep) ? regex.exec(step)[0].length - 1 : 0,
                accuracy = Math.max(valueAccuracy, stepAccuracy);
            var multiplier = Math.pow(10, accuracy);
            number = Math.round((number + step) * multiplier) / multiplier;
            return number;
        }
        return number + step;
    };
    ASPx.GetActiveElement = function () {
        try { return document.activeElement; } catch (e) { return null; }
    };
    var verticalScrollBarWidth;
    ASPx.GetVerticalScrollBarWidth = function () {
        if (typeof (verticalScrollBarWidth) == "undefined") {
            var container = document.createElement("DIV");
            container.style.cssText = "position: absolute; top: 0px; left: 0px; visibility: hidden; width: 200px; height: 150px; overflow: hidden; box-sizing: content-box";
            document.body.appendChild(container);
            var child = document.createElement("P");
            container.appendChild(child);
            child.style.cssText = "width: 100%; height: 200px;";
            var widthWithoutScrollBar = child.offsetWidth;
            container.style.overflow = "scroll";
            var widthWithScrollBar = child.offsetWidth;
            if (widthWithoutScrollBar == widthWithScrollBar)
                widthWithScrollBar = container.clientWidth;
            verticalScrollBarWidth = widthWithoutScrollBar - widthWithScrollBar;
            document.body.removeChild(container);
        }
        return verticalScrollBarWidth;
    };
    function hideScrollBarCore(element, scrollName) {
        if (element.tagName == "IFRAME") {
            if ((element.scrolling == "yes") || (element.scrolling == "auto")) {
                Attr.ChangeAttribute(element, "scrolling", "no");
                return true;
            }
        }
        else if (element.tagName == "DIV") {
            if ((element.style[scrollName] == "scroll") || (element.style[scrollName] == "auto")) {
                Attr.ChangeStyleAttribute(element, scrollName, "hidden");
                return true;
            }
        }
        return false;
    }
    function restoreScrollBarCore(element, scrollName) {
        if (element.tagName == "IFRAME")
            return Attr.RestoreAttribute(element, "scrolling");
        else if (element.tagName == "DIV")
            return Attr.RestoreStyleAttribute(element, scrollName);
        return false;
    }
    ASPx.SetScrollBarVisibilityCore = function (element, scrollName, isVisible) {
        return isVisible ? restoreScrollBarCore(element, scrollName) : hideScrollBarCore(element, scrollName);
    };
    ASPx.SetScrollBarVisibility = function (element, isVisible) {
        if (ASPx.SetScrollBarVisibilityCore(element, "overflow", isVisible))
            return true;
        var result = ASPx.SetScrollBarVisibilityCore(element, "overflowX", isVisible)
            || ASPx.SetScrollBarVisibilityCore(element, "overflowY", isVisible);
        return result;
    };
    ASPx.SetInnerHtml = function (element, html) {
        if (Browser.IE) {
            element.innerHTML = "<em>&nbsp;</em>" + html;
            element.removeChild(element.firstChild);
        } else
            element.innerHTML = html;
    };
    ASPx.GetInnerText = function (container) {
        if (Browser.Safari && Browser.MajorVersion <= 5) {
            var filter = getHtml2PlainTextFilter();
            filter.innerHTML = container.innerHTML;
            ASPx.SetElementDisplay(filter, true);
            var innerText = filter.innerText;
            ASPx.SetElementDisplay(filter, false);
            return innerText;
        } else if (Browser.NetscapeFamily || Browser.WebKitFamily || (Browser.IE && Browser.Version >= 9) || Browser.Edge) {
            return container.textContent;
        } else
            return container.innerText;
    };
    var html2PlainTextFilter = null;
    function getHtml2PlainTextFilter() {
        if (html2PlainTextFilter == null) {
            html2PlainTextFilter = document.createElement("DIV");
            html2PlainTextFilter.style.width = "0";
            html2PlainTextFilter.style.height = "0";
            html2PlainTextFilter.style.overflow = "visible";
            ASPx.SetElementDisplay(html2PlainTextFilter, false);
            document.body.appendChild(html2PlainTextFilter);
        }
        return html2PlainTextFilter;
    }
    ASPx.CreateHiddenField = function (name, id) {
        var input = document.createElement("INPUT");
        input.setAttribute("type", "hidden");
        if (name)
            input.setAttribute("name", name);
        if (id)
            input.setAttribute("id", id);
        return input;
    };
    ASPx.CloneObject = function (srcObject) {
        if (typeof (srcObject) != 'object' || srcObject == null)
            return srcObject;
        var newObject = {};
        for (var i in srcObject)
            newObject[i] = srcObject[i];
        return newObject;
    };
    ASPx.IsPercentageSize = function (size) {
        return size && size.indexOf('%') != -1;
    };
    ASPx.GetElementById = function (id) {
        if (document.getElementById)
            return document.getElementById(id);
        else
            return document.all[id];
    };
    ASPx.GetInputElementById = function (id) {
        var elem = ASPx.GetElementById(id);
        if (!Browser.IE)
            return elem;
        if (elem) {
            if (elem.id == id)
                return elem;
            else {
                for (var i = 1; i < document.all[id].length; i++) {
                    if (document.all[id][i].id == id)
                        return document.all[id][i];
                }
            }
        }
        return null;
    };
    ASPx.GetElementByIdInDocument = function (documentObj, id) {
        if (documentObj.getElementById)
            return documentObj.getElementById(id);
        else
            return documentObj.all[id];
    };
    ASPx.GetIsParent = function (parentElement, element) {
        if (!parentElement || !element)
            return false;
        while (element) {
            if (element === parentElement)
                return true;
            if (element.tagName === "BODY")
                return false;
            element = element.parentNode;
        }
        return false;
    };
    ASPx.GetParentById = function (element, id) {
        element = element.parentNode;
        while (element) {
            if (element.id === id)
                return element;
            element = element.parentNode;
        }
        return null;
    };
    ASPx.GetParentByPartialId = function (element, idPart) {
        while (element && element.tagName != "BODY") {
            if (element.id && element.id.match(idPart))
                return element;
            element = element.parentNode;
        }
        return null;
    };
    ASPx.GetParentByTagName = function (element, tagName) {
        tagName = tagName.toUpperCase();
        while (element) {
            if (element.tagName === "BODY")
                return null;
            if (element.tagName === tagName)
                return element;
            element = element.parentNode;
        }
        return null;
    };
    function getParentByClassNameInternal(element, className, selector) {
        while (element != null) {
            if (element.tagName == "BODY" || element.nodeName == "#document")
                return null;
            if (selector(element, className))
                return element;
            element = element.parentNode;
        }
        return null;
    }
    ASPx.GetParentByPartialClassName = function (element, className) {
        return getParentByClassNameInternal(element, className, ASPx.ElementContainsCssClass);
    };
    ASPx.GetParentByClassName = function (element, className) {
        return getParentByClassNameInternal(element, className, ASPx.ElementHasCssClass);
    };
    ASPx.GetParentByTagNameAndAttributeValue = function (element, tagName, attrName, attrValue) {
        tagName = tagName.toUpperCase();
        while (element != null) {
            if (element.tagName == "BODY")
                return null;
            if (element.tagName == tagName && element[attrName] == attrValue)
                return element;
            element = element.parentNode;
        }
        return null;
    };
    ASPx.GetParent = function (element, testFunc) {
        if (!ASPx.IsExists(testFunc)) return null;
        while (element != null && element.tagName != "BODY") {
            if (testFunc(element))
                return element;
            element = element.parentNode;
        }
        return null;
    };
    ASPx.GetElementTreeLine = function (element, stopTagName, stopFunc) {
        var result = [];
        stopTagName = stopTagName || "BODY";
        while (element != null) {
            if (!stopFunc && element.tagName == stopTagName)
                break;
            if (stopFunc && stopFunc(element))
                break;
            result.push(element);
            element = element.parentNode;
        }
        return result;
    };
    ASPx.IsScrollableElement = function (element, isHorzScrollable, isVertScrollable) {
        isHorzScrollable = ASPx.IsExists(isHorzScrollable) ? isHorzScrollable : true;
        isVertScrollable = ASPx.IsExists(isVertScrollable) ? isVertScrollable : true;
        var style = ASPx.GetCurrentStyle(element);
        var overflowStyleNames = ["overflow"];
        if (isHorzScrollable)
            overflowStyleNames.push("overflowX");
        if (isVertScrollable)
            overflowStyleNames.push("overflowY");
        for (var i = 0; i < overflowStyleNames.length; i++)
            if (style[overflowStyleNames[i]] == "scroll" || style[overflowStyleNames[i]] == "auto")
                return true;
        return false;
    };
    ASPx.GetPreviousSibling = function (el) {
        if (el.previousElementSibling) {
            return el.previousElementSibling;
        } else {
            while (el = el.previousSibling) {
                if (el.nodeType === 1)
                    return el;
            }
        }
    };
    ASPx.ElementHasCssClass = function (element, className) {
        try {
            var elementClasses;
            var classList = element.classList;
            if (!classList) {
                if (!element.className)
                    return false;
                elementClasses = element.className.split(" ");
            }
            var classNames = className.split(" ");
            for (var i = classNames.length - 1; i >= 0; i--) {
                if (classList) {
                    if (!classList.contains(classNames[i]))
                        return false;
                    continue;
                }
                if (Data.ArrayIndexOf(elementClasses, classNames[i]) < 0)
                    return false;
            }
            return true;
        } catch (e) {
            return false;
        }
    };
    ASPx.ElementContainsCssClass = function (element, className) {
        try {
            if (!element.className)
                return false;
            return element.className.indexOf(className) != -1;
        } catch (e) {
            return false;
        }
    };
    ASPx.AddClassNameToElement = function (element, className) {
        if (!element || typeof (className) !== "string") return;
        className = className.trim();
        if (!ASPx.ElementHasCssClass(element, className) && className !== "")
            element.className = (element.className === "") ? className : element.className + " " + className;
    };
    ASPx.RemoveClassNameFromElement = function (element, className) {
        if (!element) return;
        var updClassName = " " + element.className + " ";
        var newClassName = updClassName.replace(" " + className + " ", " ");
        if (updClassName.length != newClassName.length)
            element.className = Str.Trim(newClassName);
    };
    ASPx.GetClassNameList = function (element) {
        if (element.classList)
            return [].slice.call(element.classList);
        return element.className.replace(/^\s+|\s+$/g, '').split(/\s+/);
    };
    function nodeListToArray(nodeList, filter) {
        var result = [];
        for (var i = 0, element; element = nodeList[i]; i++) {
            if (filter && !filter(element))
                continue;
            result.push(element);
        }
        return result;
    }
    function getItemByIndex(collection, index) {
        if (!index) index = 0;
        if (collection != null && collection.length > index)
            return collection[index];
        return null;
    }
    ASPx.GetChildNodesByClassName = function (parent, className) {
        if (!parent) return [];
        if (parent.querySelectorAll) {
            var children = parent.querySelectorAll('.' + className);
            return nodeListToArray(children, function (element) {
                return element.parentNode === parent;
            });
        }
        return ASPx.GetChildNodes(parent, function (elem) { return elem.className && ASPx.ElementHasCssClass(elem, className); });
    };
    ASPx.GetChildNodesByPartialClassName = function (element, className) {
        return ASPx.GetChildElementNodesByPredicate(element,
            function (child) {
                return ASPx.ElementContainsCssClass(child, className);
            });
    };
    ASPx.GetChildByPartialClassName = function (element, className, index) {
        if (element != null) {
            var collection = ASPx.GetChildNodesByPartialClassName(element, className);
            return getItemByIndex(collection, index);
        }
        return null;
    };
    ASPx.GetChildByClassName = function (element, className, index) {
        if (element != null) {
            var collection = ASPx.GetChildNodesByClassName(element, className);
            return getItemByIndex(collection, index);
        }
        return null;
    };
    ASPx.GetNodesByPartialClassName = function (element, className) {
        if (element.querySelectorAll) {
            var list = element.querySelectorAll('*[class*=' + className + ']');
            return nodeListToArray(list);
        }
        var collection = element.all || element.getElementsByTagName('*');
        var ret = [];
        if (collection != null) {
            for (var i = 0; i < collection.length; i++) {
                if (ASPx.ElementContainsCssClass(collection[i], className))
                    ret.push(collection[i]);
            }
        }
        return ret;
    };
    ASPx.GetNodesByClassName = function (parent, className) {
        if (parent.querySelectorAll) {
            var children = parent.querySelectorAll('.' + className);
            return nodeListToArray(children);
        }
        return ASPx.GetNodes(parent, function (elem) { return elem.className && ASPx.ElementHasCssClass(elem, className); });
    };
    ASPx.GetNodeByClassName = function (element, className, index) {
        if (element != null) {
            var collection = ASPx.GetNodesByClassName(element, className);
            return getItemByIndex(collection, index);
        }
        return null;
    };
    ASPx.GetChildById = function (element, id) {
        if (element.all) {
            var child = element.all[id];
            if (!child) {
                child = element.all(id);
                if (!child)
                    return Browser.IE ? document.getElementById(id) : null;
            }
            if (!ASPx.IsExists(child.length))
                return child;
            else
                return ASPx.GetElementById(id);
        }
        else
            return ASPx.GetElementById(id);
    };
    ASPx.GetNodesByPartialId = function (element, partialName, list) {
        if (element.id && element.id.indexOf(partialName) > -1)
            list.push(element);
        if (element.childNodes) {
            for (var i = 0; i < element.childNodes.length; i++)
                ASPx.GetNodesByPartialId(element.childNodes[i], partialName, list);
        }
    };
    ASPx.GetNodesByTagName = function (element, tagName) {
        tagName = tagName.toUpperCase();
        if (element) {
            if (element.getElementsByTagName)
                return element.getElementsByTagName(tagName);
            else if (element.all && element.all.tags !== undefined)
                return Browser.Netscape ? element.all.tags[tagName] : element.all.tags(tagName);
        }
        return null;
    };
    ASPx.GetNodeByTagName = function (element, tagName, index) {
        if (element != null) {
            var collection = ASPx.GetNodesByTagName(element, tagName);
            return getItemByIndex(collection, index);
        }
        return null;
    };
    ASPx.GetChildNodesByTagName = function (parent, tagName) {
        return ASPx.GetChildNodes(parent, function (child) { return child.tagName === tagName; });
    };
    ASPx.GetChildByTagName = function (element, tagName, index) {
        if (element != null) {
            var collection = ASPx.GetChildNodesByTagName(element, tagName);
            return getItemByIndex(collection, index);
        }
        return null;
    };
    ASPx.RetrieveByPredicate = function (scourceCollection, predicate) {
        var result = [];
        for (var i = 0; i < scourceCollection.length; i++) {
            var element = scourceCollection[i];
            if (!predicate || predicate(element))
                result.push(element);
        }
        return result;
    };
    ASPx.GetChildNodes = function (parent, predicate) {
        return ASPx.RetrieveByPredicate(parent.childNodes, predicate);
    };
    ASPx.GetNodes = function (parent, predicate) {
        var c = parent.all || parent.getElementsByTagName('*');
        return ASPx.RetrieveByPredicate(c, predicate);
    };
    ASPx.GetChildElementNodes = function (parent) {
        if (!parent) return null;
        return ASPx.GetChildNodes(parent, function (e) { return e.nodeType == 1; });
    };
    ASPx.GetChildElementNodesByPredicate = function (parent, predicate) {
        if (!parent) return null;
        if (!predicate) return ASPx.GetChildElementNodes(parent);
        return ASPx.GetChildNodes(parent, function (e) { return e.nodeType == 1 && predicate(e); });
    };
    ASPx.GetTextNode = function (element, index) {
        if (element != null) {
            var collection = [];
            ASPx.GetTextNodes(element, collection);
            return getItemByIndex(collection, index);
        }
        return null;
    };
    ASPx.GetTextNodes = function (element, collection) {
        for (var i = 0; i < element.childNodes.length; i++) {
            var childNode = element.childNodes[i];
            if (ASPx.IsExists(childNode.nodeValue))
                collection.push(childNode);
            ASPx.GetTextNodes(childNode, collection);
        }
    };
    ASPx.GetNormalizedTextNode = function (element, index) {
        var textNode = ASPx.GetTextNode(element, index);
        if (textNode != null)
            ASPx.MergeAdjacentTextNodes(textNode);
        return textNode;
    };
    ASPx.MergeAdjacentTextNodes = function (firstTextNode) {
        if (!ASPx.IsExists(firstTextNode.nodeValue))
            return;
        var textNode = firstTextNode;
        while (textNode.nextSibling && ASPx.IsExists(textNode.nextSibling.nodeValue)) {
            textNode.nodeValue += textNode.nextSibling.nodeValue;
            textNode.parentNode.removeChild(textNode.nextSibling);
        }
    };
    ASPx.GetElementDocument = function (element) {
        return element.document || element.ownerDocument;
    };
    ASPx.RemoveElement = function (element) {
        if (element && element.parentNode)
            element.parentNode.removeChild(element);
    };
    ASPx.ReplaceTagName = function (element, newTagName, cloneChilds) {
        if (element.nodeType != 1)
            return null;
        if (element.nodeName == newTagName)
            return element;
        cloneChilds = cloneChilds !== undefined ? cloneChilds : true;
        var doc = element.ownerDocument;
        var newElem = doc.createElement(newTagName);
        Attr.CopyAllAttributes(element, newElem);
        if (cloneChilds) {
            for (var i = 0; i < element.childNodes.length; i++)
                newElem.appendChild(element.childNodes[i].cloneNode(true));
        }
        else {
            for (var child; child = element.firstChild;)
                newElem.appendChild(child);
        }
        element.parentNode.replaceChild(newElem, element);
        return newElem;
    };
    ASPx.RemoveOuterTags = function (element) {
        if (ASPx.Browser.IE) {
            element.insertAdjacentHTML('beforeBegin', element.innerHTML);
            ASPx.RemoveElement(element);
        } else {
            var docFragment = element.ownerDocument.createDocumentFragment();
            for (var i = 0; i < element.childNodes.length; i++)
                docFragment.appendChild(element.childNodes[i].cloneNode(true));
            element.parentNode.replaceChild(docFragment, element);
        }
    };
    ASPx.WrapElementInNewElement = function (element, newElementTagName) {
        var wrapElement = null;
        if (Browser.IE) {
            var wrapElement = element.ownerDocument.createElement(newElementTagName);
            wrapElement.appendChild(element.cloneNode(true));
            element.parentNode.insertBefore(wrapElement, element);
            element.parentNode.removeChild(element);
        } else {
            var docFragment = element.ownerDocument.createDocumentFragment();
            wrapElement = element.ownerDocument.createElement(newElementTagName);
            docFragment.appendChild(wrapElement);
            wrapElement.appendChild(element.cloneNode(true));
            element.parentNode.replaceChild(docFragment, element);
        }
        return wrapElement;
    };
    ASPx.InsertElementAfter = function (newElement, targetElement) {
        var parentElem = targetElement.parentNode;
        if (parentElem.childNodes[parentElem.childNodes.length - 1] == targetElement)
            parentElem.appendChild(newElement);
        else
            parentElem.insertBefore(newElement, targetElement.nextSibling);
    };
    ASPx.SetElementOpacity = function (element, value) {
        var useOpacityStyle = !Browser.IE || Browser.Version > 8;
        if (useOpacityStyle) {
            element.style.opacity = value;
        } else {
            if (typeof (element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"])
                element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity = value * 100;
            else
                element.style.filter = "alpha(opacity=" + (value * 100) + ")";
        }
    };
    ASPx.GetElementOpacity = function (element) {
        var useOpacityStyle = !Browser.IE || Browser.Version > 8;
        if (useOpacityStyle)
            return parseFloat(ASPx.GetCurrentStyle(element).opacity);
        else {
            if (typeof (element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"]) {
                return element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity / 100;
            } else {
                var alphaValue = ASPx.GetCurrentStyle(element).filter;
                var value = alphaValue.replace("alpha(opacity=", "");
                value = value.replace(")", "");
                return parseInt(value) / 100;
            }
            return 100;
        }
    };
    ASPx.GetElementDisplay = function (element, isCurrentStyle) {
        if (isCurrentStyle)
            return ASPx.GetCurrentStyle(element).display != "none";
        return element.style.display != "none";
    };
    ASPx.SetElementDisplay = function (element, value, checkCurrentStyle, makeInline) {
        if (!element) return;
        if (typeof (value) === "string")
            element.style.display = value;
        else if (!value)
            element.style.display = "none";
        else {
            element.style.display = "";
            if (checkCurrentStyle && ASPx.GetCurrentStyle(element).display === "none") {
                var displayAddon = makeInline ? "inline-" : "";
                switch (element.tagName) {
                    case "TABLE": {
                        element.style.display = displayAddon + "table";
                        break;
                    }
                    default: {
                        element.style.display = displayAddon + "block";
                        break;
                    }
                }
            }
        }
    };
    ASPx.GetElementVisibility = function (element, isCurrentStyle) {
        if (isCurrentStyle)
            return ASPx.GetCurrentStyle(element).visibility != "hidden";
        return element.style.visibility != "hidden";
    };
    ASPx.SetElementVisibility = function (element, value) {
        if (!element) return;
        if (typeof (value) === "string")
            element.style.visibility = value;
        else
            element.style.visibility = value ? "visible" : "hidden";
    };
    ASPx.IsElementVisible = function (element, isCurrentStyle) {
        while (element && element.tagName != "BODY") {
            if (!ASPx.GetElementDisplay(element, isCurrentStyle) || (!ASPx.GetElementVisibility(element, isCurrentStyle) && !Attr.IsExistsAttribute(element, "errorFrame")))
                return false;
            element = element.parentNode;
        }
        return true;
    };
    ASPx.IsElementDisplayed = function (element) {
        while (element && element.tagName != "BODY") {
            if (!ASPx.GetElementDisplay(element))
                return false;
            element = element.parentNode;
        }
        return true;
    };
    ASPx.AddStyleSheetLinkToDocument = function (doc, linkUrl) {
        var newLink = createStyleLink(doc, linkUrl);
        var head = ASPx.GetHeadElementOrCreateIfNotExist(doc);
        head.appendChild(newLink);
    };
    ASPx.GetHeadElementOrCreateIfNotExist = function (doc) {
        var elements = ASPx.GetNodesByTagName(doc, "head");
        var head = null;
        if (elements.length == 0) {
            head = doc.createElement("head");
            head.visibility = "hidden";
            doc.insertBefore(head, doc.body);
        } else
            head = elements[0];
        return head;
    };
    function createStyleLink(doc, url) {
        var newLink = doc.createElement("link");
        Attr.SetAttribute(newLink, "href", url);
        Attr.SetAttribute(newLink, "type", "text/css");
        Attr.SetAttribute(newLink, "rel", "stylesheet");
        return newLink;
    }
    ASPx.GetCurrentStyle = function (element) {
        if (element.currentStyle)
            return element.currentStyle;
        else if (document.defaultView && document.defaultView.getComputedStyle) {
            var result = document.defaultView.getComputedStyle(element, null);
            if (!result && Browser.Firefox && window.frameElement) {
                var changes = [];
                var curElement = window.frameElement;
                while (!(result = document.defaultView.getComputedStyle(element, null))) {
                    changes.push([curElement, curElement.style.display]);
                    ASPx.SetStylesCore(curElement, "display", "block", true);
                    curElement = curElement.tagName == "BODY" ? curElement.ownerDocument.defaultView.frameElement : curElement.parentNode;
                }
                result = ASPx.CloneObject(result);
                for (var ch, i = 0; ch = changes[i]; i++)
                    ASPx.SetStylesCore(ch[0], "display", ch[1]);
                var reflow = document.body.offsetWidth;
            }
            return result;
        }
        return window.getComputedStyle(element, null);
    };
    ASPx.CreateStyleSheetInDocument = function (doc) {
        if (doc.createStyleSheet) {
            try {
                return doc.createStyleSheet();
            }
            catch (e) {
                var message = "The CSS link limit (31) has been exceeded. Please enable CSS merging or reduce the number of CSS files on the page. For details, see http://www.devexpress.com/Support/Center/p/K18487.aspx.";
                throw new Error(message);
            }
        }
        else {
            var styleSheet = doc.createElement("STYLE");
            ASPx.GetNodeByTagName(doc, "HEAD", 0).appendChild(styleSheet);
            return styleSheet.sheet;
        }
    };
    ASPx.currentStyleSheet = null;
    ASPx.GetCurrentStyleSheet = function () {
        if (!ASPx.currentStyleSheet)
            ASPx.currentStyleSheet = ASPx.CreateStyleSheetInDocument(document);
        return ASPx.currentStyleSheet;
    };
    function getStyleSheetRules(styleSheet) {
        try {
            return Browser.IE && Browser.Version == 8 ? styleSheet.rules : styleSheet.cssRules;
        }
        catch (e) {
            return null;
        }
    }
    ASPx.cachedCssRules = {};
    ASPx.GetStyleSheetRules = function (className, stylesStorageDocument) {
        if (ASPx.cachedCssRules[className]) {
            if (ASPx.cachedCssRules[className] != ASPx.EmptyObject)
                return ASPx.cachedCssRules[className];
            return null;
        }
        var result = iterateStyleSheetRules(stylesStorageDocument, function (rule) {
            if (rule.selectorText == "." + className) {
                ASPx.cachedCssRules[className] = rule;
                return rule;
            }
        });
        if (ASPx.IsExists(result))
            return result;
        ASPx.cachedCssRules[className] = ASPx.EmptyObject;
        return null;
    };
    function iterateStyleSheetRules(stylesStorageDocument, callback) {
        var doc = stylesStorageDocument || document;
        for (var i = 0; i < doc.styleSheets.length; i++) {
            var styleSheet = doc.styleSheets[i];
            var rules = getStyleSheetRules(styleSheet);
            if (rules != null) {
                for (var j = 0; j < rules.length; j++) {
                    var result = callback(rules[j]);
                    if (result !== undefined)
                        return result;
                }
            }
        }
    }
    ASPx.ClearCachedCssRules = function () {
        ASPx.cachedCssRules = {};
    };
    var styleCount = 0;
    var styleNameCache = {};
    ASPx.CreateImportantStyleRule = function (styleSheet, cssText, postfix, prefix) {
        styleSheet = styleSheet || ASPx.GetCurrentStyleSheet();
        var cacheKey = (postfix ? postfix + "||" : "") + cssText + (prefix ? "||" + prefix : "");
        if (styleNameCache[cacheKey])
            return styleNameCache[cacheKey];
        prefix = prefix ? prefix + " " : "";
        var className = "dxh" + styleCount + (postfix ? postfix : "");
        ASPx.AddStyleSheetRule(styleSheet, prefix + "." + className, ASPx.CreateImportantCssText(cssText));
        styleCount++;
        styleNameCache[cacheKey] = className;
        return className;
    };
    ASPx.CreateImportantCssText = function (cssText) {
        var newText = "";
        var attributes = cssText.split(";");
        for (var i = 0; i < attributes.length; i++) {
            if (attributes[i] != "")
                newText += attributes[i] + " !important;";
        }
        return newText;
    };
    ASPx.AddStyleSheetRule = function (styleSheet, selector, cssText) {
        if (!cssText) return;
        if (Browser.IE)
            styleSheet.addRule(selector, cssText);
        else
            styleSheet.insertRule(selector + " { " + cssText + " }", styleSheet.cssRules.length);
    };
    ASPx.GetPointerCursor = function () {
        return "pointer";
    };
    ASPx.SetPointerCursor = function (element) {
        if (element.style.cursor == "")
            element.style.cursor = ASPx.GetPointerCursor();
    };
    ASPx.SetElementFloat = function (element, value) {
        if (ASPx.IsExists(element.style.cssFloat))
            element.style.cssFloat = value;
        else if (ASPx.IsExists(element.style.styleFloat))
            element.style.styleFloat = value;
        else
            Attr.SetAttribute(element.style, "float", value);
    };
    ASPx.GetElementFloat = function (element) {
        var currentStyle = ASPx.GetCurrentStyle(element);
        if (ASPx.IsExists(currentStyle.cssFloat))
            return currentStyle.cssFloat;
        if (ASPx.IsExists(currentStyle.styleFloat))
            return currentStyle.styleFloat;
        return Attr.GetAttribute(currentStyle, "float");
    };
    function getElementDirection(element) {
        return ASPx.GetCurrentStyle(element).direction;
    }
    ASPx.IsElementRightToLeft = function (element) {
        return getElementDirection(element) == "rtl";
    };
    ASPx.AdjustVerticalMarginsInContainer = function (container) {
        var containerBorderAndPaddings = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(container);
        var flowElements = [], floatElements = [], floatTextElements = [];
        var maxHeight = 0, maxFlowHeight = 0;
        for (var i = 0; i < container.childNodes.length; i++) {
            var element = container.childNodes[i];
            if (!element.offsetHeight) continue;
            ASPx.ClearVerticalMargins(element);
        }
        for (var i = 0; i < container.childNodes.length; i++) {
            var element = container.childNodes[i];
            if (!element.offsetHeight) continue;
            var float = ASPx.GetElementFloat(element);
            var isFloat = (float === "left" || float === "right");
            if (isFloat)
                floatElements.push(element);
            else {
                flowElements.push(element);
                if (element.tagName !== "IMG") {
                    if (!ASPx.IsTextWrapped(element))
                        element.style.verticalAlign = 'baseline';
                    floatTextElements.push(element);
                }
                if (element.tagName === "DIV")
                    Attr.ChangeStyleAttribute(element, "float", "left");
            }
            if (element.offsetHeight > maxHeight)
                maxHeight = element.offsetHeight;
            if (!isFloat && element.offsetHeight > maxFlowHeight)
                maxFlowHeight = element.offsetHeight;
        }
        for (var i = 0; i < flowElements.length; i++)
            Attr.RestoreStyleAttribute(flowElements[i], "float");
        var containerBorderAndPaddings = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(container);
        var containerHeight = container.offsetHeight - containerBorderAndPaddings;
        if (maxHeight == containerHeight) {
            var verticalAlign = ASPx.GetCurrentStyle(container).verticalAlign;
            for (var i = 0; i < floatTextElements.length; i++)
                floatTextElements[i].style.verticalAlign = '';
            containerHeight = container.offsetHeight - containerBorderAndPaddings;
            for (var i = 0; i < floatElements.length; i++)
                adjustVerticalMarginsCore(floatElements[i], containerHeight, verticalAlign, true);
            for (var i = 0; i < flowElements.length; i++) {
                if (maxFlowHeight != maxHeight)
                    adjustVerticalMarginsCore(flowElements[i], containerHeight, verticalAlign);
            }
        }
    };
    ASPx.AdjustVerticalMargins = function (element) {
        ASPx.ClearVerticalMargins(element);
        var parentElement = element.parentNode;
        var parentHeight = parentElement.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(parentElement);
        adjustVerticalMarginsCore(element, parentHeight, ASPx.GetCurrentStyle(parentElement).verticalAlign);
    };
    function adjustVerticalMarginsCore(element, parentHeight, verticalAlign, toBottom) {
        var marginTop;
        if (verticalAlign == "top")
            marginTop = 0;
        else if (verticalAlign == "bottom")
            marginTop = parentHeight - element.offsetHeight;
        else
            marginTop = (parentHeight - element.offsetHeight) / 2;
        if (marginTop !== 0) {
            var marginAttr = (toBottom ? Math.ceil(marginTop) : Math.floor(marginTop)) + "px";
            element.style.marginTop = marginAttr;
        }
    }
    ASPx.ClearVerticalMargins = function (element) {
        element.style.marginTop = "";
        element.style.marginBottom = "";
    };
    ASPx.AdjustHeightInContainer = function (container) {
        var height = container.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(container);
        for (var i = 0; i < container.childNodes.length; i++) {
            var element = container.childNodes[i];
            if (!element.offsetHeight) continue;
            ASPx.ClearHeight(element);
        }
        var elements = [];
        var childrenHeight = 0;
        for (var i = 0; i < container.childNodes.length; i++) {
            var element = container.childNodes[i];
            if (!element.offsetHeight) continue;
            childrenHeight += element.offsetHeight + ASPx.GetTopBottomMargins(element);
            elements.push(element);
        }
        if (elements.length > 0 && childrenHeight < height) {
            var correctedHeight = 0;
            for (var i = 0; i < elements.length; i++) {
                var elementHeight = 0;
                if (i < elements.length - 1) {
                    var elementHeight = Math.floor(height / elements.length);
                    correctedHeight += elementHeight;
                }
                else {
                    var elementHeight = height - correctedHeight;
                    if (elementHeight < 0) elementHeight = 0;
                }
                adjustHeightCore(elements[i], elementHeight);
            }
        }
    };
    ASPx.AdjustHeight = function (element) {
        ASPx.ClearHeight(element);
        var parentElement = element.parentNode;
        var height = parentElement.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(parentElement);
        adjustHeightCore(element, height);
    };
    function adjustHeightCore(element, height) {
        var height = height - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element);
        if (height < 0) height = 0;
        element.style.height = height + "px";
    }
    ASPx.ClearHeight = function (element) {
        element.style.height = "";
    };
    ASPx.ShrinkWrappedTextInContainer = function (container) {
        if (!container) return;
        for (var i = 0; i < container.childNodes.length; i++) {
            var child = container.childNodes[i];
            if (child.style && ASPx.IsTextWrapped(child)) {
                Attr.ChangeStyleAttribute(child, "width", "1px");
                child.shrinkedTextContainer = true;
            }
        }
    };
    ASPx.AdjustWrappedTextInContainer = function (container) {
        if (!container) return;
        var textContainer, leftWidth = 0, rightWidth = 0;
        for (var i = 0; i < container.childNodes.length; i++) {
            var child = container.childNodes[i];
            if (child.tagName === "BR")
                return;
            if (!child.tagName)
                continue;
            if (child.tagName !== "IMG") {
                textContainer = child;
                if (ASPx.IsTextWrapped(textContainer)) {
                    if (!textContainer.shrinkedTextContainer)
                        textContainer.style.width = "";
                    textContainer.style.marginRight = "";
                }
            }
            else {
                if (child.offsetWidth === 0)
                    Evt.AttachEventToElement(child, "load", function (evt) { ASPx.AdjustWrappedTextInContainer(container); });
                else {
                    var width = child.offsetWidth + ASPx.GetLeftRightMargins(child);
                    if (textContainer)
                        rightWidth += width;
                    else
                        leftWidth += width;
                }
            }
        }
        if (textContainer && ASPx.IsTextWrapped(textContainer)) {
            var containerWidth = container.offsetWidth - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(container);
            if (textContainer.shrinkedTextContainer) {
                Attr.RestoreStyleAttribute(textContainer, "width");
                Attr.ChangeStyleAttribute(container, "width", containerWidth + "px");
            }
            if (textContainer.offsetWidth + leftWidth + rightWidth >= containerWidth) {
                if (rightWidth > 0 && !textContainer.shrinkedTextContainer)
                    textContainer.style.width = (containerWidth - rightWidth) + "px";
                else if (leftWidth > 0) {
                    if (ASPx.IsElementRightToLeft(container))
                        textContainer.style.marginLeft = leftWidth + "px";
                    else
                        textContainer.style.marginRight = leftWidth + "px";
                }
            }
        }
    };
    ASPx.IsTextWrapped = function (element) {
        return element && ASPx.GetCurrentStyle(element).whiteSpace !== "nowrap";
    };
    ASPx.IsValidPosition = function (pos) {
        return pos != ASPx.InvalidPosition && pos != -ASPx.InvalidPosition;
    };
    ASPx.getSpriteMainElement = function (element) {
        var cssClassMarker = "dx-acc";
        if (ASPx.ElementContainsCssClass(element, cssClassMarker))
            return element;
        if (element.parentNode && ASPx.ElementContainsCssClass(element.parentNode, cssClassMarker))
            return element.parentNode;
        return element;
    };
    ASPx.GetAbsoluteX = function (curEl) {
        return ASPx.GetAbsolutePositionX(curEl);
    };
    ASPx.GetAbsoluteY = function (curEl) {
        return ASPx.GetAbsolutePositionY(curEl);
    };
    ASPx.SetAbsoluteX = function (element, x) {
        element.style.left = ASPx.PrepareClientPosForElement(x, element, true) + "px";
    };
    ASPx.SetAbsoluteY = function (element, y) {
        element.style.top = ASPx.PrepareClientPosForElement(y, element, false) + "px";
    };
    ASPx.GetAbsolutePositionX = function (element) {
        if (Browser.IE)
            return getAbsolutePositionX_IE(element);
        else if (Browser.Firefox && Browser.Version >= 3)
            return getAbsolutePositionX_FF3(element);
        else if (Browser.Opera)
            return getAbsolutePositionX_Opera(element);
        else if (Browser.NetscapeFamily && (!Browser.Firefox || Browser.Version < 3))
            return getAbsolutePositionX_NS(element);
        else if (Browser.WebKitFamily && Browser.WebKitTouchUI)
            return getAbsolutePositionX_Opera(element);
        else if (Browser.WebKitFamily || Browser.Edge)
            return getAbsolutePositionX_FF3(element);
        else
            return getAbsolutePositionX_Other(element);
    };
    function getAbsolutePositionX_Opera(curEl) {
        var isFirstCycle = true;
        var pos = getAbsoluteScrollOffset_OperaFF(curEl, true);
        while (curEl != null) {
            pos += curEl.offsetLeft;
            if (!isFirstCycle)
                pos -= curEl.scrollLeft;
            curEl = curEl.offsetParent;
            isFirstCycle = false;
        }
        pos += document.body.scrollLeft;
        return pos;
    }
    function getAbsolutePositionX_IE(element) {
        if (element == null || Browser.IE && element.parentNode == null) return 0;
        return element.getBoundingClientRect().left + ASPx.GetDocumentScrollLeft();
    }
    function getAbsolutePositionX_FF3(element) {
        if (element == null) return 0;
        var x = element.getBoundingClientRect().left + ASPx.GetDocumentScrollLeft();
        return Math.round(x);
    }
    function getAbsolutePositionX_NS(curEl) {
        var pos = getAbsoluteScrollOffset_OperaFF(curEl, true);
        var isFirstCycle = true;
        while (curEl != null) {
            pos += curEl.offsetLeft;
            if (!isFirstCycle && curEl.offsetParent != null)
                pos -= curEl.scrollLeft;
            if (!isFirstCycle && Browser.Firefox) {
                var style = ASPx.GetCurrentStyle(curEl);
                if (curEl.tagName == "DIV" && style.overflow != "visible")
                    pos += ASPx.PxToInt(style.borderLeftWidth);
            }
            isFirstCycle = false;
            curEl = curEl.offsetParent;
        }
        return pos;
    }
    function getAbsolutePositionX_Safari(curEl) {
        var pos = getAbsoluteScrollOffset_WebKit(curEl, true);
        var isSafariVerNonLessThan3OrChrome = Browser.Safari && Browser.Version >= 3 || Browser.Chrome;
        if (curEl != null) {
            var isFirstCycle = true;
            if (isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
                pos += curEl.offsetLeft;
                curEl = curEl.offsetParent;
                isFirstCycle = false;
            }
            var hasNonStaticElement = false;
            while (curEl != null) {
                pos += curEl.offsetLeft;
                var style = ASPx.GetCurrentStyle(curEl);
                var isNonStatic = style.position !== "" && style.position !== "static";
                if (isNonStatic)
                    hasNonStaticElement = true;
                var safariDisplayTable = Browser.Safari && Browser.Version >= 8 && style.display === "table";
                var posDiv = curEl.tagName == "DIV" && isNonStatic && !safariDisplayTable;
                if (!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
                    pos += curEl.clientLeft;
                isFirstCycle = false;
                curEl = curEl.offsetParent;
            }
            if (!hasNonStaticElement && (document.documentElement.style.position === "" || document.documentElement.style.position === "static"))
                pos += document.documentElement.offsetLeft;
        }
        return pos;
    }
    function getAbsolutePositionX_Other(curEl) {
        var pos = 0;
        var isFirstCycle = true;
        while (curEl != null) {
            pos += curEl.offsetLeft;
            if (!isFirstCycle && curEl.offsetParent != null)
                pos -= curEl.scrollLeft;
            isFirstCycle = false;
            curEl = curEl.offsetParent;
        }
        return pos;
    }
    ASPx.GetAbsolutePositionY = function (element) {
        if (Browser.IE)
            return getAbsolutePositionY_IE(element);
        else if (Browser.Firefox && Browser.Version >= 3)
            return getAbsolutePositionY_FF3(element);
        else if (Browser.Opera)
            return getAbsolutePositionY_Opera(element);
        else if (Browser.NetscapeFamily && (!Browser.Firefox || Browser.Version < 3))
            return getAbsolutePositionY_NS(element);
        else if (Browser.WebKitFamily && Browser.WebKitTouchUI)
            return getAbsolutePositionY_Opera(element);
        else if (Browser.WebKitFamily || Browser.Edge)
            return getAbsolutePositionY_FF3(element);
        else
            return getAbsolutePositionY_Other(element);
    };
    function getAbsolutePositionY_Opera(curEl) {
        var isFirstCycle = true;
        if (curEl && curEl.tagName == "TR" && curEl.cells.length > 0)
            curEl = curEl.cells[0];
        var pos = getAbsoluteScrollOffset_OperaFF(curEl, false);
        while (curEl != null) {
            pos += curEl.offsetTop;
            if (!isFirstCycle)
                pos -= curEl.scrollTop;
            curEl = curEl.offsetParent;
            isFirstCycle = false;
        }
        pos += document.body.scrollTop;
        return pos;
    }
    function getAbsolutePositionY_IE(element) {
        if (element == null || Browser.IE && element.parentNode == null) return 0;
        return element.getBoundingClientRect().top + ASPx.GetDocumentScrollTop();
    }
    function getAbsolutePositionY_FF3(element) {
        if (element == null) return 0;
        var y = element.getBoundingClientRect().top + ASPx.GetDocumentScrollTop();
        return Math.round(y);
    }
    function getAbsolutePositionY_NS(curEl) {
        var pos = getAbsoluteScrollOffset_OperaFF(curEl, false);
        var isFirstCycle = true;
        while (curEl != null) {
            pos += curEl.offsetTop;
            if (!isFirstCycle && curEl.offsetParent != null)
                pos -= curEl.scrollTop;
            if (!isFirstCycle && Browser.Firefox) {
                var style = ASPx.GetCurrentStyle(curEl);
                if (curEl.tagName == "DIV" && style.overflow != "visible")
                    pos += ASPx.PxToInt(style.borderTopWidth);
            }
            isFirstCycle = false;
            curEl = curEl.offsetParent;
        }
        return pos;
    }
    var WebKit3TDRealInfo = {
        GetOffsetTop: function (tdElement) {
            switch (ASPx.GetCurrentStyle(tdElement).verticalAlign) {
                case "middle":
                    return Math.round(tdElement.offsetTop - (tdElement.offsetHeight - tdElement.clientHeight) / 2 + tdElement.clientTop);
                case "bottom":
                    return tdElement.offsetTop - tdElement.offsetHeight + tdElement.clientHeight + tdElement.clientTop;
            }
            return tdElement.offsetTop;
        },
        GetClientHeight: function (tdElement) {
            var valign = ASPx.GetCurrentStyle(tdElement).verticalAlign;
            switch (valign) {
                case "middle":
                    return tdElement.clientHeight + tdElement.offsetTop * 2;
                case "top":
                    return tdElement.offsetHeight - tdElement.clientTop * 2;
                case "bottom":
                    return tdElement.clientHeight + tdElement.offsetTop;
            }
            return tdElement.clientHeight;
        }
    };
    function getAbsolutePositionY_Safari(curEl) {
        var pos = getAbsoluteScrollOffset_WebKit(curEl, false);
        var isSafariVerNonLessThan3OrChrome = Browser.Safari && Browser.Version >= 3 || Browser.Chrome;
        if (curEl != null) {
            var isFirstCycle = true;
            if (isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
                pos += WebKit3TDRealInfo.GetOffsetTop(curEl);
                curEl = curEl.offsetParent;
                isFirstCycle = false;
            }
            var hasNonStaticElement = false;
            while (curEl != null) {
                pos += curEl.offsetTop;
                var style = ASPx.GetCurrentStyle(curEl);
                var isNonStatic = style.position !== "" && style.position !== "static";
                if (isNonStatic)
                    hasNonStaticElement = true;
                var safariDisplayTable = Browser.Safari && Browser.Version >= 8 && style.display === "table";
                var posDiv = curEl.tagName == "DIV" && isNonStatic && !safariDisplayTable;
                if (!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
                    pos += curEl.clientTop;
                isFirstCycle = false;
                curEl = curEl.offsetParent;
            }
            if (!hasNonStaticElement && (document.documentElement.style.position === "" || document.documentElement.style.position === "static"))
                pos += document.documentElement.offsetTop;
        }
        return pos;
    }
    function getAbsoluteScrollOffset_OperaFF(curEl, isX) {
        var pos = 0;
        var isFirstCycle = true;
        while (curEl != null) {
            if (curEl.tagName == "BODY")
                break;
            var style = ASPx.GetCurrentStyle(curEl);
            if (style.position == "absolute")
                break;
            if (!isFirstCycle && curEl.tagName == "DIV" && (style.position == "" || style.position == "static"))
                pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
            curEl = curEl.parentNode;
            isFirstCycle = false;
        }
        return pos;
    }
    function getAbsoluteScrollOffset_WebKit(curEl, isX) {
        var pos = 0;
        var isFirstCycle = true;
        var step = 0;
        var absoluteWasFoundAtStep = -1;
        var isThereFixedParent = false;
        while (curEl != null) {
            if (curEl.tagName == "BODY")
                break;
            var style = ASPx.GetCurrentStyle(curEl);
            var positionIsDefault = style.position == "" || style.position == "static";
            var absoluteWasFoundAtPreviousStep = absoluteWasFoundAtStep >= 0 && absoluteWasFoundAtStep < step;
            var canHaveScrolls = curEl.tagName == "DIV" || curEl.tagName == "SECTION" || curEl.tagName == "FORM";
            if (!isFirstCycle && canHaveScrolls && (!positionIsDefault || !absoluteWasFoundAtPreviousStep))
                pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
            if (style.position == "absolute")
                absoluteWasFoundAtStep = step;
            else if (style.position == "relative")
                absoluteWasFoundAtStep = -1;
            else if (style.position == "fixed")
                isThereFixedParent = true;
            curEl = curEl.parentNode;
            isFirstCycle = false;
            step++;
        }
        if (isThereFixedParent)
            pos += isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop();
        return pos;
    }
    function getAbsolutePositionY_Other(curEl) {
        var pos = 0;
        var isFirstCycle = true;
        while (curEl != null) {
            pos += curEl.offsetTop;
            if (!isFirstCycle && curEl.offsetParent != null)
                pos -= curEl.scrollTop;
            isFirstCycle = false;
            curEl = curEl.offsetParent;
        }
        return pos;
    }
    function createElementMock(element) {
        var div = document.createElement('DIV');
        div.style.top = "0px";
        div.style.left = "0px";
        div.visibility = "hidden";
        div.style.position = ASPx.GetCurrentStyle(element).position;
        return div;
    }
    ASPx.PrepareClientPosElementForOtherParent = function (pos, element, otherParent, isX) {
        if (element.parentNode == otherParent)
            return ASPx.PrepareClientPosForElement(pos, element, isX);
        var elementMock = createElementMock(element);
        otherParent.appendChild(elementMock);
        var preparedPos = ASPx.PrepareClientPosForElement(pos, elementMock, isX);
        otherParent.removeChild(elementMock);
        return preparedPos;
    };
    ASPx.PrepareClientPosForElement = function (pos, element, isX) {
        pos -= ASPx.GetPositionElementOffset(element, isX);
        return pos;
    };
    function getExperimentalPositionOffset(element, isX) {
        var div = createElementMock(element);
        if (div.style.position == "static")
            div.style.position = "absolute";
        element.parentNode.appendChild(div);
        var realPos = isX ? ASPx.GetAbsoluteX(div) : ASPx.GetAbsoluteY(div);
        element.parentNode.removeChild(div);
        return Math.round(realPos);
    }
    ASPx.GetPositionElementOffset = function (element, isX) {
        return getExperimentalPositionOffset(element, isX);
    };
    function getPositionElementOffsetCore(element, isX) {
        var curEl = element.offsetParent;
        var offset = 0;
        var scroll = 0;
        var isThereFixedParent = false;
        var isFixed = false;
        var hasDisplayTableParent = false;
        var position = "";
        while (curEl != null) {
            var tagName = curEl.tagName;
            if (tagName == "HTML") {
                break;
            }
            if (tagName == "BODY") {
                if (!Browser.Opera && !Browser.Chrome && !Browser.Edge) {
                    var style = ASPx.GetCurrentStyle(curEl);
                    if (style.position != "" && style.position != "static") {
                        offset += ASPx.PxToInt(isX ? style.left : style.top);
                        offset += ASPx.PxToInt(isX ? style.marginLeft : style.marginTop);
                    }
                }
                break;
            }
            var style = ASPx.GetCurrentStyle(curEl);
            isFixed = style.position == "fixed";
            if (isFixed) {
                isThereFixedParent = true;
                if (Browser.IE)
                    return getExperimentalPositionOffset(element, isX);
            }
            hasDisplayTableParent = style.display == "table" && (style.position == "absolute" || style.position == "relative");
            if (hasDisplayTableParent && Browser.IE)
                return getExperimentalPositionOffset(element, isX);
            if (style.position == "absolute" || isFixed || style.position == "relative") {
                offset += isX ? curEl.offsetLeft : curEl.offsetTop;
                offset += ASPx.PxToInt(isX ? style.borderLeftWidth : style.borderTopWidth);
            }
            if (style.position == "relative")
                scroll += getElementChainScroll(curEl, curEl.offsetParent, isX);
            scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
            curEl = curEl.offsetParent;
        }
        offset -= scroll;
        if ((Browser.IE || Browser.Firefox && Browser.Version >= 3 || Browser.WebKitFamily || Browser.Edge) && isThereFixedParent)
            offset += isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop();
        return offset;
    }
    function getElementChainScroll(startElement, endElement, isX) {
        var curEl = startElement.parentNode;
        var scroll = 0;
        while (curEl != endElement) {
            scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
            curEl = curEl.parentNode;
        }
        return scroll;
    }
    ASPx.GetSizeOfText = function (text, textCss) {
        var testContainer = document.createElement("tester");
        var defaultLineHeight = ASPx.Browser.Firefox ? "1" : "";
        testContainer.style.fontSize = textCss.fontSize;
        testContainer.style.fontFamily = textCss.fontFamily;
        testContainer.style.fontWeight = textCss.fontWeight;
        testContainer.style.letterSpacing = textCss.letterSpacing;
        testContainer.style.lineHeight = textCss.lineHeight || defaultLineHeight;
        testContainer.style.position = "absolute";
        testContainer.style.top = ASPx.InvalidPosition + "px";
        testContainer.style.left = ASPx.InvalidPosition + "px";
        testContainer.style.width = "auto";
        testContainer.style.whiteSpace = "nowrap";
        testContainer.appendChild(document.createTextNode(text));
        var testElement = document.body.appendChild(testContainer);
        var size = {
            "width": testElement.offsetWidth,
            "height": testElement.offsetHeight
        };
        document.body.removeChild(testElement);
        return size;
    };
    ASPx.PointToPixel = function (points, addPx) {
        var result = 0;
        try {
            var indexOfPt = points.toLowerCase().indexOf("pt");
            if (indexOfPt > -1)
                result = parseInt(points.substr(0, indexOfPt)) * 96 / 72;
            else
                result = parseInt(points) * 96 / 72;
            if (addPx)
                result = result + "px";
        } catch (e) { }
        return result;
    };
    ASPx.PixelToPoint = function (pixels, addPt) {
        var result = 0;
        try {
            var indexOfPx = pixels.toLowerCase().indexOf("px");
            if (indexOfPx > -1)
                result = parseInt(pixels.substr(0, indexOfPx)) * 72 / 96;
            else
                result = parseInt(pixels) * 72 / 96;
            if (addPt)
                result = result + "pt";
        } catch (e) { }
        return result;
    };
    ASPx.PxToInt = function (px) {
        return pxToNumber(px, parseInt);
    };
    ASPx.PxToFloat = function (px) {
        return pxToNumber(px, parseFloat);
    };
    function pxToNumber(px, parseFunction) {
        var result = 0;
        if (px != null && px != "") {
            try {
                var indexOfPx = px.indexOf("px");
                if (indexOfPx > -1)
                    result = parseFunction(px.substr(0, indexOfPx));
            } catch (e) { }
        }
        return result;
    }
    ASPx.PercentageToFloat = function (perc) {
        var result = 0;
        if (perc != null && perc != "") {
            try {
                var indexOfPerc = perc.indexOf("%");
                if (indexOfPerc > -1)
                    result = parseFloat(perc.substr(0, indexOfPerc)) / 100;
            } catch (e) { }
        }
        return result;
    };
    ASPx.CreateGuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
    };
    ASPx.GetLeftRightBordersAndPaddingsSummaryValue = function (element, currentStyle) {
        return ASPx.GetLeftRightPaddings(element, currentStyle) + ASPx.GetHorizontalBordersWidth(element, currentStyle);
    };
    ASPx.GetTopBottomBordersAndPaddingsSummaryValue = function (element, currentStyle) {
        return ASPx.GetTopBottomPaddings(element, currentStyle) + ASPx.GetVerticalBordersWidth(element, currentStyle);
    };
    ASPx.GetVerticalBordersWidth = function (element, style) {
        if (!ASPx.IsExists(style))
            style = (Browser.IE && Browser.MajorVersion != 9 && window.getComputedStyle) ? window.getComputedStyle(element) : ASPx.GetCurrentStyle(element);
        var res = 0;
        if (style.borderTopStyle != "none") {
            res += ASPx.PxToFloat(style.borderTopWidth);
            if (Browser.IE && Browser.MajorVersion < 9)
                res += getIe8BorderWidthFromText(style.borderTopWidth);
        }
        if (style.borderBottomStyle != "none") {
            res += ASPx.PxToFloat(style.borderBottomWidth);
            if (Browser.IE && Browser.MajorVersion < 9)
                res += getIe8BorderWidthFromText(style.borderBottomWidth);
        }
        return res;
    };
    ASPx.GetHorizontalBordersWidth = function (element, style) {
        if (!ASPx.IsExists(style))
            style = (Browser.IE && window.getComputedStyle) ? window.getComputedStyle(element) : ASPx.GetCurrentStyle(element);
        var res = 0;
        if (style.borderLeftStyle != "none") {
            res += ASPx.PxToFloat(style.borderLeftWidth);
            if (Browser.IE && Browser.MajorVersion < 9)
                res += getIe8BorderWidthFromText(style.borderLeftWidth);
        }
        if (style.borderRightStyle != "none") {
            res += ASPx.PxToFloat(style.borderRightWidth);
            if (Browser.IE && Browser.MajorVersion < 9)
                res += getIe8BorderWidthFromText(style.borderRightWidth);
        }
        return res;
    };
    function getIe8BorderWidthFromText(textWidth) {
        var availableWidth = { "thin": 1, "medium": 3, "thick": 5 };
        var width = availableWidth[textWidth];
        return width ? width : 0;
    }
    ASPx.GetTopBottomPaddings = function (element, style) {
        var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
        return ASPx.PxToInt(currentStyle.paddingTop) + ASPx.PxToInt(currentStyle.paddingBottom);
    };
    ASPx.GetLeftRightPaddings = function (element, style) {
        var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
        return ASPx.PxToInt(currentStyle.paddingLeft) + ASPx.PxToInt(currentStyle.paddingRight);
    };
    ASPx.GetTopBottomMargins = function (element, style) {
        var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
        return ASPx.PxToInt(currentStyle.marginTop) + ASPx.PxToInt(currentStyle.marginBottom);
    };
    ASPx.GetLeftRightMargins = function (element, style) {
        var currentStyle = style ? style : ASPx.GetCurrentStyle(element);
        return ASPx.PxToInt(currentStyle.marginLeft) + ASPx.PxToInt(currentStyle.marginRight);
    };
    ASPx.GetClearClientWidth = function (element) {
        return element.offsetWidth - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element);
    };
    ASPx.GetClearClientHeight = function (element) {
        return element.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element);
    };
    ASPx.SetOffsetWidth = function (element, widthValue, currentStyle) {
        if (!ASPx.IsExists(currentStyle))
            currentStyle = ASPx.GetCurrentStyle(element);
        var value = widthValue - ASPx.PxToInt(currentStyle.marginLeft) - ASPx.PxToInt(currentStyle.marginRight);
        value -= ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
        if (value > -1)
            element.style.width = value + "px";
    };
    ASPx.SetOffsetHeight = function (element, heightValue, currentStyle) {
        if (!ASPx.IsExists(currentStyle))
            currentStyle = ASPx.GetCurrentStyle(element);
        var value = heightValue - ASPx.PxToInt(currentStyle.marginTop) - ASPx.PxToInt(currentStyle.marginBottom);
        value -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
        if (value > -1)
            element.style.height = value + "px";
    };
    ASPx.FindOffsetParent = function (element) {
        var currentElement = element.parentNode;
        while (ASPx.IsExistsElement(currentElement) && currentElement.tagName != "BODY") {
            if (currentElement.offsetWidth > 0 && currentElement.offsetHeight > 0)
                return currentElement;
            currentElement = currentElement.parentNode;
        }
        return document.body;
    };
    ASPx.GetDocumentScrollTop = function () {
        var isScrollBodyIE = Browser.IE && ASPx.GetCurrentStyle(document.body).overflow == "hidden" && document.body.scrollTop > 0;
        if (Browser.WebKitFamily || Browser.Edge || isScrollBodyIE) {
            if (Browser.MacOSMobilePlatform)
                return window.pageYOffset;
            else
                return document.body.scrollTop;
        }
        else
            return document.documentElement.scrollTop;
    };
    ASPx.SetDocumentScrollTop = function (scrollTop) {
        if (Browser.WebKitFamily || Browser.Edge) {
            if (Browser.MacOSMobilePlatform)
                window.pageYOffset = scrollTop;
            else
                document.body.scrollTop = scrollTop;
        }
        else
            document.documentElement.scrollTop = scrollTop;
    };
    ASPx.GetDocumentScrollLeft = function () {
        var isScrollBodyIE = Browser.IE && ASPx.GetCurrentStyle(document.body).overflow == "hidden" && document.body.scrollLeft > 0;
        if (Browser.WebKitFamily || Browser.Edge || isScrollBodyIE || Browser.Opera)
            return document.body.scrollLeft;
        return document.documentElement.scrollLeft;
    };
    ASPx.SetDocumentScrollLeft = function (scrollLeft) {
        if (Browser.WebKitFamily || Browser.Edge) {
            if (Browser.MacOSMobilePlatform)
                window.pageXOffset = scrollLeft;
            else
                document.body.scrollLeft = scrollLeft;
        }
        else
            document.documentElement.scrollLeft = scrollLeft;
    };
    ASPx.GetDocumentClientWidth = function () {
        if (document.documentElement.clientWidth == 0)
            return document.body.clientWidth;
        else
            return document.documentElement.clientWidth;
    };
    ASPx.GetDocumentClientHeight = function () {
        if (Browser.Firefox && window.innerHeight - document.documentElement.clientHeight > ASPx.GetVerticalScrollBarWidth()) {
            return window.innerHeight;
        } else if (Browser.Opera && Browser.Version < 9.6 || document.documentElement.clientHeight == 0) {
            return document.body.clientHeight;
        }
        return document.documentElement.clientHeight;
    };
    ASPx.GetDocumentWidth = function () {
        var bodyWidth = document.body.offsetWidth;
        var docWidth = Browser.IE ? document.documentElement.clientWidth : document.documentElement.offsetWidth;
        var bodyScrollWidth = document.body.scrollWidth;
        var docScrollWidth = document.documentElement.scrollWidth;
        return getMaxDimensionOf(bodyWidth, docWidth, bodyScrollWidth, docScrollWidth);
    };
    ASPx.GetDocumentHeight = function () {
        var bodyHeight = document.body.offsetHeight;
        var docHeight = Browser.IE ? document.documentElement.clientHeight : document.documentElement.offsetHeight;
        var bodyScrollHeight = document.body.scrollHeight;
        var docScrollHeight = document.documentElement.scrollHeight;
        var maxHeight = getMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight, docScrollHeight);
        if (Browser.Opera && Browser.Version >= 9.6) {
            if (Browser.Version < 10)
                maxHeight = getMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight);
            var visibleHeightOfDocument = document.documentElement.clientHeight;
            if (maxHeight > visibleHeightOfDocument)
                maxHeight = getMaxDimensionOf(window.outerHeight, maxHeight);
            else
                maxHeight = document.documentElement.clientHeight;
            return maxHeight;
        }
        return maxHeight;
    };
    ASPx.GetDocumentMaxClientWidth = function () {
        var bodyWidth = document.body.offsetWidth;
        var docWidth = document.documentElement.offsetWidth;
        var docClientWidth = document.documentElement.clientWidth;
        return getMaxDimensionOf(bodyWidth, docWidth, docClientWidth);
    };
    ASPx.GetDocumentMaxClientHeight = function () {
        var bodyHeight = document.body.offsetHeight;
        var docHeight = document.documentElement.offsetHeight;
        var docClientHeight = document.documentElement.clientHeight;
        return getMaxDimensionOf(bodyHeight, docHeight, docClientHeight);
    };
    ASPx.verticalScrollIsNotHidden = null;
    ASPx.horizontalScrollIsNotHidden = null;
    ASPx.GetVerticalScrollIsNotHidden = function () {
        if (!ASPx.IsExists(ASPx.verticalScrollIsNotHidden))
            ASPx.verticalScrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowY !== "hidden"
                && ASPx.GetCurrentStyle(document.documentElement).overflowY !== "hidden";
        return ASPx.verticalScrollIsNotHidden;
    };
    ASPx.GetHorizontalScrollIsNotHidden = function () {
        if (!ASPx.IsExists(ASPx.horizontalScrollIsNotHidden))
            ASPx.horizontalScrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowX !== "hidden"
                && ASPx.GetCurrentStyle(document.documentElement).overflowX !== "hidden";
        return ASPx.horizontalScrollIsNotHidden;
    };
    ASPx.GetCurrentDocumentWidth = function () {
        var result = ASPx.GetDocumentClientWidth();
        if (!ASPx.Browser.Safari && ASPx.GetVerticalScrollIsNotHidden() && ASPx.GetDocumentHeight() > ASPx.GetDocumentClientHeight())
            result += ASPx.GetVerticalScrollBarWidth();
        return result;
    };
    ASPx.GetCurrentDocumentHeight = function () {
        var result = ASPx.GetDocumentClientHeight();
        if (!ASPx.Browser.Safari && ASPx.GetHorizontalScrollIsNotHidden() && ASPx.GetDocumentWidth() > ASPx.GetDocumentClientWidth())
            result += ASPx.GetVerticalScrollBarWidth();
        return result;
    };
    function getMaxDimensionOf() {
        var max = ASPx.InvalidDimension;
        for (var i = 0; i < arguments.length; i++) {
            if (max < arguments[i])
                max = arguments[i];
        }
        return max;
    }
    ASPx.GetClientLeft = function (element) {
        return ASPx.IsExists(element.clientLeft) ? element.clientLeft : (element.offsetWidth - element.clientWidth) / 2;
    };
    ASPx.GetClientTop = function (element) {
        return ASPx.IsExists(element.clientTop) ? element.clientTop : (element.offsetHeight - element.clientHeight) / 2;
    };
    ASPx.SetStyles = function (element, styles, makeImportant) {
        if (ASPx.IsExists(styles.cssText))
            element.style.cssText = styles.cssText;
        if (ASPx.IsExists(styles.className))
            element.className = styles.className;
        for (var property in styles) {
            if (!styles.hasOwnProperty(property))
                continue;
            var value = styles[property];
            switch (property) {
                case "cssText":
                case "className":
                    break;
                case "float":
                    ASPx.SetElementFloat(element, value);
                    break;
                case "opacity":
                    ASPx.SetElementOpacity(element, value);
                    break;
                case "zIndex":
                    ASPx.SetStylesCore(element, property, value, makeImportant);
                    break;
                case "fontWeight":
                    if (ASPx.Browser.IE && ASPx.Browser.Version < 9 && typeof (styles[property]) == "number")
                        value = styles[property].toString();
                default:
                    ASPx.SetStylesCore(element, property, value + (typeof (value) == "number" ? "px" : ""), makeImportant);
            }
        }
    };
    ASPx.SetStylesCore = function (element, property, value, makeImportant) {
        if (makeImportant) {
            var index = property.search("[A-Z]");
            if (index != -1)
                property = property.replace(property.charAt(index), "-" + property.charAt(index).toLowerCase());
            if (element.style.setProperty)
                element.style.setProperty(property, value, "important");
            else
                element.style.cssText += ";" + property + ":" + value + "!important";
        }
        else
            element.style[property] = value;
    };
    ASPx.RemoveBordersAndShadows = function (el) {
        if (!el || !el.style)
            return;
        el.style.borderWidth = 0;
        if (ASPx.IsExists(el.style.boxShadow))
            el.style.boxShadow = "none";
        else if (ASPx.IsExists(el.style.MozBoxShadow))
            el.style.MozBoxShadow = "none";
        else if (ASPx.IsExists(el.style.webkitBoxShadow))
            el.style.webkitBoxShadow = "none";
    };
    ASPx.GetCellSpacing = function (element) {
        var val = parseInt(element.cellSpacing);
        if (!isNaN(val)) return val;
        val = parseInt(ASPx.GetCurrentStyle(element).borderSpacing);
        if (!isNaN(val)) return val;
        return 0;
    };
    ASPx.GetInnerScrollPositions = function (element) {
        var scrolls = [];
        getInnerScrollPositionsCore(element, scrolls);
        return scrolls;
    };
    function getInnerScrollPositionsCore(element, scrolls) {
        for (var child = element.firstChild; child; child = child.nextSibling) {
            var scrollTop = child.scrollTop,
                scrollLeft = child.scrollLeft;
            if (scrollTop > 0 || scrollLeft > 0)
                scrolls.push([child, scrollTop, scrollLeft]);
            getInnerScrollPositionsCore(child, scrolls);
        }
    }
    ASPx.RestoreInnerScrollPositions = function (scrolls) {
        for (var i = 0, scrollArr; scrollArr = scrolls[i]; i++) {
            if (scrollArr[1] > 0)
                scrollArr[0].scrollTop = scrollArr[1];
            if (scrollArr[2] > 0)
                scrollArr[0].scrollLeft = scrollArr[2];
        }
    };
    ASPx.GetOuterScrollPosition = function (element) {
        while (element.tagName !== "BODY") {
            var scrollTop = element.scrollTop,
                scrollLeft = element.scrollLeft;
            if (scrollTop > 0 || scrollLeft > 0) {
                return {
                    scrollTop: scrollTop,
                    scrollLeft: scrollLeft,
                    element: element
                };
            }
            element = element.parentNode;
        }
        return {
            scrollTop: ASPx.GetDocumentScrollTop(),
            scrollLeft: ASPx.GetDocumentScrollLeft()
        };
    };
    ASPx.RestoreOuterScrollPosition = function (scrollInfo) {
        if (scrollInfo.element) {
            if (scrollInfo.scrollTop > 0)
                scrollInfo.element.scrollTop = scrollInfo.scrollTop;
            if (scrollInfo.scrollLeft > 0)
                scrollInfo.element.scrollLeft = scrollInfo.scrollLeft;
        }
        else {
            if (scrollInfo.scrollTop > 0)
                ASPx.SetDocumentScrollTop(scrollInfo.scrollTop);
            if (scrollInfo.scrollLeft > 0)
                ASPx.SetDocumentScrollLeft(scrollInfo.scrollLeft);
        }
    };
    ASPx.ChangeElementContainer = function (element, container, savePreviousContainer) {
        if (element.parentNode != container) {
            var parentNode = element.parentNode;
            parentNode.removeChild(element);
            container.appendChild(element);
            if (savePreviousContainer)
                element.previousContainer = parentNode;
        }
    };
    ASPx.RestoreElementContainer = function (element) {
        if (element.previousContainer) {
            ASPx.ChangeElementContainer(element, element.previousContainer, false);
            element.previousContainer = null;
        }
    };
    ASPx.MoveChildrenToElement = function (sourceElement, destinationElement) {
        while (sourceElement.childNodes.length > 0)
            destinationElement.appendChild(sourceElement.childNodes[0]);
    };
    ASPx.GetScriptCode = function (script) {
        var useFirstChildElement = Browser.Chrome && Browser.Version < 11 || Browser.Safari && Browser.Version < 5;
        var text = useFirstChildElement ? script.firstChild.data : script.text;
        var comment = "<!--";
        var pos = text.indexOf(comment);
        if (pos > -1)
            text = text.substr(pos + comment.length);
        return text;
    };
    ASPx.AppendScript = function (script) {
        var parent = document.getElementsByTagName("head")[0];
        if (!parent)
            parent = document.body;
        if (parent)
            parent.appendChild(script);
    };
    function getFrame(frames, name) {
        if (frames[name])
            return frames[name];
        for (var i = 0; i < frames.length; i++) {
            try {
                var frame = frames[i];
                if (frame.name == name)
                    return frame;
                frame = getFrame(frame.frames, name);
                if (frame != null)
                    return frame;
            } catch (e) {
            }
        }
        return null;
    }
    ASPx.IsValidElement = function (element) {
        if (!element)
            return false;
        if (!(Browser.Firefox && Browser.Version < 4)) {
            if (element.ownerDocument && element.ownerDocument.body && element.ownerDocument.body.compareDocumentPosition)
                return element.ownerDocument.body.compareDocumentPosition(element) % 2 === 0;
        }
        if (!Browser.Opera && !(Browser.IE && Browser.Version < 9) && element.offsetParent && element.parentNode.tagName)
            return true;
        while (element != null) {
            if (element.tagName == "BODY")
                return true;
            element = element.parentNode;
        }
        return false;
    };
    ASPx.IsValidElements = function (elements) {
        if (!elements)
            return false;
        for (var i = 0; i < elements.length; i++) {
            if (elements[i] && !ASPx.IsValidElement(elements[i]))
                return false;
        }
        return true;
    };
    ASPx.IsExistsElement = function (element) {
        return element && ASPx.IsValidElement(element);
    };
    ASPx.CreateHtmlElementFromString = function (str) {
        var dummy = ASPx.CreateHtmlElement();
        dummy.innerHTML = str;
        return dummy.firstChild;
    };
    ASPx.CreateHtmlElement = function (tagName, styles) {
        var element = document.createElement(tagName || "DIV");
        if (styles)
            ASPx.SetStyles(element, styles);
        return element;
    };
    ASPx.RestoreElementOriginalWidth = function (element) {
        if (!ASPx.IsExistsElement(element))
            return;
        element.style.width = element.dxOrigWidth = ASPx.GetElementOriginalWidth(element);
    };
    ASPx.GetElementOriginalWidth = function (element) {
        if (!ASPx.IsExistsElement(element))
            return null;
        var width;
        if (!ASPx.IsExists(element.dxOrigWidth)) {
            width = String(element.style.width).length > 0
                ? element.style.width
                : element.offsetWidth + "px";
        } else {
            width = element.dxOrigWidth;
        }
        return width;
    };
    ASPx.DropElementOriginalWidth = function (element) {
        if (ASPx.IsExists(element.dxOrigWidth))
            element.dxOrigWidth = null;
    };
    ASPx.GetObjectKeys = function (obj) {
        if (!obj) return [];
        if (Object.keys)
            return Object.keys(obj);
        var keys = [];
        for (var key in obj) {
            if (obj.hasOwnProperty(key))
                keys.push(key);
        }
        return keys;
    };
    ASPx.ShowErrorAlert = function (message) {
        message = ASPx.Str.DecodeHtmlViaTextArea(message);
        if (ASPx.IsExists(message) && message !== "")
            alert(message);
    };
    ASPx.ShowKBErrorMessage = function (text, kbid) {
        ASPx.ShowErrorMessage(text + "https://www.devexpress.com/kbid=" + kbid + ".");
    };
    ASPx.ShowErrorMessage = function (errorMessage) {
        var console = window.console;
        if (!console || !ASPx.IsFunction(console.error))
            return;
        console.error(errorMessage);
    };
    ASPx.IsInteractiveControl = function (element, extremeParent) {
        return Data.ArrayIndexOf(["A", "INPUT", "SELECT", "OPTION", "TEXTAREA", "BUTTON", "IFRAME"], element.tagName) > -1;
    };
    ASPx.IsUrlContainsClientScript = function (url) {
        return url.toLowerCase().indexOf("javascript:") !== -1;
    };
    Function.prototype.aspxBind = function (scope) {
        var func = this;
        return function () {
            return func.apply(scope, arguments);
        };
    };
    var FilteringUtils = {};
    FilteringUtils.EventKeyCodeChangesTheInput = function (evt) {
        if (ASPx.IsPasteShortcut(evt))
            return true;
        else if (evt.ctrlKey && !evt.altKey)
            return false;
        if (ASPx.Browser.AndroidMobilePlatform || ASPx.Browser.MacOSMobilePlatform) return true;
        var keyCode = ASPx.Evt.GetKeyCode(evt);
        var isSystemKey = ASPx.Key.Windows <= keyCode && keyCode <= ASPx.Key.ContextMenu;
        var isFKey = ASPx.Key.F1 <= keyCode && keyCode <= 127;
        return ASPx.Key.Delete <= keyCode && !isSystemKey && !isFKey || keyCode == ASPx.Key.Backspace || keyCode == ASPx.Key.Space;
    };
    FilteringUtils.FormatCallbackArg = function (prefix, arg) {
        return (ASPx.IsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
    };
    ASPx.FilteringUtils = FilteringUtils;
    var FormatStringHelper = {};
    FormatStringHelper.PlaceHolderTemplateStruct = function (startIndex, length, index, placeHolderString) {
        this.startIndex = startIndex;
        this.realStartIndex = 0;
        this.length = length;
        this.realLength = 0;
        this.index = index;
        this.placeHolderString = placeHolderString;
    };
    FormatStringHelper.GetPlaceHolderTemplates = function (formatString) {
        formatString = this.CollapseDoubleBrackets(formatString);
        var templates = this.CreatePlaceHolderTemplates(formatString);
        return templates;
    };
    FormatStringHelper.CreatePlaceHolderTemplates = function (formatString) {
        var templates = [];
        var templateStrings = formatString.match(/{[^}]+}/g);
        if (templateStrings != null) {
            var pos = 0;
            for (var i = 0; i < templateStrings.length; i++) {
                var tempString = templateStrings[i];
                var startIndex = formatString.indexOf(tempString, pos);
                var length = tempString.length;
                var indexString = tempString.slice(1).match(/^[0-9]+/);
                var index = parseInt(indexString);
                templates.push(new this.PlaceHolderTemplateStruct(startIndex, length, index, tempString));
                pos = startIndex + length;
            }
        }
        return templates;
    };
    FormatStringHelper.CollapseDoubleBrackets = function (formatString) {
        formatString = this.CollapseOpenDoubleBrackets(formatString);
        formatString = this.CollapseCloseDoubleBrackets(formatString);
        return formatString;
    };
    FormatStringHelper.CollapseOpenDoubleBrackets = function (formatString) {
        return formatString.replace(/{{/g, "_");
    };
    FormatStringHelper.CollapseCloseDoubleBrackets = function (formatString) {
        while (true) {
            var index = formatString.lastIndexOf("}}");
            if (index == -1)
                break;
            else
                formatString = formatString.substr(0, index) + "_" + formatString.substr(index + 2);
        }
        return formatString;
    };
    ASPx.FormatStringHelper = FormatStringHelper;
    var StartWithFilteringUtils = {};
    StartWithFilteringUtils.HighlightSuggestedText = function (input, suggestedText, control) {
        if (this.NeedToLockAndoidKeyEvents(control))
            control.LockAndroidKeyEvents();
        var selInfo = ASPx.Selection.GetInfo(input);
        var currentTextLenght = ASPx.Str.GetCoincideCharCount(suggestedText, input.value,
            function (text, filter) {
                return text.indexOf(filter) == 0;
            });
        var suggestedTextLenght = suggestedText.length;
        var isSelected = selInfo.startPos == 0 && selInfo.endPos == currentTextLenght &&
            selInfo.endPos == suggestedTextLenght && input.value == suggestedText;
        if (!isSelected) {
            input.value = suggestedText;
            if (this.NeedToLockAndoidKeyEvents(control)) {
                window.setTimeout(function () {
                    this.SelectText(input, currentTextLenght, suggestedTextLenght);
                    control.UnlockAndroidKeyEvents();
                }.aspxBind(this), control.adroidSamsungBugTimeout);
            } else
                this.SelectText(input, currentTextLenght, suggestedTextLenght);
        }
    };
    StartWithFilteringUtils.SelectText = function (input, startPos, stopPos) {
        if (startPos < stopPos)
            ASPx.Selection.Set(input, startPos, stopPos);
    };
    StartWithFilteringUtils.RollbackOneSuggestedChar = function (input) {
        var currentText = input.value;
        var cutText = currentText.slice(0, -1);
        if (cutText != currentText)
            input.value = cutText;
    };
    StartWithFilteringUtils.NeedToLockAndoidKeyEvents = function (control) {
        return ASPx.Browser.AndroidMobilePlatform && control && control.LockAndroidKeyEvents;
    };
    ASPx.StartWithFilteringUtils = StartWithFilteringUtils;
    var ContainsFilteringUtils = {};
    ContainsFilteringUtils.ColumnSelectionStruct = function (index, startIndex, length) {
        this.index = index;
        this.length = length;
        this.startIndex = startIndex;
    };
    ContainsFilteringUtils.IsFilterCrossPlaseHolder = function (filterStartIndex, filterEndIndex, template) {
        var left = Math.max(filterStartIndex, template.realStartIndex);
        var right = Math.min(filterEndIndex, template.realStartIndex + template.realLength);
        return left < right;
    };
    ContainsFilteringUtils.GetColumnSelectionsForItem = function (itemValues, formatString, filterString) {
        if (formatString == "")
            return this.GetSelectionForSingleColumnItem(itemValues, filterString);
        var result = [];
        var formatedString = ASPx.Formatter.Format(formatString, itemValues);
        var filterStartIndex = ASPx.Str.PrepareStringForFilter(formatedString).indexOf(ASPx.Str.PrepareStringForFilter(filterString));
        if (filterStartIndex == -1) return result;
        var filterEndIndex = filterStartIndex + filterString.length;
        var templates = FormatStringHelper.GetPlaceHolderTemplates(formatString);
        this.SupplyTemplatesWithRealValues(itemValues, templates);
        for (var i = 0; i < templates.length; i++) {
            if (this.IsFilterCrossPlaseHolder(filterStartIndex, filterEndIndex, templates[i]))
                result.push(this.GetColumnSelectionsForItemValue(templates[i], filterStartIndex, filterEndIndex));
        }
        return result;
    };
    ContainsFilteringUtils.GetColumnSelectionsForItemValue = function (template, filterStartIndex, filterEndIndex) {
        var selectedTextStartIndex = filterStartIndex < template.realStartIndex ? 0 :
            filterStartIndex - template.realStartIndex;
        var selectedTextEndIndex = filterEndIndex > template.realStartIndex + template.realLength ? template.realLength :
            filterEndIndex - template.realStartIndex;
        var selectedTextLength = selectedTextEndIndex - selectedTextStartIndex;
        return new this.ColumnSelectionStruct(template.index, selectedTextStartIndex, selectedTextLength);
    };
    ContainsFilteringUtils.GetSelectionForSingleColumnItem = function (itemValues, filterString) {
        var selectedTextStartIndex = ASPx.Str.PrepareStringForFilter(itemValues[0]).indexOf(ASPx.Str.PrepareStringForFilter(filterString));
        var selectedTextLength = filterString.length;
        return [new this.ColumnSelectionStruct(0, selectedTextStartIndex, selectedTextLength)];
    };
    ContainsFilteringUtils.ResetFormatStringIndex = function (formatString, index) {
        if (index != 0)
            return formatString.replace(index.toString(), "0");
        return formatString;
    };
    ContainsFilteringUtils.SupplyTemplatesWithRealValues = function (itemValues, templates) {
        var shift = 0;
        for (var i = 0; i < templates.length; i++) {
            var formatString = this.ResetFormatStringIndex(templates[i].placeHolderString, templates[i].index);
            var currentItemValue = itemValues[templates[i].index];
            templates[i].realLength = ASPx.Formatter.Format(formatString, currentItemValue).length;
            templates[i].realStartIndex += templates[i].startIndex + shift;
            shift += templates[i].realLength - templates[i].placeHolderString.length;
        }
    };
    ContainsFilteringUtils.PrepareElementText = function (itemText) {
        return itemText ? itemText.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
    };
    ContainsFilteringUtils.UnselectContainsTextInElement = function (element, selection, highlightTagName) {
        var currentText = ASPx.Attr.GetAttribute(element, "DXText");
        if (ASPx.IsExists(currentText)) {
            currentText = ContainsFilteringUtils.PrepareElementText(currentText);
            ASPx.SetInnerHtml(element, currentText === "" ? "&nbsp;" : currentText);
        }
    };
    ContainsFilteringUtils.ReselectContainsTextInElement = function (element, selection, highlightTagName) {
        var currentText = ASPx.GetInnerText(element);
        if (!highlightTagName)
            highlightTagName = "em";
        highlightTagName = highlightTagName.toLowerCase();
        if (currentText.indexOf("</" + highlightTagName + ">") != -1)
            ContainsFilteringUtils.UnselectContainsTextInElement(element, selection, highlightTagName);
        return ContainsFilteringUtils.SelectContainsTextInElement(element, selection, highlightTagName);
    };
    ContainsFilteringUtils.SelectContainsTextInElement = function (element, selection, highlightTagName) {
        if (selection.startIndex == -1)
            return;
        var currentText = ASPx.Attr.GetAttribute(element, "DXText");
        if (!ASPx.IsExists(currentText)) ASPx.Attr.SetAttribute(element, "DXText", ASPx.GetInnerText(element));
        if (!highlightTagName)
            highlightTagName = "em";
        highlightTagName = highlightTagName.toLowerCase();
        var oldInnerText = ASPx.GetInnerText(element);
        var newInnerText = ContainsFilteringUtils.PrepareElementText(oldInnerText.substr(0, selection.startIndex)) + "<" + highlightTagName + ">" +
            oldInnerText.substr(selection.startIndex, selection.length) + "</" + highlightTagName + ">" +
            ContainsFilteringUtils.PrepareElementText(oldInnerText.substr(selection.startIndex + selection.length));
        ASPx.SetInnerHtml(element, newInnerText);
    };
    ASPx.ContainsFilteringUtils = ContainsFilteringUtils;
    ASPx.MakeEqualControlsWidth = function (name1, name2) {
        var control1 = ASPx.GetControlCollection().Get(name1);
        var control2 = ASPx.GetControlCollection().Get(name2);
        if (control1 && control2) {
            var width = Math.max(control1.GetWidth(), control2.GetWidth());
            control1.SetWidth(width);
            control2.SetWidth(width);
        }
    };
    ASPx.HighContrastForeColorHighlightColorMap = {
        "#ffff00": "#008000",
        "#00ff00": "#0000ff",
        "#ffffff": "#00838f",
        "#000000": "#a347ff"
    };
    var AccessibilityUtils = {
        isInitialized: false,
        highContrastCssClassMarker: "dxHighContrast",
        highContrastBackgroundCssClassMarker: "dxHCB",
        highContrastDefaultBackgroundColor: "#a347ff",
        highContrastThemeActive: false,
        accessibleBackgroundCssMarker: ".dx-runtime-background",
        createAccessibleBackgrounds: function (control) {
            if (!this.highContrastThemeActive || control.accessibleBackgroundsCreated || !control.accessibilityCompliant)
                return;
            var className = this.accessibleBackgroundCssMarker;
            var styleSheetRuleNames = [];
            iterateStyleSheetRules(null, function (rule) {
                var selectorTxt = rule.selectorText;
                if (selectorTxt && selectorTxt.indexOf(className) > -1)
                    styleSheetRuleNames.push(ASPx.Str.CompleteReplace(selectorTxt, className, ""));
            });
            for (var i = 0; i < styleSheetRuleNames.length; i++) {
                var name = styleSheetRuleNames[i];
                var rule = ASPx.GetStyleSheetRules(name.substring(1));
                if (rule && rule.style && rule.style.backgroundImage)
                    this.createAccessibleBackground(control.GetMainElement(), rule.style, name);
            }
            control.accessibleBackgroundsCreated = true;
        },
        createAccessibleBackground: function (container, style, selector) {
            if (!container)
                return;
            var backgroundUrl = style.backgroundImage.substring(5, style.backgroundImage.length - 2);
            var elements = container.querySelectorAll(selector);
            var accessibleBackgroundClassName = "dx-acc-bi";
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                if (ASPx.ElementHasCssClass(element, accessibleBackgroundClassName))
                    continue;
                var image = null;
                if (element.tagName !== "IMG") {
                    ASPx.AddClassNameToElement(element, accessibleBackgroundClassName);
                    image = element.ownerDocument.createElement("IMG");
                    ASPx.SetStyles(image, { width: "100%", height: "100%" });
                    if (element.firstChild)
                        element.insertBefore(image, element.firstChild);
                    else
                        element.appendChild(image);
                } else
                    image = element;
                image.src = backgroundUrl;
            }
        },
        createHighContrastBackgroundStyle: function () {
            var style = document.createElement('style');
            style.type = 'text/css';
            var styleContent = [
                "." + this.highContrastCssClassMarker + " ." + this.highContrastBackgroundCssClassMarker + ":after {",
                "border-image: url(" + this.getHighContrastBackgroundUrl() + ") 0 1 0 0 round;",
                "}",
            ];
            style.innerHTML = styleContent.join('\n');
            document.getElementsByTagName('head')[0].appendChild(style);
        },
        getHighContrastBackgroundUrl: function () {
            var canvas = document.createElement("canvas"),
                ctx = canvas.getContext('2d');
            canvas.width = 1;
            canvas.height = 1;
            ctx.fillStyle = this.getHighContrastBackgroundColor();
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            return canvas.toDataURL();
        },
        getHighContrastBackgroundColor: function () {
            var foreColor = ASPx.GetCurrentStyle(document.body).color;
            var hexColor = ASPx.Color.ColorToHexadecimal(foreColor);
            return ASPx.HighContrastForeColorHighlightColorMap[hexColor] || this.highContrastDefaultBackgroundColor;
        },
        initialize: function () {
            if (this.isInitialized)
                return;
            this.isInitialized = true;
            this.detectHighContrastTheme();
            if (this.highContrastThemeActive)
                this.createHighContrastBackgroundStyle();
        },
        detectHighContrastTheme: function () {
            var testElement = document.createElement("DIV");
            ASPx.SetStyles(testElement, {
                backgroundImage: "url('" + ASPx.EmptyImageUrl + "')",
                display: "none"
            }, true);
            var docElement = document.documentElement;
            docElement.appendChild(testElement);
            var actualBackgroundImg = null;
            docElement.removeChild(testElement);
            if (actualBackgroundImg === "none") {
                this.highContrastThemeActive = true;
                ASPx.AddClassNameToElement(docElement, this.highContrastCssClassMarker);
            }
        }
    };
    ASPx.AccessibilityUtils = AccessibilityUtils;
    ASPx.AccessibilityUtils.SendMessageToAssistiveTechnology = function (message) {
        var messageParts = ASPx.Ident.IsArray(message) ? message : [message];
        var args = new ASPxClientControlBeforePronounceEventArgs(messageParts, null);
        ASPx.AccessibilityPronouncer.EnsureInitialize();
        ASPx.AccessibilityPronouncer.Pronounce(args, ASPx.AccessibilityPronouncerType.live);
    };
    ASPx.AccessibilityUtils.SetFocusAccessible = function (focusableElement) {
        if (!focusableElement)
            return;
        var elementId = focusableElement.id;
        if (!elementId) {
            var namedParent = ASPx.GetParent(focusableElement, function (element) {
                return !!element.id;
            });
            if (ASPx.IsExists(namedParent))
                elementId = namedParent.id;
        }
        var focusableControl = ASPx.GetClientControlByElementID(elementId);
        if (focusableControl && focusableControl.OnAssociatedLabelClick)
            focusableControl.OnAssociatedLabelClick(focusableElement);
        else
            window.setTimeout(function () {
                ASPx.AccessibilityUtils.SetFocusAccessibleCore(focusableElement);
            }, 0);
    };
    ASPx.AccessibilityUtils.SetFocusAccessibleCore = function (focusableElement) {
        if (!ASPx.IsExists(focusableElement))
            return;
        if (!ASPx.IsValidElement(focusableElement) && focusableElement.id)
            focusableElement = ASPx.GetElementById(focusableElement.id);
        if (!ASPx.IsActionElement(focusableElement))
            focusableElement = ASPx.RestoreFocusHelper.findNeighbourFocusElement(focusableElement, document.body);
        if (ASPx.IsExistsElement(focusableElement))
            focusableElement.focus();
    };
    ASPx.EnableCssAnimation = true;
    var AnimationTransitionBase = ASPx.CreateClass(null, {
        constructor: function (element, options) {
            if (element) {
                AnimationTransitionBase.Cancel(element);
                this.element = element;
                this.element.aspxTransition = this;
            }
            this.duration = options.duration || AnimationConstants.Durations.DEFAULT;
            this.transition = options.transition || AnimationConstants.Transitions.SINE;
            this.property = options.property;
            this.unit = options.unit || "";
            this.onComplete = options.onComplete;
            this.to = null;
            this.from = null;
        },
        Start: function (from, to) {
            if (to != undefined) {
                this.to = to;
                this.from = from;
                this.SetValue(this.from);
            }
            else
                this.to = from;
        },
        Cancel: function () {
            if (!this.element)
                return;
            try {
                delete this.element.aspxTransition;
            } catch (e) {
                this.element.aspxTransition = undefined;
            }
        },
        GetValue: function () {
            return this.getValueInternal(this.element, this.property);
        },
        SetValue: function (value) {
            this.setValueInternal(this.element, this.property, this.unit, value);
        },
        setValueInternal: function (element, property, unit, value) {
            if (property == "opacity")
                AnimationUtils.setOpacity(element, value);
            else
                element.style[property] = value + unit;
        },
        getValueInternal: function (element, property) {
            if (property == "opacity")
                return ASPx.GetElementOpacity(element);
            var value = parseFloat(element.style[property]);
            return isNaN(value) ? 0 : value;
        },
        performOnComplete: function () {
            if (this.onComplete)
                this.onComplete(this.element);
        },
        getTransition: function () {
            return this.transition;
        }
    });
    AnimationTransitionBase.Cancel = function (element) {
        if (element.aspxTransition)
            element.aspxTransition.Cancel();
    };
    var AnimationConstants = {};
    AnimationConstants.Durations = {
        SHORT: 200,
        DEFAULT: 400,
        LONG: 600
    };
    AnimationConstants.Transitions = {
        LINER: {
            Css: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
            Js: function (progress) { return progress; }
        },
        SINE: {
            Css: "cubic-bezier(0.470, 0.000, 0.745, 0.715)",
            Js: function (progress) { return Math.sin(progress * 1.57); }
        },
        POW: {
            Css: "cubic-bezier(0.755, 0.050, 0.855, 0.060)",
            Js: function (progress) { return Math.pow(progress, 4); }
        },
        POW_EASE_OUT: {
            Css: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
            Js: function (progress) { return 1 - AnimationConstants.Transitions.POW.Js(1 - progress); }
        },
        RIPPLE: {
            Css: "cubic-bezier(0.47, 0.06, 0.23, 0.99)",
            Js: function (progress) {
                return Math.pow((progress), 3) * 0.47 + 3 * progress * Math.pow((1 - progress), 2) * 0.06 + 3 * Math.pow(progress, 2) *
                    (1 - progress) * 0.23 + 0.99 * Math.pow(progress, 3);
            }
        }
    };
    var JsAnimationTransition = ASPx.CreateClass(AnimationTransitionBase, {
        constructor: function (element, options) {
            this.constructor.prototype.constructor.call(this, element, options);
            this.onStep = options.onStep;
            this.fps = 60;
            this.startTime = null;
        },
        Start: function (from, to) {
            if (from == to) {
                this.from = this.to = from;
                setTimeout(this.complete.aspxBind(this), 0);
            }
            else {
                AnimationTransitionBase.prototype.Start.call(this, from, to);
                if (to == undefined)
                    this.from = this.GetValue();
                this.initTimer();
            }
        },
        Cancel: function () {
            AnimationTransitionBase.prototype.Cancel.call(this);
            if (this.timerId)
                clearInterval(this.timerId);
        },
        initTimer: function () {
            this.startTime = new Date();
            this.timerId = window.setInterval(function () { this.onTick(); }.aspxBind(this), 1000 / this.fps);
        },
        onTick: function () {
            var progress = (new Date() - this.startTime) / this.duration;
            if (progress >= 1)
                this.complete();
            else {
                this.update(progress);
                if (this.onStep)
                    this.onStep();
            }
        },
        update: function (progress) {
            this.SetValue(this.gatCalculatedValue(this.from, this.to, progress));
        },
        complete: function () {
            this.Cancel();
            this.update(1);
            this.performOnComplete();
        },
        gatCalculatedValue: function (from, to, progress) {
            if (progress == 1)
                return to;
            return from + (to - from) * this.getTransition()(progress);
        },
        getTransition: function () {
            return this.transition.Js;
        }
    });
    var SimpleAnimationTransition = ASPx.CreateClass(JsAnimationTransition, {
        constructor: function (options) {
            this.constructor.prototype.constructor.call(this, null, options);
            this.transition = options.transition || AnimationConstants.Transitions.POW_EASE_OUT;
            this.onUpdate = options.onUpdate;
            this.lastValue = 0;
        },
        SetValue: function (value) {
            this.onUpdate(value - this.lastValue);
            this.lastValue = value;
        },
        GetValue: function () {
            return this.lastValue;
        },
        performOnComplete: function () {
            if (this.onComplete)
                this.onComplete();
        }
    });
    var MultipleJsAnimationTransition = ASPx.CreateClass(JsAnimationTransition, {
        constructor: function (element, options) {
            this.constructor.prototype.constructor.call(this, element, options);
            this.properties = {};
        },
        Start: function (properties) {
            this.initProperties(properties);
            this.initTimer();
        },
        initProperties: function (properties) {
            this.properties = properties;
            for (var propName in this.properties)
                if (properties[propName].from == undefined)
                    properties[propName].from = this.getValueInternal(this.element, propName);
        },
        update: function (progress) {
            for (var propName in this.properties) {
                if (this.properties.hasOwnProperty(propName)) {
                    var property = this.properties[propName];
                    if (property.from != property.to)
                        this.setValueInternal(this.element, propName, property.unit, this.gatCalculatedValue(property.from, property.to, progress));
                }
            }
        }
    });
    var CssAnimationTransition = ASPx.CreateClass(AnimationTransitionBase, {
        constructor: function (element, options) {
            this.constructor.prototype.constructor.call(this, element, options);
            this.transitionPropertyName = AnimationUtils.CurrentTransition.property;
            this.eventName = AnimationUtils.CurrentTransition.event;
        },
        Start: function (from, to) {
            AnimationTransitionBase.prototype.Start.call(this, from, to);
            this.startTimerId = window.setTimeout(function () {
                if (this.from == this.to)
                    this.onTransitionEnd();
                else {
                    var isHidden = this.element.offsetHeight == 0 && this.element.offsetWidth == 0;
                    if (!isHidden)
                        this.prepareElementBeforeAnimation();
                    this.SetValue(this.to);
                    if (isHidden)
                        this.onTransitionEnd();
                }
            }.aspxBind(this), 0);
        },
        Cancel: function () {
            window.clearTimeout(this.startTimerId);
            AnimationTransitionBase.prototype.Cancel.call(this);
            ASPx.Evt.DetachEventFromElement(this.element, this.eventName, CssAnimationTransition.transitionEnd);
            this.stopAnimation();
            this.setValueInternal(this.element, this.transitionPropertyName, "", "");
        },
        prepareElementBeforeAnimation: function () {
            ASPx.Evt.AttachEventToElement(this.element, this.eventName, CssAnimationTransition.transitionEnd);
            var tmpH = this.element.offsetHeight;
            this.element.style[this.transitionPropertyName] = this.getTransitionCssString();
            if (ASPx.Browser.Safari && ASPx.Browser.MacOSMobilePlatform && ASPx.Browser.MajorVersion >= 8)
                setTimeout(function () {
                    if (this.element && this.element.aspxTransition) {
                        this.element.style[this.transitionPropertyName] = "";
                        this.element.aspxTransition.onTransitionEnd();
                    }
                }.aspxBind(this), this.duration + 100);
        },
        stopAnimation: function () {
            this.SetValue(ASPx.GetCurrentStyle(this.element)[this.property]);
        },
        onTransitionEnd: function () {
            this.Cancel();
            this.performOnComplete();
        },
        getTransition: function () {
            return this.transition.Css;
        },
        getTransitionCssString: function () {
            return this.getTransitionCssStringInternal(this.getCssName(this.property));
        },
        getTransitionCssStringInternal: function (cssProperty) {
            return cssProperty + " " + this.duration + "ms " + this.getTransition();
        },
        getCssName: function (property) {
            switch (property) {
                case "marginLeft":
                    return "margin-left";
                case "marginTop":
                    return "margin-top";
            }
            return property;
        }
    });
    var MultipleCssAnimationTransition = ASPx.CreateClass(CssAnimationTransition, {
        constructor: function (element, options) {
            this.constructor.prototype.constructor.call(this, element, options);
            this.properties = null;
        },
        Start: function (properties) {
            this.properties = properties;
            this.forEachProperties(function (property, propName) {
                if (property.from !== undefined)
                    this.setValueInternal(this.element, propName, property.unit, property.from);
            }.aspxBind(this));
            this.prepareElementBeforeAnimation();
            window.setTimeout(function () {
                this.forEachProperties(function (property, propName) {
                    this.setValueInternal(this.element, propName, property.unit, property.to);
                }.aspxBind(this));
            }.aspxBind(this), 0);
        },
        stopAnimation: function () {
            var style = ASPx.GetCurrentStyle(this.element);
            this.forEachProperties(function (property, propName) {
                this.setValueInternal(this.element, propName, "", style[propName]);
            }.aspxBind(this));
        },
        getTransitionCssString: function () {
            var str = "";
            this.forEachProperties(function (property, propName) {
                str += this.getTransitionCssStringInternal(this.getCssName(propName)) + ",";
            }.aspxBind(this));
            str = str.substring(0, str.length - 1);
            return str;
        },
        forEachProperties: function (func) {
            for (var propName in this.properties) {
                if (this.properties.hasOwnProperty(propName)) {
                    var property = this.properties[propName];
                    if (property.from == undefined)
                        property.from = this.getValueInternal(this.element, propName);
                    if (property.from != property.to)
                        func(property, propName);
                }
            }
        }
    });
    CssAnimationTransition.transitionEnd = function (evt) {
        var element = evt.target;
        if (element && element.aspxTransition)
            element.aspxTransition.onTransitionEnd();
    };
    var AnimationUtils = {
        CanUseCssTransition: function () { return ASPx.EnableCssAnimation && this.CurrentTransition; },
        CanUseCssTransform: function () { return this.CanUseCssTransition() && this.CurrentTransform; },
        CurrentTransition: (function () {
            if (ASPx.Browser.IE)
                return null;
            var transitions = [
                { property: "webkitTransition", event: "webkitTransitionEnd" },
                { property: "MozTransition", event: "transitionend" },
                { property: "OTransition", event: "oTransitionEnd" },
                { property: "transition", event: "transitionend" }
            ];
            var fakeElement = document.createElement("DIV");
            for (var i = 0; i < transitions.length; i++)
                if (transitions[i].property in fakeElement.style)
                    return transitions[i];
        })(),
        CurrentTransform: (function () {
            var transforms = ["transform", "MozTransform", "-webkit-transform", "msTransform", "OTransform"];
            var fakeElement = document.createElement("DIV");
            for (var i = 0; i < transforms.length; i++)
                if (transforms[i] in fakeElement.style)
                    return transforms[i];
        })(),
        SetTransformValue: function (element, position, isTop) {
            if (this.CanUseCssTransform())
                element.style[this.CurrentTransform] = this.GetTransformCssText(position, isTop);
            else
                element.style[!isTop ? "left" : "top"] = position + "px";
        },
        GetTransformValue: function (element, isTop) {
            if (this.CanUseCssTransform()) {
                var cssValue = element.style[this.CurrentTransform];
                return cssValue && cssValue != "none" ? Number(cssValue.replace('matrix(1, 0, 0, 1,', '').replace(')', '').split(',')[!isTop ? 0 : 1]) : 0;
            }
            else
                return !isTop ? element.offsetLeft : element.offsetTop;
        },
        GetTransformCssText: function (position, isTop) {
            if (!position)
                return "none";
            return "matrix(1, 0, 0, 1," + (!isTop ? position : 0) + ", " + (!isTop ? 0 : position) + ")";
        },
        createMultipleAnimationTransition: function (element, options) {
            return this.CanUseCssTransition() && !options.onStep ? new MultipleCssAnimationTransition(element, options) : new MultipleJsAnimationTransition(element, options);
        },
        createSimpleAnimationTransition: function (options) {
            return new SimpleAnimationTransition(options);
        },
        createJsAnimationTransition: function (element, options) {
            return new JsAnimationTransition(element, options);
        },
        createCssAnimationTransition: function (element, options) {
            return new CssAnimationTransition(element, options);
        },
        setOpacity: function (element, value) {
            ASPx.SetElementOpacity(element, value);
        }
    };
    var AsyncTracker = function () {
        var currentToken,
            lockedTokens,
            onDoneDelegates,
            lockedDelegates;
        function clearState() {
            currentToken = 1;
            lockedTokens = [];
            onDoneDelegates = [];
            lockedDelegates = {};
        }
        clearState();
        var log = function (msg) { };
        function setLog(delegate) {
            log = delegate;
        }
        function getLockToken() {
            if (onDoneDelegates.length === 0)
                return -1;
            var token = currentToken++;
            lockedTokens.push(token);
            lockedDelegates[token] = [];
            for (var i = 0; i < onDoneDelegates.length; i++) {
                lockedDelegates[token].push(onDoneDelegates[i]);
            }
            log("module locks token " + token);
            return token;
        }
        function releaseToken(token) {
            if (token < 0) return;
            log("module releasing token " + token);
            ASPx.Data.ArrayRemove(lockedTokens, token);
            delete lockedDelegates[token];
            invokeUnlockedDelegates();
            if (lockedTokens.length === 0)
                clearState();
            log("module released token " + token);
        }
        function invokeUnlockedDelegates() {
            var onDoneDelegate;
            for (var i = onDoneDelegates.length - 1; i >= 0; i--) {
                if (onDoneDelegates[i] && !isDelegateLocked(onDoneDelegates[i])) {
                    onDoneDelegate = onDoneDelegates[i];
                    delete onDoneDelegates[i];
                    onDoneDelegate();
                }
            }
        }
        function isDelegateLocked(delegate) {
            for (var i = lockedTokens.length - 1; i >= 0; i--) {
                var token = lockedTokens[i];
                var delegates = lockedDelegates[token];
                if (delegates) {
                    for (var j = delegates.length - 1; j >= 0; j--) {
                        if (delegates[j] && delegates[j] === delegate)
                            return true;
                    }
                }
            }
            return false;
        }
        function track(doDelegate, onDoneDelegate) {
            if (onDoneDelegate)
                onDoneDelegates.push(onDoneDelegate);
            doDelegate();
            if (onDoneDelegate)
                invokeUnlockedDelegates();
        }
        return {
            getLockToken: getLockToken,
            releaseToken: releaseToken,
            track: track,
            setLog: setLog,
        };
    };
    ASPxClientUtils = {};
    ASPxClientUtils.agent = Browser.UserAgent;
    ASPxClientUtils.opera = Browser.Opera;
    ASPxClientUtils.opera9 = Browser.Opera && Browser.MajorVersion == 9;
    ASPxClientUtils.safari = Browser.Safari;
    ASPxClientUtils.safari3 = Browser.Safari && Browser.MajorVersion == 3;
    ASPxClientUtils.safariMacOS = Browser.Safari && Browser.MacOSPlatform;
    ASPxClientUtils.chrome = Browser.Chrome;
    ASPxClientUtils.ie = Browser.IE;
    ASPxClientUtils.ie7 = Browser.IE && Browser.MajorVersion == 7;
    ASPxClientUtils.firefox = Browser.Firefox;
    ASPxClientUtils.firefox3 = Browser.Firefox && Browser.MajorVersion == 3;
    ASPxClientUtils.mozilla = Browser.Mozilla;
    ASPxClientUtils.netscape = Browser.Netscape;
    ASPxClientUtils.browserVersion = Browser.Version;
    ASPxClientUtils.browserMajorVersion = Browser.MajorVersion;
    ASPxClientUtils.macOSPlatform = Browser.MacOSPlatform;
    ASPxClientUtils.windowsPlatform = Browser.WindowsPlatform;
    ASPxClientUtils.webKitFamily = Browser.WebKitFamily;
    ASPxClientUtils.netscapeFamily = Browser.NetscapeFamily;
    ASPxClientUtils.touchUI = Browser.TouchUI;
    ASPxClientUtils.webKitTouchUI = Browser.WebKitTouchUI;
    ASPxClientUtils.msTouchUI = Browser.MSTouchUI;
    ASPxClientUtils.iOSPlatform = Browser.MacOSMobilePlatform;
    ASPxClientUtils.androidPlatform = Browser.AndroidMobilePlatform;
    ASPxClientUtils.ArrayInsert = Data.ArrayInsert;
    ASPxClientUtils.ArrayRemove = Data.ArrayRemove;
    ASPxClientUtils.ArrayRemoveAt = Data.ArrayRemoveAt;
    ASPxClientUtils.ArrayClear = Data.ArrayClear;
    ASPxClientUtils.ArrayIndexOf = Data.ArrayIndexOf;
    ASPxClientUtils.AttachEventToElement = Evt.AttachEventToElement;
    ASPxClientUtils.DetachEventFromElement = Evt.DetachEventFromElement;
    ASPxClientUtils.GetEventSource = Evt.GetEventSource;
    ASPxClientUtils.GetEventX = Evt.GetEventX;
    ASPxClientUtils.GetEventY = Evt.GetEventY;
    ASPxClientUtils.GetKeyCode = Evt.GetKeyCode;
    ASPxClientUtils.PreventEvent = Evt.PreventEvent;
    ASPxClientUtils.PreventEventAndBubble = Evt.PreventEventAndBubble;
    ASPxClientUtils.PreventDragStart = Evt.PreventDragStart;
    ASPxClientUtils.ClearSelection = Selection.Clear;
    ASPxClientUtils.IsExists = ASPx.IsExists;
    ASPxClientUtils.IsFunction = ASPx.IsFunction;
    ASPxClientUtils.GetAbsoluteX = ASPx.GetAbsoluteX;
    ASPxClientUtils.GetAbsoluteY = ASPx.GetAbsoluteY;
    ASPxClientUtils.SetAbsoluteX = ASPx.SetAbsoluteX;
    ASPxClientUtils.SetAbsoluteY = ASPx.SetAbsoluteY;
    ASPxClientUtils.GetDocumentScrollTop = ASPx.GetDocumentScrollTop;
    ASPxClientUtils.GetDocumentScrollLeft = ASPx.GetDocumentScrollLeft;
    ASPxClientUtils.GetDocumentClientWidth = ASPx.GetDocumentClientWidth;
    ASPxClientUtils.GetDocumentClientHeight = ASPx.GetDocumentClientHeight;
    ASPxClientUtils.GetIsParent = ASPx.GetIsParent;
    ASPxClientUtils.GetParentById = ASPx.GetParentById;
    ASPxClientUtils.GetParentByTagName = ASPx.GetParentByTagName;
    ASPxClientUtils.GetParentByClassName = ASPx.GetParentByPartialClassName;
    ASPxClientUtils.GetChildById = ASPx.GetChildById;
    ASPxClientUtils.GetChildByTagName = ASPx.GetChildByTagName;
    ASPxClientUtils.SetCookie = Cookie.SetCookie;
    ASPxClientUtils.GetCookie = Cookie.GetCookie;
    ASPxClientUtils.DeleteCookie = Cookie.DelCookie;
    ASPxClientUtils.GetShortcutCode = ASPx.GetShortcutCode;
    ASPxClientUtils.GetShortcutCodeByEvent = ASPx.GetShortcutCodeByEvent;
    ASPxClientUtils.StringToShortcutCode = ASPx.ParseShortcutString;
    ASPxClientUtils.Trim = Str.Trim;
    ASPxClientUtils.TrimStart = Str.TrimStart;
    ASPxClientUtils.TrimEnd = Str.TrimEnd;
    ASPxClientUtils.SendMessageToAssistiveTechnology = ASPx.AccessibilityUtils.SendMessageToAssistiveTechnology;
    window.ASPxClientUtils = ASPxClientUtils;
    ASPx.AnimationUtils = AnimationUtils;
    ASPx.AnimationTransitionBase = AnimationTransitionBase;
    ASPx.AnimationConstants = AnimationConstants;
    ASPx.AsyncTracker = AsyncTracker;
})();

(function () {
    var ASPx = window.ASPx || {};
    ASPx.ASPxImageLoad = {};
    ASPx.ASPxImageLoad.dxDefaultLoadingImageCssClass = "dxe-loadingImage";
    ASPx.ASPxImageLoad.dxDefaultLoadingImageCssClassRegexp = new RegExp("dx\\w+-loadingImage");
    ASPx.ASPxImageLoad.OnLoad = function (image, customLoadingImage, isOldIE, customBackgroundImageUrl) {
        image.dxCustomBackgroundImageUrl = "";
        image.dxShowLoadingImage = true;
        image.dxCustomLoadingImage = customLoadingImage;
        if (customBackgroundImageUrl != "")
            image.dxCustomBackgroundImageUrl = "url('" + customBackgroundImageUrl + "')";
        ASPx.ASPxImageLoad.prepareImageBackground(image, isOldIE);
        ASPx.ASPxImageLoad.removeHandlers(image);
        image.className = image.className.replace(ASPx.ASPxImageLoad.dxDefaultLoadingImageCssClassRegexp, "");
    };
    ASPx.ASPxImageLoad.removeASPxImageBackground = function (image, isOldIE) {
        if (isOldIE)
            image.style.removeAttribute("background-image");
        else
            image.style.backgroundImage = "";
    };
    ASPx.ASPxImageLoad.prepareImageBackground = function (image, isOldIE) {
        ASPx.ASPxImageLoad.removeASPxImageBackground(image, isOldIE);
        if (image.dxCustomBackgroundImageUrl != "")
            image.style.backgroundImage = image.dxCustomBackgroundImageUrl;
    };
    ASPx.ASPxImageLoad.removeHandlers = function (image) {
        image.removeAttribute("onload");
        image.removeAttribute("onabort");
        image.removeAttribute("onerror");
    };
    window.ASPx = ASPx;
})();
(function () {
    ASPx.classesScriptParsed = false;
    ASPx.documentLoaded = false;
    ASPx.CallbackType = {
        Data: "d",
        Common: "c"
    };
    ASPx.callbackState = {
        aborted: "aborted",
        inTurn: "inTurn",
        sent: "sent"
    };
    var ASPxClientEvent = ASPx.CreateClass(null, {
        constructor: function () {
            this.handlerInfoList = [];
            this.firingIndex = -1;
        },
        AddHandler: function (handler, executionContext) {
            if (typeof (executionContext) == "undefined")
                executionContext = null;
            this.RemoveHandler(handler, executionContext);
            var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
            this.handlerInfoList.push(handlerInfo);
        },
        RemoveHandler: function (handler, executionContext) {
            this.removeHandlerByCondition(function (handlerInfo) {
                return handlerInfo.handler == handler &&
                    (!executionContext || handlerInfo.executionContext == executionContext);
            });
        },
        removeHandlerByCondition: function (predicate) {
            for (var i = this.handlerInfoList.length - 1; i >= 0; i--) {
                var handlerInfo = this.handlerInfoList[i];
                if (predicate(handlerInfo)) {
                    ASPx.Data.ArrayRemoveAt(this.handlerInfoList, i);
                    if (i <= this.firingIndex)
                        this.firingIndex--;
                }
            }
        },
        removeHandlerByControlName: function (controlName) {
            this.removeHandlerByCondition(function (handlerInfo) {
                return handlerInfo.executionContext &&
                    handlerInfo.executionContext.name === controlName;
            });
        },
        ClearHandlers: function () {
            this.handlerInfoList.length = 0;
        },
        FireEvent: function (obj, args) {
            for (this.firingIndex = 0; this.firingIndex < this.handlerInfoList.length; this.firingIndex++) {
                var handlerInfo = this.handlerInfoList[this.firingIndex];
                handlerInfo.handler.call(handlerInfo.executionContext, obj, args);
            }
        },
        InsertFirstHandler: function (handler, executionContext) {
            if (typeof (executionContext) == "undefined")
                executionContext = null;
            var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
            ASPx.Data.ArrayInsert(this.handlerInfoList, handlerInfo, 0);
        },
        IsEmpty: function () {
            return this.handlerInfoList.length == 0;
        }
    });
    ASPxClientEvent.CreateHandlerInfo = function (handler, executionContext) {
        return {
            handler: handler,
            executionContext: executionContext
        };
    };
    var ASPxClientEventArgs = ASPx.CreateClass(null, {
        constructor: function () {
        }
    });
    ASPxClientEventArgs.Empty = new ASPxClientEventArgs();
    var ASPxClientCancelEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
            this.cancel = false;
        }
    });
    var ASPxClientProcessingModeEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (processOnServer) {
            this.constructor.prototype.constructor.call(this);
            this.processOnServer = processOnServer;
        }
    });
    var ASPxClientProcessingModeCancelEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
        constructor: function (processOnServer) {
            this.constructor.prototype.constructor.call(this, processOnServer);
            this.cancel = false;
        }
    });
    var OrderedMap = ASPx.CreateClass(null, {
        constructor: function () {
            this.entries = {};
            this.firstEntry = null;
            this.lastEntry = null;
        },
        add: function (key, element) {
            var entry = this.addEntry(key, element);
            this.entries[key] = entry;
        },
        remove: function (key) {
            var entry = this.entries[key];
            if (entry === undefined)
                return;
            this.removeEntry(entry);
            delete this.entries[key];
        },
        clear: function () {
            this.markAllEntriesAsRemoved();
            this.entries = {};
            this.firstEntry = null;
            this.lastEntry = null;
        },
        get: function (key) {
            var entry = this.entries[key];
            return entry ? entry.value : undefined;
        },
        forEachEntry: function (processFunc, context) {
            context = context || this;
            for (var entry = this.firstEntry; entry; entry = entry.next) {
                if (entry.removed)
                    continue;
                if (processFunc.call(context, entry.key, entry.value))
                    return;
            }
        },
        addEntry: function (key, element) {
            var entry = { key: key, value: element, next: null, prev: null };
            if (!this.firstEntry)
                this.firstEntry = entry;
            else {
                entry.prev = this.lastEntry;
                this.lastEntry.next = entry;
            }
            this.lastEntry = entry;
            return entry;
        },
        removeEntry: function (entry) {
            if (this.firstEntry == entry)
                this.firstEntry = entry.next;
            if (this.lastEntry == entry)
                this.lastEntry = entry.prev;
            if (entry.prev)
                entry.prev.next = entry.next;
            if (entry.next)
                entry.next.prev = entry.prev;
            entry.removed = true;
        },
        markAllEntriesAsRemoved: function () {
            for (var entry = this.firstEntry; entry; entry = entry.next)
                entry.removed = true;
        }
    });
    var CollectionBase = ASPx.CreateClass(null, {
        constructor: function () {
            this.elementsMap = new OrderedMap();
            this.isASPxClientCollection = true;
        },
        Add: function (key, element) {
            this.elementsMap.add(key, element);
        },
        Remove: function (key) {
            this.elementsMap.remove(key);
        },
        Clear: function () {
            this.elementsMap.clear();
        },
        Get: function (key) {
            return this.elementsMap.get(key);
        }
    });
    var GarbageCollector = ASPx.CreateClass(null, {
        constructor: function () {
            this.interval = 5000;
            this.intervalID = window.setInterval(function () { this.CollectObjects(); }.aspxBind(this), this.interval);
        },
        CollectObjects: function () {
            if (ASPx.GetControlCollection().InCallback()) return;
            ASPx.GetControlCollectionCollection().RemoveDisposedControls();
            if (typeof (ASPx.GetStateController) != "undefined")
                ASPx.GetStateController().RemoveDisposedItems();
            if (ASPx.TableScrollHelperCollection)
                ASPx.TableScrollHelperCollection.RemoveDisposedObjects();
            if (ASPx.Ident.scripts.ASPxClientRatingControl)
                ASPxClientRatingControl.RemoveDisposedElementUnderCursor();
            var postHandler = aspxGetPostHandler();
            if (postHandler)
                postHandler.RemoveDisposedFormsFromCache();
        }
    });
    var gcCollector = new GarbageCollector();
    var ControlTree = ASPx.CreateClass(null, {
        constructor: function (controlCollection, container) {
            this.container = container;
            this.domMap = {};
            this.rootNode = this.createNode(null, null);
            this.createControlTree(controlCollection, container);
        },
        forEachControl: function (collapseControls, processFunc) {
            var observer = _aspxGetDomObserver();
            observer.pause(this.container, true);
            var documentScrollInfo;
            if (collapseControls) {
                documentScrollInfo = ASPx.GetOuterScrollPosition(document.body);
                this.collapseControls(this.rootNode);
            }
            var adjustNodes = [],
                autoHeightNodes = [];
            var requireReAdjust = this.forEachControlCore(this.rootNode, collapseControls, processFunc, adjustNodes, autoHeightNodes);
            if (requireReAdjust)
                this.forEachControlsBackward(adjustNodes, collapseControls, processFunc);
            else {
                for (var i = 0, node; node = autoHeightNodes[i]; i++)
                    node.control.AdjustAutoHeight();
            }
            if (collapseControls)
                ASPx.RestoreOuterScrollPosition(documentScrollInfo);
            observer.resume(this.container, true);
        },
        forEachControlCore: function (node, collapseControls, processFunc, adjustNodes, autoHeightNodes) {
            var requireReAdjust = false,
                size, newSize;
            if (node.control) {
                var checkReadjustment = collapseControls && node.control.IsControlCollapsed() && node.control.CanCauseReadjustment();
                if (checkReadjustment)
                    size = node.control.GetControlPercentMarkerSize(false, true);
                if (node.control.IsControlCollapsed() && !node.control.IsExpandableByAdjustment())
                    node.control.ExpandControl();
                node.control.isInsideHierarchyAdjustment = true;
                processFunc(node.control);
                node.control.isInsideHierarchyAdjustment = false;
                if (checkReadjustment) {
                    newSize = node.control.GetControlPercentMarkerSize(false, true);
                    requireReAdjust = size.width !== newSize.width;
                }
                if (node.control.sizingConfig.supportAutoHeight)
                    autoHeightNodes.push(node);
                node.control.ResetControlPercentMarkerSize();
            }
            for (var childNode, i = 0; childNode = node.children[i]; i++)
                requireReAdjust = this.forEachControlCore(childNode, collapseControls, processFunc, adjustNodes, autoHeightNodes) || requireReAdjust;
            adjustNodes.push(node);
            return requireReAdjust;
        },
        forEachControlsBackward: function (adjustNodes, collapseControls, processFunc) {
            for (var i = 0, node; node = adjustNodes[i]; i++)
                this.forEachControlsBackwardCore(node, collapseControls, processFunc);
        },
        forEachControlsBackwardCore: function (node, collapseControls, processFunc) {
            if (node.control)
                processFunc(node.control);
            if (node.children.length > 1) {
                for (var i = 0, childNode; childNode = node.children[i]; i++) {
                    if (childNode.control)
                        processFunc(childNode.control);
                }
            }
        },
        collapseControls: function (node) {
            for (var childNode, i = 0; childNode = node.children[i]; i++)
                this.collapseControls(childNode);
            if (node.control && node.control.NeedCollapseControl())
                node.control.CollapseControl();
        },
        createControlTree: function (controlCollection, container) {
            controlCollection.ProcessControlsInContainer(container, function (control) {
                control.RegisterInControlTree(this);
            }.aspxBind(this));
            var fixedNodes = [];
            var fixedNodesChildren = [];
            for (var domElementID in this.domMap) {
                if (!this.domMap.hasOwnProperty(domElementID)) continue;
                var node = this.domMap[domElementID];
                var controlOwner = node.control ? node.control.controlOwner : null;
                if (controlOwner && this.domMap[controlOwner.name])
                    continue;
                if (this.isFixedNode(node))
                    fixedNodes.push(node);
                else {
                    var parentNode = this.findParentNode(domElementID);
                    parentNode = parentNode || this.rootNode;
                    if (this.isFixedNode(parentNode))
                        fixedNodesChildren.push(node);
                    else {
                        var childNode = node.mainNode || node;
                        this.addChildNode(parentNode, childNode);
                    }
                }
            }
            for (var i = fixedNodes.length - 1; i >= 0; i--)
                this.insertChildNode(this.rootNode, fixedNodes[i], 0);
            for (var i = fixedNodesChildren.length - 1; i >= 0; i--)
                this.insertChildNode(this.rootNode, fixedNodesChildren[i], 0);
        },
        findParentNode: function (id) {
            var element = document.getElementById(id).parentNode;
            while (element && element.tagName !== "BODY") {
                if (element.id) {
                    var parentNode = this.domMap[element.id];
                    if (parentNode)
                        return parentNode;
                }
                element = element.parentNode;
            }
            return null;
        },
        addChildNode: function (node, childNode) {
            if (!childNode.parentNode) {
                node.children.push(childNode);
                childNode.parentNode = node;
            }
        },
        insertChildNode: function (node, childNode, index) {
            if (!childNode.parentNode) {
                ASPx.Data.ArrayInsert(node.children, childNode, index);
                childNode.parentNode = node;
            }
        },
        addRelatedNode: function (node, relatedNode) {
            this.addChildNode(node, relatedNode);
            relatedNode.mainNode = node;
        },
        isFixedNode: function (node) {
            var control = node.mainNode ? node.mainNode.control : node.control;
            return control && control.HasFixedPosition();
        },
        createNode: function (domElementID, control) {
            var node = {
                control: control,
                children: [],
                parentNode: null,
                mainNode: null
            };
            if (domElementID)
                this.domMap[domElementID] = node;
            return node;
        }
    });
    function _aspxFunctionIsInCallstack(currentCallee, targetFunction, depthLimit) {
        var candidate = currentCallee;
        var depth = 0;
        while (candidate && depth <= depthLimit) {
            candidate = candidate.caller;
            if (candidate == targetFunction)
                return true;
            depth++;
        }
        return false;
    }
    ASPx.Evt.AttachEventToElement(window, "load", aspxClassesWindowOnLoad);
    function aspxClassesWindowOnLoad(evt) {
        ASPx.documentLoaded = true;
        _aspxSweepDuplicatedLinks();
        ResourceManager.SynchronizeResources();
        var externalScriptProcessor = GetExternalScriptProcessor();
        if (externalScriptProcessor)
            externalScriptProcessor.ShowErrorMessages();
        ASPx.AccessibilityUtils.initialize();
        ASPx.GetControlCollection().Initialize();
        _aspxInitializeScripts();
        _aspxInitializeLinks();
        _aspxInitializeFocus();
    }
    Ident = {};
    Ident.IsDate = function (obj) {
        return obj && obj.constructor == Date;
    };
    Ident.IsRegExp = function (obj) {
        return obj && obj.constructor === RegExp;
    };
    Ident.IsArray = function (obj) {
        return obj && obj.constructor == Array;
    };
    Ident.IsASPxClientCollection = function (obj) {
        return obj && obj.isASPxClientCollection;
    };
    Ident.IsASPxClientControl = function (obj) {
        return obj && obj instanceof ASPxClientControlBase;
    };
    Ident.IsASPxClientEdit = function (obj) {
        return obj && obj.isASPxClientEdit;
    };
    Ident.IsFocusableElementRegardlessTabIndex = function (element) {
        var tagName = element.tagName;
        return tagName == "TEXTAREA" || tagName == "INPUT" || tagName == "A" ||
            tagName == "SELECT" || tagName == "IFRAME" || tagName == "OBJECT";
    };
    Ident.isDialogInvisibleControl = function (control) {
        return !!ASPx.Dialog && ASPx.Dialog.isDialogInvisibleControl(control);
    };
    Ident.scripts = {};
    if (ASPx.IsFunction(window.WebForm_InitCallbackAddField)) {
        (function () {
            var original = window.WebForm_InitCallbackAddField;
            window.WebForm_InitCallbackAddField = function (name, value) {
                if (typeof (name) == "string" && name)
                    original.apply(null, arguments);
            };
        })();
    }
    ASPx.FireDefaultButton = function (evt, buttonID) {
        if (_aspxIsDefaultButtonEvent(evt, buttonID)) {
            var defaultButton = ASPx.GetElementById(buttonID);
            if (defaultButton && defaultButton.click) {
                if (ASPx.IsFocusable(defaultButton))
                    defaultButton.focus();
                ASPx.Evt.DoElementClick(defaultButton);
                ASPx.Evt.PreventEventAndBubble(evt);
                return false;
            }
        }
        return true;
    };
    function _aspxIsDefaultButtonEvent(evt, defaultButtonID) {
        if (evt.keyCode != ASPx.Key.Enter)
            return false;
        var srcElement = ASPx.Evt.GetEventSource(evt);
        if (!srcElement || srcElement.id === defaultButtonID)
            return true;
        var tagName = srcElement.tagName;
        var type = srcElement.type;
        return tagName != "TEXTAREA" && tagName != "BUTTON" && tagName != "A" &&
            (tagName != "INPUT" || type != "checkbox" && type != "radio" && type != "button" && type != "submit" && type != "reset");
    }
    var PostHandler = ASPx.CreateClass(null, {
        constructor: function () {
            this.Post = new ASPxClientEvent();
            this.PostFinalization = new ASPxClientEvent();
            this.observableForms = [];
            this.dxCallbackTriggers = {};
            this.lastSubmitElementName = null;
            this.beforeOnSubmit = function () { };
            this.ReplaceGlobalPostFunctions();
            this.HandleDxCallbackBeginning();
            this.HandleMSAjaxRequestBeginning();
        },
        Update: function () {
            this.ReplaceFormsSubmit(true);
        },
        ProcessPostRequest: function (ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
            this.cancelPostProcessing = false;
            this.isMSAjaxRequest = isMSAjaxRequest;
            if (this.SkipRaiseOnPost(ownerID, isCallback, isDXCallback))
                return;
            var args = new PostHandlerOnPostEventArgs(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
            this.Post.FireEvent(this, args);
            this.cancelPostProcessing = args.cancel;
            if (!args.cancel)
                this.PostFinalization.FireEvent(this, args);
        },
        SkipRaiseOnPost: function (ownerID, isCallback, isDXCallback) {
            if (!isCallback)
                return false;
            var dxOwner = isDXCallback && ASPx.GetControlCollection().GetByName(ownerID);
            if (dxOwner) {
                this.dxCallbackTriggers[dxOwner.uniqueID] = true;
                return false;
            }
            if (this.dxCallbackTriggers[ownerID]) {
                this.dxCallbackTriggers[ownerID] = false;
                return true;
            }
            return false;
        },
        ReplaceGlobalPostFunctions: function () {
            if (ASPx.IsFunction(window.__doPostBack))
                this.ReplaceDoPostBack();
            if (ASPx.IsFunction(window.WebForm_DoCallback))
                this.ReplaceDoCallback();
            this.ReplaceFormsSubmit();
        },
        HandleDxCallbackBeginning: function () {
            ASPx.GetControlCollection().BeforeInitCallback.AddHandler(function (s, e) {
                aspxRaisePostHandlerOnPost(e.callbackOwnerID, true, false, true);
            });
        },
        HandleMSAjaxRequestBeginning: function () {
            if (window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager && Sys.WebForms.PageRequestManager.getInstance) {
                var pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
                if (pageRequestManager != null && Ident.IsArray(pageRequestManager._onSubmitStatements)) {
                    pageRequestManager._onSubmitStatements.unshift(function () {
                        var postbackSettings = Sys.WebForms.PageRequestManager.getInstance()._postBackSettings;
                        var postHandler = aspxGetPostHandler();
                        aspxRaisePostHandlerOnPost(postbackSettings.asyncTarget, true, true);
                        return !postHandler.cancelPostProcessing;
                    });
                }
            }
        },
        ReplaceDoPostBack: function () {
            var original = __doPostBack;
            __doPostBack = function (eventTarget, eventArgument) {
                var postHandler = aspxGetPostHandler();
                aspxRaisePostHandlerOnPost(eventTarget);
                if (postHandler.cancelPostProcessing)
                    return;
                ASPxClientControl.postHandlingLocked = true;
                original(eventTarget, eventArgument);
                delete ASPxClientControl.postHandlingLocked;
            };
        },
        ReplaceDoCallback: function () {
            var original = WebForm_DoCallback;
            WebForm_DoCallback = function (eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync) {
                var postHandler = aspxGetPostHandler();
                aspxRaisePostHandlerOnPost(eventTarget, true);
                if (postHandler.cancelPostProcessing)
                    return;
                return original(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync);
            };
        },
        ReplaceFormsSubmit: function (checkObservableCollection) {
            for (var i = 0; i < document.forms.length; i++) {
                var form = document.forms[i];
                if (checkObservableCollection && ASPx.Data.ArrayIndexOf(this.observableForms, form) >= 0)
                    continue;
                if (form.submit)
                    this.ReplaceFormSubmit(form);
                this.ReplaceFormOnSumbit(form);
                this.observableForms.push(form);
            }
        },
        ReplaceFormSubmit: function (form) {
            var originalSubmit = form.submit;
            form.submit = function () {
                var postHandler = aspxGetPostHandler();
                aspxRaisePostHandlerOnPost();
                if (postHandler.cancelPostProcessing)
                    return false;
                var callee = arguments.callee;
                this.submit = originalSubmit;
                var submitResult = this.submit();
                this.submit = callee;
                return submitResult;
            };
            form = null;
        },
        ReplaceFormOnSumbit: function (form) {
            var originalSubmit = form.onsubmit;
            form.onsubmit = function () {
                var postHandler = aspxGetPostHandler();
                postHandler.beforeOnSubmit();
                if (postHandler.isMSAjaxRequest)
                    postHandler.isMsAjaxRequest = false;
                else
                    aspxRaisePostHandlerOnPost(postHandler.GetLastSubmitElementName());
                if (postHandler.cancelPostProcessing)
                    return false;
                return ASPx.IsFunction(originalSubmit)
                    ? originalSubmit.apply(this, arguments)
                    : true;
            };
            form = null;
        },
        SetBeforeOnSubmit: function (action) {
            this.beforeOnSubmit = action;
        },
        SetLastSubmitElementName: function (elementName) {
            this.lastSubmitElementName = elementName;
        },
        GetLastSubmitElementName: function () {
            return this.lastSubmitElementName;
        },
        RemoveDisposedFormsFromCache: function () {
            for (var i = 0; this.observableForms && i < this.observableForms.length; i++) {
                var form = this.observableForms[i];
                if (!ASPx.IsExistsElement(form)) {
                    ASPx.Data.ArrayRemove(this.observableForms, form);
                    i--;
                }
            }
        }
    });
    function aspxRaisePostHandlerOnPost(ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
        if (ASPxClientControl.postHandlingLocked) return;
        var postHandler = aspxGetPostHandler();
        if (postHandler)
            postHandler.ProcessPostRequest(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
    }
    var aspxPostHandler;
    function aspxGetPostHandler() {
        if (!aspxPostHandler)
            aspxPostHandler = new PostHandler();
        return aspxPostHandler;
    }
    var PostHandlerOnPostEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
        constructor: function (ownerID, isCallback, isMSAjaxCallback, isDXCallback) {
            this.constructor.prototype.constructor.call(this);
            this.ownerID = ownerID;
            this.isCallback = !!isCallback;
            this.isDXCallback = !!isDXCallback;
            this.isMSAjaxCallback = !!isMSAjaxCallback;
        }
    });
    var ResourceManager = {
        HandlerStr: "DXR.axd?r=",
        ResourceHashes: {},
        SynchronizeResources: function (method) {
            if (!method) {
                method = function (name, resource) {
                    this.UpdateInputElements(name, resource);
                }.aspxBind(this);
            }
            var resources = this.GetResourcesData();
            for (var name in resources)
                if (resources.hasOwnProperty(name))
                    method(name, resources[name]);
        },
        GetResourcesData: function () {
            return {
                DXScript: this.GetResourcesElementsString(_aspxGetIncludeScripts(), "src", "DXScript"),
                DXCss: this.GetResourcesElementsString(_aspxGetLinks(), "href", "DXCss")
            };
        },
        GetResourcesElementsString: function (elements, urlAttr, id) {
            if (!this.ResourceHashes[id])
                this.ResourceHashes[id] = {};
            var hash = this.ResourceHashes[id];
            for (var i = 0; i < elements.length; i++) {
                var resourceUrl = ASPx.Attr.GetAttribute(elements[i], urlAttr);
                if (resourceUrl) {
                    var pos = resourceUrl.indexOf(this.HandlerStr);
                    if (pos > -1) {
                        var list = resourceUrl.substr(pos + this.HandlerStr.length);
                        var ampPos = list.lastIndexOf("-");
                        if (ampPos > -1)
                            list = list.substr(0, ampPos);
                        var indexes = list.split(",");
                        for (var j = 0; j < indexes.length; j++)
                            hash[indexes[j]] = indexes[j];
                    }
                    else
                        hash[resourceUrl] = resourceUrl;
                }
            }
            var array = [];
            for (var key in hash)
                if (hash.hasOwnProperty(key))
                    array.push(key);
            return array.join(",");
        },
        UpdateInputElements: function (typeName, list) {
            for (var i = 0; i < document.forms.length; i++) {
                var inputElement = document.forms[i][typeName];
                if (!inputElement)
                    inputElement = this.CreateInputElement(document.forms[i], typeName);
                inputElement.value = list;
            }
        },
        CreateInputElement: function (form, typeName) {
            var inputElement = ASPx.CreateHiddenField(typeName, typeName);
            form.appendChild(inputElement);
            return inputElement;
        }
    };
    ASPx.includeScriptPrefix = "dxis_";
    ASPx.startupScriptPrefix = "dxss_";
    var includeScriptsCache = {};
    var createdIncludeScripts = [];
    var appendedScriptsCount = 0;
    var callbackOwnerNames = [];
    var scriptsRestartHandlers = {};
    function _aspxIsKnownIncludeScript(script) {
        return !!includeScriptsCache[script.src];
    }
    function _aspxCacheIncludeScript(script) {
        includeScriptsCache[script.src] = 1;
    }
    function _aspxProcessScriptsAndLinks(ownerName, isCallback) {
        if (!ASPx.documentLoaded) return;
        _aspxProcessScripts(ownerName, isCallback);
        getLinkProcessor().process();
        ASPx.ClearCachedCssRules();
    }
    function _aspxGetStartupScripts() {
        return _aspxGetScriptsCore(ASPx.startupScriptPrefix);
    }
    function _aspxGetIncludeScripts() {
        return _aspxGetScriptsCore(ASPx.includeScriptPrefix);
    }
    function _aspxGetScriptsCore(prefix) {
        var result = [];
        var scripts = document.getElementsByTagName("SCRIPT");
        for (var i = 0; i < scripts.length; i++) {
            if (scripts[i].id.indexOf(prefix) == 0)
                result.push(scripts[i]);
        }
        return result;
    }
    function _aspxGetLinks() {
        var result = [];
        var links = document.getElementsByTagName("LINK");
        for (var i = 0; i < links.length; i++)
            result[i] = links[i];
        return result;
    }
    function _aspxIsLinksLoaded() {
        var links = _aspxGetLinks();
        for (var i = 0, link; link = links[i]; i++) {
            if (link.readyState && link.readyState.toLowerCase() == "loading")
                return false;
        }
        return true;
    }
    function _aspxInitializeLinks() {
        var links = _aspxGetLinks();
        for (var i = 0; i < links.length; i++)
            links[i].loaded = true;
    }
    var scriptExecutedAttrName = "data-executed";
    function isScriptExecuted(script) {
        return ASPx.Attr.GetAttribute(script, scriptExecutedAttrName);
    }
    function markScriptAsExecuted(script) {
        ASPx.Attr.SetAttribute(script, scriptExecutedAttrName, true);
    }
    function _aspxInitializeScripts() {
        var scripts = _aspxGetIncludeScripts();
        for (var i = 0; i < scripts.length; i++)
            _aspxCacheIncludeScript(scripts[i]);
        var startupScripts = _aspxGetStartupScripts();
        for (var i = 0; i < startupScripts.length; i++)
            markScriptAsExecuted(startupScripts[i]);
    }
    function _aspxSweepDuplicatedLinks() {
        var hash = {};
        var links = _aspxGetLinks();
        for (var i = 0; i < links.length; i++) {
            var href = links[i].href;
            if (!href)
                continue;
            if (hash[href]) {
                if ((ASPx.Browser.IE || !hash[href].loaded) && links[i].loaded) {
                    ASPx.RemoveElement(hash[href]);
                    hash[href] = links[i];
                }
                else
                    ASPx.RemoveElement(links[i]);
            }
            else
                hash[href] = links[i];
        }
    }
    function _aspxSweepDuplicatedScripts() {
        var hash = {};
        var scripts = _aspxGetIncludeScripts();
        for (var i = 0; i < scripts.length; i++) {
            var src = scripts[i].src;
            if (!src) continue;
            if (hash[src])
                ASPx.RemoveElement(scripts[i]);
            else
                hash[src] = scripts[i];
        }
    }
    function _aspxAreScriptsEqual(script1, script2) {
        return script1.src == script2.src;
    }
    function _aspxProcessScripts(ownerName, isCallback) {
        var scripts = _aspxGetIncludeScripts();
        var previousCreatedScript = null;
        var firstCreatedScript = null;
        for (var i = 0; i < scripts.length; i++) {
            var script = scripts[i];
            if (script.src == "") continue;
            if (_aspxIsKnownIncludeScript(script))
                continue;
            var createdScript = document.createElement("script");
            createdScript.type = "text/javascript";
            createdScript.src = script.src;
            createdScript.id = script.id;
            if (ASPx.Data.ArrayIndexOf(createdIncludeScripts, createdScript, _aspxAreScriptsEqual) >= 0)
                continue;
            createdIncludeScripts.push(createdScript);
            ASPx.RemoveElement(script);
            if (ASPx.Browser.IE && ASPx.Browser.Version < 9) {
                createdScript.onreadystatechange = new Function("ASPx.OnScriptReadyStateChangedCallback(this, " + isCallback + ");");
            } else if (ASPx.Browser.Edge || ASPx.Browser.WebKitFamily || (ASPx.Browser.Firefox && ASPx.Browser.Version >= 4) || ASPx.Browser.IE && ASPx.Browser.Version >= 9) {
                createdScript.onload = new Function("ASPx.OnScriptLoadCallback(this, " + isCallback + ");");
                if (firstCreatedScript == null)
                    firstCreatedScript = createdScript;
                createdScript.nextCreatedScript = null;
                if (previousCreatedScript != null)
                    previousCreatedScript.nextCreatedScript = createdScript;
                previousCreatedScript = createdScript;
            } else {
                createdScript.onload = new Function("ASPx.OnScriptLoadCallback(this);");
                ASPx.AppendScript(createdScript);
                _aspxCacheIncludeScript(createdScript);
            }
        }
        if (firstCreatedScript != null) {
            ASPx.AppendScript(firstCreatedScript);
            _aspxCacheIncludeScript(firstCreatedScript);
        }
        if (isCallback)
            callbackOwnerNames.push(ownerName);
        if (createdIncludeScripts.length == 0) {
            var newLinks = ASPx.GetNodesByTagName(document.body, "link");
            var needProcessLinks = isCallback && newLinks.length > 0;
            if (needProcessLinks)
                needProcessLinks = getLinkProcessor().addLinks(newLinks);
            if (!needProcessLinks)
                ASPx.FinalizeScriptProcessing(isCallback);
        }
    }
    ASPx.FinalizeScriptProcessing = function (isCallback) {
        createdIncludeScripts = [];
        appendedScriptsCount = 0;
        var linkProcessor = getLinkProcessor();
        if (linkProcessor.hasLinks())
            _aspxSweepDuplicatedLinks();
        linkProcessor.reset();
        _aspxSweepDuplicatedScripts();
        _aspxRunStartupScripts(isCallback);
        ResourceManager.SynchronizeResources();
    };
    var startupScriptsRunning = false;
    function _aspxRunStartupScripts(isCallback) {
        startupScriptsRunning = true;
        try {
            _aspxRunStartupScriptsCore();
        }
        finally {
            startupScriptsRunning = false;
        }
        if (ASPx.documentLoaded) {
            ASPx.GetControlCollection().InitializeElements(isCallback);
            for (var key in scriptsRestartHandlers)
                if (scriptsRestartHandlers.hasOwnProperty(key))
                    scriptsRestartHandlers[key]();
            _aspxRunEndCallbackScript();
        }
    }
    function _aspxIsStartupScriptsRunning(isCallback) {
        return startupScriptsRunning;
    }
    function _aspxRunStartupScriptsCore() {
        var scripts = _aspxGetStartupScripts();
        var code;
        for (var i = 0; i < scripts.length; i++) {
            if (!isScriptExecuted(scripts[i])) {
                code = ASPx.GetScriptCode(scripts[i]);
                eval(code);
                markScriptAsExecuted(scripts[i]);
            }
        }
    }
    function _aspxRunEndCallbackScript() {
        while (callbackOwnerNames.length > 0) {
            var callbackOwnerName = callbackOwnerNames.pop();
            var callbackOwner = ASPx.GetControlCollection().Get(callbackOwnerName);
            if (callbackOwner)
                callbackOwner.DoEndCallback();
        }
    }
    ASPx.OnScriptReadyStateChangedCallback = function (scriptElement, isCallback) {
        if (scriptElement.readyState == "loaded") {
            _aspxCacheIncludeScript(scriptElement);
            for (var i = 0; i < createdIncludeScripts.length; i++) {
                var script = createdIncludeScripts[i];
                if (_aspxIsKnownIncludeScript(script)) {
                    if (!isScriptExecuted(script)) {
                        markScriptAsExecuted(script);
                        ASPx.AppendScript(script);
                        appendedScriptsCount++;
                    }
                } else
                    break;
            }
            if (createdIncludeScripts.length == appendedScriptsCount)
                ASPx.FinalizeScriptProcessing(isCallback);
        }
    };
    ASPx.OnScriptLoadCallback = function (scriptElement, isCallback) {
        appendedScriptsCount++;
        if (scriptElement.nextCreatedScript) {
            ASPx.AppendScript(scriptElement.nextCreatedScript);
            _aspxCacheIncludeScript(scriptElement.nextCreatedScript);
        }
        if (createdIncludeScripts.length == appendedScriptsCount)
            ASPx.FinalizeScriptProcessing(isCallback);
    };
    function _aspxAddScriptsRestartHandler(objectName, handler) {
        scriptsRestartHandlers[objectName] = handler;
    }
    function _aspxMoveLinkElements() {
        var head = ASPx.GetNodesByTagName(document, "head")[0];
        var bodyLinks = ASPx.GetNodesByTagName(document.body, "link");
        if (head && bodyLinks.length > 0) {
            var headLinks = ASPx.GetNodesByTagName(head, "link");
            var dxLinkAnchor = head.firstChild;
            for (var i = 0; i < headLinks.length; i++) {
                if (headLinks[i].href.indexOf(ResourceManager.HandlerStr) > -1)
                    dxLinkAnchor = headLinks[i].nextSibling;
            }
            while (bodyLinks.length > 0)
                head.insertBefore(bodyLinks[0], dxLinkAnchor);
        }
    }
    var LinkProcessor = ASPx.CreateClass(null, {
        constructor: function () {
            this.loadedLinkCount = 0;
            this.linkInfos = [];
            this.loadingObservationTimerID = -1;
        },
        process: function () {
            if (this.hasLinks()) {
                if (this.isLinkLoadEventSupported())
                    this.processViaLoadEvent();
                else
                    this.processViaTimer();
            }
            else
                _aspxSweepDuplicatedLinks();
            _aspxMoveLinkElements();
        },
        addLinks: function (links) {
            var prevLinkCount = this.linkInfos.length;
            for (var i = 0; i < links.length; i++) {
                var link = links[i];
                if (link.loaded || link.rel != "stylesheet" || link.type != "text/css" || link.href.toLowerCase().indexOf("dxr.axd?r=") == -1)
                    continue;
                var linkInfo = {
                    link: link,
                    href: link.href
                };
                this.linkInfos.push(linkInfo);
            }
            return prevLinkCount != this.linkInfos.length;
        },
        hasLinks: function () {
            return this.linkInfos.length > 0;
        },
        reset: function () {
            this.linkInfos = [];
            this.loadedLinkCount = 0;
        },
        processViaLoadEvent: function () {
            var that = this;
            for (var i = 0, linkInfo; linkInfo = this.linkInfos[i]; i++) {
                if (ASPx.Browser.IE && ASPx.Browser.Version < 9)
                    linkInfo.link.onreadystatechange = function () { that.onLinkReadyStateChanged(this); };
                else
                    linkInfo.link.onload = this.onLinkLoad.aspxBind(this);
            }
        },
        isLinkLoadEventSupported: function () {
            return !(ASPx.Browser.Chrome && ASPx.Browser.MajorVersion < 19 || ASPx.Browser.Firefox && ASPx.Browser.MajorVersion < 9 ||
                ASPx.Browser.Safari && ASPx.Browser.MajorVersion < 6 || ASPx.Browser.AndroidDefaultBrowser && ASPx.Browser.MajorVersion < 4.4);
        },
        processViaTimer: function () {
            if (this.loadingObservationTimerID == -1)
                this.onLinksLoadingObserve();
        },
        onLinksLoadingObserve: function () {
            if (this.getIsAllLinksLoaded()) {
                this.loadingObservationTimerID = -1;
                this.onAllLinksLoad();
            }
            else
                this.loadingObservationTimerID = window.setTimeout(this.onLinksLoadingObserve.aspxBind(this), 100);
        },
        getIsAllLinksLoaded: function () {
            var styleSheets = document.styleSheets;
            var loadedLinkHrefs = {};
            for (var i = 0; i < styleSheets.length; i++) {
                var styleSheet = styleSheets[i];
                try {
                    if (styleSheet.cssRules)
                        loadedLinkHrefs[styleSheet.href] = 1;
                }
                catch (ex) { }
            }
            var loadedLinksCount = 0;
            for (var i = 0, linkInfo; linkInfo = this.linkInfos[i]; i++) {
                if (loadedLinkHrefs[linkInfo.href])
                    loadedLinksCount++;
            }
            return loadedLinksCount == this.linkInfos.length;
        },
        onAllLinksLoad: function () {
            this.reset();
            _aspxSweepDuplicatedLinks();
            if (createdIncludeScripts.length == 0)
                ASPx.FinalizeScriptProcessing(true);
        },
        onLinkReadyStateChanged: function (linkElement) {
            if (linkElement.readyState == "complete")
                this.onLinkLoadCore(linkElement);
        },
        onLinkLoad: function (evt) {
            var linkElement = ASPx.Evt.GetEventSource(evt);
            this.onLinkLoadCore(linkElement);
        },
        onLinkLoadCore: function (linkElement) {
            if (!this.hasLinkElement(linkElement)) return;
            this.loadedLinkCount++;
            if (!ASPx.Browser.Firefox && this.loadedLinkCount == this.linkInfos.length ||
                ASPx.Browser.Firefox && this.loadedLinkCount == 2 * this.linkInfos.length) {
                this.onAllLinksLoad();
            }
        },
        hasLinkElement: function (linkElement) {
            for (var i = 0, linkInfo; linkInfo = this.linkInfos[i]; i++) {
                if (linkInfo.link == linkElement)
                    return true;
            }
            return false;
        }
    });
    var linkProcessor = null;
    function getLinkProcessor() {
        if (linkProcessor == null)
            linkProcessor = new LinkProcessor();
        return linkProcessor;
    }
    var IFrameHelper = ASPx.CreateClass(null, {
        constructor: function (params) {
            this.params = params || {};
            this.params.src = this.params.src || "";
            this.CreateElements();
        },
        CreateElements: function () {
            var elements = IFrameHelper.Create(this.params);
            this.containerElement = elements.container;
            this.iframeElement = elements.iframe;
            this.AttachOnLoadHandler(this, this.iframeElement);
            this.SetLoading(true);
            if (this.params.onCreate)
                this.params.onCreate(this.containerElement, this.iframeElement);
        },
        AttachOnLoadHandler: function (instance, element) {
            ASPx.Evt.AttachEventToElement(element, "load", function () {
                instance.OnLoad(element);
            });
        },
        OnLoad: function (element) {
            this.SetLoading(false, element);
            if (!element.preventCustomOnLoad && this.params.onLoad)
                this.params.onLoad();
        },
        IsLoading: function (element) {
            element = element || this.iframeElement;
            if (element)
                return element.loading;
            return false;
        },
        SetLoading: function (value, element) {
            element = element || this.iframeElement;
            if (element)
                element.loading = value;
        },
        GetContentUrl: function () {
            return this.params.src;
        },
        SetContentUrl: function (url, preventBrowserCaching) {
            if (url) {
                this.params.src = url;
                if (preventBrowserCaching)
                    url = IFrameHelper.AddRandomParamToUrl(url);
                this.SetLoading(true);
                this.iframeElement.src = url;
            }
        },
        RefreshContentUrl: function () {
            if (this.IsLoading())
                return;
            this.SetLoading(true);
            var oldContainerElement = this.containerElement;
            var oldIframeElement = this.iframeElement;
            var postfix = "_del" + Math.floor(Math.random() * 100000).toString();
            if (this.params.id)
                oldIframeElement.id = this.params.id + postfix;
            if (this.params.name)
                oldIframeElement.name = this.params.name + postfix;
            ASPx.SetStyles(oldContainerElement, { height: 0 });
            this.CreateElements();
            oldIframeElement.preventCustomOnLoad = true;
            oldIframeElement.src = ASPx.BlankUrl;
            window.setTimeout(function () {
                oldContainerElement.parentNode.removeChild(oldContainerElement);
            }, 10000);
        }
    });
    IFrameHelper.Create = function (params) {
        var iframeHtmlStringParts = ["<iframe frameborder='0'"];
        if (params) {
            if (params.id)
                iframeHtmlStringParts.push(" id='", params.id, "'");
            if (params.name)
                iframeHtmlStringParts.push(" name='", params.name, "'");
            if (params.title)
                iframeHtmlStringParts.push(" title='", params.title, "'");
            if (params.scrolling)
                iframeHtmlStringParts.push(" scrolling='", params.scrolling, "'");
            if (params.src)
                iframeHtmlStringParts.push(" src='", params.src, "'");
        }
        iframeHtmlStringParts.push("></iframe>");
        var containerElement = ASPx.CreateHtmlElementFromString("<div style='border-width: 0px; padding: 0px; margin: 0px'></div>");
        var iframeElement = ASPx.CreateHtmlElementFromString(iframeHtmlStringParts.join(""));
        containerElement.appendChild(iframeElement);
        return {
            container: containerElement,
            iframe: iframeElement
        };
    };
    IFrameHelper.AddRandomParamToUrl = function (url) {
        var prefix = url.indexOf("?") > -1
            ? "&"
            : "?";
        var param = prefix + Math.floor(Math.random() * 100000).toString();
        var anchorIndex = url.indexOf("#");
        return anchorIndex == -1
            ? url + param
            : url.substr(0, anchorIndex) + param + url.substr(anchorIndex);
    };
    IFrameHelper.GetWindow = function (name) {
        if (ASPx.Browser.IE)
            return window.frames[name].window;
        else {
            var frameElement = document.getElementById(name);
            return (frameElement != null) ? frameElement.contentWindow : null;
        }
    };
    IFrameHelper.GetDocument = function (name) {
        var frameElement;
        if (ASPx.Browser.IE) {
            frameElement = window.frames[name];
            return (frameElement != null) ? frameElement.document : null;
        }
        else {
            frameElement = document.getElementById(name);
            return (frameElement != null) ? frameElement.contentDocument : null;
        }
    };
    IFrameHelper.GetDocumentBody = function (name) {
        var doc = IFrameHelper.GetDocument(name);
        return (doc != null) ? doc.body : null;
    };
    IFrameHelper.GetDocumentHead = function (name) {
        var doc = IFrameHelper.GetDocument(name);
        return (doc != null) ? doc.head || doc.getElementsByTagName('head')[0] : null;
    };
    IFrameHelper.GetElement = function (name) {
        if (ASPx.Browser.IE)
            return window.frames[name].window.frameElement;
        else
            return document.getElementById(name);
    };
    var KbdHelper = ASPx.CreateClass(null, {
        constructor: function (control) {
            this.control = control;
        },
        Init: function () {
            KbdHelper.GlobalInit();
            var elements = this.getFocusableElements();
            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];
                element.tabIndex = Math.max(element.tabIndex, 0);
                ASPx.Evt.AttachEventToElement(element, "click", function (e) { this.HandleClick(e); }.aspxBind(this));
                ASPx.Evt.AttachEventToElement(element, "focus", function (e) {
                    return this.onElementFocus(e);
                }.aspxBind(this));
                ASPx.Evt.AttachEventToElement(element, "blur", function () { this.onBlur(); }.aspxBind(this));
            }
        },
        onElementFocus: function (e) {
            if (!this.CanFocus(e))
                return true;
            KbdHelper.active = this;
        },
        getFocusableElements: function () {
            return [this.GetFocusableElement()];
        },
        GetFocusableElement: function () { return this.control.GetMainElement(); },
        canHandleNoFocusAction: function () {
            var focusableElements = this.getFocusableElements();
            for (var i = 0; i < focusableElements.length; i++) {
                if (focusableElements[i] === _aspxGetFocusedElement())
                    return false;
            }
            return true;
        },
        CanFocus: function (e) {
            var tag = ASPx.Evt.GetEventSource(e).tagName;
            if (tag == "A" || tag == "TEXTAREA" || tag == "INPUT" || tag == "SELECT" || tag == "IFRAME" || tag == "OBJECT")
                return false;
            return true;
        },
        HandleClick: function (e) {
            if (!this.CanFocus(e))
                return;
            this.Focus();
        },
        Focus: function () {
            try {
                this.GetFocusableElement().focus();
            } catch (e) {
            }
        },
        onBlur: function () {
            delete KbdHelper.active;
        },
        HandleKeyDown: function (e) { },
        HandleKeyPress: function (e) { },
        HandleKeyUp: function (e) { },
        HandleNoFocusAction: function (e) { },
        FocusByAccessKey: function () { }
    });
    KbdHelper.GlobalInit = function () {
        if (KbdHelper.ready)
            return;
        ASPx.Evt.AttachEventToDocument("keydown", KbdHelper.OnKeyDown);
        ASPx.Evt.AttachEventToDocument("keypress", KbdHelper.OnKeyPress);
        ASPx.Evt.AttachEventToDocument("keyup", KbdHelper.OnKeyUp);
        KbdHelper.ready = true;
    };
    KbdHelper.swallowKey = false;
    KbdHelper.accessKeys = {};
    KbdHelper.ProcessKey = function (e, actionName) {
        if (!KbdHelper.active)
            return;
        if (KbdHelper.active.canHandleNoFocusAction()) {
            KbdHelper.active["HandleNoFocusAction"](e, actionName);
            return;
        }
        var ctl = KbdHelper.active.control;
        if (ctl !== ASPx.GetControlCollection().Get(ctl.name)) {
            delete KbdHelper.active;
            return;
        }
        if (!KbdHelper.swallowKey)
            KbdHelper.swallowKey = KbdHelper.active[actionName](e);
        if (KbdHelper.swallowKey)
            ASPx.Evt.PreventEvent(e);
    };
    KbdHelper.OnKeyDown = function (e) {
        KbdHelper.swallowKey = false;
        if (KbdHelper.TryAccessKey(KbdHelper.getKeyName(e)))
            ASPx.Evt.PreventEvent(e);
        else
            KbdHelper.ProcessKey(e, "HandleKeyDown");
    };
    KbdHelper.OnKeyPress = function (e) { KbdHelper.ProcessKey(e, "HandleKeyPress"); };
    KbdHelper.OnKeyUp = function (e) { KbdHelper.ProcessKey(e, "HandleKeyUp"); };
    KbdHelper.RegisterAccessKey = function (obj) {
        var key;
        if (obj.accessKey)
            key = "CtrlShift" + obj.accessKey;
        else if (obj.keyTipModeShortcut)
            key = obj.keyTipModeShortcut;
        if (!key) return;
        KbdHelper.accessKeys[key.toLowerCase()] = obj.name;
    };
    KbdHelper.TryAccessKey = function (code) {
        var key = code.toLowerCase ? code.toLowerCase() : String.fromCharCode(code).toLowerCase();
        var name = KbdHelper.accessKeys[key];
        if (!name) return false;
        var obj = ASPx.GetControlCollection().Get(name);
        return KbdHelper.ClickAccessKey(obj);
    };
    KbdHelper.ClickAccessKey = function (control) {
        if (!control) return false;
        var el = control.GetMainElement();
        if (!el) return false;
        el.focus();
        setTimeout(function () {
            if (KbdHelper.active && KbdHelper.active.FocusByAccessKey)
                KbdHelper.active.FocusByAccessKey();
        }.aspxBind(this), 100);
        return true;
    };
    KbdHelper.getKeyName = function (e) {
        var name = "";
        if (e.altKey)
            name += "Alt";
        if (e.ctrlKey)
            name += "Ctrl";
        if (e.shiftKey)
            name += "Shift";
        var keyCode = e.key || e.code || String.fromCharCode(ASPx.Evt.GetKeyCode(e));
        if (keyCode.match(/key/i))
            name += keyCode.replace(/key/i, "");
        else if (keyCode.match(/digit/i))
            name += keyCode.replace(/digit/i, "");
        else if (keyCode.match(/arrow/i))
            name += keyCode.replace(/arrow/i, "");
        else if (keyCode.match(/ins/i))
            name += "Ins";
        else if (keyCode.match(/del/i))
            name += "Del";
        else if (keyCode.match(/back/i))
            name += "Back";
        else if (!keyCode.match(/alt/i) && !keyCode.match(/control/i) && !keyCode.match(/shift/i))
            name += keyCode;
        return name.replace(/^a-zA-Z0-9/, "");
    };
    AccessKeysHelper = ASPx.CreateClass(KbdHelper, {
        constructor: function (control) {
            this.constructor.prototype.constructor.call(this, control);
            this.accessKeysVisible = false;
            this.activeKey = null;
            this.accessKey = new AccessKey(control.accessKey);
            this.accessKeys = this.accessKey.accessKeys;
            this.charIndex = 0;
            this.onFocusByAccessKey = null;
            this.onClose = null;
            this.manualStopProcessing = false;
            this.isActive = false;
        },
        Init: function (control) {
            KbdHelper.prototype.Init.call(this);
            KbdHelper.RegisterAccessKey(control);
        },
        Add: function (accessKey) {
            this.accessKey.Add(accessKey);
        },
        HandleKeyDown: function (e) {
            var control = this.control;
            var keyCode = ASPx.Evt.GetKeyCode(e);
            var restoreFocus = false;
            var stopProcessing = this.processKeyDown(keyCode);
            if (stopProcessing.value) {
                this.stopProcessing();
                if (this.onClosedOnEscape && (keyCode == ASPx.Key.Esc || stopProcessing.fireEvent))
                    this.onClosedOnEscape();
            }
            return stopProcessing;
        },
        HandleNoFocusAction: function (e, actionName) {
            var keyCode = ASPx.Evt.GetKeyCode(e);
            if (this.onClosedOnEscape && keyCode == ASPx.Key.Esc && actionName == "HandleKeyDown")
                this.onClosedOnEscape();
        },
        Activate: function () {
            KbdHelper.ClickAccessKey(this.control);
        },
        Stop: function () {
            this.stopProcessing();
        },
        stopProcessing: function () {
            this.HideAccessKeys();
            if (KbdHelper.active && this.isActive) {
                this.isActive = false;
                KbdHelper.active.control.GetMainElement().blur();
                delete KbdHelper.active;
            }
        },
        onBlur: function () {
            if (this.manualStopProcessing) {
                this.manualStopProcessing = false;
                return;
            }
            this.HideAccessKeys();
            KbdHelper.prototype.onBlur.call(this);
        },
        processKeyDown: function (keyCode) {
            switch (keyCode) {
                case ASPx.Key.Left:
                    this.TryMoveFocusLeft();
                    return { value: false };
                case ASPx.Key.Right:
                    this.TryMoveFocusRight();
                    return { value: false };
                case ASPx.Key.Esc:
                    if (this.control.hideAllPopups)
                        this.control.hideAllPopups(true, true);
                    if (this.activeKey)
                        this.activeKey = this.activeKey.Return();
                    this.charIndex = 0;
                    if (!this.activeKey)
                        return { value: true };
                    break;
                case ASPx.Key.Enter:
                    return { value: true };
                default:
                    if (!ASPx.IsPrintableKey(keyCode))
                        return { value: false };
                    var char = String.fromCharCode(keyCode).toUpperCase();
                    var needToContinue = { value: false };
                    var keyResult;
                    if (this.activeKey)
                        keyResult = this.activeKey.TryAccessKey(char, this.charIndex, needToContinue);
                    if (needToContinue.value) {
                        this.charIndex++;
                        return { value: false };
                    }
                    this.charIndex = 0;
                    if (keyResult !== undefined)
                        this.activeKey = keyResult;
                    else
                        return { value: true, fireEvent: true };
                    if (!this.activeKey || !this.activeKey.accessKeys || this.activeKey.accessKeys.length == 0) {
                        if (this.activeKey && this.activeKey.manualStopProcessing) {
                            this.manualStopProcessing = true;
                            break;
                        }
                        return { value: true, fireEvent: true };
                    }
            }
            return { value: false };
        },
        TryMoveFocusLeft: function (modifier) { },
        TryMoveFocusRight: function (modifier) { },
        TryMoveFocusUp: function (modifier) { },
        TryMoveFocusDown: function (modifier) { },
        FocusByAccessKey: function () {
            if (this.onFocusByAccessKey)
                this.onFocusByAccessKey();
            this.HideAccessKeys();
            KbdHelper.prototype.FocusByAccessKey.call(this);
            this.activeKey = this.accessKey;
            this.activeKey.execute();
            this.isActive = true;
        },
        HideAccessKeys: function () {
            this.hideAccessKeys(this.accessKey);
        },
        hideAccessKeys: function (accessKey) {
            for (var i = 0, ak; ak = accessKey.accessKeys[i]; i++) {
                this.hideAccessKeys(ak);
            }
            if (accessKey)
                accessKey.hide();
        },
        HandleClick: function (e) {
            KbdHelper.prototype.HandleClick.call(this, e);
            this.stopProcessing();
        }
    });
    AccessKey = ASPx.CreateClass(null, {
        constructor: function (popupItem, getPopupElement, keyTipElement, key, onlyClick, manualStopProcessing) {
            this.key = key ? key : keyTipElement ? ASPxClientUtils.Trim(ASPx.GetInnerText(keyTipElement)) : null;
            this.popupItem = popupItem;
            this.getPopupElement = getPopupElement;
            this.keyTipElement = keyTipElement;
            this.accessKeys = [];
            this.needShowChilds = true;
            this.parent = null;
            this.onlyClick = onlyClick;
            this.manualStopProcessing = manualStopProcessing;
        },
        Add: function (accessKey) {
            this.accessKeys.push(accessKey);
            accessKey.parent = this;
        },
        TryAccessKey: function (char, index, needToContinue) {
            if (!this.accessKeys || this.accessKeys.length == 0)
                return;
            for (var i = 0, accessKey; accessKey = this.accessKeys[i]; i++) {
                if (accessKey.key[index] == char && accessKey.isVisible()) {
                    if (accessKey.key[index + 1]) {
                        needToContinue.value = true;
                    }
                    else {
                        accessKey.execute();
                        return accessKey;
                    }
                } else {
                    accessKey.hide();
                }
            }
            for (var i = 0, accessKey; accessKey = this.accessKeys[i]; i++) {
                var key = accessKey.TryAccessKey(char, index, needToContinue);
                if (key)
                    return key;
            }
            return;
        },
        isVisible: function () {
            return ASPx.GetElementVisibility(this.keyTipElement);
        },
        Return: function () {
            this.hideChildAccessKeys();
            if (this.parent) {
                this.parent.showAccessKeys(true);
            }
            return this.parent;
        },
        execute: function () {
            this.hideAll();
            if (this.popupItem && this.popupItem.accessKeyClick && !this.onlyClick)
                this.popupItem.accessKeyClick();
            if (this.getPopupElement && this.onlyClick)
                ASPx.Evt.EmulateMouseClick(this.getPopupElement(this.popupItem));
            if (this.accessKeys)
                setTimeout(function () {
                    this.showAccessKeys(true);
                }.aspxBind(this), 100);
        },
        showAccessKeys: function (directShow) {
            if (!directShow && !this.needShowChilds)
                return;
            for (var i = 0; i < this.accessKeys.length; i++) {
                var accessKey = this.accessKeys[i];
                if (accessKey) {
                    var popupElement = accessKey.getPopupElement ? accessKey.getPopupElement(accessKey.popupItem) : null;
                    if (popupElement && ASPx.IsElementVisible(popupElement, true)) {
                        this.show(accessKey);
                    }
                    accessKey.showAccessKeys();
                }
            }
        },
        show: function (accessKey) {
            var keyTipElement = accessKey.keyTipElement;
            var popupElement = accessKey.getPopupElement(accessKey.popupItem);
            var top = ASPx.GetAbsolutePositionY(popupElement);
            var left = ASPx.GetAbsolutePositionX(popupElement);
            if (accessKey.popupItem.getAccessKeyPosition)
                switch (accessKey.popupItem.getAccessKeyPosition()) {
                    case "AboveRight":
                        left = left + popupElement.offsetWidth - keyTipElement.offsetWidth / 3;
                        top = top - keyTipElement.offsetHeight / 2;
                        break;
                    case "Right":
                        left = left + popupElement.offsetWidth - keyTipElement.offsetWidth / 3;
                        top = top + popupElement.offsetHeight / 2 - keyTipElement.offsetHeight / 2;
                        break;
                    case "BelowRight":
                        left = left + popupElement.offsetWidth - keyTipElement.offsetWidth / 3;
                        top = top + keyTipElement.offsetHeight / 2;
                        break;
                    default:
                        top = top + popupElement.offsetHeight;
                        left = left + popupElement.offsetWidth / 2 - keyTipElement.offsetWidth / 2;
                        break;
                }
            else {
                top = top + popupElement.offsetHeight;
                left = left + popupElement.offsetWidth / 2 - keyTipElement.offsetWidth / 2;
            }
            ASPx.SetAbsoluteY(keyTipElement, top);
            ASPx.SetAbsoluteX(keyTipElement, left);
            ASPx.SetElementVisibility(keyTipElement, true);
        },
        hide: function () {
            if (this.keyTipElement)
                ASPx.SetElementVisibility(this.keyTipElement, false);
        },
        hideChildAccessKeys: function () {
            this.hideAccessKeys(this.accessKeys);
        },
        hideAccessKeys: function (accessKeys) {
            if (accessKeys) {
                for (var i = 0, accessKey; accessKey = accessKeys[i]; i++) {
                    if (accessKey.keyTipElement)
                        accessKey.hide();
                    accessKey.hideChildAccessKeys();
                }
            }
        },
        hideAll: function () {
            this.getRoot(this).hideChildAccessKeys();
        },
        getRoot: function (accessKey) {
            if (!accessKey.parent)
                return accessKey;
            return this.getRoot(accessKey.parent);
        }
    });
    var focusedElement = null;
    function aspxOnElementFocused(evt) {
        evt = ASPx.Evt.GetEvent(evt);
        if (evt && evt.target)
            focusedElement = evt.target;
    }
    function _aspxInitializeFocus() {
        if (!ASPx.GetActiveElement())
            ASPx.Evt.AttachEventToDocument("focus", aspxOnElementFocused);
    }
    function _aspxGetFocusedElement() {
        var activeElement = ASPx.GetActiveElement();
        return activeElement ? activeElement : focusedElement;
    }
    CheckBoxCheckState = {
        Checked: "Checked",
        Unchecked: "Unchecked",
        Indeterminate: "Indeterminate"
    };
    CheckBoxInputKey = {
        Checked: "C",
        Unchecked: "U",
        Indeterminate: "I"
    };
    var CheckableElementStateController = ASPx.CreateClass(null, {
        constructor: function (imageProperties) {
            this.checkBoxStates = [];
            this.imageProperties = imageProperties;
        },
        GetValueByInputKey: function (inputKey) {
            return this.GetFirstValueBySecondValue("Value", "StateInputKey", inputKey);
        },
        GetInputKeyByValue: function (value) {
            return this.GetFirstValueBySecondValue("StateInputKey", "Value", value);
        },
        GetImagePropertiesNumByInputKey: function (value) {
            return this.GetFirstValueBySecondValue("ImagePropertiesNumber", "StateInputKey", value);
        },
        GetNextCheckBoxValue: function (currentValue, allowGrayed) {
            var currentInputKey = this.GetInputKeyByValue(currentValue);
            var nextInputKey = '';
            switch (currentInputKey) {
                case CheckBoxInputKey.Checked:
                    nextInputKey = CheckBoxInputKey.Unchecked; break;
                case CheckBoxInputKey.Unchecked:
                    nextInputKey = allowGrayed ? CheckBoxInputKey.Indeterminate : CheckBoxInputKey.Checked; break;
                case CheckBoxInputKey.Indeterminate:
                    nextInputKey = CheckBoxInputKey.Checked; break;
            }
            return this.GetValueByInputKey(nextInputKey);
        },
        GetCheckStateByInputKey: function (inputKey) {
            switch (inputKey) {
                case CheckBoxInputKey.Checked:
                    return CheckBoxCheckState.Checked;
                case CheckBoxInputKey.Unchecked:
                    return CheckBoxCheckState.Unchecked;
                case CheckBoxInputKey.Indeterminate:
                    return CheckBoxCheckState.Indeterminate;
            }
        },
        GetValueByCheckState: function (checkState) {
            switch (checkState) {
                case CheckBoxCheckState.Checked:
                    return this.GetValueByInputKey(CheckBoxInputKey.Checked);
                case CheckBoxCheckState.Unchecked:
                    return this.GetValueByInputKey(CheckBoxInputKey.Unchecked);
                case CheckBoxCheckState.Indeterminate:
                    return this.GetValueByInputKey(CheckBoxInputKey.Indeterminate);
            }
        },
        GetFirstValueBySecondValue: function (firstValueName, secondValueName, secondValue) {
            return this.GetValueByFunc(firstValueName,
                function (checkBoxState) { return checkBoxState[secondValueName] === secondValue; });
        },
        GetValueByFunc: function (valueName, func) {
            for (var i = 0; i < this.checkBoxStates.length; i++) {
                if (func(this.checkBoxStates[i]))
                    return this.checkBoxStates[i][valueName];
            }
        },
        AssignElementClassName: function (element, cssClassPropertyKey, disabledCssClassPropertyKey, assignedClassName) {
            var classNames = [];
            for (var i = 0; i < this.imageProperties[cssClassPropertyKey].length; i++) {
                classNames.push(this.imageProperties[disabledCssClassPropertyKey][i]);
                classNames.push(this.imageProperties[cssClassPropertyKey][i]);
            }
            var elementClassName = element.className;
            for (var i = 0; i < classNames.length; i++) {
                var className = classNames[i];
                var index = elementClassName.indexOf(className);
                if (index > -1)
                    elementClassName = elementClassName.replace((index == 0 ? '' : ' ') + className, "");
            }
            elementClassName += " " + assignedClassName;
            element.className = elementClassName;
        },
        UpdateInternalCheckBoxDecoration: function (mainElement, inputKey, enabled) {
            var imagePropertiesNumber = this.GetImagePropertiesNumByInputKey(inputKey);
            for (var imagePropertyKey in this.imageProperties) {
                if (this.imageProperties.hasOwnProperty(imagePropertyKey)) {
                    var propertyValue = this.imageProperties[imagePropertyKey][imagePropertiesNumber];
                    propertyValue = propertyValue || !isNaN(propertyValue) ? propertyValue : "";
                    switch (imagePropertyKey) {
                        case "0": mainElement.title = propertyValue; break;
                        case "1": mainElement.style.width = propertyValue + (propertyValue != "" ? "px" : ""); break;
                        case "2": mainElement.style.height = propertyValue + (propertyValue != "" ? "px" : ""); break;
                    }
                    if (enabled) {
                        switch (imagePropertyKey) {
                            case "3": this.SetImageSrc(mainElement, propertyValue); break;
                            case "4":
                                this.AssignElementClassName(mainElement, "4", "8", propertyValue);
                                break;
                            case "5": this.SetBackgroundPosition(mainElement, propertyValue, true); break;
                            case "6": this.SetBackgroundPosition(mainElement, propertyValue, false); break;
                        }
                    } else {
                        switch (imagePropertyKey) {
                            case "7": this.SetImageSrc(mainElement, propertyValue); break;
                            case "8":
                                this.AssignElementClassName(mainElement, "4", "8", propertyValue);
                                break;
                            case "9": this.SetBackgroundPosition(mainElement, propertyValue, true); break;
                            case "10": this.SetBackgroundPosition(mainElement, propertyValue, false); break;
                        }
                    }
                }
            }
        },
        SetImageSrc: function (mainElement, src) {
            if (src === "") {
                mainElement.style.backgroundImage = "";
                mainElement.style.backgroundPosition = "";
            }
            else {
                mainElement.style.backgroundImage = "url('" + src + "')";
                this.SetBackgroundPosition(mainElement, 0, true);
                this.SetBackgroundPosition(mainElement, 0, false);
            }
        },
        SetBackgroundPosition: function (element, value, isX) {
            if (value === "") {
                element.style.backgroundPosition = value;
                return;
            }
            if (element.style.backgroundPosition === "")
                element.style.backgroundPosition = isX ? "-" + value.toString() + "px 0px" : "0px -" + value.toString() + "px";
            else {
                var position = element.style.backgroundPosition.split(' ');
                element.style.backgroundPosition = isX ? '-' + value.toString() + "px " + position[1] : position[0] + " -" + value.toString() + "px";
            }
        },
        AddState: function (value, stateInputKey, imagePropertiesNumber) {
            this.checkBoxStates.push({
                "Value": value,
                "StateInputKey": stateInputKey,
                "ImagePropertiesNumber": imagePropertiesNumber
            });
        },
        GetAriaCheckedValue: function (state) {
            switch (state) {
                case ASPx.CheckBoxCheckState.Checked: return "true";
                case ASPx.CheckBoxCheckState.Unchecked: return "false";
                case ASPx.CheckBoxCheckState.Indeterminate: return "mixed";
                default: return "";
            }
        }
    });
    CheckableElementStateController.Create = function (imageProperties, valueChecked, valueUnchecked, valueGrayed, allowGrayed) {
        var stateController = new CheckableElementStateController(imageProperties);
        stateController.AddState(valueChecked, CheckBoxInputKey.Checked, 0);
        stateController.AddState(valueUnchecked, CheckBoxInputKey.Unchecked, 1);
        if (typeof (valueGrayed) != "undefined")
            stateController.AddState(valueGrayed, CheckBoxInputKey.Indeterminate, allowGrayed ? 2 : 1);
        stateController.allowGrayed = allowGrayed;
        return stateController;
    };
    var CheckableElementHelper = ASPx.CreateClass(null, {
        InternalCheckBoxInitialize: function (internalCheckBox) {
            this.AttachToMainElement(internalCheckBox);
            this.AttachToInputElement(internalCheckBox);
        },
        AttachToMainElement: function (internalCheckBox) {
            var instance = this;
            if (internalCheckBox.mainElement) {
                ASPx.Evt.AttachEventToElement(internalCheckBox.mainElement, "click",
                    function (evt) {
                        instance.InvokeClick(internalCheckBox, evt);
                        if (!internalCheckBox.disableCancelBubble)
                            return ASPx.Evt.PreventEventAndBubble(evt);
                    }
                );
                ASPx.Evt.AttachEventToElement(internalCheckBox.mainElement, "mousedown",
                    function (evt) {
                        internalCheckBox.Refocus();
                    }
                );
                ASPx.Evt.PreventElementDragAndSelect(internalCheckBox.mainElement, true);
            }
        },
        AttachToInputElement: function (internalCheckBox) {
            var instance = this;
            if (internalCheckBox.inputElement && internalCheckBox.mainElement) {
                var checkableElement = internalCheckBox.accessibilityCompliant ? internalCheckBox.mainElement : internalCheckBox.inputElement;
                ASPx.Evt.AttachEventToElement(checkableElement, "focus",
                    function (evt) {
                        if (!internalCheckBox.enabled)
                            checkableElement.blur();
                        else
                            internalCheckBox.OnFocus();
                    }
                );
                ASPx.Evt.AttachEventToElement(checkableElement, "blur",
                    function (evt) {
                        internalCheckBox.OnLostFocus();
                    }
                );
                ASPx.Evt.AttachEventToElement(checkableElement, "keyup",
                    function (evt) {
                        if (ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Space)
                            instance.InvokeClick(internalCheckBox, evt);
                    }
                );
                ASPx.Evt.AttachEventToElement(checkableElement, "keydown",
                    function (evt) {
                        if (ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Space)
                            return ASPx.Evt.PreventEvent(evt);
                    }
                );
            }
        },
        IsKBSInputWrapperExist: function () {
            return ASPx.Browser.Opera || ASPx.Browser.WebKitFamily;
        },
        GetICBMainElementByInput: function (icbInputElement) {
            return this.IsKBSInputWrapperExist() ? icbInputElement.parentNode.parentNode : icbInputElement.parentNode;
        },
        RequirePreventFocus: function () { return false; },
        InvokeClick: function (internalCheckBox, evt) {
            if (internalCheckBox.enabled && !internalCheckBox.readOnly) {
                var inputElementValue = internalCheckBox.inputElement.value;
                var focusableElement = internalCheckBox.accessibilityCompliant ? internalCheckBox.mainElement : internalCheckBox.inputElement;
                if (!this.RequirePreventFocus())
                    focusableElement.focus();
                if (!ASPx.Browser.IE)
                    internalCheckBox.inputElement.value = inputElementValue;
                this.InvokeClickCore(internalCheckBox, evt);
            }
        },
        InvokeClickCore: function (internalCheckBox, evt) {
            internalCheckBox.OnClick(evt);
        }
    });
    CheckableElementHelper.Instance = new CheckableElementHelper();
    var CheckBoxInternal = ASPx.CreateClass(null, {
        constructor: function (inputElement, stateController, allowGrayed, allowGrayedByClick, helper, container, storeValueInInput, key, disableCancelBubble,
            accessibilityCompliant) {
            this.inputElement = inputElement;
            this.mainElement = helper.GetICBMainElementByInput(this.inputElement);
            this.name = (key ? key : this.inputElement.id) + CheckBoxInternal.GetICBMainElementPostfix();
            this.mainElement.id = this.name;
            this.stateController = stateController;
            this.container = container;
            this.allowGrayed = allowGrayed;
            this.allowGrayedByClick = allowGrayedByClick;
            this.autoSwitchEnabled = true;
            this.storeValueInInput = !!storeValueInInput;
            this.storedInputKey = !this.storeValueInInput ? this.inputElement.value : null;
            this.disableCancelBubble = !!disableCancelBubble;
            this.accessibilityCompliant = accessibilityCompliant;
            this.focusDecoration = null;
            this.focused = false;
            this.focusLocked = false;
            this.enabled = !this.mainElement.className.match(/dxWeb_\w+Disabled(\b|_)/);
            this.readOnly = false;
            this.preventFocus = helper.RequirePreventFocus();
            this.CheckedChanged = new ASPxClientEvent();
            this.Focus = new ASPxClientEvent();
            this.LostFocus = new ASPxClientEvent();
            helper.InternalCheckBoxInitialize(this);
        },
        ChangeInputElementTabIndex: function () {
            var changeMethod = this.enabled ? ASPx.Attr.RestoreTabIndexAttribute : ASPx.Attr.SaveTabIndexAttributeAndReset;
            changeMethod(this.inputElement);
        },
        CreateFocusDecoration: function (focusedStyle) {
            this.focusDecoration = new EditorStyleDecoration(this);
            this.focusDecoration.AddStyle('F', focusedStyle[0], focusedStyle[1]);
            this.focusDecoration.AddPostfix("");
        },
        UpdateFocusDecoration: function () {
            this.focusDecoration.Update();
        },
        StoreInputKey: function (inputKey) {
            if (this.storeValueInInput)
                this.inputElement.value = inputKey;
            else
                this.storedInputKey = inputKey;
        },
        GetStoredInputKey: function () {
            if (this.storeValueInInput)
                return this.inputElement.value;
            else
                return this.storedInputKey;
        },
        OnClick: function (e) {
            if (this.autoSwitchEnabled) {
                var currentValue = this.GetValue();
                var value = this.stateController.GetNextCheckBoxValue(currentValue, this.allowGrayedByClick && this.allowGrayed);
                this.SetValue(value);
            }
            this.CheckedChanged.FireEvent(this, e);
        },
        OnFocus: function () {
            if (!this.IsFocusLocked()) {
                this.focused = true;
                this.UpdateFocusDecoration();
                this.Focus.FireEvent(this, null);
            } else
                this.UnlockFocus();
        },
        OnLostFocus: function () {
            if (!this.IsFocusLocked()) {
                this.focused = false;
                this.UpdateFocusDecoration();
                this.LostFocus.FireEvent(this, null);
            }
        },
        Refocus: function () {
            if (this.preventFocus) return;
            if (this.focused) {
                this.LockFocus();
                this.inputElement.blur();
                if (ASPx.Browser.MacOSMobilePlatform) {
                    window.setTimeout(function () {
                        ASPx.SetFocus(this.inputElement);
                    }, 100);
                } else {
                    ASPx.SetFocus(this.inputElement);
                }
            }
        },
        LockFocus: function () {
            this.focusLocked = true;
        },
        UnlockFocus: function () {
            this.focusLocked = false;
        },
        IsFocusLocked: function () {
            if (!!ASPx.Attr.GetAttribute(this.mainElement, ASPx.Attr.GetTabIndexAttributeName()))
                return false;
            return this.focusLocked;
        },
        SetValue: function (value) {
            var currentValue = this.GetValue();
            if (currentValue !== value) {
                var newInputKey = this.stateController.GetInputKeyByValue(value);
                if (newInputKey) {
                    this.StoreInputKey(newInputKey);
                    this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, newInputKey, this.enabled);
                }
            }
            if (this.accessibilityCompliant) {
                var state = this.GetCurrentCheckState();
                var value = this.stateController.GetAriaCheckedValue(state);
                if (this.mainElement.attributes["aria-checked"] !== undefined)
                    this.mainElement.setAttribute("aria-checked", value);
                if (this.mainElement.attributes["aria-selected"] !== undefined)
                    this.mainElement.setAttribute("aria-selected", value);
            }
        },
        GetValue: function () {
            return this.stateController.GetValueByInputKey(this.GetCurrentInputKey());
        },
        GetCurrentCheckState: function () {
            return this.stateController.GetCheckStateByInputKey(this.GetCurrentInputKey());
        },
        GetCurrentInputKey: function () {
            return this.GetStoredInputKey();
        },
        GetChecked: function () {
            return this.GetCurrentInputKey() === CheckBoxInputKey.Checked;
        },
        SetChecked: function (checked) {
            var newValue = this.stateController.GetValueByCheckState(checked ? CheckBoxCheckState.Checked : CheckBoxCheckState.Unchecked);
            this.SetValue(newValue);
        },
        SetEnabled: function (enabled) {
            if (this.enabled != enabled) {
                this.enabled = enabled;
                this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, this.GetCurrentInputKey(), this.enabled);
                this.ChangeInputElementTabIndex();
            }
        },
        GetEnabled: function () {
            return this.enabled;
        }
    });
    CheckBoxInternal.GetICBMainElementPostfix = function () {
        return "_D";
    };
    var CheckBoxInternalCollection = ASPx.CreateClass(CollectionBase, {
        constructor: function (imageProperties, allowGrayed, storeValueInInput, helper, disableCancelBubble, accessibilityCompliant) {
            this.constructor.prototype.constructor.call(this);
            this.stateController = allowGrayed
                ? CheckableElementStateController.Create(imageProperties, CheckBoxInputKey.Checked, CheckBoxInputKey.Unchecked, CheckBoxInputKey.Indeterminate, true)
                : CheckableElementStateController.Create(imageProperties, CheckBoxInputKey.Checked, CheckBoxInputKey.Unchecked);
            this.helper = helper || CheckableElementHelper.Instance;
            this.storeValueInInput = !!storeValueInInput;
            this.disableCancelBubble = !!disableCancelBubble;
            this.accessibilityCompliant = accessibilityCompliant;
        },
        Add: function (key, inputElement, container) {
            this.Remove(key);
            var checkBox = this.CreateInternalCheckBox(key, inputElement, container);
            CollectionBase.prototype.Add.call(this, key, checkBox);
            return checkBox;
        },
        SetImageProperties: function (imageProperties) {
            this.stateController.imageProperties = imageProperties;
        },
        CreateInternalCheckBox: function (key, inputElement, container) {
            return new CheckBoxInternal(inputElement, this.stateController, this.stateController.allowGrayed, false, this.helper, container,
                this.storeValueInInput, key, this.disableCancelBubble, this.accessibilityCompliant);
        }
    });
    var EditorStyleDecoration = ASPx.CreateClass(null, {
        constructor: function (editor) {
            this.editor = editor;
            this.postfixList = [];
            this.styles = {};
            this.innerStyles = {};
            this.nullTextClassName = "";
            this.lockUpdate = false;
        },
        GetStyleSheet: function () {
            return ASPx.GetCurrentStyleSheet();
        },
        AddPostfix: function (value, applyClass, applyBorders, applyBackground) {
            this.postfixList.push(value);
        },
        AddStyle: function (key, className, cssText) {
            this.styles[key] = this.CreateRule(className, cssText);
            this.innerStyles[key] = this.CreateRule("", this.FilterInnerCss(cssText));
        },
        CreateRule: function (className, cssText) {
            return ASPx.Str.Trim(className + " " + ASPx.CreateImportantStyleRule(this.GetStyleSheet(), cssText));
        },
        GetElementByPostfix: function (postfix) {
            return ASPx.GetElementById(this.editor.name + postfix);
        },
        LockUpdate: function () {
            this.lockUpdate = true;
        },
        UnlockUpdate: function () {
            this.lockUpdate = false;
        },
        IsUpdateLocked: function () {
            return this.lockUpdate;
        },
        Update: function () {
            if (this.IsUpdateLocked())
                return;
            this.UpdateCore();
        },
        UpdateCore: function () {
            for (var i = 0; i < this.postfixList.length; i++) {
                var postfix = this.postfixList[i];
                var inner = postfix.length > 0;
                var element = this.GetElementByPostfix(postfix);
                if (element) {
                    this.ApplyInvalidStyle(element, inner);
                    this.ApplyFocusedStyle(element, inner);
                    this.ApplyNullTextStyle(element, inner);
                }
            }
        },
        ApplyInvalidStyle: function (element, inner) {
            if (this.HasDecoration("I")) {
                var isValid = this.editor.GetIsValid();
                this.ApplyDecoration("I", element, inner, !isValid);
            }
        },
        ApplyFocusedStyle: function (element, inner) {
            if (this.HasDecoration("F"))
                this.ApplyDecoration("F", element, inner, this.editor.focused);
        },
        ApplyNullTextStyle: function (element, inner) {
            if (!this.HasDecoration("N"))
                return;
            var apply = !this.editor.focused;
            if (apply) {
                if (this.editor.CanApplyNullTextDecoration) {
                    apply = this.editor.CanApplyNullTextDecoration();
                } else {
                    var value = this.editor.GetValue();
                    apply = apply && (value == null || value === "");
                }
            }
            if (apply)
                ASPx.Attr.ChangeAttribute(element, "spellcheck", "false");
            else
                ASPx.Attr.RestoreAttribute(element, "spellcheck");
            this.ApplyDecoration("N", element, inner, apply);
        },
        HasDecoration: function (key) {
            return !!this.styles[key];
        },
        ApplyNullTextClassName: function (active) {
            var nullTextClassName = this.GetNullTextClassName();
            var editorMainElement = this.editor.GetMainElement();
            if (active)
                ASPx.AddClassNameToElement(editorMainElement, nullTextClassName);
            else
                ASPx.RemoveClassNameFromElement(editorMainElement, nullTextClassName);
        },
        GetNullTextClassName: function () {
            if (!this.nullTextClassName)
                this.InitializeNullTextClassName();
            return this.nullTextClassName;
        },
        InitializeNullTextClassName: function () {
            var nullTextStyle = this.styles["N"];
            if (nullTextStyle) {
                var nullTextStyleClassNames = nullTextStyle.split(" ");
                for (var i = 0; i < nullTextStyleClassNames.length; i++)
                    if (nullTextStyleClassNames[i].match("dxeNullText"))
                        this.nullTextClassName = nullTextStyleClassNames[i];
            }
        },
        ApplyDecoration: function (key, element, inner, active) {
            var value = inner ? this.innerStyles[key] : this.styles[key];
            ASPx.RemoveClassNameFromElement(element, value);
            if (ASPx.Browser.IE && ASPx.Browser.MajorVersion >= 11)
                var reflow = element.offsetWidth;
            if (active) {
                ASPx.AddClassNameToElement(element, value);
                if (ASPx.Browser.IE && ASPx.Browser.Version > 10 && element.border != null) {
                    var border = parseInt(element.border) || 0;
                    element.border = 1;
                    element.border = border;
                }
            }
        },
        FilterInnerCss: function (css) {
            return css.replace(/(border|background-image)[^:]*:[^;]+/gi, "");
        }
    });
    var TouchUIHelper = {
        isGesture: false,
        isMouseEventFromScrolling: false,
        isNativeScrollingAllowed: true,
        clickSensetivity: 10,
        documentTouchHandlers: {},
        documentEventAttachingAllowed: true,
        msTouchDraggableClassName: "dxMSTouchDraggable",
        touchMouseDownEventName: ASPx.Browser.WebKitTouchUI ? "touchstart" : (ASPx.Browser.Edge && ASPx.Browser.MSTouchUI && window.PointerEvent ? "pointerdown" : "mousedown"),
        touchMouseUpEventName: ASPx.Browser.WebKitTouchUI ? "touchend" : (ASPx.Browser.Edge && ASPx.Browser.MSTouchUI && window.PointerEvent ? "pointerup" : "mouseup"),
        touchMouseMoveEventName: ASPx.Browser.WebKitTouchUI ? "touchmove" : (ASPx.Browser.Edge && ASPx.Browser.MSTouchUI && window.PointerEvent ? "pointermove" : "mousemove"),
        isTouchEvent: function (evt) {
            if (!evt) return false;
            return ASPx.Browser.WebKitTouchUI && ASPx.IsExists(evt.changedTouches);
        },
        isTouchEventName: function (eventName) {
            return ASPx.Browser.WebKitTouchUI && (eventName.indexOf("touch") > -1 || eventName.indexOf("gesture") > -1);
        },
        getEventX: function (evt) {
            return ASPx.Browser.IE ? evt.pageX : evt.changedTouches[0].pageX;
        },
        getEventY: function (evt) {
            return ASPx.Browser.IE ? evt.pageY : evt.changedTouches[0].pageY;
        },
        getWebkitMajorVersion: function () {
            if (!this.webkitMajorVersion) {
                var regExp = new RegExp("applewebkit/(\\d+)", "i");
                var matches = regExp.exec(ASPx.Browser.UserAgent);
                if (matches && matches.index >= 1)
                    this.webkitMajorVersion = matches[1];
            }
            return this.webkitMajorVersion;
        },
        getIsLandscapeOrientation: function () {
            if (ASPx.Browser.MacOSMobilePlatform || ASPx.Browser.AndroidMobilePlatform)
                return Math.abs(window.orientation) == 90;
            return ASPx.GetDocumentClientWidth() > ASPx.GetDocumentClientHeight();
        },
        nativeScrollingSupported: function () {
            var allowedSafariVersion = ASPx.Browser.Version >= 5.1 && ASPx.Browser.Version < 8;
            var allowedWebKitVersion = this.getWebkitMajorVersion() > 533 && (ASPx.Browser.Chrome || this.getWebkitMajorVersion() < 600);
            return (ASPx.Browser.MacOSMobilePlatform && (allowedSafariVersion || allowedWebKitVersion))
                || (ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.PlaformMajorVersion >= 3) || (ASPx.Browser.MSTouchUI && (!ASPx.Browser.WindowsPhonePlatform || !ASPx.Browser.IE));
        },
        makeScrollableIfRequired: function (element, options) {
            if (ASPx.Browser.WebKitTouchUI && element) {
                var overflow = ASPx.GetCurrentStyle(element).overflow;
                if (element.tagName == "DIV" && overflow != "hidden" && overflow != "visible") {
                    return this.MakeScrollable(element);
                }
            }
        },
        preventScrollOnEvent: function (evt) {
        },
        handleFastTapIfRequired: function (evt, action, preventCommonClickEvents) {
            if (ASPx.Browser.WebKitTouchUI && evt.type == 'touchstart' && action) {
                this.FastTapHelper.HandleFastTap(evt, action, preventCommonClickEvents);
                return true;
            }
            return false;
        },
        ensureDocumentSizesCorrect: function () {
            return (document.documentElement.clientWidth - document.documentElement.clientHeight) / (screen.width - screen.height) > 0;
        },
        ensureOrientationChanged: function (onOrientationChangedFunction) {
            if (ASPxClientUtils.iOSPlatform || this.ensureDocumentSizesCorrect())
                onOrientationChangedFunction();
            else {
                window.setTimeout(function () {
                    this.ensureOrientationChanged(onOrientationChangedFunction);
                }.aspxBind(this), 100);
            }
        },
        onEventAttachingToDocument: function (eventName, func) {
            if (ASPx.Browser.MacOSMobilePlatform && this.isTouchEventName(eventName)) {
                if (!this.documentTouchHandlers[eventName])
                    this.documentTouchHandlers[eventName] = [];
                this.documentTouchHandlers[eventName].push(func);
                return this.documentEventAttachingAllowed;
            }
            return true;
        },
        onEventDettachedFromDocument: function (eventName, func) {
            if (ASPx.Browser.MacOSMobilePlatform && this.isTouchEventName(eventName)) {
                var handlers = this.documentTouchHandlers[eventName];
                if (handlers)
                    ASPx.Data.ArrayRemove(handlers, func);
            }
        },
        processDocumentTouchEventHandlers: function (proc) {
            var touchEventNames = ["touchstart", "touchend", "touchmove", "gesturestart", "gestureend"];
            for (var i = 0; i < touchEventNames.length; i++) {
                var eventName = touchEventNames[i];
                var handlers = this.documentTouchHandlers[eventName];
                if (handlers) {
                    for (var j = 0; j < handlers.length; j++) {
                        proc(eventName, handlers[j]);
                    }
                }
            }
        },
        removeDocumentTouchEventHandlers: function () {
            if (ASPx.Browser.MacOSMobilePlatform) {
                this.documentEventAttachingAllowed = false;
                this.processDocumentTouchEventHandlers(ASPx.Evt.DetachEventFromDocumentCore);
            }
        },
        restoreDocumentTouchEventHandlers: function () {
            if (ASPx.Browser.MacOSMobilePlatform) {
                this.documentEventAttachingAllowed = true;
                this.processDocumentTouchEventHandlers(ASPx.Evt.AttachEventToDocumentCore);
            }
        },
        IsNativeScrolling: function () {
            return TouchUIHelper.nativeScrollingSupported() && TouchUIHelper.isNativeScrollingAllowed;
        },
        pointerEnabled: !!(window.PointerEvent || window.MSPointerEvent),
        pointerDownEventName: window.PointerEvent ? "pointerdown" : "MSPointerDown",
        pointerUpEventName: window.PointerEvent ? "pointerup" : "MSPointerUp",
        pointerCancelEventName: window.PointerEvent ? "pointercancel" : "MSPointerCancel",
        pointerMoveEventName: window.PointerEvent ? "pointermove" : "MSPointerMove",
        pointerOverEventName: window.PointerEvent ? "pointerover" : "MSPointerOver",
        pointerOutEventName: window.PointerEvent ? "pointerout" : "MSPointerOut",
        pointerType: {
            Touch: (ASPx.Browser.IE && ASPx.Browser.Version == 10) ? 2 : "touch",
            Pen: (ASPx.Browser.IE && ASPx.Browser.Version == 10) ? 3 : "pen",
            Mouse: (ASPx.Browser.IE && ASPx.Browser.Version == 10) ? 4 : "mouse"
        },
        msGestureEnabled: !!(window.PointerEvent || window.MSPointerEvent) && typeof (MSGesture) != "undefined",
        msTouchCreateGesturesWrapper: function (element, onTap) {
            if (!TouchUIHelper.msGestureEnabled)
                return;
            var gesture = new MSGesture();
            gesture.target = element;
            ASPx.Evt.AttachEventToElement(element, TouchUIHelper.pointerDownEventName, function (evt) {
                gesture.addPointer(evt.pointerId);
            });
            ASPx.Evt.AttachEventToElement(element, TouchUIHelper.pointerUpEventName, function (evt) {
                gesture.stop();
            });
            if (onTap)
                ASPx.Evt.AttachEventToElement(element, "MSGestureTap", onTap);
            return gesture;
        }
    };
    var CacheHelper = {};
    CacheHelper.GetCachedValueCore = function (obj, key, func, cacheObj, fillValueMethod) {
        if (!cacheObj)
            cacheObj = obj;
        if (!cacheObj.cache)
            cacheObj.cache = {};
        if (!key)
            key = "default";
        fillValueMethod(obj, key, func, cacheObj);
        return cacheObj.cache[key];
    };
    CacheHelper.GetCachedValue = function (obj, key, func, cacheObj) {
        return CacheHelper.GetCachedValueCore(obj, key, func, cacheObj,
            function (obj, key, func, cacheObj) {
                if (!ASPx.IsExists(cacheObj.cache[key]))
                    cacheObj.cache[key] = func.apply(obj, []);
            });
    };
    CacheHelper.GetCachedElement = function (obj, key, func, cacheObj) {
        return CacheHelper.GetCachedValueCore(obj, key, func, cacheObj,
            function (obj, key, func, cacheObj) {
                if (!ASPx.IsValidElement(cacheObj.cache[key]))
                    cacheObj.cache[key] = func.apply(obj, []);
            });
    };
    CacheHelper.GetCachedElements = function (obj, key, func, cacheObj) {
        return CacheHelper.GetCachedValueCore(obj, key, func, cacheObj,
            function (obj, key, func, cacheObj) {
                if (!ASPx.IsValidElements(cacheObj.cache[key])) {
                    var elements = func.apply(obj, []);
                    if (!Ident.IsArray(elements))
                        elements = [elements];
                    cacheObj.cache[key] = elements;
                }
            });
    };
    CacheHelper.GetCachedElementById = function (obj, id, cacheObj) {
        return CacheHelper.GetCachedElement(obj, id, function () { return ASPx.GetElementById(id); }, cacheObj);
    };
    CacheHelper.GetCachedChildById = function (obj, parent, id, cacheObj) {
        return CacheHelper.GetCachedElement(obj, id, function () { return ASPx.GetChildById(parent, id); }, cacheObj);
    };
    CacheHelper.DropCachedValue = function (cacheObj, key) {
        cacheObj.cache[key] = null;
    };
    CacheHelper.DropCache = function (cacheObj) {
        cacheObj.cache = null;
    };
    var DomObserver = ASPx.CreateClass(null, {
        constructor: function () {
            this.items = {};
        },
        subscribe: function (elementID, callbackFunc) {
            var item = this.items[elementID];
            if (item)
                this.unsubscribe(elementID);
            item = {
                elementID: elementID,
                callbackFunc: callbackFunc,
                pauseCount: 0
            };
            this.prepareItem(item);
            this.items[elementID] = item;
        },
        prepareItem: function (item) {
        },
        unsubscribe: function (elementID) {
            this.items[elementID] = null;
        },
        getItemElement: function (item) {
            var element = this.getElementById(item.elementID);
            if (element)
                return element;
            this.unsubscribe(item.elementID);
            return null;
        },
        getElementById: function (elementID) {
            var element = document.getElementById(elementID);
            return element && ASPx.IsValidElement(element) ? element : null;
        },
        pause: function (element, includeSubtree) {
            this.changeItemsState(element, includeSubtree, true);
        },
        resume: function (element, includeSubtree) {
            this.changeItemsState(element, includeSubtree, false);
        },
        forEachItem: function (processFunc, context) {
            context = context || this;
            for (var itemName in this.items) {
                if (!this.items.hasOwnProperty(itemName))
                    continue;
                var item = this.items[itemName];
                if (item) {
                    var needBreak = processFunc.call(context, item);
                    if (needBreak)
                        return;
                }
            }
        },
        changeItemsState: function (element, includeSubtree, pause) {
            this.forEachItem(function (item) {
                if (!element)
                    this.changeItemState(item, pause);
                else {
                    var itemElement = this.getItemElement(item);
                    if (itemElement && (element == itemElement || (includeSubtree && ASPx.GetIsParent(element, itemElement)))) {
                        this.changeItemState(item, pause);
                        if (!includeSubtree)
                            return true;
                    }
                }
            }.aspxBind(this));
        },
        changeItemState: function (item, pause) {
            if (pause)
                this.pauseItem(item);
            else
                this.resumeItem(item);
        },
        pauseItem: function (item) {
            item.paused = true;
            item.pauseCount++;
        },
        resumeItem: function (item) {
            if (item.pauseCount > 0) {
                if (item.pauseCount == 1)
                    item.paused = false;
                item.pauseCount--;
            }
        }
    });
    DomObserver.IsMutationObserverAvailable = function () {
        return !!window.MutationObserver;
    };
    var TimerObserver = ASPx.CreateClass(DomObserver, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
            this.timerID = -1;
            this.observationTimeout = 300;
        },
        subscribe: function (elementID, callbackFunc) {
            DomObserver.prototype.subscribe.call(this, elementID, callbackFunc);
            if (!this.isActivated())
                this.startObserving();
        },
        isActivated: function () {
            return this.timerID !== -1;
        },
        startObserving: function () {
            if (this.isActivated())
                window.clearTimeout(this.timerID);
            this.timerID = window.setTimeout(this.onTimeout, this.observationTimeout);
        },
        onTimeout: function () {
            var observer = _aspxGetDomObserver();
            observer.doObserve();
            observer.startObserving();
        },
        doObserve: function () {
            if (!ASPx.documentLoaded) return;
            this.forEachItem(function (item) {
                if (!item.paused)
                    this.doObserveForItem(item);
            }.aspxBind(this));
        },
        doObserveForItem: function (item) {
            var element = this.getItemElement(item);
            if (element)
                item.callbackFunc.call(this, element);
        }
    });
    var MutationObserver = ASPx.CreateClass(DomObserver, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
            this.callbackTimeout = 10;
        },
        prepareItem: function (item) {
            item.callbackTimerID = -1;
            var target = this.getElementById(item.elementID);
            if (!target)
                return;
            var observerCallbackFunc = function () {
                if (item.callbackTimerID === -1) {
                    var timeoutHander = function () {
                        item.callbackTimerID = -1;
                        item.callbackFunc.call(this, target);
                    }.aspxBind(this);
                    item.callbackTimerID = window.setTimeout(timeoutHander, this.callbackTimeout);
                }
            }.aspxBind(this);
            var observer = new window.MutationObserver(observerCallbackFunc);
            var config = { attributes: true, childList: true, characterData: true, subtree: true };
            observer.observe(target, config);
            item.observer = observer;
            item.config = config;
        },
        unsubscribe: function (elementID) {
            var item = this.items[elementID];
            if (item) {
                item.observer.disconnect();
                item.observer = null;
            }
            DomObserver.prototype.unsubscribe.call(this, elementID);
        },
        pauseItem: function (item) {
            DomObserver.prototype.pauseItem.call(this, item);
            item.observer.disconnect();
        },
        resumeItem: function (item) {
            DomObserver.prototype.resumeItem.call(this, item);
            if (!item.paused) {
                var target = this.getItemElement(item);
                if (target)
                    item.observer.observe(target, item.config);
            }
        }
    });
    var domObserver = null;
    function _aspxGetDomObserver() {
        if (domObserver == null)
            domObserver = DomObserver.IsMutationObserverAvailable() ? new MutationObserver() : new TimerObserver();
        return domObserver;
    }
    var ControlUpdateWatcher = ASPx.CreateClass(null, {
        constructor: function () {
            this.helpers = {};
            this.clearLockerTimerID = -1;
            this.clearLockerTimerDelay = 15;
            this.postProcessing = false;
            this.init();
        },
        init: function () {
            var postHandler = aspxGetPostHandler();
            postHandler.Post.AddHandler(this.OnPost, this);
        },
        Add: function (helper) {
            this.helpers[helper.GetName()] = helper;
        },
        CanSendCallback: function (dxCallbackOwner, arg) {
            this.LockConfirmOnBeforeWindowUnload();
            var modifiedHelpers = this.FilterModifiedHelpersByDXCallbackOwner(this.GetModifiedHelpers(), dxCallbackOwner, arg);
            if (modifiedHelpers.length === 0) return true;
            var modifiedHelpersInfo = this.GetToConfirmAndToResetLists(modifiedHelpers, dxCallbackOwner.name);
            if (!modifiedHelpersInfo) return true;
            if (modifiedHelpersInfo.toConfirm.length === 0) {
                this.ResetClientChanges(modifiedHelpersInfo.toReset);
                return true;
            }
            var helper = modifiedHelpersInfo.toConfirm[0];
            if (!confirm(helper.GetConfirmUpdateText()))
                return false;
            this.ResetClientChanges(modifiedHelpersInfo.toReset);
            return true;
        },
        OnPost: function (s, e) {
            if (e.isDXCallback) return;
            this.postProcessing = true;
            this.LockConfirmOnBeforeWindowUnload();
            var modifiedHelpersInfo = this.GetModifedHelpersInfo(e);
            if (!modifiedHelpersInfo) return;
            if (modifiedHelpersInfo.toConfirm.length === 0) {
                this.ResetClientChanges(modifiedHelpersInfo.toReset);
                return;
            }
            var helper = modifiedHelpersInfo.toConfirm[0];
            if (!confirm(helper.GetConfirmUpdateText())) {
                e.cancel = true;
                this.finishPostProcessing();
            }
            if (!e.cancel)
                this.ResetClientChanges(modifiedHelpersInfo.toReset);
        },
        finishPostProcessing: function () {
            this.postProcessing = false;
        },
        GetModifedHelpersInfo: function (e) {
            var modifiedHelpers = this.FilterModifiedHelpers(this.GetModifiedHelpers(), e);
            if (modifiedHelpers.length === 0) return;
            return this.GetToConfirmAndToResetLists(modifiedHelpers, e && e.ownerID);
        },
        GetToConfirmAndToResetLists: function (modifiedHelpers, ownerID) {
            var resetList = [];
            var confirmList = [];
            for (var i = 0; i < modifiedHelpers.length; i++) {
                var helper = modifiedHelpers[i];
                if (!helper.GetConfirmUpdateText()) {
                    resetList.push(helper);
                    continue;
                }
                if (helper.CanShowConfirm(ownerID)) {
                    resetList.push(helper);
                    confirmList.push(helper);
                }
            }
            return { toConfirm: confirmList, toReset: resetList };
        },
        FilterModifiedHelpers: function (modifiedHelpers, e) {
            if (modifiedHelpers.length === 0)
                return [];
            if (this.RequireProcessUpdatePanelCallback(e))
                return this.FilterModifiedHelpersByUpdatePanels(modifiedHelpers);
            if (this.postProcessing)
                return this.FilterModifiedHelpersByPostback(modifiedHelpers);
            return modifiedHelpers;
        },
        FilterModifiedHelpersByDXCallbackOwner: function (modifiedHelpers, dxCallbackOwner, arg) {
            var result = [];
            for (var i = 0; i < modifiedHelpers.length; i++) {
                var helper = modifiedHelpers[i];
                if (helper.NeedConfirmOnCallback(dxCallbackOwner, arg))
                    result.push(helper);
            }
            return result;
        },
        FilterModifiedHelpersByUpdatePanels: function (modifiedHelpers) {
            var result = [];
            var updatePanels = this.GetUpdatePanelsWaitedForUpdate();
            for (var i = 0; i < updatePanels.length; i++) {
                var panelID = updatePanels[i].replace(/\$/g, "_");
                var panel = ASPx.GetElementById(panelID);
                if (!panel) continue;
                for (var j = 0; j < modifiedHelpers.length; j++) {
                    var helper = modifiedHelpers[j];
                    if (ASPx.GetIsParent(panel, helper.GetControlMainElement()))
                        result.push(helper);
                }
            }
            return result;
        },
        FilterModifiedHelpersByPostback: function (modifiedHelpers) {
            var result = [];
            for (var i = 0; i < modifiedHelpers.length; i++) {
                var helper = modifiedHelpers[i];
                if (helper.NeedConfirmOnPostback())
                    result.push(helper);
            }
            return result;
        },
        RequireProcessUpdatePanelCallback: function (e) {
            var rManager = this.GetMSRequestManager();
            if (rManager && e && e.isMSAjaxCallback)
                return rManager._postBackSettings.async;
            return false;
        },
        GetUpdatePanelsWaitedForUpdate: function () {
            var rManager = this.GetMSRequestManager();
            if (!rManager) return [];
            var panelUniqueIDs = rManager._postBackSettings.panelsToUpdate || [];
            var panelClientIDs = [];
            for (var i = 0; i < panelUniqueIDs.length; i++) {
                var index = ASPx.Data.ArrayIndexOf(rManager._updatePanelIDs, panelUniqueIDs[i]);
                if (index >= 0)
                    panelClientIDs.push(rManager._updatePanelClientIDs[index]);
            }
            return panelClientIDs;
        },
        GetMSRequestManager: function () {
            if (window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager && Sys.WebForms.PageRequestManager.getInstance)
                return Sys.WebForms.PageRequestManager.getInstance();
            return null;
        },
        GetModifiedHelpers: function () {
            var result = [];
            for (var key in this.helpers) {
                if (this.helpers.hasOwnProperty(key)) {
                    var helper = this.helpers[key];
                    if (helper.HasChanges())
                        result.push(helper);
                }
            }
            return result;
        },
        ResetClientChanges: function (modifiedHelpers) {
            for (var i = 0; i < modifiedHelpers.length; i++)
                modifiedHelpers[i].ResetClientChanges();
        },
        GetConfirmUpdateMessage: function () {
            if (this.confirmOnWindowUnloadLocked) return;
            var modifiedHelpersInfo = this.GetModifedHelpersInfo();
            if (!modifiedHelpersInfo || modifiedHelpersInfo.toConfirm.length === 0)
                return;
            var helper = modifiedHelpersInfo.toConfirm[0];
            return helper.GetConfirmUpdateText();
        },
        LockConfirmOnBeforeWindowUnload: function () {
            this.confirmOnWindowUnloadLocked = true;
            this.clearLockerTimerID = ASPx.Timer.ClearTimer(this.clearLockerTimerID);
            this.clearLockerTimerID = window.setTimeout(function () {
                this.confirmOnWindowUnloadLocked = false;
            }.aspxBind(this), this.clearLockerTimerDelay);
        },
        OnWindowBeforeUnload: function (e) {
            var confirmMessage = this.GetConfirmUpdateMessage();
            if (confirmMessage)
                e.returnValue = confirmMessage;
            this.finishPostProcessing();
            return confirmMessage;
        },
        OnWindowUnload: function (e) {
            if (this.confirmOnWindowUnloadLocked) return;
            var modifiedHelpersInfo = this.GetModifedHelpersInfo();
            if (!modifiedHelpersInfo) return;
            this.ResetClientChanges(modifiedHelpersInfo.toReset);
        },
        OnMouseDown: function (e) {
            if (ASPx.Browser.IE)
                this.PreventBeforeUnloadOnLinkClick(e);
        },
        OnFocusIn: function (e) {
            if (ASPx.Browser.IE)
                this.PreventBeforeUnloadOnLinkClick(e);
        },
        PreventBeforeUnloadOnLinkClick: function (e) {
            if (ASPx.GetObjectKeys(this.helpers).length == 0)
                return;
            var link = ASPx.GetParentByTagName(ASPx.Evt.GetEventSource(e), "A");
            if (!link || link.dxgvLinkClickHanlderAssigned)
                return;
            var url = ASPx.Attr.GetAttribute(link, "href");
            if (!url || url.indexOf("javascript:") < 0)
                return;
            ASPx.Evt.AttachEventToElement(link, "click", function (ev) { return ASPx.Evt.PreventEvent(ev); });
            link.dxgvLinkClickHanlderAssigned = true;
        }
    });
    ControlUpdateWatcher.Instance = null;
    ControlUpdateWatcher.getInstance = function () {
        if (!ControlUpdateWatcher.Instance) {
            ControlUpdateWatcher.Instance = new ControlUpdateWatcher();
            ASPx.Evt.AttachEventToElement(window, "beforeunload", function (e) {
                return ControlUpdateWatcher.Instance.OnWindowBeforeUnload(e);
            });
            ASPx.Evt.AttachEventToElement(window, "unload", function (e) {
                ControlUpdateWatcher.Instance.OnWindowUnload(e);
            });
            ASPx.Evt.AttachEventToDocument("mousedown", function (e) {
                ControlUpdateWatcher.Instance.OnMouseDown(e);
            });
            ASPx.Evt.AttachEventToDocument("focusin", function (e) {
                ControlUpdateWatcher.Instance.OnFocusIn(e);
            });
        }
        return ControlUpdateWatcher.Instance;
    };
    var UpdateWatcherHelper = ASPx.CreateClass(null, {
        constructor: function (owner) {
            this.owner = owner;
            this.ownerWatcher = ControlUpdateWatcher.getInstance();
            this.ownerWatcher.Add(this);
        },
        GetName: function () {
            return this.owner.name;
        },
        GetControlMainElement: function () {
            return this.owner.GetMainElement();
        },
        GetControlParentForm: function () {
            return ASPx.GetParentByTagName(this.GetControlMainElement(), "FORM");
        },
        CanShowConfirm: function (requestOwnerID) {
            return true;
        },
        HasChanges: function () {
            return false;
        },
        GetConfirmUpdateText: function () {
            return "";
        },
        NeedConfirmOnCallback: function (dxCallbackOwner) {
            return true;
        },
        NeedConfirmOnPostback: function () {
            if (ASPx.IsUploadSubmitRequest)
                return !ASPx.IsUploadSubmitRequest(this.GetControlParentForm());
            return true;
        },
        ResetClientChanges: function () {
        },
        ConfirmOnCustomControlEvent: function () {
            var confirmMessage = this.GetConfirmUpdateText();
            if (confirmMessage)
                return confirm(confirmMessage);
            return false;
        }
    });
    var ControlCallbackHandlersQueue = ASPx.CreateClass(null, {
        constructor: function (owner) {
            this.owner = owner;
            this.handlerInfos = [];
        },
        addCallbackHandler: function (handlerInfo) {
            this.handlerInfos.push(handlerInfo);
        },
        executeCallbacksHandlers: function () {
            for (var i = 0, handlerInfo; handlerInfo = this.handlerInfos[i]; i++)
                handlerInfo.handler.call(this.owner, handlerInfo.result);
            this.handlerInfos = [];
        }
    });
    var ControlCallbackQueueHelper = ASPx.CreateClass(null, {
        constructor: function (owner) {
            this.owner = owner;
            this.pendingCallbacks = [];
            this.receivedCallbacks = [];
            this.attachEvents();
        },
        showLoadingElements: function () {
            this.owner.ShowLoadingDiv();
            if (this.owner.IsCallbackAnimationEnabled())
                this.owner.StartBeginCallbackAnimation();
            else
                this.owner.ShowLoadingElementsInternal();
        },
        attachEvents: function () {
            this.owner.EndCallback.AddHandler(this.onEndCallback.aspxBind(this));
            this.owner.CallbackError.AddHandler(this.onCallbackError.aspxBind(this));
        },
        detachEvents: function () {
            this.owner.EndCallback.RemoveHandler(this.onEndCallback);
            this.owner.CallbackError.RemoveHandler(this.onCallbackError);
        },
        onCallbackError: function (owner, result) {
            this.sendErrorToChildControl(result);
        },
        ignoreDuplicates: function () {
            return true;
        },
        hasDuplicate: function (arg) {
            for (var i in this.pendingCallbacks) {
                if (this.pendingCallbacks[i].arg == arg && this.pendingCallbacks[i].state != ASPx.callbackState.aborted)
                    return true;
            }
            return false;
        },
        getToken: function (halperContext, callbackInfo) {
            return {
                cancel: function () {
                    if (callbackInfo.state == ASPx.callbackState.sent) {
                        callbackInfo.state = ASPx.callbackState.aborted;
                        halperContext.sendNext();
                    }
                    if (callbackInfo.state == ASPx.callbackState.inTurn)
                        ASPx.Data.ArrayRemove(halperContext.pendingCallbacks, callbackInfo);
                },
                callbackId: -1
            };
        },
        sendCallback: function (arg, handlerContext, handler, commandName) {
            if (this.ignoreDuplicates() && this.hasDuplicate(arg))
                return false;
            var handlerContext = handlerContext || this.owner;
            var callbackInfo = {
                arg: arg,
                handlerContext: handlerContext,
                handler: handler || handlerContext.OnCallback,
                state: ASPx.callbackState.inTurn, callbackId: -1
            };
            this.pendingCallbacks.push(callbackInfo);
            if (!this.hasActiveCallback()) {
                callbackInfo.callbackId = this.owner.CreateCallback(arg, commandName);
                callbackInfo.state = ASPx.callbackState.sent;
            }
            return this.getToken(this, callbackInfo);
        },
        hasActiveCallback: function () {
            return this.getCallbacksInfoByState(ASPx.callbackState.sent).length > 0;
        },
        sendNext: function () {
            var nextCallbackInfo = this.getCallbacksInfoByState(ASPx.callbackState.inTurn)[0];
            if (nextCallbackInfo) {
                nextCallbackInfo.callbackId = this.owner.CreateCallback(nextCallbackInfo.arg);
                nextCallbackInfo.state = ASPx.callbackState.sent;
                return nextCallbackInfo.callbackId;
            }
        },
        onEndCallback: function () {
            if (!this.owner.isErrorOnCallback && this.hasPendingCallbacks()) {
                var curCallbackId;
                var curCallbackInfo;
                var handlerContext;
                for (var i in this.receivedCallbacks) {
                    if (this.receivedCallbacks.hasOwnProperty(i)) {
                        curCallbackId = this.receivedCallbacks[i];
                        curCallbackInfo = this.getCallbackInfoById(curCallbackId);
                        if (curCallbackInfo.state != ASPx.callbackState.aborted) {
                            handlerContext = curCallbackInfo.handlerContext;
                            if (handlerContext.OnEndCallback)
                                handlerContext.OnEndCallback();
                            this.sendNext();
                        }
                        ASPx.Data.ArrayRemove(this.pendingCallbacks, curCallbackInfo);
                    }
                }
                ASPx.Data.ArrayClear(this.receivedCallbacks);
            }
        },
        hasPendingCallbacks: function () {
            return this.pendingCallbacks && this.pendingCallbacks.length && this.pendingCallbacks.length > 0;
        },
        processCallback: function (result, callbackId) {
            this.receivedCallbacks.push(callbackId);
            if (this.hasPendingCallbacks()) {
                var callbackInfo = this.getCallbackInfoById(callbackId);
                if (callbackInfo.state != ASPx.callbackState.aborted)
                    callbackInfo.handler.call(callbackInfo.handlerContext, result);
            }
        },
        getCallbackInfoById: function (id) {
            for (var i in this.pendingCallbacks) {
                if (this.pendingCallbacks[i].callbackId == id)
                    return this.pendingCallbacks[i];
            }
        },
        getCallbacksInfoByState: function (state) {
            var result = [];
            for (var i in this.pendingCallbacks) {
                if (this.pendingCallbacks[i].state == state)
                    result.push(this.pendingCallbacks[i]);
            }
            return result;
        },
        sendErrorToChildControl: function (callbackObj) {
            if (!this.hasPendingCallbacks())
                return;
            var callbackInfo = this.getCallbackInfoById(callbackObj.callbackId || 0);
            if (!callbackInfo)
                return;
            var hasChildControlHandler = (callbackInfo.handlerContext != this.owner) && callbackInfo.handlerContext.OnCallbackError;
            if (hasChildControlHandler)
                callbackInfo.handlerContext.OnCallbackError.call(callbackInfo.handlerContext, callbackObj.message, callbackObj.data);
        }
    });
    var AccessibilityHelperBase = ASPx.CreateClass(null, {
        constructor: function (control) {
            this.control = control;
            this.timerID = -1;
            this.pronounceMessageTimeout = 500;
            this.activeItem = this.getItems()[0];
            this.pronounceIsStarted = false;
        },
        PronounceMessage: function (text, activeItemArgs, inactiveItemArgs, mainElementArgs, ownerMainElement) {
            this.timerID = ASPx.Timer.ClearTimer(this.timerID);
            this.pronounceIsStarted = true;
            this.timerID = window.setTimeout(function () {
                this.PronounceMessageCore(text, activeItemArgs, inactiveItemArgs, mainElementArgs, ownerMainElement);
            }.aspxBind(this), this.getPronounceTimeout());
        },
        PronounceMessageCore: function (text, activeItemArgs, inactiveItemArgs, mainElementArgs, ownerMainElement) {
            if (!this.getItems())
                return;
            this.toogleItem();
            var mainElement = this.getMainElement();
            var activeItem = this.getItem(true);
            var inactiveItem = this.getItem();
            if (ASPx.Attr.GetAttribute(mainElement, "role") != "application")
                mainElementArgs = this.addArguments(mainElementArgs, { "aria-activedescendant": activeItem.id });
            var messageAttrObj = {};
            var activeItemRole = ASPx.Attr.GetAttribute(activeItem, "role");
            var attrName = activeItemRole == "combobox" ? "aria-label" : "innerHtml";
            messageAttrObj[attrName] = ASPx.Str.EncodeHtml(text);
            activeItemArgs = this.addArguments(activeItemArgs, messageAttrObj);
            messageAttrObj[attrName] = "";
            inactiveItemArgs = this.addArguments(inactiveItemArgs, messageAttrObj);
            var errorTextElement = null;
            if (this.control.GetErrorCell()) {
                errorTextElement = this.getAriaExplanatoryTextManager().GetErrorTextElement();
                activeItemArgs = this.addArguments(activeItemArgs, { "aria-invalid": !this.control.isValid ? "true" : "" });
                mainElementArgs = this.addArguments(mainElementArgs, { "aria-invalid": "" });
                inactiveItemArgs = this.addArguments(inactiveItemArgs, { "aria-invalid": "" });
            }
            this.changeActivityAttributes(activeItem, activeItemArgs);
            if (errorTextElement) {
                this.getAriaExplanatoryTextManager().SetOrRemoveText([activeItem], errorTextElement, !this.control.isValid, false, true);
                this.getAriaExplanatoryTextManager().SetOrRemoveText([mainElement, inactiveItem], errorTextElement, false, false, false);
            }
            this.changeActivityAttributes(mainElement, mainElementArgs);
            if (!!ownerMainElement && ASPx.Attr.GetAttribute(ownerMainElement, "role") != "application")
                this.changeActivityAttributes(ownerMainElement, { "aria-activedescendant": activeItem.id });
            this.changeActivityAttributes(inactiveItem, inactiveItemArgs);
            this.pronounceIsStarted = false;
        },
        GetActiveElement: function (inputIsMainElement) {
            if (this.pronounceIsStarted) return null;
            var mainElement = inputIsMainElement ? this.control.GetInputElement() : this.getMainElement();
            var activeElementId = ASPx.Attr.GetAttribute(mainElement, 'aria-activedescendant');
            return activeElementId ? ASPx.GetElementById(activeElementId) : mainElement;
        },
        getMainElement: function () {
            if (!ASPx.IsExistsElement(this.mainElement))
                this.mainElement = this.control.GetAccessibilityAssistantElement();
            return this.mainElement;
        },
        getItems: function () {
            if (!ASPx.IsExistsElement(this.items))
                this.items = ASPx.GetChildElementNodes(this.getMainElement());
            return this.items;
        },
        getItem: function (isActive) {
            if (isActive)
                return this.activeItem;
            var items = this.getItems();
            return items[0] === this.activeItem ? items[1] : items[0];
        },
        getAriaExplanatoryTextManager: function () { return this.control.ariaExplanatoryTextManager; },
        getPronounceTimeout: function () { return this.pronounceMessageTimeout; },
        toogleItem: function () {
            this.activeItem = this.getItem();
        },
        addArguments: function (targetArgs, newArgs) {
            if (!targetArgs) targetArgs = {};
            for (var key in newArgs) {
                if (newArgs.hasOwnProperty(key) && !targetArgs.hasOwnProperty(key))
                    targetArgs[key] = newArgs[key];
            }
            return targetArgs;
        },
        changeActivityAttributes: function (element, args) {
            if (!element)
                return;
            for (var key in args) {
                if (args.hasOwnProperty(key)) {
                    var value = args[key];
                    if (key == "innerHtml")
                        ASPx.SetInnerHtml(element, value);
                    else {
                        var action = value !== "" ? ASPx.Attr.SetAttribute : ASPx.Attr.RemoveAttribute;
                        action(element, key, value);
                    }
                }
            }
        }
    });
    var AccessibilityPronouncer = ASPx.CreateClass(null, {
        constructor: function () {
            this.pronouncerId = "dxPronouncer";
            this.initialized = false;
            this.focusableMessageElement = null;
            this.messageElement = null;
            this.pronouncers = {
                live: new AccessibilityLivePronouncer(this),
                descendant: new AccessibilityDescendantPronouncer(this)
            };
        },
        Pronounce: function (args, type) {
            this.pronouncers[type].Pronounce(args);
        },
        EnsureInitialize: function () {
            if (!this.initialized)
                this.initialize();
        },
        RemoveState: function () {
            for (var pronouncer in this.pronouncers)
                if (this.pronouncers.hasOwnProperty(pronouncer))
                    pronouncer.RemoveState();
        },
        RestoreControlState: function (type, mainElement) {
            this.pronouncers[type].RestoreControlState(mainElement);
        },
        RestoreElementsState: function (type, elements) {
            this.pronouncers[type].RestoreElementsState(elements);
        },
        RestoreElementState: function (type, element) {
            this.pronouncers[type].RestoreElementState(element);
        },
        initialize: function () {
            this.createFocusableMessageElement();
            this.createMessageElement();
            this.prepareFocusableMessageElement();
            this.setAttributesForKeyboardNavigation();
            this.initialized = true;
        },
        createFocusableMessageElement: function () {
            var focusableMessageElement = document.createElement("DIV");
            document.body.appendChild(focusableMessageElement);
            this.focusableMessageElement = focusableMessageElement;
        },
        prepareFocusableMessageElement: function () {
            this.focusableMessageElement.className = "dxAIFME";
        },
        setAttributesForKeyboardNavigation: function () {
            ASPx.Attr.Aria.SetApplicationRole(this.focusableMessageElement);
            ASPx.Attr.Aria.SetSilence(this.focusableMessageElement);
        },
        createMessageElement: function () {
            var messageElement = document.createElement("DIV");
            messageElement.id = this.pronouncerId;
            ASPx.Attr.SetAttribute(messageElement, "role", "note");
            this.focusableMessageElement.appendChild(messageElement);
            this.messageElement = messageElement;
        },
        getMessage: function (messagePartsArg) {
            var messageParts = messagePartsArg.filter(function (x) { return ASPx.IsExists(x); });
            return messageParts.join(", ");
        }
    });
    var AccessibilityPronouncerBase = ASPx.CreateClass(null, {
        constructor: function () {
            this.state = {};
        },
        Pronounce: function (args) {
            var messageElement = this.getMessageElement();
            ASPx.Attr.Aria.SetOrRemoveLabel(messageElement);
            ASPx.SetInnerHtml(messageElement, "");
            this.PronounceCore(args);
        },
        PronounceCore: function (args) { },
        SaveElementState: function (element) {
            if (this.state[element.id])
                return;
            this.state[element.id] = {
                element: element,
                descendant: ASPx.Attr.GetAttribute(element, ASPx.Attr.Aria.descendant)
            };
        },
        RemoveState: function () {
            this.state = {};
        },
        RestoreControlState: function (mainElement) {
            for (var elementInfo in this.state) {
                if (this.state.hasOwnProperty(elementInfo)) {
                    var element = this.state[elementInfo].element;
                    if (!mainElement || ASPx.GetIsParent(mainElement, element))
                        this.RestoreElementState(element);
                }
            }
        },
        RestoreElementsState: function (elements) {
            for (var i = 0; i < elements.length; i++)
                this.RestoreElementState(elements[i]);
        },
        RestoreElementState: function (element) {
            var elementState = this.state[element.id];
            if (!elementState)
                return;
            var messageElement = this.getMessageElement();
            ASPx.Attr.Aria.SetOrRemoveDescendant(element, elementState.descendant);
            delete this.state[element.id];
        },
        getMessage: function (args) {
            return ASPx.AccessibilityPronouncer.getMessage(args.messageParts);
        },
        getMessageElement: function () {
            return ASPx.AccessibilityPronouncer.messageElement;
        },
        getFocusableMessageElement: function () {
            return ASPx.AccessibilityPronouncer.focusableMessageElement;
        }
    });
    var AccessibilityLivePronouncer = ASPx.CreateClass(AccessibilityPronouncerBase, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
        },
        PronounceCore: function (args) {
            var message = this.getMessage(args);
            var messageElement = this.getMessageElement();
            ASPx.Attr.SetAttribute(this.getFocusableMessageElement(), "aria-live", "assertive");
            ASPx.Attr.Aria.SetAtomic(this.getFocusableMessageElement(), "true");
            ASPx.SetInnerHtml(messageElement, ASPx.Str.EncodeHtml(message));
        }
    });
    var AccessibilityDescendantPronouncer = ASPx.CreateClass(AccessibilityPronouncerBase, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
        },
        PronounceCore: function (args) {
            var message = this.getMessage(args);
            var activeElement = ASPx.GetActiveElement();
            var messageElement = this.getMessageElement();
            this.SaveElementState(activeElement);
            ASPx.Attr.RemoveAttribute(this.getFocusableMessageElement(), "aria-live");
            ASPx.Attr.RemoveAttribute(this.getFocusableMessageElement(), "aria-atomic");
            ASPx.Attr.Aria.SetOrRemoveLabel(messageElement, message);
            ASPx.Attr.Aria.SetOrRemoveDescendant(activeElement, messageElement.id);
        }
    });
    ASPx.AccessibilityPronouncerType = {
        live: "live",
        descendant: "descendant"
    };
    ASPx.AccessibilityPronouncer = new AccessibilityPronouncer();
    var RestoreFocusHelper = ASPx.CreateClass(null, {
        constructor: function () {
            this.excludedIDs = ["DXCBtn"];
            this.pronouncerType = ASPx.AccessibilityPronouncerType.live;
            this.callbackQueue = [];
            this.Initialize();
        },
        Initialize: function () {
            var that = this;
            ASPx.Evt.AttachEventToDocumentCore("DOMContentLoaded", function () {
                ASPxClientControl.GetControlCollection().BeginCallback.AddHandler(that.OnBeginCallback, that);
                ASPxClientControl.GetControlCollection().EndCallback.AddHandler(that.OnEndCallback, that);
            });
        },
        OnBeginCallback: function (s, e) {
            var control = e.control;
            if (!control.allowRestoreFocusOnCallbacks())
                return;
            control.accessibilityFocusTreeLine = this.getFocusTreeLine(control);
            var controlHasCallbackTreeLine = this.callbackQueueContainsTreeLine(control);
            this.pushTreeLineInfoIntoCallbackQueue(control);
            if (control.accessibilityFocusTreeLine && !controlHasCallbackTreeLine)
                control.SendMessageToAssistiveTechnology(this.getDefaultCallbackMessage());
        },
        OnEndCallback: function (s, e) {
            var control = e.control;
            if (!control.allowRestoreFocusOnCallbacks())
                return;
            var treeLineInfo = this.shiftTreeLineInfoFromCallbackQueue(control);
            if (treeLineInfo.queueLength == 0) {
                if (!control.accessibilityFocusTreeLine && treeLineInfo.treeLine)
                    control.accessibilityFocusTreeLine = treeLineInfo.treeLine;
                var focusElement = this.findFocusElement(control);
                if (!this.handleActivePopupWindow(focusElement))
                    ASPx.AccessibilityUtils.SetFocusAccessible(focusElement);
                delete control.accessibilityFocusTreeLine;
            }
        },
        pushTreeLineInfoIntoCallbackQueue: function (control) {
            var controlTreeLine = control.accessibilityFocusTreeLine ? control.accessibilityFocusTreeLine.slice(0) : null;
            if (!this.callbackQueue[control.name])
                this.callbackQueue[control.name] = [];
            this.callbackQueue[control.name].push(controlTreeLine);
        },
        shiftTreeLineInfoFromCallbackQueue: function (control) {
            var treeLineInfo = { queueLength: 0, treeLine: null };
            var treeLines = this.callbackQueue[control.name];
            if (treeLines && treeLines.length > 0) {
                treeLineInfo.treeLine = treeLines.shift();
                var linesCount = treeLines.length;
                treeLineInfo.queueLength = linesCount;
                if (linesCount > 0 && !treeLines[0] && treeLineInfo.treeLine)
                    treeLines[0] = treeLineInfo.treeLine.slice(0);
            }
            return treeLineInfo;
        },
        callbackQueueContainsTreeLine: function (control) {
            var treeLines = this.callbackQueue[control.name];
            if (!treeLines || treeLines.length == 0)
                return false;
            if (treeLines[treeLines.length - 1])
                return true;
            return false;
        },
        getDefaultCallbackMessage: function () {
            return ASPx.AccessibilitySR.DefaultCallbackMessage;
        },
        handleActivePopupWindow: function (focusElement) {
            if (!ASPx.GetPopupControlCollection)
                return false;
            var activePopupWindow = ASPx.GetPopupControlCollection().GetCurrentActiveWindowElement();
            if (activePopupWindow) {
                var popupInfo = ASPx.GetPopupControlCollection().GetPopupWindowFromID(activePopupWindow.id);
                if (popupInfo.popupControl.setFocusOnCallback && !popupInfo.popupControl.accessibleFocusElement) {
                    popupInfo.popupControl.accessibleFocusElement = focusElement;
                    return true;
                }
            }
            return false;
        },
        getFocusTreeLine: function (control) {
            var element = document.activeElement;
            var mainElement = control.GetMainElement();
            if (!ASPx.GetIsParent(mainElement, element)) {
                var treeInfo = this.findFocusedControlElement(mainElement, element);
                element = treeInfo.focusElement;
                mainElement = treeInfo.rootElement;
            }
            return this.getTreeLineCore(mainElement, element);
        },
        getTreeLineCore: function (mainElement, element) {
            if (!element) return null;
            treeLine = [];
            while (element) {
                treeLine.push({
                    id: element.id,
                    tagName: element.tagName,
                    index: ASPx.Data.ArrayIndexOf(element.parentNode.childNodes, element)
                });
                if (element === mainElement || element === document.body)
                    break;
                element = element.parentNode;
            }
            return treeLine;
        },
        findFocusedControlElement: function (mainElement, activeElement) {
            var element = null;
            var parentElement = mainElement;
            var focusedEditor = ASPx.IsExists(ASPx.GetFocusedEditor) ? ASPx.GetFocusedEditor() : null;
            if (focusedEditor && ASPx.GetIsParent(mainElement, focusedEditor.GetMainElement()))
                element = focusedEditor.GetFocusableInputElement();
            else {
                if (mainElement && activeElement) {
                    var mainControl = ASPx.GetClientControlByElementID(mainElement.id);
                    var parentControls = ASPx.GetParentClientControls(activeElement.id);
                    for (var i = parentControls.length - 1; i > -1; i--) {
                        if (mainControl.name == parentControls[i].name) {
                            element = activeElement;
                            var rootIndex = i > 0 ? i - 1 : i;
                            parentElement = parentControls[rootIndex].GetMainElement();
                            if (!parentElement && parentControls[rootIndex].GetCurrentWindowElement)
                                parentElement = parentControls[rootIndex].GetCurrentWindowElement();
                            break;
                        }
                    }
                }
            }
            return { focusElement: element, rootElement: parentElement };
        },
        findFocusElement: function (control) {
            if (!control.accessibilityFocusTreeLine)
                return;
            var treeLine = control.accessibilityFocusTreeLine.slice(0);
            var focusElementParent = this.findFocusElementParentById(treeLine);
            if (!focusElementParent)
                return;
            return this.findFocusElementFromDOMTree(treeLine, focusElementParent);
        },
        findFocusElementParentById: function (treeLine) {
            for (var i = 0; i < treeLine.length; i++) {
                var id = treeLine[i].id;
                if (!this.isValidId(id))
                    continue;
                var element = document.getElementById(id);
                if (element) {
                    treeLine.splice(i, treeLine.length - i);
                    treeLine.reverse();
                    return element;
                }
            }
            return null;
        },
        findFocusElementFromDOMTree: function (treeLine, focusElementParent) {
            var element = focusElementParent;
            for (var i = 0; i < treeLine.length; i++) {
                var info = treeLine[i];
                if (info.index >= element.childNodes.length) {
                    element = element.childNodes.length > 0 ? element.childNodes[element.childNodes.length - 1] : null;
                    return this.findNeighbourFocusElement(element, focusElementParent);
                }
                var child = element.childNodes[info.index];
                if (child.tagName !== info.tagName)
                    return this.findNeighbourFocusElement(child, focusElementParent);
                element = child;
            }
            return element;
        },
        findNeighbourFocusElement: function (element, focusElementParent) {
            if (!element || !element.parentNode) return null;
            var neighbours = element.parentNode.childNodes;
            var indices = this.calcLeftRightIndices(ASPx.Data.ArrayIndexOf(neighbours, element), neighbours.length);
            for (var i = 0; i < indices.length; i++) {
                var index = indices[i];
                var actionElement = ASPx.FindFirstChildActionElement(neighbours[index]);
                if (actionElement)
                    return actionElement;
            }
            if (element === focusElementParent)
                return null;
            return this.findNeighbourFocusElement(element.parentNode, focusElementParent);
        },
        calcLeftRightIndices: function (startIndex, count) {
            var indices = [];
            var incSides = [0, 0];
            var index = startIndex;
            for (var i = 0; i < count; i++) {
                indices.push(index);
                var even = i % 2 === 0;
                var nextIndex = this.calcNextIndex(startIndex, count, incSides, even);
                if (nextIndex < 0)
                    nextIndex = this.calcNextIndex(startIndex, count, incSides, !even);
                index = nextIndex;
            }
            return indices;
        },
        calcNextIndex: function (startIndex, count, incSides, even) {
            var sideIndex = even ? 0 : 1;
            var inc = incSides[sideIndex];
            inc += even ? -1 : 1;
            var nextIndex = startIndex + inc;
            if (nextIndex >= 0 && nextIndex < count) {
                incSides[sideIndex] = inc;
                return nextIndex;
            }
            return -1;
        },
        isValidId: function (id) {
            return id && !this.isExcludedId(id);
        },
        isExcludedId: function (id) {
            var result = false;
            for (var i = 0; i < this.excludedIDs.length; i++) {
                if (id.indexOf(this.excludedIDs[i]) > -1) {
                    result = true;
                    break;
                }
            }
            return result;
        }
    });
    var EventStorage = ASPx.CreateClass(null, {
        constructor: function () {
            this.bag = {};
        },
        Save: function (e, data, overwrite) {
            var key = this.getEventKey(e);
            if (this.bag.hasOwnProperty(key) && !overwrite)
                return;
            this.bag[key] = data;
            window.setTimeout(function () { delete this.bag[key]; }.aspxBind(this), 100);
        },
        Load: function (e) {
            var key = this.getEventKey(e);
            return this.bag[key];
        },
        getEventKey: function (e) {
            if (ASPx.IsExists(e.timeStamp))
                return e.timeStamp.toString();
            var eventSource = ASPx.Evt.GetEventSource(e);
            var type = e.type.toString();
            return eventSource ? type + "_" + eventSource.uniqueID.toString() : type;
        }
    });
    ASPx.RestoreFocusHelper = new RestoreFocusHelper();
    EventStorage.Instance = null;
    EventStorage.getInstance = function () {
        if (!EventStorage.Instance)
            EventStorage.Instance = new EventStorage();
        return EventStorage.Instance;
    };
    var GetGlobalObject = function (objectName) {
        var fields = objectName.split('.');
        var obj = window[fields[0]];
        for (var i = 1; obj && i < fields.length; i++) {
            obj = obj[fields[i]];
        }
        return obj;
    };
    var GetExternalScriptProcessor = function () {
        return ASPx.ExternalScriptProcessor ? ASPx.ExternalScriptProcessor.getInstance() : null;
    };
    var SAVED_WIDTH_ATTR = "data-dx-ripple-saved-width";
    var RIPPLE_FIXED_ROW_ATTR = "data-dx-ripple-locked";
    var READ_ONLY_COMBOBOX_MARKER_CSS_CLASS = "dxICBReadonlyMarker";
    var ThemesWithRipple = ['Material'];
    var RippleHelper = {
        rippleTargetClassName: "dxRippleTarget",
        rippleTargetExternalClassName: "dxRippleTargetExternal",
        rippleContainerClassName: "dxRippleContainer",
        rippleClassName: "dxRipple",
        touchRadius: -1,
        isMobileExternalRipple: null,
        zoom: 1,
        Init: function () {
            if (this.getIsRippleFunctionalityEnabled()) {
                setTimeout(function () {
                    this.calcTouchRadius();
                }.aspxBind(this), 0);
            }
        },
        calcTouchRadius: function () {
            var testBlock = document.createElement("DIV");
            ASPx.SetStyles(testBlock, {
                height: "1in",
                width: "1in",
                left: "-100%",
                top: "-100%",
                position: "absolute"
            });
            document.body.appendChild(testBlock);
            this.touchRadius = (1.8 / 2.54) * Math.max(testBlock.offsetWidth, testBlock.offsetHeight);
            document.body.removeChild(testBlock);
        },
        isRippleFunctionalityEnabled: null,
        checkRippleFunctionality: function () {
            if (ASPx.Browser.Safari && ASPx.Browser.Version <= 5.1)
                return false;
            try {
                if (document.styleSheets) {
                    for (var i = 0; i < document.styleSheets.length; i++) {
                        var styleSheet = document.styleSheets[i];
                        if (styleSheet.cssRules) {
                            for (var j = 0; j < styleSheet.cssRules.length; j++)
                                for (var k = 0; k < ThemesWithRipple.length; k++)
                                    if (styleSheet.cssRules[j].cssText.indexOf(ThemesWithRipple[k]) !== -1)
                                        return true;
                        }
                    }
                }
            }
            catch (exc) { }
            return false;
        },
        ReInit: function () {
            this.isRippleFunctionalityEnabled = null;
            this.Init();
        },
        onDocumentMouseDown: function (evt) {
            if (RippleHelper.getIsRippleFunctionalityEnabled())
                RippleHelper.processMouseDown(evt);
        },
        getIsRippleFunctionalityEnabled: function () {
            if (!ASPx.IsExists(this.isRippleFunctionalityEnabled))
                this.isRippleFunctionalityEnabled = this.checkRippleFunctionality();
            return this.isRippleFunctionalityEnabled;
        },
        createTargetInfo: function (target) {
            return {
                x: ASPx.GetAbsoluteX(target),
                y: ASPx.GetAbsoluteY(target),
                width: target.offsetWidth,
                height: target.offsetHeight,
                classNames: ASPx.GetClassNameList(target),
                getTarget: function () { return target; },
                getRect: function () { return { x: this.x, y: this.y, width: this.width, height: this.height }; }
            };
        },
        createEventInfo: function (evt) {
            return { x: this.getEventX(evt), y: this.getEventY(evt) };
        },
        processMouseDown: function (evt) {
            var evtSource = ASPx.Evt.GetEventSource(evt);
            var rippleTarget = this.getRippleTargetElement(evtSource);
            if (this.needToProcessRipple(rippleTarget, evtSource))
                this.processRipple(this.createTargetInfo(rippleTarget), this.createEventInfo(evt));
        },
        getRippleTargetElement: function (evtSource) {
            if (this.hasRippleMarker(evtSource))
                return evtSource;
            if (evtSource.tagName && evtSource.tagName.toLowerCase() == "input" && ASPx.ElementContainsCssClass(evtSource, "dxTI")) {
                var elements = ASPx.GetChildElementNodesByPredicate(evtSource.parentNode.parentNode, function (element) {
                    return this.hasRippleMarker(element);
                }.aspxBind(this));
                return elements && elements[0];
            }
            return ASPx.GetParent(evtSource, function (element) {
                return this.hasRippleMarker(element);
            }.aspxBind(this));
        },
        hasRippleMarker: function (element) {
            if (!ASPx.IsExistsElement(element))
                return false;
            var computedStyles = window.getComputedStyle(element, ":before");
            if (ASPx.IsExists(computedStyles)) {
                var content = computedStyles.getPropertyValue("content");
                if (content.indexOf(this.rippleTargetExternalClassName) > -1) {
                    ASPx.AddClassNameToElement(element, this.rippleTargetExternalClassName);
                    return true;
                }
                return content.indexOf(this.rippleTargetClassName) > -1;
            }
            return false;
        },
        needToProcessRipple: function (rippleTarget, evtSource) {
            if (!rippleTarget || !ASPx.AnimationUtils)
                return false;
            var isClearButton = ASPx.ElementContainsCssClass(rippleTarget, "dxeButton") && rippleTarget.id && rippleTarget.id.indexOf("B-100") !== -1;
            var isEmptyCalendarDay = ASPx.ElementContainsCssClass(rippleTarget, "dxeCalendarDay") && ASPx.Str.Trim(rippleTarget.textContent) == "";
            var isReadonly = ASPx.ElementContainsCssClass(rippleTarget, READ_ONLY_COMBOBOX_MARKER_CSS_CLASS);
            var rippleIsForbidden = isReadonly || isClearButton || isEmptyCalendarDay || ASPx.GetParentByPartialClassName(rippleTarget, "Disabled") ||
                ASPx.ElementContainsCssClass(rippleTarget, "dxgvBatchEditCell") || ASPx.ElementContainsCssClass(rippleTarget, "dxcvEditForm") ||
                ASPx.GetParentByPartialClassName(evtSource, "dxcvFocusedCell");
            return !rippleIsForbidden;
        },
        hasBothOverflow: function (style) {
            return style.overflow == "scroll" || style.overflow == "auto" || style.overflow == "hidden";
        },
        hasOverflowX: function (style) {
            return style.overflowX == "scroll" || style.overflowX == "auto" || style.overflowX == "hidden";
        },
        hasOverflowY: function (style) {
            return style.overflowY == "scroll" || style.overflowY == "auto" || style.overflowY == "hidden";
        },
        getExternalRippleContainerSize: function (targetRect) {
            if (ASPx.Browser.MobileUI) {
                var origTouchRadius = this.getOriginTouchRadius();
                if (origTouchRadius < targetRect.width || origTouchRadius < targetRect.height)
                    origTouchRadius = Math.max(targetRect.width, targetRect.height);
                return { x: targetRect.x + (targetRect.width - origTouchRadius) / 2, y: targetRect.y + (targetRect.height - origTouchRadius) / 2, width: origTouchRadius, height: origTouchRadius };
            }
            var result = { x: 0, y: 0, width: 0, height: 0 };
            var diff = targetRect.width - targetRect.height;
            if (diff > 0) {
                result.x = targetRect.x;
                result.y = targetRect.y - diff / 2;
                result.width = targetRect.width;
                result.height = targetRect.width;
            } else {
                result.x = targetRect.x + diff / 2;
                result.y = targetRect.y;
                result.width = targetRect.height;
                result.height = targetRect.height;
            }
            return result;
        },
        getInternalContainerSize: function (targetInfo) {
            var parentWithOverflow = RippleHelper.getParentWithOverflow(targetInfo.getTarget());
            if (!ASPx.IsExists(parentWithOverflow))
                return targetInfo;
            var parentWithOverflowStyle = ASPx.GetCurrentStyle(parentWithOverflow);
            var bothOverflow = this.hasBothOverflow(parentWithOverflowStyle);
            var overflowX = this.hasOverflowX(parentWithOverflowStyle);
            var overflowY = this.hasOverflowY(parentWithOverflowStyle);
            var parentRect = {
                x: ASPx.GetAbsoluteX(parentWithOverflow),
                y: ASPx.GetAbsoluteY(parentWithOverflow),
                width: parentWithOverflow.offsetWidth,
                height: parentWithOverflow.offsetHeight
            };
            return this.getInternalContainerSizeCore(targetInfo, parentRect, bothOverflow, overflowX, overflowY);
        },
        getInternalContainerSizeCore: function (targetRect, parentRect, bothOverflow, overflowX, overflowY) {
            var result = {};
            ASPx.Data.MergeHashTables(result, targetRect);
            if (bothOverflow || overflowX) {
                result.x = targetRect.x < parentRect.x ? parentRect.x : targetRect.x;
                if (targetRect.x + targetRect.width > parentRect.x + parentRect.width)
                    result.width = parentRect.x + parentRect.width - targetRect.x;
                if (parentRect.x > targetRect.x)
                    result.width -= (parentRect.x - targetRect.x);
            }
            if (bothOverflow || overflowY) {
                result.y = targetRect.y < parentRect.y ? parentRect.y : targetRect.y;
                if (targetRect.y + targetRect.height > parentRect.y + parentRect.height)
                    result.height = parentRect.y + parentRect.height - targetRect.y;
                if (parentRect.y > targetRect.y)
                    result.height -= (parentRect.y - targetRect.y);
            }
            return result;
        },
        calculateRippleContainerSize: function (targetInfo, isExternalRipple) {
            return isExternalRipple ? this.getExternalRippleContainerSize(targetInfo) : this.getInternalContainerSize(targetInfo);
        },
        getParentWithOverflow: function (rippleTarget) {
            var result = ASPx.GetParent(rippleTarget, function (element) {
                var elementStyle = ASPx.GetCurrentStyle(element);
                return this.hasBothOverflow(elementStyle) || this.hasOverflowX(elementStyle) || this.hasOverflowY(elementStyle);
            }.aspxBind(this));
            return result;
        },
        getDuration: function (targetInfo) {
            return this.IsExternalRipple(targetInfo) || ASPx.Browser.MobileUI ? 650 : 450;
        },
        createRippleTransition: function (container, rippleElement, radius, targetInfo) {
            var rippleSize = 2 * radius;
            var transitionEndIsAborted = true;
            var transitionProperties = {
                width: { from: 0, to: rippleSize, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "width", unit: "px" },
                height: { from: 0, to: rippleSize, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "height", unit: "px" },
                marginLeft: { from: 0, to: -rippleSize / 2, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "marginLeft", unit: "px" },
                marginTop: { from: 0, to: -rippleSize / 2, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "marginTop", unit: "px" },
                opacity: { from: 1, to: 0.05, transition: ASPx.AnimationConstants.Transitions.RIPPLE, propName: "opacity", unit: "%" }
            };
            var rippleTransition = ASPx.AnimationUtils.createMultipleAnimationTransition(rippleElement, {
                transition: ASPx.AnimationConstants.Transitions.RIPPLE,
                duration: this.getDuration(targetInfo),
                onComplete: function () {
                    this.RemoveRippleContainer(container.parentElement);
                    transitionEndIsAborted = false;
                }.bind(this)
            });
            rippleTransition.Start(transitionProperties);
            window.setTimeout(function () {
                if (transitionEndIsAborted)
                    this.RemoveRippleContainer(container.parentElement);
            }.bind(this), 500);
        },
        calculateRadius: function (isExternalRipple, posX, posY, containerRect) {
            var radius = -1;
            if (isExternalRipple) {
                if (ASPx.Browser.MobileUI)
                    radius = this.getOriginTouchRadius() / 2;
                else
                    radius = Math.max(containerRect.height, containerRect.width);
            } else {
                var width1 = posX - containerRect.x;
                var width2 = containerRect.width - width1;
                var height1 = posY - containerRect.y;
                var height2 = containerRect.height - height1;
                var rippleWidth = Math.max(width1, width2);
                var rippleHeight = Math.max(height1, height2);
                radius = Math.sqrt(Math.pow(rippleHeight, 2) + Math.pow(rippleWidth, 2));
            }
            return radius;
        },
        createRippleElement: function (container, rippleCenter) {
            var rippleElement = document.createElement("DIV");
            rippleElement.className = this.rippleClassName;
            container.appendChild(rippleElement);
            ASPxClientUtils.SetAbsoluteX(rippleElement, rippleCenter.x);
            ASPxClientUtils.SetAbsoluteY(rippleElement, rippleCenter.y);
            return rippleElement;
        },
        processRipple: function (targetInfo, eventInfo) {
            this.initRippleProcess();
            var isExternalRipple = this.IsExternalRipple(targetInfo);
            var rippleCenter = this.getRippleCenter(targetInfo.getRect(), eventInfo, isExternalRipple);
            var container = this.createRippleContainer(targetInfo, isExternalRipple);
            var rippleElement = this.createRippleElement(container, rippleCenter);
            var radius = this.calculateRadius(isExternalRipple, rippleCenter.x, rippleCenter.y, this.getElementRect(container));
            this.createRippleTransition(container, rippleElement, radius, targetInfo);
        },
        initRippleProcess: function () {
            this.isMobileExternalRipple = null;
            this.zoom = screen.width / window.innerWidth;
        },
        getRippleCenter: function (targetInfo, eventInfo, isExternalRipple) {
            var posX = 0;
            var posY = 0;
            if (isExternalRipple) {
                posX = targetInfo.x + targetInfo.width / 2;
                posY = targetInfo.y + targetInfo.height / 2;
            } else {
                posX = eventInfo.x;
                posY = eventInfo.y;
            }
            return { x: posX, y: posY };
        },
        createRippleContainer: function (targetInfo, isExternalRipple) {
            var containerParent = targetInfo.getTarget();
            if (!containerParent)
                return;
            var containerTagName = containerParent.tagName == "TR" ? "TD" : "DIV";
            var container = document.createElement(containerTagName);
            container.className = this.rippleContainerClassName;
            if (containerParent.parentNode && containerParent.tagName == "IMG")
                containerParent = containerParent.parentNode;
            if (this.isARowInFixedLayoutTable(containerParent))
                this.lockFixedLayoutTableSizes(containerParent);
            containerParent.appendChild(container);
            if (isExternalRipple)
                container.style.borderRadius = "50%";
            var containerRect = this.calculateRippleContainerSize(targetInfo, isExternalRipple);
            this.assignContainerSettings(container, containerRect);
            return container;
        },
        isARowInFixedLayoutTable: function (containerParent) {
            if (containerParent.tagName !== "TR")
                return false;
            var parentTable = this.getParentTable(containerParent);
            return parentTable && ASPx.GetCurrentStyle(parentTable)["table-layout"] === "fixed";
        },
        processFirstRowOfFixedTable: function (containerRow, rowAction, cellAction) {
            var firstRow = this.getFirstRow(containerRow);
            rowAction(firstRow);
            var cells = ASPx.Data.CollectionToArray(firstRow.cells);
            cells.forEach(cellAction);
        },
        getParentTable: function (element) {
            var parentTable = element;
            while (parentTable && parentTable.tagName !== "TABLE")
                parentTable = parentTable.parentElement;
            return parentTable;
        },
        lockFixedLayoutTableSizes: function (containerRow) {
            var firstRow = this.getFirstRow(containerRow);
            if (this.incLockCount(firstRow) === 1) {
                var cells = ASPx.Data.CollectionToArray(firstRow.cells);
                var widths = cells.map(function (cell) { return cell.style.width; });
                var computedWidths = cells.map(function (cell) {
                    if (ASPx.Browser.IE && ASPx.ElementHasCssClass(cell, "dxeCM"))
                        return cell.offsetWidth + "px";
                    return window.getComputedStyle(cell).width;
                });
                var fixWidth = function (cell, i) {
                    if (ASPx.Attr.IsExistsAttribute(cell, SAVED_WIDTH_ATTR))
                        return;
                    if (widths[i])
                        ASPx.Attr.SetAttribute(cell, SAVED_WIDTH_ATTR, widths[i]);
                    cell.style.width = computedWidths[i];
                };
                cells.forEach(fixWidth);
            }
        },
        unlockFixedLayoutTableSizes: function (containerRow) {
            var firstRow = this.getFirstRow(containerRow);
            if (this.decLockCount(firstRow) === 0) {
                var cells = ASPx.Data.CollectionToArray(firstRow.cells);
                var restoreState = function (cell) {
                    if (ASPx.Attr.IsExistsAttribute(cell, SAVED_WIDTH_ATTR)) {
                        cell.style.width = ASPx.Attr.GetAttribute(cell, SAVED_WIDTH_ATTR);
                        ASPx.Attr.RemoveAttribute(cell, SAVED_WIDTH_ATTR);
                    } else {
                        cell.style.width = null;
                    }
                };
                cells.forEach(restoreState);
            }
        },
        getFirstRow: function (containerRow) { return ASPx.GetChildByTagName(containerRow.parentElement, "TR", 0); },
        incLockCount: function (elem) { return this.changeLockCount(elem, 1); },
        decLockCount: function (elem) { return this.changeLockCount(elem, -1); },
        changeLockCount: function (elem, diff) {
            var lockCounter = this.getLockCount(elem);
            lockCounter += diff;
            lockCounter = Math.max(0, lockCounter);
            if (lockCounter === 0)
                ASPx.Attr.RemoveAttribute(elem, RIPPLE_FIXED_ROW_ATTR);
            else
                ASPx.Attr.SetAttribute(elem, RIPPLE_FIXED_ROW_ATTR, lockCounter);
            return lockCounter;
        },
        getLockCount: function (lockElement) {
            var attrValue = ASPx.Attr.GetAttribute(lockElement, RIPPLE_FIXED_ROW_ATTR);
            return parseInt(attrValue) || 0;
        },
        assignContainerSettings: function (container, containerRect) {
            var properties = {
                height: containerRect.height,
                width: containerRect.width,
                left: ASPx.PrepareClientPosForElement(containerRect.x, container, true),
                top: ASPx.PrepareClientPosForElement(containerRect.y, container, false)
            };
            if (ASPx.Browser.MobileUI)
                ASPx.Data.MergeHashTables(properties, { marginTop: 0, marginLeft: 0 });
            ASPx.SetStyles(container, properties, ASPx.Browser.MobileUI);
        },
        IsExternalRipple: function (targetInfo) {
            var hasExternalRippleClassName = ASPx.ElementContainsCssClass(targetInfo.getTarget(), this.rippleTargetExternalClassName);
            if (!ASPx.Browser.MobileUI)
                return hasExternalRippleClassName;
            return hasExternalRippleClassName || this.IsMobileExternalRipple(targetInfo);
        },
        IsMobileExternalRipple: function (targetInfo) {
            if (this.isMobileExternalRipple == null) {
                var originTouchRadius = this.getOriginTouchRadius();
                this.isMobileExternalRipple = ASPx.Browser.MobileUI && targetInfo.width < originTouchRadius && targetInfo.height < originTouchRadius;
            }
            return this.isMobileExternalRipple;
        },
        RemoveRippleContainer: function (element) {
            if (!element)
                return;
            var childs = ASPx.GetChildNodesByClassName(element, this.rippleContainerClassName);
            var rippleContainer = childs.length > 0 ? childs[0] : null;
            if (rippleContainer != null) {
                var containerParent = rippleContainer.parentNode;
                containerParent.removeChild(rippleContainer);
                if (this.isARowInFixedLayoutTable(containerParent))
                    this.unlockFixedLayoutTableSizes(containerParent);
            }
        },
        getEventX: function (evt) {
            return ASPxClientUtils.GetEventX(evt);
        },
        getEventY: function (evt) {
            return ASPxClientUtils.GetEventY(evt);
        },
        getOriginTouchRadius: function () {
            return this.touchRadius / this.zoom;
        },
        getElementRect: function (element) {
            return { x: ASPx.GetAbsoluteX(element), y: ASPx.GetAbsoluteY(element), width: element.offsetWidth, height: element.offsetHeight };
        }
    };
    var AccessibilitySR = {
        AddStringResources: function (stringResourcesObj) {
            if (stringResourcesObj) {
                for (var key in stringResourcesObj)
                    if (stringResourcesObj.hasOwnProperty(key))
                        this[key] = stringResourcesObj[key];
            }
        }
    };
    ASPx.CollectionBase = CollectionBase;
    ASPx.FunctionIsInCallstack = _aspxFunctionIsInCallstack;
    ASPx.RaisePostHandlerOnPost = aspxRaisePostHandlerOnPost;
    ASPx.GetPostHandler = aspxGetPostHandler;
    ASPx.ProcessScriptsAndLinks = _aspxProcessScriptsAndLinks;
    ASPx.InitializeLinks = _aspxInitializeLinks;
    ASPx.InitializeScripts = _aspxInitializeScripts;
    ASPx.RunStartupScripts = _aspxRunStartupScripts;
    ASPx.IsStartupScriptsRunning = _aspxIsStartupScriptsRunning;
    ASPx.AddScriptsRestartHandler = _aspxAddScriptsRestartHandler;
    ASPx.GetFocusedElement = _aspxGetFocusedElement;
    ASPx.GetDomObserver = _aspxGetDomObserver;
    ASPx.CacheHelper = CacheHelper;
    ASPx.ControlTree = ControlTree;
    ASPx.ControlCallbackHandlersQueue = ControlCallbackHandlersQueue;
    ASPx.ResourceManager = ResourceManager;
    ASPx.UpdateWatcherHelper = UpdateWatcherHelper;
    ASPx.EventStorage = EventStorage;
    ASPx.GetGlobalObject = GetGlobalObject;
    ASPx.GetExternalScriptProcessor = GetExternalScriptProcessor;
    ASPx.CheckBoxCheckState = CheckBoxCheckState;
    ASPx.CheckBoxInputKey = CheckBoxInputKey;
    ASPx.CheckableElementStateController = CheckableElementStateController;
    ASPx.CheckableElementHelper = CheckableElementHelper;
    ASPx.CheckBoxInternal = CheckBoxInternal;
    ASPx.CheckBoxInternalCollection = CheckBoxInternalCollection;
    ASPx.ControlCallbackQueueHelper = ControlCallbackQueueHelper;
    ASPx.EditorStyleDecoration = EditorStyleDecoration;
    ASPx.AccessibilitySR = AccessibilitySR;
    ASPx.KbdHelper = KbdHelper;
    ASPx.AccessKeysHelper = AccessKeysHelper;
    ASPx.AccessKey = AccessKey;
    ASPx.IFrameHelper = IFrameHelper;
    ASPx.Ident = Ident;
    ASPx.TouchUIHelper = TouchUIHelper;
    ASPx.ControlUpdateWatcher = ControlUpdateWatcher;
    ASPx.AccessibilityHelperBase = AccessibilityHelperBase;
    ASPx.RippleHelper = RippleHelper;
    ASPx.ThemesWithRipple = ThemesWithRipple;
    window.ASPxClientEvent = ASPxClientEvent;
    window.ASPxClientEventArgs = ASPxClientEventArgs;
    window.ASPxClientCancelEventArgs = ASPxClientCancelEventArgs;
    window.ASPxClientProcessingModeEventArgs = ASPxClientProcessingModeEventArgs;
    window.ASPxClientProcessingModeCancelEventArgs = ASPxClientProcessingModeCancelEventArgs;
    ASPx.Evt.AttachEventToDocument(TouchUIHelper.touchMouseDownEventName, RippleHelper.onDocumentMouseDown);
    ASPx.classesScriptParsed = true;
})();

(function () {
    var CheckingScriptObjectCommand = ASPx.CreateClass(null, {
        constructor: function (scriptName, markerObjectName) {
            this.scriptName = scriptName;
            this.markerObjectName = markerObjectName;
            this.isExisted = false;
        },
        Run: function () {
            var markerObj = this.GetMarkerObject();
            this.isExisted = !!markerObj;
            if (this.isExisted)
                markerObj.DXPatched = true;
        },
        GetErrorMessage: function () {
            return this.GetErrorMessageCore(true);
        },
        GetErrorMessageCore: function (isScriptRequired) {
            var markerObj = this.GetMarkerObject();
            if (this.isExisted && markerObj && markerObj.DXPatched || !isScriptRequired && !markerObj)
                return null;
            if (isScriptRequired && !this.GetMarkerObject()) {
                if (this.isExisted)
                    return this.scriptName + " script was attached but has been overridden.";
                else
                    return this.scriptName + " script was not attached.";
            }
            if (!this.isExisted)
                return this.scriptName + " script was attached after DevExpress scripts.";
            return this.scriptName + " script was attached multiple times and mixed up with DevExpress scripts.";
        },
        GetMarkerObject: function () {
            return ASPx.GetGlobalObject(this.markerObjectName);
        }
    });
    var PatchScriptCommand = ASPx.CreateClass(CheckingScriptObjectCommand, {
        constructor: function (scriptName, markerObjectName, patchMethod, required) {
            this.constructor.prototype.constructor.call(this, scriptName, markerObjectName);
            this.required = required;
            this.patchMethod = patchMethod;
        },
        Run: function () {
            CheckingScriptObjectCommand.prototype.Run.call(this);
            if (this.isExisted)
                this.patchMethod();
        },
        GetErrorMessage: function () {
            return this.GetErrorMessageCore(this.required);
        }
    });
    var ExternalScriptProcessor = ASPx.CreateClass(null, {
        constructor: function () {
            this.commands = {};
        },
        Process: function (scriptName, markerObjectName, patchMethod, required) {
            var newCommand = this.CreateCommand(scriptName, markerObjectName, patchMethod, !!required);
            var oldCommand = this.commands[markerObjectName];
            if (oldCommand) {
                if (!oldCommand.patchMethod && !newCommand.patchMethod)
                    newCommand = null;
                else if (newCommand.patchMethod && (!oldCommand.patchMethod || oldCommand.required))
                    newCommand.required = true;
                else if (oldCommand.patchMethod && !newCommand.patchMethod) {
                    oldCommand.required = true;
                    newCommand = null;
                }
            }
            if (newCommand) {
                this.commands[markerObjectName] = newCommand;
                newCommand.Run();
            }
        },
        CreateCommand: function (scriptName, markerObjectName, patchMethod, required) {
            if (patchMethod)
                return new PatchScriptCommand(scriptName, markerObjectName, patchMethod, required);
            return new CheckingScriptObjectCommand(scriptName, markerObjectName);
        },
        ShowErrorMessages: function () {
            var messages = this.GetErrorMessages();
            var console = window.console;
            if (!messages.length || !console || !ASPx.IsFunction(console.error))
                return;
            for (var i = 0; i < messages.length; i++) {
                console.error(messages[i]);
            }
            ASPx.ShowKBErrorMessage("Please check the correctness of script registration on the page. For details, see ", "T272309");
        },
        GetErrorMessages: function () {
            var messages = [];
            for (var key in this.commands) {
                if (this.commands.hasOwnProperty(key)) {
                    var message = this.commands[key].GetErrorMessage();
                    if (message)
                        messages.push(message);
                }
            }
            return messages;
        }
    });
    ExternalScriptProcessor.Instance = null;
    ExternalScriptProcessor.getInstance = function () {
        if (!ExternalScriptProcessor.Instance)
            ExternalScriptProcessor.Instance = new ExternalScriptProcessor();
        return ExternalScriptProcessor.Instance;
    };
    ASPx.ExternalScriptProcessor = ExternalScriptProcessor;
})();
(function () {
    var ASPxClientBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (command) {
            this.constructor.prototype.constructor.call(this);
            this.command = command;
        }
    });
    var ASPxClientGlobalBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientBeginCallbackEventArgs, {
        constructor: function (control, command) {
            this.constructor.prototype.constructor.call(this, command);
            this.control = control;
        }
    });
    var ASPxClientEndCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
        }
    });
    var ASPxClientGlobalEndCallbackEventArgs = ASPx.CreateClass(ASPxClientEndCallbackEventArgs, {
        constructor: function (control) {
            this.constructor.prototype.constructor.call(this);
            this.control = control;
        }
    });
    var ASPxClientCustomDataCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (result) {
            this.constructor.prototype.constructor.call(this);
            this.result = result;
        }
    });
    var ASPxClientCallbackErrorEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (message, callbackId) {
            this.constructor.prototype.constructor.call(this);
            this.message = message;
            this.handled = false;
            this.callbackId = callbackId;
        }
    });
    var ASPxClientGlobalCallbackErrorEventArgs = ASPx.CreateClass(ASPxClientCallbackErrorEventArgs, {
        constructor: function (control, message, callbackId) {
            this.constructor.prototype.constructor.call(this, message, callbackId);
            this.control = control;
        }
    });
    var ASPxClientValidationCompletedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl) {
            this.constructor.prototype.constructor.call(this);
            this.container = container;
            this.validationGroup = validationGroup;
            this.invisibleControlsValidated = invisibleControlsValidated;
            this.isValid = isValid;
            this.firstInvalidControl = firstInvalidControl;
            this.firstVisibleInvalidControl = firstVisibleInvalidControl;
        }
    });
    var ASPxClientControlsInitializedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (isCallback) {
            this.isCallback = isCallback;
        }
    });
    var ASPxClientControlBeforePronounceEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (messageParts, control) {
            this.constructor.prototype.constructor.call(this);
            this.messageParts = messageParts;
            this.control = control;
        }
    });
    var ASPxClientControlUnloadEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (control) {
            this.constructor.prototype.constructor.call(this);
            this.control = control;
        }
    });
    var BeforeInitCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (callbackOwnerID) {
            this.constructor.prototype.constructor.call(this);
            this.callbackOwnerID = callbackOwnerID;
        }
    });
    ASPx.createControl = function (type, name, windowName, properties, events, setupMethod, data) {
        var dxo = new type(name);
        dxo.InitGlobalVariable(windowName && windowName.length > 0 ? windowName : name);
        if (properties)
            dxo.SetProperties(properties);
        if (events)
            dxo.SetEvents(events);
        if (setupMethod)
            setupMethod.call(dxo);
        if (data)
            dxo.SetData(data);
        dxo.AfterCreate();
    };
    var ASPxClientControlBase = ASPx.CreateClass(null, {
        constructor: function (name) {
            this.name = name;
            this.uniqueID = name;
            this.globalName = name;
            this.stateObject = null;
            this.encodeHtml = true;
            this.enabled = true;
            this.clientEnabled = true;
            this.savedClientEnabled = true;
            this.clientVisible = true;
            this.accessibilityCompliant = false;
            this.autoPostBack = false;
            this.allowMultipleCallbacks = true;
            this.callBack = null;
            this.enableCallbackAnimation = false;
            this.enableSlideCallbackAnimation = false;
            this.slideAnimationDirection = null;
            this.beginCallbackAnimationProcessing = false;
            this.endCallbackAnimationProcessing = false;
            this.savedCallbackResult = null;
            this.savedCallbacks = null;
            this.isCallbackAnimationPrevented = false;
            this.lpDelay = 300;
            this.lpTimer = -1;
            this.requestCount = 0;
            this.enableSwipeGestures = false;
            this.disableSwipeGestures = false;
            this.supportGestures = false;
            this.repeatedGestureValue = 0;
            this.repeatedGestureCount = 0;
            this.isInitialized = false;
            this.initialFocused = false;
            this.leadingAfterInitCall = ASPxClientControl.LeadingAfterInitCallConsts.None;
            this.serverEvents = [];
            this.loadingPanelElement = null;
            this.loadingDivElement = null;
            this.hasPhantomLoadingElements = false;
            this.mainElement = null;
            this.touchUIMouseScroller = null;
            this.hiddenFields = {};
            this.callbackHandlersQueue = new ASPx.ControlCallbackHandlersQueue(this);
            this.Init = new ASPxClientEvent();
            this.BeginCallback = new ASPxClientEvent();
            this.EndCallback = new ASPxClientEvent();
            this.EndCallbackAnimationStart = new ASPxClientEvent();
            this.CallbackError = new ASPxClientEvent();
            this.CustomDataCallback = new ASPxClientEvent();
            this.BeforePronounce = new ASPxClientEvent();
            this.Unload = new ASPxClientEvent();
            aspxGetControlCollection().Add(this);
        },
        Initialize: function () {
            if (this.callBack != null)
                this.InitializeCallBackData();
            if (this.useCallbackQueue())
                this.callbackQueueHelper = new ASPx.ControlCallbackQueueHelper(this);
            ASPx.AccessibilityUtils.createAccessibleBackgrounds(this);
            if (this.accessibilityCompliant)
                ASPx.AccessibilityPronouncer.EnsureInitialize();
        },
        InlineInitialize: function () {
            this.savedClientEnabled = this.clientEnabled;
        },
        InitializeGestures: function () {
            if (this.isSwipeGesturesEnabled() && this.supportGestures) {
                ASPx.GesturesHelper.AddSwipeGestureHandler(this.name,
                    function () { return this.GetCallbackAnimationElement(); }.aspxBind(this),
                    function (evt) { return this.CanHandleGestureCore(evt); }.aspxBind(this),
                    function (value) { return this.AllowStartGesture(); }.aspxBind(this),
                    function (value) { return this.StartGesture(); }.aspxBind(this),
                    function (value) { return this.AllowExecuteGesture(value); }.aspxBind(this),
                    function (value) { this.ExecuteGesture(value); }.aspxBind(this),
                    function (value) { this.CancelGesture(value); }.aspxBind(this),
                    this.GetDefaultanimationEngineType()
                );
                if (ASPx.Browser.MSTouchUI)
                    this.touchUIMouseScroller = ASPx.MouseScroller.Create(
                        function () { return this.GetCallbackAnimationElement(); }.aspxBind(this),
                        function () { return null; },
                        function () { return this.GetCallbackAnimationElement(); }.aspxBind(this),
                        function (element) { return this.NeedPreventTouchUIMouseScrolling(element); }.aspxBind(this),
                        true
                    );
            }
        },
        isSwipeGesturesEnabled: function () {
            return !this.disableSwipeGestures && (this.enableSwipeGestures || ASPx.Browser.TouchUI);
        },
        isSlideCallbackAnimationEnabled: function () {
            return this.enableSlideCallbackAnimation || this.isSwipeGesturesEnabled();
        },
        InitGlobalVariable: function (varName) {
            if (!window) return;
            this.globalName = varName;
            window[varName] = this;
        },
        SetProperties: function (properties, obj) {
            if (!obj) obj = this;
            for (var name in properties) {
                if (properties.hasOwnProperty(name))
                    obj[name] = properties[name];
            }
        },
        SetEvents: function (events, obj) {
            if (!obj) obj = this;
            for (var name in events) {
                if (events.hasOwnProperty(name) && obj[name] && obj[name].AddHandler)
                    obj[name].AddHandler(events[name]);
            }
        },
        SetData: function (data) {
        },
        useCallbackQueue: function () {
            return false;
        },
        NeedPreventTouchUIMouseScrolling: function (element) {
            return false;
        },
        InitailizeFocus: function () {
            if (this.initialFocused && this.IsVisible())
                this.Focus();
        },
        AfterCreate: function () {
            this.InlineInitialize();
            this.InitializeGestures();
        },
        AfterInitialize: function () {
            this.initializeAriaDescriptor();
            this.InitailizeFocus();
            this.isInitialized = true;
            this.RaiseInit();
            if (this.savedCallbacks) {
                for (var i = 0; i < this.savedCallbacks.length; i++)
                    this.CreateCallbackInternal(this.savedCallbacks[i].arg, this.savedCallbacks[i].command,
                        false, this.savedCallbacks[i].callbackInfo);
                this.savedCallbacks = null;
            }
        },
        InitializeCallBackData: function () {
        },
        IsDOMDisposed: function () {
            return !ASPx.IsExistsElement(this.GetMainElement());
        },
        initializeAriaDescriptor: function () {
            if (this.ariaDescription) {
                var descriptionObject = ASPx.Json.Eval(this.ariaDescription);
                if (descriptionObject) {
                    this.ariaDescriptor = new AriaDescriptor(this, descriptionObject);
                    this.applyAccessibilityAttributes(this.ariaDescriptor);
                }
            }
        },
        applyAccessibilityAttributes: function () { },
        setAriaDescription: function (selector, argsList) {
            if (this.ariaDescriptor)
                this.ariaDescriptor.setDescription(selector, argsList || [[]]);
        },
        allowRestoreFocusOnCallbacks: function () {
            return this.accessibilityCompliant;
        },
        HtmlEncode: function (text) {
            return this.encodeHtml ? ASPx.Str.EncodeHtml(text) : text;
        },
        IsServerEventAssigned: function (eventName) {
            return ASPx.Data.ArrayIndexOf(this.serverEvents, eventName) >= 0;
        },
        OnPost: function (args) {
            this.UpdateStateObject();
            if (this.stateObject != null)
                this.UpdateStateHiddenField();
        },
        OnPostFinalization: function (args) {
        },
        UpdateStateObject: function () {
        },
        UpdateStateObjectWithObject: function (obj) {
            if (!obj) return;
            if (!this.stateObject)
                this.stateObject = {};
            for (var key in obj)
                if (obj.hasOwnProperty(key))
                    this.stateObject[key] = obj[key];
        },
        UpdateStateHiddenField: function () {
            var stateHiddenField = this.GetStateHiddenField();
            if (stateHiddenField) {
                var stateObjectStr = ASPx.Json.ToJson(this.stateObject);
                stateHiddenField.value = ASPx.Str.EncodeHtml(stateObjectStr);
            }
        },
        GetStateHiddenField: function () {
            return this.GetHiddenField(this.GetStateHiddenFieldName(), this.GetStateHiddenFieldID(),
                this.GetStateHiddenFieldParent(), this.GetStateHiddenFieldOrigin());
        },
        GetStateHiddenFieldName: function () {
            return this.uniqueID;
        },
        GetStateHiddenFieldID: function () {
            return this.name + "_State";
        },
        GetStateHiddenFieldOrigin: function () {
            return this.GetMainElement();
        },
        GetStateHiddenFieldParent: function () {
            var element = this.GetStateHiddenFieldOrigin();
            return element ? element.parentNode : null;
        },
        GetHiddenField: function (name, id, parent, beforeElement) {
            var hiddenField = this.hiddenFields[id];
            if (!hiddenField || !ASPx.IsValidElement(hiddenField)) {
                if (parent) {
                    var existingHiddenField = ASPx.GetElementById(this.GetStateHiddenFieldID());
                    this.hiddenFields[id] = hiddenField = existingHiddenField || ASPx.CreateHiddenField(name, id);
                    if (existingHiddenField)
                        return existingHiddenField;
                    if (beforeElement)
                        parent.insertBefore(hiddenField, beforeElement);
                    else
                        parent.appendChild(hiddenField);
                }
            }
            return hiddenField;
        },
        GetChildElement: function (idPostfix) {
            var mainElement = this.GetMainElement();
            if (idPostfix.charAt && idPostfix.charAt(0) !== "_")
                idPostfix = "_" + idPostfix;
            return mainElement ? ASPx.CacheHelper.GetCachedChildById(this, mainElement, this.name + idPostfix) : null;
        },
        getChildControl: function (idPostfix) {
            var result = null;
            var childControlId = this.getChildControlUniqueID(idPostfix);
            ASPx.GetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function (control) {
                if (control.uniqueID == childControlId)
                    result = control;
            });
            return result;
        },
        getChildControlUniqueID: function (idPostfix) {
            idPostfix = idPostfix.split("_").join("$");
            if (idPostfix.charAt && idPostfix.charAt(0) !== "$")
                idPostfix = "$" + idPostfix;
            return this.uniqueID + idPostfix;
        },
        getInnerControl: function (idPostfix) {
            var name = this.name + idPostfix;
            var result = window[name];
            return result && Ident.IsASPxClientControl(result)
                ? result
                : null;
        },
        GetParentForm: function () {
            return ASPx.GetParentByTagName(this.GetMainElement(), "FORM");
        },
        GetMainElement: function () {
            if (!ASPx.IsExistsElement(this.mainElement))
                this.mainElement = ASPx.GetElementById(this.name);
            return this.mainElement;
        },
        IsLoadingContainerVisible: function () {
            return this.IsVisible();
        },
        GetLoadingPanelElement: function () {
            return ASPx.GetElementById(this.name + "_LP");
        },
        GetClonedLoadingPanel: function () {
            return document.getElementById(this.GetLoadingPanelElement().id + "V");
        },
        CloneLoadingPanel: function (element, parent) {
            var clone = element.cloneNode(true);
            clone.id = element.id + "V";
            parent.appendChild(clone);
            return clone;
        },
        CreateLoadingPanelWithoutBordersInsideContainer: function (container) {
            var loadingPanel = this.CreateLoadingPanelInsideContainer(container, false, true, true);
            var contentStyle = ASPx.GetCurrentStyle(container);
            if (!loadingPanel || !contentStyle)
                return;
            var elements = [];
            var table = (loadingPanel.tagName == "TABLE") ? loadingPanel : ASPx.GetNodeByTagName(loadingPanel, "TABLE", 0);
            if (table != null)
                elements.push(table);
            else
                elements.push(loadingPanel);
            var cells = ASPx.GetNodesByTagName(loadingPanel, "TD");
            if (!cells) cells = [];
            for (var i = 0; i < cells.length; i++)
                elements.push(cells[i]);
            for (var i = 0; i < elements.length; i++) {
                var el = elements[i];
                el.style.backgroundColor = contentStyle.backgroundColor;
                ASPx.RemoveBordersAndShadows(el);
            }
        },
        CreateLoadingPanelInsideContainer: function (parentElement, hideContent, collapseHeight, collapseWidth) {
            if (this.ShouldHideExistingLoadingElements())
                this.HideLoadingPanel();
            if (parentElement == null)
                return null;
            if (!this.IsLoadingContainerVisible()) {
                this.hasPhantomLoadingElements = true;
                return null;
            }
            var element = this.GetLoadingPanelElement();
            if (element != null) {
                var width = collapseWidth ? 0 : ASPx.GetClearClientWidth(parentElement);
                var height = collapseHeight ? 0 : ASPx.GetClearClientHeight(parentElement);
                if (hideContent) {
                    for (var i = parentElement.childNodes.length - 1; i > -1; i--) {
                        if (parentElement.childNodes[i].style)
                            parentElement.childNodes[i].style.display = "none";
                        else if (parentElement.childNodes[i].nodeType == 3)
                            parentElement.removeChild(parentElement.childNodes[i]);
                    }
                }
                else
                    parentElement.innerHTML = "";
                var table = document.createElement("TABLE");
                parentElement.appendChild(table);
                table.border = 0;
                table.cellPadding = 0;
                table.cellSpacing = 0;
                ASPx.SetStyles(table, {
                    width: (width > 0) ? width : "100%",
                    height: (height > 0) ? height : "100%"
                });
                var tbody = document.createElement("TBODY");
                table.appendChild(tbody);
                var tr = document.createElement("TR");
                tbody.appendChild(tr);
                var td = document.createElement("TD");
                tr.appendChild(td);
                td.align = "center";
                td.vAlign = "middle";
                element = this.CloneLoadingPanel(element, td);
                ASPx.SetElementDisplay(element, true, true);
                this.loadingPanelElement = element;
                return element;
            } else
                parentElement.innerHTML = "&nbsp;";
            return null;
        },
        CreateLoadingPanelWithAbsolutePosition: function (parentElement, offsetElement) {
            if (this.ShouldHideExistingLoadingElements())
                this.HideLoadingPanel();
            if (parentElement == null)
                return null;
            if (!this.IsLoadingContainerVisible()) {
                this.hasPhantomLoadingElements = true;
                return null;
            }
            if (!offsetElement)
                offsetElement = parentElement;
            var element = this.GetLoadingPanelElement();
            if (element != null) {
                element = this.CloneLoadingPanel(element, parentElement);
                ASPx.SetStyles(element, {
                    position: "absolute"
                });
                ASPx.SetElementDisplay(element, true, true);
                ASPx.Evt.AttachEventToElement(element, ASPx.Evt.GetMouseWheelEventName(), ASPx.Evt.PreventEvent);
                this.SetLoadingPanelLocation(offsetElement, element);
                this.loadingPanelElement = element;
                return element;
            }
            return null;
        },
        CreateLoadingPanelInline: function (parentElement, centerInParent) {
            if (this.ShouldHideExistingLoadingElements())
                this.HideLoadingPanel();
            if (parentElement == null)
                return null;
            if (!this.IsLoadingContainerVisible()) {
                this.hasPhantomLoadingElements = true;
                return null;
            }
            var element = this.GetLoadingPanelElement();
            if (element != null) {
                element = this.CloneLoadingPanel(element, parentElement);
                if (centerInParent) {
                    ASPx.SetElementDisplay(element, true, true, true);
                    parentElement.style.textAlign = "center";
                }
                else
                    ASPx.SetElementDisplay(element, true, true);
                this.loadingPanelElement = element;
                return element;
            }
            return null;
        },
        ShowLoadingPanel: function () {
        },
        ShowLoadingElements: function () {
            if (this.InCallback() || this.lpTimer > -1) return;
            this.ShowLoadingDiv();
            if (this.IsCallbackAnimationEnabled())
                this.StartBeginCallbackAnimation();
            else
                this.ShowLoadingElementsInternal();
        },
        ShowLoadingElementsInternal: function () {
            if (this.lpDelay > 0 && !this.IsCallbackAnimationEnabled())
                this.lpTimer = window.setTimeout(function () {
                    this.ShowLoadingPanelOnTimer();
                }.aspxBind(this), this.lpDelay);
            else {
                this.RestoreLoadingDivOpacity();
                this.ShowLoadingPanel();
            }
        },
        GetLoadingPanelOffsetElement: function (baseElement) {
            if (this.IsCallbackAnimationEnabled()) {
                var element = this.GetLoadingPanelCallbackAnimationOffsetElement();
                if (element) {
                    var container = typeof (ASPx.AnimationHelper) != "undefined" ? ASPx.AnimationHelper.findSlideAnimationContainer(element) : null;
                    if (container)
                        return container.parentNode.parentNode;
                    else
                        return element;
                }
            }
            return baseElement;
        },
        GetLoadingPanelCallbackAnimationOffsetElement: function () {
            return this.GetCallbackAnimationElement();
        },
        IsCallbackAnimationEnabled: function () {
            return (this.enableCallbackAnimation || this.isSlideCallbackAnimationEnabled()) && !this.isCallbackAnimationPrevented;
        },
        GetDefaultanimationEngineType: function () {
            return ASPx.AnimationEngineType.DEFAULT;
        },
        StartBeginCallbackAnimation: function () {
            this.beginCallbackAnimationProcessing = true;
            this.isCallbackFinished = false;
            var element = this.GetCallbackAnimationElement();
            if (element && this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection)
                ASPx.AnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeginCallbackAnimation.aspxBind(this), this.GetDefaultanimationEngineType());
            else if (element && this.enableCallbackAnimation)
                ASPx.AnimationHelper.fadeOut(element, this.FinishBeginCallbackAnimation.aspxBind(this));
            else
                this.FinishBeginCallbackAnimation();
        },
        CancelBeginCallbackAnimation: function () {
            if (this.beginCallbackAnimationProcessing) {
                this.beginCallbackAnimationProcessing = false;
                var element = this.GetCallbackAnimationElement();
                ASPx.AnimationHelper.cancelAnimation(element);
            }
        },
        FinishBeginCallbackAnimation: function () {
            this.beginCallbackAnimationProcessing = false;
            if (!this.isCallbackFinished)
                this.ShowLoadingElementsInternal();
            else {
                this.DoCallback(this.savedCallbackResult);
                this.savedCallbackResult = null;
            }
        },
        CheckBeginCallbackAnimationInProgress: function (callbackResult) {
            if (this.beginCallbackAnimationProcessing) {
                this.savedCallbackResult = callbackResult;
                this.isCallbackFinished = true;
                return true;
            }
            return false;
        },
        StartEndCallbackAnimation: function () {
            this.HideLoadingPanel();
            this.SetInitialLoadingDivOpacity();
            this.RaiseEndCallbackAnimationStart();
            this.endCallbackAnimationProcessing = true;
            var element = this.GetCallbackAnimationElement();
            if (element && this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection)
                ASPx.AnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishEndCallbackAnimation.aspxBind(this), this.GetDefaultanimationEngineType());
            else if (element && this.enableCallbackAnimation)
                ASPx.AnimationHelper.fadeIn(element, this.FinishEndCallbackAnimation.aspxBind(this));
            else
                this.FinishEndCallbackAnimation();
            this.slideAnimationDirection = null;
        },
        FinishEndCallbackAnimation: function () {
            this.DoEndCallback();
            this.endCallbackAnimationProcessing = false;
            this.CheckRepeatGesture();
        },
        CheckEndCallbackAnimationNeeded: function () {
            if (!this.endCallbackAnimationProcessing && this.requestCount == 1) {
                this.StartEndCallbackAnimation();
                return true;
            }
            return false;
        },
        PreventCallbackAnimation: function () {
            this.isCallbackAnimationPrevented = true;
        },
        GetCallbackAnimationElement: function () {
            return null;
        },
        AssignSlideAnimationDirectionByPagerArgument: function (arg, currentPageIndex) {
            this.slideAnimationDirection = null;
            if (this.isSlideCallbackAnimationEnabled() && typeof (ASPx.AnimationHelper) != "undefined") {
                if (arg == PagerCommands.Next || arg == PagerCommands.Last)
                    this.slideAnimationDirection = ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
                else if (arg == PagerCommands.First || arg == PagerCommands.Prev)
                    this.slideAnimationDirection = ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION;
                else if (!isNaN(currentPageIndex) && arg.indexOf(PagerCommands.PageNumber) == 0) {
                    var newPageIndex = parseInt(arg.substring(2));
                    if (!isNaN(newPageIndex))
                        this.slideAnimationDirection = newPageIndex < currentPageIndex ? ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION : ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
                }
            }
        },
        TryShowPhantomLoadingElements: function () {
            if (this.hasPhantomLoadingElements && this.InCallback()) {
                this.hasPhantomLoadingElements = false;
                this.ShowLoadingDivAndPanel();
            }
        },
        ShowLoadingDivAndPanel: function () {
            this.ShowLoadingDiv();
            this.RestoreLoadingDivOpacity();
            this.ShowLoadingPanel();
        },
        HideLoadingElements: function () {
            this.CancelBeginCallbackAnimation();
            this.HideLoadingPanel();
            this.HideLoadingDiv();
        },
        ShowLoadingPanelOnTimer: function () {
            this.ClearLoadingPanelTimer();
            if (!this.IsDOMDisposed()) {
                this.RestoreLoadingDivOpacity();
                this.ShowLoadingPanel();
            }
        },
        ClearLoadingPanelTimer: function () {
            this.lpTimer = ASPx.Timer.ClearTimer(this.lpTimer);
        },
        HideLoadingPanel: function () {
            this.ClearLoadingPanelTimer();
            this.hasPhantomLoadingElements = false;
            if (ASPx.IsExistsElement(this.loadingPanelElement)) {
                ASPx.RemoveElement(this.loadingPanelElement);
                this.loadingPanelElement = null;
            }
        },
        SetLoadingPanelLocation: function (offsetElement, loadingPanel, x, y, offsetX, offsetY) {
            if (!ASPx.IsExists(x) || !ASPx.IsExists(y)) {
                var x1 = ASPx.GetAbsoluteX(offsetElement);
                var y1 = ASPx.GetAbsoluteY(offsetElement);
                var x2 = x1;
                var y2 = y1;
                if (offsetElement == document.body) {
                    x2 += ASPx.GetDocumentMaxClientWidth();
                    y2 += ASPx.GetDocumentMaxClientHeight();
                }
                else {
                    x2 += offsetElement.offsetWidth;
                    y2 += offsetElement.offsetHeight;
                }
                if (x1 < ASPx.GetDocumentScrollLeft())
                    x1 = ASPx.GetDocumentScrollLeft();
                if (y1 < ASPx.GetDocumentScrollTop())
                    y1 = ASPx.GetDocumentScrollTop();
                if (x2 > ASPx.GetDocumentScrollLeft() + ASPx.GetDocumentClientWidth())
                    x2 = ASPx.GetDocumentScrollLeft() + ASPx.GetDocumentClientWidth();
                if (y2 > ASPx.GetDocumentScrollTop() + ASPx.GetDocumentClientHeight())
                    y2 = ASPx.GetDocumentScrollTop() + ASPx.GetDocumentClientHeight();
                x = x1 + ((x2 - x1 - loadingPanel.offsetWidth) / 2);
                y = y1 + ((y2 - y1 - loadingPanel.offsetHeight) / 2);
            }
            if (ASPx.IsExists(offsetX) && ASPx.IsExists(offsetY)) {
                x += offsetX;
                y += offsetY;
            }
            x = ASPx.PrepareClientPosForElement(x, loadingPanel, true);
            y = ASPx.PrepareClientPosForElement(y, loadingPanel, false);
            if (ASPx.Browser.IE && ASPx.Browser.Version > 8 && (y - Math.floor(y) === 0.5))
                y = Math.ceil(y);
            ASPx.SetStyles(loadingPanel, { left: x, top: y });
        },
        GetLoadingDiv: function () {
            return ASPx.GetElementById(this.name + "_LD");
        },
        CreateLoadingDiv: function (parentElement, offsetElement) {
            if (this.ShouldHideExistingLoadingElements())
                this.HideLoadingDiv();
            if (parentElement == null)
                return null;
            if (!this.IsLoadingContainerVisible()) {
                this.hasPhantomLoadingElements = true;
                return null;
            }
            if (!offsetElement)
                offsetElement = parentElement;
            var div = this.GetLoadingDiv();
            if (div != null) {
                div = div.cloneNode(true);
                parentElement.appendChild(div);
                ASPx.SetElementDisplay(div, true, true);
                ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseDownEventName, ASPx.Evt.PreventEvent);
                ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseMoveEventName, ASPx.Evt.PreventEvent);
                ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseUpEventName, ASPx.Evt.PreventEvent);
                ASPx.Evt.AttachEventToElement(div, ASPx.Evt.GetMouseWheelEventName(), ASPx.Evt.PreventEvent);
                this.SetLoadingDivBounds(offsetElement, div);
                this.loadingDivElement = div;
                this.SetInitialLoadingDivOpacity();
                return div;
            }
            return null;
        },
        SetInitialLoadingDivOpacity: function () {
            if (!this.loadingDivElement) return;
            ASPx.Attr.SaveStyleAttribute(this.loadingDivElement, "opacity");
            ASPx.Attr.SaveStyleAttribute(this.loadingDivElement, "filter");
            ASPx.SetElementOpacity(this.loadingDivElement, 0.01);
        },
        RestoreLoadingDivOpacity: function () {
            if (!this.loadingDivElement) return;
            ASPx.Attr.RestoreStyleAttribute(this.loadingDivElement, "opacity");
            ASPx.Attr.RestoreStyleAttribute(this.loadingDivElement, "filter");
        },
        SetLoadingDivBounds: function (offsetElement, loadingDiv) {
            var absX = (offsetElement == document.body) ? 0 : ASPx.GetAbsoluteX(offsetElement);
            var absY = (offsetElement == document.body) ? 0 : ASPx.GetAbsoluteY(offsetElement);
            ASPx.SetStyles(loadingDiv, {
                left: ASPx.PrepareClientPosForElement(absX, loadingDiv, true),
                top: ASPx.PrepareClientPosForElement(absY, loadingDiv, false)
            });
            var width = (offsetElement == document.body) ? ASPx.GetDocumentWidth() : offsetElement.offsetWidth;
            var height = (offsetElement == document.body) ? ASPx.GetDocumentHeight() : offsetElement.offsetHeight;
            if (height < 0)
                height = 0;
            ASPx.SetStyles(loadingDiv, { width: width, height: height });
            var correctedWidth = 2 * width - loadingDiv.offsetWidth;
            if (correctedWidth <= 0) correctedWidth = width;
            var correctedHeight = 2 * height - loadingDiv.offsetHeight;
            if (correctedHeight <= 0) correctedHeight = height;
            ASPx.SetStyles(loadingDiv, { width: correctedWidth, height: correctedHeight });
        },
        ShowLoadingDiv: function () {
        },
        HideLoadingDiv: function () {
            this.hasPhantomLoadingElements = false;
            if (ASPx.IsExistsElement(this.loadingDivElement)) {
                ASPx.RemoveElement(this.loadingDivElement);
                this.loadingDivElement = null;
            }
        },
        CanHandleGesture: function (evt) {
            return false;
        },
        CanHandleGestureCore: function (evt) {
            var source = ASPx.Evt.GetEventSource(evt);
            if (ASPx.GetIsParent(this.loadingPanelElement, source) || ASPx.GetIsParent(this.loadingDivElement, source))
                return true;
            var callbackAnimationElement = this.GetCallbackAnimationElement();
            if (!callbackAnimationElement)
                return false;
            var animationContainer = ASPx.AnimationHelper.getSlideAnimationContainer(callbackAnimationElement, false, false);
            if (animationContainer && ASPx.GetIsParent(animationContainer, source) && !ASPx.GetIsParent(animationContainer.childNodes[0], source))
                return true;
            return this.CanHandleGesture(evt);
        },
        AllowStartGesture: function () {
            return !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing;
        },
        StartGesture: function () {
        },
        AllowExecuteGesture: function (value) {
            return false;
        },
        ExecuteGesture: function (value) {
        },
        CancelGesture: function (value) {
            if (this.repeatedGestureCount === 0) {
                this.repeatedGestureValue = value;
                this.repeatedGestureCount = 1;
            }
            else {
                if (this.repeatedGestureValue * value > 0)
                    this.repeatedGestureCount++;
                else
                    this.repeatedGestureCount--;
                if (this.repeatedGestureCount === 0)
                    this.repeatedGestureCount = 0;
            }
        },
        CheckRepeatGesture: function () {
            if (this.repeatedGestureCount !== 0) {
                if (this.AllowExecuteGesture(this.repeatedGestureValue))
                    this.ExecuteGesture(this.repeatedGestureValue, this.repeatedGestureCount);
                this.repeatedGestureValue = 0;
                this.repeatedGestureCount = 0;
            }
        },
        AllowExecutePagerGesture: function (pageIndex, pageCount, value) {
            if (pageIndex < 0) return false;
            if (pageCount <= 1) return false;
            if (value > 0 && pageIndex === 0) return false;
            if (value < 0 && pageIndex === pageCount - 1) return false;
            return true;
        },
        ExecutePagerGesture: function (pageIndex, pageCount, value, count, method) {
            if (!count) count = 1;
            var pageIndex = pageIndex + (value < 0 ? count : -count);
            if (pageIndex < 0) pageIndex = 0;
            if (pageIndex > pageCount - 1) pageIndex = pageCount - 1;
            method(PagerCommands.PageNumber + pageIndex);
        },
        RaiseInit: function () {
            if (!this.Init.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.Init.FireEvent(this, args);
            }
        },
        RaiseBeginCallbackInternal: function (command) {
            if (!this.BeginCallback.IsEmpty()) {
                var args = new ASPxClientBeginCallbackEventArgs(command);
                this.BeginCallback.FireEvent(this, args);
            }
        },
        RaiseEndCallbackInternal: function () {
            if (!this.EndCallback.IsEmpty()) {
                var args = new ASPxClientEndCallbackEventArgs();
                this.EndCallback.FireEvent(this, args);
            }
        },
        RaiseCallbackErrorInternal: function (message, callbackId) {
            if (!this.CallbackError.IsEmpty()) {
                var args = new ASPxClientCallbackErrorEventArgs(message, callbackId);
                this.CallbackError.FireEvent(this, args);
                if (args.handled)
                    return { isHandled: true, errorMessage: args.message };
            }
        },
        RaiseBeginCallback: function (command) {
            this.RaiseBeginCallbackInternal(command);
            aspxGetControlCollection().RaiseBeginCallback(this, command);
        },
        RaiseEndCallback: function () {
            this.RaiseEndCallbackInternal();
            aspxGetControlCollection().RaiseEndCallback(this);
        },
        RaiseCallbackError: function (message, callbackId) {
            var result = this.RaiseCallbackErrorInternal(message, callbackId);
            if (!result)
                result = aspxGetControlCollection().RaiseCallbackError(this, message, callbackId);
            return result;
        },
        RaiseEndCallbackAnimationStart: function () {
            if (!this.EndCallbackAnimationStart.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.EndCallbackAnimationStart.FireEvent(this, args);
            }
        },
        RaiseBeforePronounce: function (message) {
            var args = new ASPxClientControlBeforePronounceEventArgs(message, this);
            if (!this.BeforePronounce.IsEmpty())
                this.BeforePronounce.FireEvent(this, args);
            return args;
        },
        RaiseUnload: function () {
            var args = new ASPxClientControlUnloadEventArgs(this);
            if (!this.Unload.IsEmpty())
                this.Unload.FireEvent(this, args);
        },
        SendMessageToAssistiveTechnology: function (message) {
            if (!this.accessibilityCompliant)
                return;
            this.PronounceMessageInternal(message, ASPx.AccessibilityPronouncerType.live);
        },
        PronounceMessageInternal: function (messageArg, type) {
            var message = messageArg;
            if (!ASPx.Ident.IsArray(messageArg))
                message = [messageArg];
            var args = this.RaiseBeforePronounce(message);
            ASPx.AccessibilityPronouncer.Pronounce(args, type);
        },
        IsVisible: function () {
            var element = this.GetMainElement();
            return ASPx.IsElementVisible(element);
        },
        IsDisplayedElement: function (element) {
            while (element && element.tagName != "BODY") {
                if (!ASPx.GetElementDisplay(element))
                    return false;
                element = element.parentNode;
            }
            return true;
        },
        IsDisplayed: function () {
            return this.IsDisplayedElement(this.GetMainElement());
        },
        IsHiddenElement: function (element) {
            return element && element.offsetWidth == 0 && element.offsetHeight == 0;
        },
        IsHidden: function () {
            return this.IsHiddenElement(this.GetMainElement());
        },
        Focus: function () {
        },
        GetClientVisible: function () {
            return this.GetVisible();
        },
        SetClientVisible: function (visible) {
            this.SetVisible(visible);
        },
        GetVisible: function () {
            return this.clientVisible;
        },
        SetVisible: function (visible) {
            if (this.clientVisible != visible) {
                this.clientVisible = visible;
                ASPx.SetElementDisplay(this.GetMainElement(), visible);
                if (visible) {
                    this.AdjustControl();
                    var mainElement = this.GetMainElement();
                    if (mainElement)
                        aspxGetControlCollection().AdjustControls(mainElement);
                }
            }
        },
        GetEnabled: function () {
            return this.clientEnabled;
        },
        SetEnabled: function (enabled) {
            this.clientEnabled = enabled;
            if (ASPxClientControl.setEnabledLocked)
                return;
            else
                ASPxClientControl.setEnabledLocked = true;
            this.savedClientEnabled = enabled;
            aspxGetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function (control) {
                if (ASPx.IsFunction(control.SetEnabled))
                    control.SetEnabled(enabled && control.savedClientEnabled);
            });
            delete ASPxClientControl.setEnabledLocked;
        },
        InCallback: function () {
            return this.requestCount > 0;
        },
        DoBeginCallback: function (command) {
            this.RaiseBeginCallback(command || "");
            aspxGetControlCollection().Before_WebForm_InitCallback(this.name);
            if (typeof (WebForm_InitCallback) != "undefined" && WebForm_InitCallback) {
                __theFormPostData = "";
                __theFormPostCollection = [];
                this.ClearPostBackEventInput("__EVENTTARGET");
                this.ClearPostBackEventInput("__EVENTARGUMENT");
                WebForm_InitCallback();
                this.savedFormPostData = __theFormPostData;
                this.savedFormPostCollection = __theFormPostCollection;
            }
        },
        ClearPostBackEventInput: function (id) {
            var element = ASPx.GetElementById(id);
            if (element != null) element.value = "";
        },
        PerformDataCallback: function (arg, handler) {
            this.CreateCustomDataCallback(arg, "", handler);
        },
        sendCallbackViaQueue: function (prefix, arg, showLoadingPanel, context, handler) {
            if (!this.useCallbackQueue())
                return false;
            var context = context || this;
            var token = this.callbackQueueHelper.sendCallback(ASPx.FormatCallbackArg(prefix, arg), context, handler || context.OnCallback, prefix);
            if (showLoadingPanel)
                this.callbackQueueHelper.showLoadingElements();
            return token;
        },
        CreateCallback: function (arg, command, handler) {
            var callbackInfo = this.CreateCallbackInfo(ASPx.CallbackType.Common, handler || null);
            var callbackID = this.CreateCallbackByInfo(arg, command, callbackInfo);
            return callbackID;
        },
        CreateCustomDataCallback: function (arg, command, handler) {
            var callbackInfo = this.CreateCallbackInfo(ASPx.CallbackType.Data, handler);
            this.CreateCallbackByInfo(arg, command, callbackInfo);
        },
        CreateCallbackByInfo: function (arg, command, callbackInfo) {
            if (!this.CanCreateCallback()) return;
            var callbackID;
            if (typeof (WebForm_DoCallback) != "undefined" && WebForm_DoCallback && ASPx.documentLoaded)
                callbackID = this.CreateCallbackInternal(arg, command, true, callbackInfo);
            else {
                if (!this.savedCallbacks)
                    this.savedCallbacks = [];
                var callbackInfo = { arg: arg, command: command, callbackInfo: callbackInfo };
                if (this.allowMultipleCallbacks)
                    this.savedCallbacks.push(callbackInfo);
                else
                    this.savedCallbacks[0] = callbackInfo;
            }
            return callbackID;
        },
        CreateCallbackInternal: function (arg, command, viaTimer, callbackInfo) {
            var watcher = ASPx.ControlUpdateWatcher.getInstance();
            if (watcher && !watcher.CanSendCallback(this, arg)) {
                this.CancelCallbackInternal();
                return;
            }
            this.requestCount++;
            this.DoBeginCallback(command);
            if (typeof (arg) == "undefined")
                arg = "";
            if (typeof (command) == "undefined")
                command = "";
            var callbackID = this.SaveCallbackInfo(callbackInfo);
            if (viaTimer)
                window.setTimeout(function () { this.CreateCallbackCore(arg, command, callbackID); }.aspxBind(this), 0);
            else
                this.CreateCallbackCore(arg, command, callbackID);
            return callbackID;
        },
        CancelCallbackInternal: function () {
            this.CancelCallbackCore();
            this.HideLoadingElements();
        },
        CancelCallbackCore: function () {
        },
        CreateCallbackCore: function (arg, command, callbackID) {
            var callBackMethod = this.GetCallbackMethod(command);
            __theFormPostData = this.savedFormPostData;
            __theFormPostCollection = this.savedFormPostCollection;
            callBackMethod.call(this, this.GetSerializedCallbackInfoByID(callbackID) + arg);
        },
        GetCallbackMethod: function (command) {
            return this.callBack;
        },
        CanCreateCallback: function () {
            return !this.InCallback() || (this.allowMultipleCallbacks && !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing);
        },
        DoLoadCallbackScripts: function () {
            ASPx.ProcessScriptsAndLinks(this.name, true);
        },
        DoEndCallback: function () {
            if (this.IsCallbackAnimationEnabled() && this.CheckEndCallbackAnimationNeeded())
                return;
            this.requestCount--;
            if (this.requestCount < 1)
                this.callbackHandlersQueue.executeCallbacksHandlers();
            if (this.HideLoadingPanelOnCallback() && this.requestCount < 1)
                this.HideLoadingElements();
            if (this.isSwipeGesturesEnabled() && this.supportGestures) {
                ASPx.GesturesHelper.UpdateSwipeAnimationContainer(this.name);
                if (this.touchUIMouseScroller)
                    this.touchUIMouseScroller.update();
            }
            this.isCallbackAnimationPrevented = false;
            this.OnCallbackFinalized();
            this.AssignEllipsisTooltips();
            this.RaiseEndCallback();
        },
        DoFinalizeCallback: function () {
        },
        OnCallbackFinalized: function () {
        },
        AssignEllipsisTooltips: function () { },
        HideLoadingPanelOnCallback: function () {
            return true;
        },
        ShouldHideExistingLoadingElements: function () {
            return true;
        },
        EvalCallbackResult: function (resultString) {
            return eval(resultString);
        },
        ParseJSProperties: function (resultObj) {
            if (resultObj.cp) {
                for (var name in resultObj.cp)
                    if (resultObj.cp.hasOwnProperty(name))
                        this[name] = resultObj.cp[name];
            }
        },
        DoCallback: function (result) {
            if (this.IsCallbackAnimationEnabled() && this.CheckBeginCallbackAnimationInProgress(result))
                return;
            result = ASPx.Str.Trim(result);
            if (result.indexOf(ASPx.CallbackResultPrefix) != 0)
                this.ProcessCallbackGeneralError(result, false);
            else {
                var resultObj = null;
                try {
                    resultObj = this.EvalCallbackResult(result);
                }
                catch (e) {
                }
                if (resultObj) {
                    ASPx.CacheHelper.DropCache(this);
                    if (resultObj.redirect) {
                        this.ParseJSProperties(resultObj);
                        ASPx.Url.Redirect(resultObj.redirect);
                    }
                    else if (ASPx.IsExists(resultObj.generalError)) {
                        this.ProcessCallbackGeneralError(resultObj.generalError, true);
                    }
                    else {
                        var errorObj = resultObj.error;
                        if (errorObj)
                            this.ProcessCallbackError(errorObj, resultObj.id);
                        else {
                            this.ParseJSProperties(resultObj);
                            var callbackInfo = this.DequeueCallbackInfo(resultObj.id);
                            if (callbackInfo && callbackInfo.type == ASPx.CallbackType.Data)
                                this.ProcessCustomDataCallback(resultObj.result, callbackInfo);
                            else {
                                if (this.useCallbackQueue() && this.callbackQueueHelper.getCallbackInfoById(resultObj.id))
                                    this.callbackQueueHelper.processCallback(resultObj.result, resultObj.id);
                                else {
                                    this.ProcessCallback(resultObj.result, resultObj.id);
                                    if (callbackInfo && callbackInfo.handler) {
                                        var handlerInfo = { handler: callbackInfo.handler, result: resultObj.result.data };
                                        this.callbackHandlersQueue.addCallbackHandler(handlerInfo);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.DoLoadCallbackScripts();
        },
        DoCallbackError: function (result) {
            this.HideLoadingElements();
            this.ProcessCallbackGeneralError(result, false);
        },
        DoControlClick: function (evt) {
            this.OnControlClick(ASPx.Evt.GetEventSource(evt), evt);
        },
        ProcessCallback: function (result, callbackId) {
            this.OnCallback(result, callbackId);
        },
        ProcessCustomDataCallback: function (result, callbackInfo) {
            if (callbackInfo.handler != null)
                callbackInfo.handler(this, result);
            this.RaiseCustomDataCallback(result);
        },
        RaiseCustomDataCallback: function (result) {
            if (!this.CustomDataCallback.IsEmpty()) {
                var arg = new ASPxClientCustomDataCallbackEventArgs(result);
                this.CustomDataCallback.FireEvent(this, arg);
            }
        },
        OnCallback: function (result) {
        },
        CreateCallbackInfo: function (type, handler) {
            return { type: type, handler: handler };
        },
        GetSerializedCallbackInfoByID: function (callbackID) {
            return this.GetCallbackInfoByID(callbackID).type + callbackID + ASPx.CallbackSeparator;
        },
        SaveCallbackInfo: function (callbackInfo) {
            var activeCallbacksInfo = this.GetActiveCallbacksInfo();
            for (var i = 0; i < activeCallbacksInfo.length; i++) {
                if (activeCallbacksInfo[i] == null) {
                    activeCallbacksInfo[i] = callbackInfo;
                    return i;
                }
            }
            activeCallbacksInfo.push(callbackInfo);
            return activeCallbacksInfo.length - 1;
        },
        GetActiveCallbacksInfo: function () {
            var persistentProperties = this.GetPersistentProperties();
            if (!persistentProperties.activeCallbacks)
                persistentProperties.activeCallbacks = [];
            return persistentProperties.activeCallbacks;
        },
        GetPersistentProperties: function () {
            var storage = _aspxGetPersistentControlPropertiesStorage();
            var persistentProperties = storage[this.name];
            if (!persistentProperties) {
                persistentProperties = {};
                storage[this.name] = persistentProperties;
            }
            return persistentProperties;
        },
        GetCallbackInfoByID: function (callbackID) {
            return this.GetActiveCallbacksInfo()[callbackID];
        },
        DequeueCallbackInfo: function (index) {
            var activeCallbacksInfo = this.GetActiveCallbacksInfo();
            if (index < 0 || index >= activeCallbacksInfo.length)
                return null;
            var result = activeCallbacksInfo[index];
            activeCallbacksInfo[index] = null;
            return result;
        },
        ProcessCallbackError: function (errorObj, callbackId) {
            var data = ASPx.IsExists(errorObj.data) ? errorObj.data : null;
            var result = this.RaiseCallbackError(errorObj.message, callbackId);
            if (result.isHandled)
                this.OnCallbackErrorAfterUserHandle(result.errorMessage, data);
            else
                this.OnCallbackError(result.errorMessage, data);
        },
        OnCallbackError: function (errorMessage, data) {
            if (errorMessage)
                ASPx.ShowErrorAlert(errorMessage);
        },
        OnCallbackErrorAfterUserHandle: function (errorMessage, data) {
        },
        ProcessCallbackGeneralError: function (errorMessage, serverExceptionOnLastCallback) {
            this.serverExceptionOnLastCallback = serverExceptionOnLastCallback;
            var result = this.RaiseCallbackError(errorMessage);
            if (!result.isHandled)
                this.OnCallbackGeneralError(result.errorMessage);
        },
        OnCallbackGeneralError: function (errorMessage) {
            this.OnCallbackError(errorMessage, null);
        },
        SendPostBack: function (params) {
            if (typeof (__doPostBack) != "undefined")
                __doPostBack(this.uniqueID, params);
            else {
                var form = this.GetParentForm();
                if (form) form.submit();
            }
        },
        IsValidInstance: function () {
            return aspxGetControlCollection().GetByName(this.name) === this;
        },
        OnDispose: function () {
            var varName = this.globalName;
            if (varName && varName !== "" && window && window[varName] && window[varName] == this) {
                try {
                    delete window[varName];
                }
                catch (e) { }
            }
            if (this.callbackQueueHelper)
                this.callbackQueueHelper.detachEvents();
        },
        OnGlobalControlsInitialized: function (args) {
        },
        OnGlobalBrowserWindowResized: function (args) {
        },
        OnGlobalBeginCallback: function (args) {
        },
        OnGlobalEndCallback: function (args) {
        },
        OnGlobalCallbackError: function (args) {
        },
        OnGlobalValidationCompleted: function (args) {
        },
        DOMContentLoaded: function () { },
        IsStateControllerEnabled: function () { return false; },
        InitializeDOM: function () {
            var mainElement = this.GetMainElement();
            if (mainElement)
                mainElement["dxinit"] = true;
        },
        IsDOMInitialized: function () {
            var mainElement = this.GetMainElement();
            return mainElement && mainElement["dxinit"];
        },
        AdjustControl: function (nestedCall) { },
        OnBrowserWindowResizeInternal: function (e) { },
        RegisterInControlTree: function (tree) { }
    });
    ASPxClientControlBase.Cast = function (obj) {
        if (typeof obj == "string")
            return window[obj];
        return obj;
    };
    var persistentControlPropertiesStorage = null;
    function _aspxGetPersistentControlPropertiesStorage() {
        if (persistentControlPropertiesStorage == null)
            persistentControlPropertiesStorage = {};
        return persistentControlPropertiesStorage;
    }
    var ELLIPSIS_MARKER_CLASS = "dx-ellipsis";
    var ELLIPSIS_TOOLTIP_MARKER_ATTR = "dxEllipsisTitle";
    var ASPxClientControl = ASPx.CreateClass(ASPxClientControlBase, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.rtl = false;
            this.enableEllipsis = false;
            this.isNative = false;
            this.isControlCollapsed = false;
            this.isInsideHierarchyAdjustment = false;
            this.controlOwner = null;
            this.adjustedSizes = {};
            this.dialogContentHashTable = {};
            this.renderIFrameForPopupElements = false;
            this.widthValueSetInPercentage = false;
            this.heightValueSetInPercentage = false;
            this.verticalAlignedElements = {};
            this.wrappedTextContainers = {};
            this.scrollPositionState = {};
            this.sizingConfig = {
                allowSetWidth: true,
                allowSetHeight: true,
                correction: false,
                adjustControl: false,
                supportPercentHeight: false,
                supportAutoHeight: false
            };
            this.percentSizeConfig = {
                width: -1,
                height: -1,
                markerWidth: -1,
                markerHeight: -1
            };
        },
        InlineInitialize: function () {
            this.InitializeDOM();
            ASPxClientControlBase.prototype.InlineInitialize.call(this);
        },
        AfterCreate: function () {
            ASPxClientControlBase.prototype.AfterCreate.call(this);
            if (!this.CanInitializeAdjustmentOnDOMContentLoaded() || ASPx.IsStartupScriptsRunning())
                this.InitializeAdjustment();
        },
        DOMContentLoaded: function () {
            if (this.CanInitializeAdjustmentOnDOMContentLoaded())
                this.InitializeAdjustment();
        },
        CanInitializeAdjustmentOnDOMContentLoaded: function () {
            return !ASPx.Browser.IE || ASPx.Browser.Version >= 10;
        },
        InitializeAdjustment: function () {
            this.UpdateAdjustmentFlags();
            this.AdjustControl();
        },
        AfterInitialize: function () {
            this.AdjustControl();
            ASPxClientControlBase.prototype.AfterInitialize.call(this);
        },
        IsStateControllerEnabled: function () {
            return typeof (ASPx.GetStateController) != "undefined" && ASPx.GetStateController();
        },
        GetWidth: function () {
            return this.GetMainElement().offsetWidth;
        },
        GetHeight: function () {
            return this.GetMainElement().offsetHeight;
        },
        SetWidth: function (width) {
            if (this.sizingConfig.allowSetWidth)
                this.SetSizeCore("width", width, "GetWidth", false);
        },
        SetHeight: function (height) {
            if (this.sizingConfig.allowSetHeight)
                this.SetSizeCore("height", height, "GetHeight", false);
        },
        SetSizeCore: function (sizePropertyName, size, getFunctionName, corrected) {
            if (size < 0)
                return;
            this.GetMainElement().style[sizePropertyName] = size + "px";
            this.UpdateAdjustmentFlags(sizePropertyName);
            if (this.sizingConfig.adjustControl)
                this.AdjustControl(true);
            if (this.sizingConfig.correction && !corrected) {
                var realSize = this[getFunctionName]();
                if (realSize != size) {
                    var correctedSize = size - (realSize - size);
                    this.SetSizeCore(sizePropertyName, correctedSize, getFunctionName, true);
                }
            }
        },
        AdjustControl: function (nestedCall) {
            if (this.IsAdjustmentRequired() && (!ASPxClientControl.adjustControlLocked || nestedCall)) {
                ASPxClientControl.adjustControlLocked = true;
                try {
                    if (!this.IsAdjustmentAllowed())
                        return;
                    this.AdjustControlCore();
                    this.UpdateAdjustedSizes();
                }
                finally {
                    delete ASPxClientControl.adjustControlLocked;
                }
            }
            this.AssignEllipsisTooltips();
            this.TryShowPhantomLoadingElements();
        },
        ResetControlAdjustment: function () {
            this.adjustedSizes = {};
        },
        UpdateAdjustmentFlags: function (sizeProperty) {
            var mainElement = this.GetMainElement();
            if (mainElement) {
                var mainElementStyle = ASPx.GetCurrentStyle(mainElement);
                this.UpdatePercentSizeConfig([mainElementStyle.width, mainElement.style.width], [mainElementStyle.height, mainElement.style.height], sizeProperty);
            }
        },
        UpdatePercentSizeConfig: function (widths, heights, modifyStyleProperty) {
            switch (modifyStyleProperty) {
                case "width":
                    this.UpdatePercentWidthConfig(widths);
                    break;
                case "height":
                    this.UpdatePercentHeightConfig(heights);
                    break;
                default:
                    this.UpdatePercentWidthConfig(widths);
                    this.UpdatePercentHeightConfig(heights);
                    break;
            }
            this.ResetControlPercentMarkerSize();
        },
        UpdatePercentWidthConfig: function (widths) {
            this.widthValueSetInPercentage = false;
            for (var i = 0; i < widths.length; i++) {
                if (this.IsPercentageWidth(widths[i])) {
                    this.percentSizeConfig.width = widths[i];
                    this.widthValueSetInPercentage = true;
                    break;
                }
            }
        },
        IsPercentageWidth: function (width) { return ASPx.IsPercentageSize(width); },
        UpdatePercentHeightConfig: function (heights) {
            this.heightValueSetInPercentage = false;
            for (var i = 0; i < heights.length; i++) {
                if (ASPx.IsPercentageSize(heights[i])) {
                    this.percentSizeConfig.height = heights[i];
                    this.heightValueSetInPercentage = true;
                    break;
                }
            }
        },
        GetAdjustedSizes: function () {
            var mainElement = this.GetMainElement();
            if (mainElement)
                return { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
            return { width: 0, height: 0 };
        },
        IsAdjusted: function () {
            return (this.adjustedSizes.width && this.adjustedSizes.width > 0) && (this.adjustedSizes.height && this.adjustedSizes.height > 0);
        },
        IsAdjustmentRequired: function () {
            if (!this.IsAdjusted())
                return true;
            if (this.widthValueSetInPercentage)
                return true;
            if (this.heightValueSetInPercentage)
                return true;
            var sizes = this.GetAdjustedSizes();
            for (var name in sizes) {
                if (this.adjustedSizes[name] !== sizes[name])
                    return true;
            }
            return false;
        },
        IsAdjustmentAllowed: function () {
            var mainElement = this.GetMainElement();
            return mainElement && this.IsDisplayed() && !this.IsHidden() && this.IsDOMInitialized();
        },
        UpdateAdjustedSizes: function () {
            var sizes = this.GetAdjustedSizes();
            for (var name in sizes)
                if (sizes.hasOwnProperty(name))
                    this.adjustedSizes[name] = sizes[name];
        },
        AdjustControlCore: function () {
        },
        AdjustAutoHeight: function () {
        },
        IsControlCollapsed: function () {
            return this.isControlCollapsed;
        },
        NeedCollapseControl: function () {
            return this.NeedCollapseControlCore() && this.IsAdjustmentRequired() && this.IsAdjustmentAllowed();
        },
        NeedCollapseControlCore: function () {
            return false;
        },
        CollapseEditor: function () {
        },
        CollapseControl: function () {
            this.SaveScrollPositions();
            var mainElement = this.GetMainElement(),
                marker = this.GetControlPercentSizeMarker();
            marker.style.height = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight
                ? this.percentSizeConfig.height
                : (mainElement.offsetHeight + "px");
            mainElement.style.display = "none";
            this.isControlCollapsed = true;
        },
        ExpandControl: function () {
            var mainElement = this.GetMainElement();
            mainElement.style.display = "";
            this.GetControlPercentSizeMarker().style.height = "0px";
            this.isControlCollapsed = false;
            this.RestoreScrollPositions();
        },
        CanCauseReadjustment: function () {
            return this.NeedCollapseControlCore();
        },
        IsExpandableByAdjustment: function () {
            return false;
        },
        HasFixedPosition: function () {
            return false;
        },
        SaveScrollPositions: function () {
            var mainElement = this.GetMainElement();
            this.scrollPositionState.outer = ASPx.GetOuterScrollPosition(mainElement.parentNode);
            this.scrollPositionState.inner = ASPx.GetInnerScrollPositions(mainElement);
        },
        RestoreScrollPositions: function () {
            ASPx.RestoreOuterScrollPosition(this.scrollPositionState.outer);
            ASPx.RestoreInnerScrollPositions(this.scrollPositionState.inner);
        },
        GetControlPercentSizeMarker: function () {
            if (this.percentSizeMarker === undefined) {
                this.percentSizeMarker = ASPx.CreateHtmlElementFromString("<div style='height:0px;font-size:0px;line-height:0;width:100%;'></div>");
                ASPx.InsertElementAfter(this.percentSizeMarker, this.GetMainElement());
            }
            return this.percentSizeMarker;
        },
        KeepControlPercentSizeMarker: function (needCollapse, needCalculateHeight) {
            var mainElement = this.GetMainElement(),
                marker = this.GetControlPercentSizeMarker(),
                markerHeight;
            if (needCollapse)
                this.CollapseControl();
            if (this.widthValueSetInPercentage && marker.style.width !== this.percentSizeConfig.width)
                marker.style.width = this.percentSizeConfig.width;
            if (needCalculateHeight) {
                if (this.IsControlCollapsed())
                    markerHeight = marker.style.height;
                marker.style.height = this.percentSizeConfig.height;
            }
            this.percentSizeConfig.markerWidth = marker.offsetWidth;
            if (needCalculateHeight) {
                this.percentSizeConfig.markerHeight = marker.offsetHeight;
                if (this.IsControlCollapsed())
                    marker.style.height = markerHeight;
                else
                    marker.style.height = "0px";
            }
            if (needCollapse)
                this.ExpandControl();
        },
        ResetControlPercentMarkerSize: function () {
            this.percentSizeConfig.markerWidth = -1;
            this.percentSizeConfig.markerHeight = -1;
        },
        GetControlPercentMarkerSize: function (hideControl, force) {
            var needCalculateHeight = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight;
            if (force || this.percentSizeConfig.markerWidth < 1 || (needCalculateHeight && this.percentSizeConfig.markerHeight < 1))
                this.KeepControlPercentSizeMarker(hideControl && !this.IsControlCollapsed(), needCalculateHeight);
            return {
                width: this.percentSizeConfig.markerWidth,
                height: this.percentSizeConfig.markerHeight
            };
        },
        AssignEllipsisTooltips: function () {
            if (this.RequireAssignTooltips())
                this.AssignEllipsisTooltipsCore();
        },
        AssignEllipsisTooltipsCore: function (rootElement, reassingExistingTooltips) {
            var requirePaddingManipulation = ASPx.Browser.IE || ASPx.Browser.Edge || ASPx.Browser.Firefox;
            rootElement = rootElement || this.GetMainElement();
            var nodes = this.GetEllipsisNodes(rootElement);
            var nodeInfos = [];
            var nodesCount = nodes.length;
            for (var i = 0; i < nodesCount; i++) {
                var node = nodes[i];
                var info = { node: node };
                if (requirePaddingManipulation) {
                    var style = ASPx.GetCurrentStyle(node);
                    info.paddingLeft = node.style.paddingLeft;
                    info.totalPadding = ASPx.GetLeftRightPaddings(node, style);
                }
                nodeInfos.push(info);
            }
            if (requirePaddingManipulation) {
                for (var i = 0; i < nodesCount; i++) {
                    var info = nodeInfos[i];
                    ASPx.SetStyles(info.node, { paddingLeft: info.totalPadding }, true);
                }
            }
            for (var i = 0; i < nodesCount; i++) {
                var info = nodeInfos[i];
                var node = info.node;
                info.isTextShortened = node.scrollWidth > node.clientWidth;
                info.hasTitle = ASPx.Attr.GetAttribute(node, "title") !== null;
                if (!info.hasTitle || reassingExistingTooltips)
                    info.title = this.GetEllipsisTooltipText(node);
            }
            for (var i = 0; i < nodesCount; i++) {
                var info = nodeInfos[i];
                var node = info.node;
                if (info.isTextShortened && info.title) {
                    ASPx.Attr.SetAttribute(node, "title", info.title);
                    ASPx.Attr.SetAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR, true);
                }
                if (!info.isTextShortened && info.hasTitle)
                    ASPx.Attr.RemoveAttribute(node, "title");
            }
            if (requirePaddingManipulation) {
                for (var i = 0; i < nodesCount; i++) {
                    var info = nodeInfos[i];
                    var node = info.node;
                    node.style.paddingLeft = info.paddingLeft;
                }
            }
        },
        GetEllipsisNodes: function (element) {
            var ellipsibleNodes = ASPx.Data.CollectionToArray(ASPx.GetNodesByClassName(element, ELLIPSIS_MARKER_CLASS));
            if (ASPx.ElementHasCssClass(element, ELLIPSIS_MARKER_CLASS))
                ellipsibleNodes.push(element);
            return ellipsibleNodes.filter(function (node) {
                return !ASPx.Attr.IsExistsAttribute(node, "title") || ASPx.Attr.IsExistsAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR);
            });
        },
        GetEllipsisTooltipText: function (element) {
            if (element && ASPx.IsExists(element.innerText))
                return element.innerText;
            return ASPx.GetInnerText(element);
        },
        RequireAssignTooltips: function () {
            return this.enableEllipsis && !ASPx.Browser.MobileUI;
        },
        OnBrowserWindowResize: function (e) {
        },
        OnBrowserWindowResizeInternal: function (e) {
            if (this.BrowserWindowResizeSubscriber())
                this.OnBrowserWindowResize(e);
        },
        BrowserWindowResizeSubscriber: function () {
            return this.widthValueSetInPercentage || !this.IsAdjusted();
        },
        ShrinkWrappedText: function (getElements, key, reCorrect) {
            if (!ASPx.Browser.Safari) return;
            var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.wrappedTextContainers);
            for (var i = 0; i < elements.length; i++)
                this.ShrinkWrappedTextInContainer(elements[i], reCorrect);
        },
        ShrinkWrappedTextInContainer: function (container, reCorrect) {
            if (!ASPx.Browser.Safari || !container || (container.dxWrappedTextShrinked && !reCorrect) || container.offsetWidth === 0) return;
            ASPx.ShrinkWrappedTextInContainer(container);
            container.dxWrappedTextShrinked = true;
        },
        CorrectWrappedText: function (getElements, key, reCorrect) {
            var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.wrappedTextContainers);
            for (var i = 0; i < elements.length; i++)
                this.CorrectWrappedTextInContainer(elements[i], reCorrect);
        },
        CorrectWrappedTextInContainer: function (container, reCorrect) {
            if (!container || (container.dxWrappedTextCorrected && !reCorrect) || container.offsetWidth === 0) return;
            ASPx.AdjustWrappedTextInContainer(container);
            container.dxWrappedTextCorrected = true;
        },
        CorrectVerticalAlignment: function (alignMethod, getElements, key, reAlign) {
            var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.verticalAlignedElements);
            for (var i = 0; i < elements.length; i++)
                this.CorrectElementVerticalAlignment(alignMethod, elements[i], reAlign);
        },
        CorrectElementVerticalAlignment: function (alignMethod, element, reAlign) {
            if (!element || (element.dxVerticalAligned && !reAlign) || element.offsetHeight === 0) return;
            alignMethod(element);
            element.dxVerticalAligned = true;
        },
        ResetElementVerticalAligmentFlag: function (element) {
            if (!element || !element.dxVerticalAligned) return;
            element.dxVerticalAligned = false;
        },
        ClearVerticalAlignedElementsCache: function () {
            ASPx.CacheHelper.DropCache(this.verticalAlignedElements);
        },
        ClearWrappedTextContainersCache: function () {
            ASPx.CacheHelper.DropCache(this.wrappedTextContainers);
        },
        AdjustPagerControls: function () {
            if (typeof (ASPx.GetPagersCollection) != "undefined")
                ASPx.GetPagersCollection().AdjustControls(this.GetMainElement());
        },
        RegisterInControlTree: function (tree) {
            var mainElement = this.GetMainElement();
            if (mainElement && mainElement.id)
                tree.createNode(mainElement.id, this);
        },
        GetItemElementName: function (element) {
            var name = "";
            if (element.id)
                name = element.id.substring(this.name.length + 1);
            return name;
        },
        GetLinkElement: function (element) {
            if (element == null) return null;
            return (element.tagName == "A") ? element : ASPx.GetNodeByTagName(element, "A", 0);
        },
        GetInternalHyperlinkElement: function (parentElement, index) {
            var element = ASPx.GetNodeByTagName(parentElement, "A", index);
            if (element == null)
                element = ASPx.GetNodeByTagName(parentElement, "SPAN", index);
            return element;
        },
        OnControlClick: function (clickedElement, htmlEvent) {
        }
    });
    ASPxClientControl.Cast = function (obj) {
        if (typeof obj == "string")
            return window[obj];
        return obj;
    };
    ASPxClientControl.AdjustControls = function (container, collapseControls) {
        aspxGetControlCollection().AdjustControls(container, collapseControls);
    };
    ASPxClientControl.GetControlCollection = function () {
        return aspxGetControlCollection();
    };
    ASPxClientControl.LeadingAfterInitCallConsts = {
        None: 0,
        Direct: 1,
        Reverse: 2
    };
    var ASPxClientComponent = ASPx.CreateClass(ASPxClientControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
        },
        IsDOMDisposed: function () {
            return false;
        }
    });
    var ASPxClientControlCollection = ASPx.CreateClass(ASPx.CollectionBase, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
            this.prevWndWidth = "";
            this.prevWndHeight = "";
            this.requestCountInternal = 0;
            this.BeforeInitCallback = new ASPxClientEvent();
            this.ControlsInitialized = new ASPxClientEvent();
            this.BrowserWindowResized = new ASPxClientEvent();
            this.BeginCallback = new ASPxClientEvent();
            this.EndCallback = new ASPxClientEvent();
            this.CallbackError = new ASPxClientEvent();
            this.ValidationCompleted = new ASPxClientEvent();
            aspxGetControlCollectionCollection().Add(this);
        },
        Add: function (element) {
            var existsElement = this.Get(element.name);
            if (existsElement && existsElement !== element)
                this.Remove(existsElement);
            ASPx.CollectionBase.prototype.Add.call(this, element.name, element);
        },
        Remove: function (element) {
            if (element && element instanceof ASPxClientControl)
                element.OnDispose();
            ASPx.CollectionBase.prototype.Remove.call(this, element.name);
        },
        GetGlobal: function (name) {
            var result = window[name];
            return result && Ident.IsASPxClientControl(result)
                ? result
                : null;
        },
        GetByName: function (name) {
            return this.Get(name) || this.GetGlobal(name);
        },
        GetCollectionType: function () {
            return ASPxClientControlCollection.BaseCollectionType;
        },
        GetControlsByPredicate: function (predicate) {
            var result = [];
            this.ForEachControl(function (control) {
                if (!predicate || predicate(control))
                    result.push(control);
            });
            return result;
        },
        GetControlsByType: function (type) {
            return this.GetControlsByPredicate(function (control) {
                return type && (control instanceof type);
            });
        },
        ForEachControl: function (action, context) {
            context = context || this;
            this.elementsMap.forEachEntry(function (name, control) {
                if (Ident.IsASPxClientControl(control))
                    return action.call(context, control);
            }, context);
        },
        forEachControlHierarchy: function (container, context, collapseControls, processFunc) {
            context = context || this;
            var controlTree = new ASPx.ControlTree(this, container);
            controlTree.forEachControl(collapseControls, function (control) {
                processFunc.call(context, control);
            });
        },
        AdjustControls: function (container, collapseControls) {
            container = container || null;
            window.setTimeout(function () {
                this.AdjustControlsCore(container, collapseControls);
            }.aspxBind(this), 0);
        },
        AdjustControlsCore: function (container, collapseControls) {
            this.forEachControlHierarchy(container, this, collapseControls, function (control) {
                control.AdjustControl();
            });
        },
        CollapseControls: function (container) {
            this.ProcessControlsInContainer(container, function (control) {
                if (control.isASPxClientEdit)
                    control.CollapseEditor();
                else if (!!window.ASPxClientRibbon && control instanceof ASPxClientRibbon)
                    control.CollapseControl();
            });
        },
        AtlasInitialize: function (isCallback) {
            if (ASPx.Browser.IE && ASPx.Browser.MajorVersion < 9) {
                var func = function () {
                    if (_aspxIsLinksLoaded())
                        ASPx.ProcessScriptsAndLinks("", isCallback);
                    else
                        setTimeout(func, 100);
                };
                func();
            }
            else
                ASPx.ProcessScriptsAndLinks("", isCallback);
        },
        DOMContentLoaded: function () {
            this.ForEachControl(function (control) {
                control.DOMContentLoaded();
            });
        },
        OnDocumentUnload: function () {
            this.ForEachControl(function (control) {
                control.RaiseUnload();
            });
        },
        Initialize: function () {
            ASPx.GetPostHandler().Post.AddHandler(
                function (s, e) { this.OnPost(e); }.aspxBind(this)
            );
            ASPx.GetPostHandler().PostFinalization.AddHandler(
                function (s, e) { this.OnPostFinalization(e); }.aspxBind(this)
            );
            this.InitializeElements(false);
            if (typeof (Sys) != "undefined" && typeof (Sys.Application) != "undefined") {
                var checkIsInitialized = function () {
                    if (Sys.Application.get_isInitialized())
                        Sys.Application.add_load(aspxCAInit);
                    else
                        setTimeout(checkIsInitialized, 0);
                };
                checkIsInitialized();
            }
            this.InitWindowSizeCache();
        },
        InitializeElements: function (isCallback) {
            this.ForEachControl(function (control) {
                if (!control.isInitialized)
                    control.Initialize();
            });
            this.AfterInitializeElementsLeadingCall();
            this.AfterInitializeElements();
            this.RaiseControlsInitialized(isCallback);
        },
        AfterInitializeElementsLeadingCall: function () {
            var controls = {};
            controls[ASPxClientControl.LeadingAfterInitCallConsts.Direct] = [];
            controls[ASPxClientControl.LeadingAfterInitCallConsts.Reverse] = [];
            this.ForEachControl(function (control) {
                if (control.leadingAfterInitCall != ASPxClientControl.LeadingAfterInitCallConsts.None && !control.isInitialized)
                    controls[control.leadingAfterInitCall].push(control);
            });
            var directInitControls = controls[ASPxClientControl.LeadingAfterInitCallConsts.Direct],
                reverseInitControls = controls[ASPxClientControl.LeadingAfterInitCallConsts.Reverse];
            for (var i = 0, control; control = directInitControls[i]; i++)
                control.AfterInitialize();
            for (var i = reverseInitControls.length - 1, control; control = reverseInitControls[i]; i--)
                control.AfterInitialize();
        },
        AfterInitializeElements: function () {
            this.ForEachControl(function (control) {
                if (control.leadingAfterInitCall == ASPxClientControl.LeadingAfterInitCallConsts.None && !control.isInitialized)
                    control.AfterInitialize();
            });
            ASPx.RippleHelper.Init();
        },
        DoFinalizeCallback: function () {
            this.ForEachControl(function (control) {
                control.DoFinalizeCallback();
            });
        },
        ProcessControlsInContainer: function (container, processFunc) {
            this.ForEachControl(function (control) {
                if (!container || this.IsControlInContainer(container, control))
                    processFunc(control);
            });
        },
        IsControlInContainer: function (container, control) {
            if (control.GetMainElement) {
                var mainElement = control.GetMainElement();
                if (mainElement && (mainElement != container)) {
                    if (ASPx.GetIsParent(container, mainElement))
                        return true;
                }
            }
            return false;
        },
        RaiseControlsInitialized: function (isCallback) {
            if (typeof (isCallback) == "undefined")
                isCallback = true;
            var args = new ASPxClientControlsInitializedEventArgs(isCallback);
            if (!this.ControlsInitialized.IsEmpty())
                this.ControlsInitialized.FireEvent(this, args);
            this.ForEachControl(function (control) {
                control.OnGlobalControlsInitialized(args);
            });
        },
        RaiseBrowserWindowResized: function () {
            var args = new ASPxClientEventArgs();
            if (!this.BrowserWindowResized.IsEmpty())
                this.BrowserWindowResized.FireEvent(this, args);
            this.ForEachControl(function (control) {
                control.OnGlobalBrowserWindowResized(args);
            });
        },
        RaiseBeginCallback: function (control, command) {
            var args = new ASPxClientGlobalBeginCallbackEventArgs(control, command);
            if (!this.BeginCallback.IsEmpty())
                this.BeginCallback.FireEvent(this, args);
            this.ForEachControl(function (control) {
                control.OnGlobalBeginCallback(args);
            });
            this.IncrementRequestCount();
        },
        RaiseEndCallback: function (control) {
            var args = new ASPxClientGlobalEndCallbackEventArgs(control);
            if (!this.EndCallback.IsEmpty())
                this.EndCallback.FireEvent(this, args);
            this.ForEachControl(function (control) {
                control.OnGlobalEndCallback(args);
            });
            this.DecrementRequestCount();
        },
        InCallback: function () {
            return this.requestCountInternal > 0;
        },
        RaiseCallbackError: function (control, message, callbackId) {
            var args = new ASPxClientGlobalCallbackErrorEventArgs(control, message, callbackId);
            if (!this.CallbackError.IsEmpty())
                this.CallbackError.FireEvent(this, args);
            this.ForEachControl(function (control) {
                control.OnGlobalCallbackError(args);
            });
            if (args.handled)
                return { isHandled: true, errorMessage: args.message };
            return { isHandled: false, errorMessage: message };
        },
        RaiseValidationCompleted: function (container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl) {
            var args = new ASPxClientValidationCompletedEventArgs(container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl);
            if (!this.ValidationCompleted.IsEmpty())
                this.ValidationCompleted.FireEvent(this, args);
            this.ForEachControl(function (control) {
                control.OnGlobalValidationCompleted(args);
            });
        },
        Before_WebForm_InitCallback: function (callbackOwnerID) {
            var args = new BeforeInitCallbackEventArgs(callbackOwnerID);
            this.BeforeInitCallback.FireEvent(this, args);
        },
        InitWindowSizeCache: function () {
            this.prevWndWidth = ASPx.GetDocumentClientWidth();
            this.prevWndHeight = ASPx.GetDocumentClientHeight();
        },
        OnBrowserWindowResize: function (evt) {
            var shouldIgnoreNestedEvents = ASPx.Browser.IE && ASPx.Browser.MajorVersion == 8;
            if (shouldIgnoreNestedEvents) {
                if (this.prevWndWidth === "" || this.prevWndHeight === "" || this.browserWindowResizeLocked)
                    return;
                this.browserWindowResizeLocked = true;
            }
            this.OnBrowserWindowResizeCore(evt);
            if (shouldIgnoreNestedEvents)
                this.browserWindowResizeLocked = false;
        },
        OnBrowserWindowResizeCore: function (htmlEvent) {
            var args = this.CreateOnBrowserWindowResizeEventArgs(htmlEvent);
            if (this.CalculateIsBrowserWindowSizeChanged()) {
                this.forEachControlHierarchy(null, this, true, function (control) {
                    if (control.IsDOMInitialized())
                        control.OnBrowserWindowResizeInternal(args);
                });
                this.RaiseBrowserWindowResized();
            }
        },
        CreateOnBrowserWindowResizeEventArgs: function (htmlEvent) {
            return {
                htmlEvent: htmlEvent,
                wndWidth: ASPx.GetDocumentClientWidth(),
                wndHeight: ASPx.GetDocumentClientHeight(),
                prevWndWidth: this.prevWndWidth,
                prevWndHeight: this.prevWndHeight
            };
        },
        CalculateIsBrowserWindowSizeChanged: function () {
            var wndWidth = ASPx.GetDocumentClientWidth();
            var wndHeight = ASPx.GetDocumentClientHeight();
            var isBrowserWindowSizeChanged = (this.prevWndWidth != wndWidth) || (this.prevWndHeight != wndHeight);
            if (isBrowserWindowSizeChanged) {
                this.prevWndWidth = wndWidth;
                this.prevWndHeight = wndHeight;
                return true;
            }
            return false;
        },
        OnPost: function (args) {
            this.ForEachControl(function (control) {
                control.OnPost(args);
            }, null);
        },
        OnPostFinalization: function (args) {
            this.ForEachControl(function (control) {
                control.OnPostFinalization(args);
            }, null);
        },
        IncrementRequestCount: function () {
            this.requestCountInternal++;
        },
        DecrementRequestCount: function () {
            this.requestCountInternal--;
        },
        ResetRequestCount: function () {
            this.requestCountInternal = 0;
        }
    });
    ASPxClientControlCollection.BaseCollectionType = "Control";
    var controlCollection = null;
    function aspxGetControlCollection() {
        if (controlCollection == null)
            controlCollection = new ASPxClientControlCollection();
        return controlCollection;
    }
    var ControlCollectionCollection = ASPx.CreateClass(ASPx.CollectionBase, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
        },
        Add: function (element) {
            var key = element.GetCollectionType();
            if (!key) throw "The collection type isn't specified.";
            if (this.Get(key)) throw "The collection with type='" + key + "' already exists.";
            ASPx.CollectionBase.prototype.Add.call(this, key, element);
        },
        RemoveDisposedControls: function () {
            var baseCollection = this.Get(ASPxClientControlCollection.BaseCollectionType);
            var disposedControls = [];
            baseCollection.elementsMap.forEachEntry(function (name, control) {
                if (!ASPx.Ident.IsASPxClientControl(control)) return;
                if (control.IsDOMDisposed())
                    disposedControls.push(control);
            });
            for (var i = 0; i < disposedControls.length; i++) {
                this.elementsMap.forEachEntry(function (key, collection) {
                    if (ASPx.Ident.IsASPxClientCollection(collection))
                        collection.Remove(disposedControls[i]);
                });
            }
        }
    });
    var controlCollectionCollection = null;
    function aspxGetControlCollectionCollection() {
        if (controlCollectionCollection == null)
            controlCollectionCollection = new ControlCollectionCollection();
        return controlCollectionCollection;
    }
    var AriaDescriptionAttributes = {
        Role: "0",
        AriaLabel: "1",
        TabIndex: "2",
        AriaOwns: "3",
        AriaDescribedBy: "4",
        AriaDisabled: "5",
        AriaHasPopup: "6",
        AriaLevel: "7"
    };
    var AriaDescriptor = ASPx.CreateClass(null, {
        constructor: function (ownerControl, description) {
            this.ownerControl = ownerControl;
            this.rootElement = ownerControl.GetMainElement();
            this.description = description;
        },
        setDescription: function (name, argList) {
            var description = this.findChildDescription(name);
            if (description) {
                var elements = name ? this.rootElement.querySelectorAll(this.getDescriptionSelector(description)) : [this.rootElement];
                for (var i = 0; i < elements.length; i++)
                    this.applyDescriptionToElement(elements[i], description, argList[i] || argList[0]);
            }
        },
        getDescriptionName: function (description) {
            return description.n;
        },
        getDescriptionSelector: function (description) {
            return description.s;
        },
        findChildDescription: function (name) {
            if (name === this.getDescriptionName(this.description))
                return this.description;
            var childCollection = this.description.c || [];
            for (var i = 0; i < childCollection.length; i++) {
                var childDescription = childCollection[i];
                if (this.getDescriptionName(childDescription) === name)
                    return childDescription;
            }
            return null;
        },
        applyDescriptionToElement: function (element, description, args) {
            if (!description || !element)
                return;
            this.trySetAriaOwnsAttribute(element, description);
            this.trySetAriaDescribedByAttribute(element, description);
            this.trySetAttribute(element, description, AriaDescriptionAttributes.Role, "role");
            this.trySetAttribute(element, description, AriaDescriptionAttributes.TabIndex, "tabindex");
            this.trySetAttribute(element, description, AriaDescriptionAttributes.AriaLevel, "aria-level");
            this.executeOnDescription(description, AriaDescriptionAttributes.AriaLabel, function (value) {
                ASPx.Attr.SetAttribute(element, "aria-label", ASPx.Str.ApplyReplacement(value, args));
            });
            this.executeOnDescription(description, AriaDescriptionAttributes.AriaDisabled, function (value) {
                ASPx.Attr.SetAttribute(element, "aria-disabled", !!value);
            });
            this.executeOnDescription(description, AriaDescriptionAttributes.AriaHasPopup, function (value) {
                ASPx.Attr.SetAttribute(element, "aria-haspopup", !!value);
            });
        },
        trySetAriaDescribedByAttribute: function (element, description) {
            this.executeOnDescription(description, AriaDescriptionAttributes.AriaDescribedBy, function (selectorInfo) {
                var descriptor = this.getNodesBySelector(element, selectorInfo.descriptorSelector)[0];
                var target = this.getNodesBySelector(element, selectorInfo.targetSelector)[0];
                if (!target || !descriptor)
                    return;
                ASPx.Attr.SetAttribute(target, "aria-describedby", this.getNodeId(descriptor));
            });
        },
        trySetAriaOwnsAttribute: function (element, description) {
            this.executeOnDescription(description, AriaDescriptionAttributes.AriaOwns, function (selector) {
                var ownedNodes = this.getNodesBySelector(element, selector);
                var ariaOwnsAttributeValue = "";
                for (var i = 0; i < ownedNodes.length; i++)
                    ariaOwnsAttributeValue += (this.getNodeId(ownedNodes[i]) + (i != ownedNodes.length - 1 ? " " : ""));
                ASPx.Attr.SetAttribute(element, "aria-owns", ariaOwnsAttributeValue);
            });
        },
        trySetAttribute: function (element, description, ariaAttribute, attributeName) {
            this.executeOnDescription(description, ariaAttribute, function (value) {
                ASPx.Attr.SetAttribute(element, attributeName, description[ariaAttribute]);
            });
        },
        executeOnDescription: function (description, ariaDescAttr, callback) {
            var descInfo = description[ariaDescAttr];
            if (ASPx.IsExists(descInfo))
                callback.aspxBind(this)(descInfo);
        },
        getNodesBySelector: function (element, selector) {
            var id = element.id || "";
            var childNodes = element.querySelectorAll("#" + this.getNodeId(element) + " > " + selector);
            ASPx.Attr.SetOrRemoveAttribute(element, "id", id);
            return childNodes;
        },
        getNodeId: function (node) {
            if (!node.id)
                node.id = this.createRandomId();
            return node.id;
        },
        createRandomId: function () {
            return "r" + ASPx.CreateGuid();
        }
    });
    PagerCommands = {
        Next: "PBN",
        Prev: "PBP",
        Last: "PBL",
        First: "PBF",
        PageNumber: "PN",
        PageSize: "PSP"
    };
    ASPx.Callback = function (result, context) {
        var collection = aspxGetControlCollection();
        collection.DoFinalizeCallback();
        var control = collection.Get(context);
        if (control != null)
            control.DoCallback(result);
        ASPx.RippleHelper.ReInit();
    };
    ASPx.CallbackError = function (result, context) {
        var control = aspxGetControlCollection().Get(context);
        if (control != null)
            control.DoCallbackError(result, false);
    };
    ASPx.CClick = function (name, evt) {
        var control = aspxGetControlCollection().Get(name);
        if (control != null) control.DoControlClick(evt);
    };
    function aspxCAInit() {
        var isAppInit = typeof (Sys$_Application$initialize) != "undefined" &&
            ASPx.FunctionIsInCallstack(arguments.callee, Sys$_Application$initialize, 10);
        aspxGetControlCollection().AtlasInitialize(!isAppInit);
    }
    ASPx.Evt.AttachEventToElement(window, "resize", aspxGlobalWindowResize);
    function aspxGlobalWindowResize(evt) {
        aspxGetControlCollection().OnBrowserWindowResize(evt);
    }
    ASPx.Evt.AttachEventToElement(window, "unload", aspxClassesUnload);
    function aspxClassesUnload(evt) {
        aspxGetControlCollection().OnDocumentUnload();
    }
    ASPx.Evt.AttachEventToElement(window.document, "DOMContentLoaded", aspxClassesDOMContentLoaded);
    function aspxClassesDOMContentLoaded(evt) {
        aspxGetControlCollection().DOMContentLoaded();
    }
    ASPx.GetControlCollection = aspxGetControlCollection;
    ASPx.GetControlCollectionCollection = aspxGetControlCollectionCollection;
    ASPx.GetPersistentControlPropertiesStorage = _aspxGetPersistentControlPropertiesStorage;
    ASPx.PagerCommands = PagerCommands;
    window.ASPxClientBeginCallbackEventArgs = ASPxClientBeginCallbackEventArgs;
    window.ASPxClientGlobalBeginCallbackEventArgs = ASPxClientGlobalBeginCallbackEventArgs;
    window.ASPxClientEndCallbackEventArgs = ASPxClientEndCallbackEventArgs;
    window.ASPxClientGlobalEndCallbackEventArgs = ASPxClientGlobalEndCallbackEventArgs;
    window.ASPxClientCallbackErrorEventArgs = ASPxClientCallbackErrorEventArgs;
    window.ASPxClientGlobalCallbackErrorEventArgs = ASPxClientGlobalCallbackErrorEventArgs;
    window.ASPxClientCustomDataCallbackEventArgs = ASPxClientCustomDataCallbackEventArgs;
    window.ASPxClientValidationCompletedEventArgs = ASPxClientValidationCompletedEventArgs;
    window.ASPxClientControlsInitializedEventArgs = ASPxClientControlsInitializedEventArgs;
    window.ASPxClientControlBeforePronounceEventArgs = ASPxClientControlBeforePronounceEventArgs;
    window.ASPxClientControlUnloadEventArgs = ASPxClientControlUnloadEventArgs;
    window.ASPxClientControlCollection = ASPxClientControlCollection;
    window.ASPxClientControlBase = ASPxClientControlBase;
    window.ASPxClientControl = ASPxClientControl;
    window.ASPxClientComponent = ASPxClientComponent;
})();
(function () {
    var PositionAnimationTransition = ASPx.CreateClass(ASPx.AnimationTransitionBase, {
        constructor: function (element, options) {
            this.constructor.prototype.constructor.call(this, element, options);
            this.direction = options.direction;
            this.animationTransition = this.createAnimationTransition();
            AnimationHelper.appendWKAnimationClassNameIfRequired(this.element);
        },
        Start: function (to) {
            var from = this.GetValue();
            if (ASPx.AnimationUtils.CanUseCssTransform()) {
                from = this.convertPosToCssTransformPos(from);
                to = this.convertPosToCssTransformPos(to);
            }
            this.animationTransition.Start(from, to);
        },
        SetValue: function (value) {
            ASPx.AnimationUtils.SetTransformValue(this.element, value, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
        },
        GetValue: function () {
            return ASPx.AnimationUtils.GetTransformValue(this.element, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
        },
        createAnimationTransition: function () {
            var transition = ASPx.AnimationUtils.CanUseCssTransform() ? this.createTransformAnimationTransition() : this.createPositionAnimationTransition();
            transition.transition = ASPx.AnimationConstants.Transitions.POW_EASE_OUT;
            return transition;
        },
        createTransformAnimationTransition: function () {
            return ASPx.AnimationUtils.createCssAnimationTransition(this.element, {
                property: ASPx.AnimationUtils.CanUseCssTransform(),
                duration: this.duration,
                onComplete: this.onComplete
            });
        },
        createPositionAnimationTransition: function () {
            return AnimationHelper.createAnimationTransition(this.element, {
                property: this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION ? "top" : "left",
                unit: "px",
                duration: this.duration,
                onComplete: this.onComplete
            });
        },
        convertPosToCssTransformPos: function (position) {
            return ASPx.AnimationUtils.GetTransformCssText(position, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
        }
    });
    var AnimationHelper = {
        SLIDE_HORIZONTAL_DIRECTION: 0,
        SLIDE_VERTICAL_DIRECTION: 1,
        SLIDE_TOP_DIRECTION: 0,
        SLIDE_RIGHT_DIRECTION: 1,
        SLIDE_BOTTOM_DIRECTION: 2,
        SLIDE_LEFT_DIRECTION: 3,
        SLIDE_CONTAINER_CLASS: "dxAC",
        MAXIMUM_DEPTH: 3,
        createAnimationTransition: function (element, options) {
            if (options.onStep)
                options.animationEngine = "js";
            switch (options.animationEngine) {
                case "js":
                    return ASPx.AnimationUtils.createJsAnimationTransition(element, options);
                case "css":
                    return ASPx.AnimationUtils.createCssAnimationTransition(element, options);
                default:
                    return ASPx.AnimationUtils.CanUseCssTransition() ? ASPx.AnimationUtils.createCssAnimationTransition(element, options) :
                        ASPx.AnimationUtils.createJsAnimationTransition(element, options);
            }
        },
        createMultipleAnimationTransition: function (element, options) {
            return ASPx.AnimationUtils.createMultipleAnimationTransition(element, options);
        },
        createSimpleAnimationTransition: function (options) {
            return ASPx.AnimationUtils.createSimpleAnimationTransition(options);
        },
        cancelAnimation: function (element) {
            ASPx.AnimationTransitionBase.Cancel(element);
        },
        fadeIn: function (element, onComplete, duration) {
            AnimationHelper.fadeTo(element, {
                from: 0, to: 1,
                onComplete: onComplete,
                duration: duration || ASPx.AnimationConstants.Durations.DEFAULT
            });
        },
        fadeOut: function (element, onComplete, duration) {
            AnimationHelper.fadeTo(element, {
                from: ASPx.GetElementOpacity(element), to: 0,
                onComplete: onComplete,
                duration: duration || ASPx.AnimationConstants.Durations.DEFAULT
            });
        },
        fadeTo: function (element, options) {
            options.property = "opacity";
            if (!options.duration)
                options.duration = ASPx.AnimationConstants.Durations.SHORT;
            var transition = AnimationHelper.createAnimationTransition(element, options);
            if (!ASPx.IsExists(options.from))
                options.from = transition.GetValue();
            transition.Start(options.from, options.to);
        },
        slideIn: function (element, direction, onComplete, animationEngineType) {
            AnimationHelper.setOpacity(element, 1);
            var animationContainer = AnimationHelper.getSlideAnimationContainer(element, true, true);
            var pos = AnimationHelper.getSlideInStartPos(animationContainer, direction);
            var transition = AnimationHelper.createSlideTransition(animationContainer, direction,
                function (el) {
                    AnimationHelper.resetSlideAnimationContainerSize(animationContainer);
                    if (onComplete)
                        onComplete(el);
                }, animationEngineType);
            transition.Start(pos, 0);
        },
        slideOut: function (element, direction, onComplete, animationEngineType) {
            var animationContainer = AnimationHelper.getSlideAnimationContainer(element, true, true);
            var pos = AnimationHelper.getSlideOutFinishPos(animationContainer, direction);
            var transition = AnimationHelper.createSlideTransition(animationContainer, direction,
                function (el) {
                    AnimationHelper.setOpacity(el.firstChild, 0);
                    if (onComplete)
                        onComplete(el);
                }, animationEngineType);
            transition.Start(pos);
        },
        slideTo: function (element, options) {
            if (!ASPx.IsExists(options.direction))
                options.direction = AnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
            var transition = new PositionAnimationTransition(element, options);
            transition.Start(options.to);
        },
        setOpacity: function (element, value) {
            ASPx.AnimationUtils.setOpacity(element, value);
        },
        appendWKAnimationClassNameIfRequired: function (element) {
            if (ASPx.AnimationUtils.CanUseCssTransform() && ASPx.Browser.WebKitFamily && !ASPx.ElementHasCssClass(element, "dx-wbv"))
                element.className += " dx-wbv";
        },
        findSlideAnimationContainer: function (element) {
            var container = element;
            for (var i = 0; i < AnimationHelper.MAXIMUM_DEPTH; i++) {
                if (container.tagName == "BODY")
                    return null;
                if (ASPx.ElementHasCssClass(container, AnimationHelper.SLIDE_CONTAINER_CLASS))
                    return container;
                container = container.parentNode;
            }
            return null;
        },
        createSlideAnimationContainer: function (element) {
            var rootContainer = document.createElement("DIV");
            ASPx.SetStyles(rootContainer, {
                className: AnimationHelper.SLIDE_CONTAINER_CLASS,
                overflow: "hidden"
            });
            var elementContainer = document.createElement("DIV");
            rootContainer.appendChild(elementContainer);
            var parentNode = element.parentNode;
            parentNode.insertBefore(rootContainer, element);
            elementContainer.appendChild(element);
            return rootContainer;
        },
        getSlideAnimationContainer: function (element, create, fixSize) {
            if (!element) return;
            var width = element.offsetWidth;
            var height = element.offsetHeight;
            var container;
            if (element.className == AnimationHelper.SLIDE_CONTAINER_CLASS)
                container = element;
            if (!container)
                container = AnimationHelper.findSlideAnimationContainer(element);
            if (!container && create)
                container = AnimationHelper.createSlideAnimationContainer(element);
            if (container && fixSize) {
                ASPx.SetStyles(container, {
                    width: width, height: height
                });
                ASPx.SetStyles(container.firstChild, {
                    width: width, height: height
                });
            }
            return container;
        },
        resetSlideAnimationContainerSize: function (container) {
            ASPx.SetStyles(container, {
                width: "", height: ""
            });
            ASPx.SetStyles(container.firstChild, {
                width: "", height: ""
            });
        },
        getModifyProperty: function (direction) {
            if (direction == AnimationHelper.SLIDE_TOP_DIRECTION || direction == AnimationHelper.SLIDE_BOTTOM_DIRECTION)
                return "marginTop";
            return "marginLeft";
        },
        createSlideTransition: function (animationContainer, direction, complete, animationEngineType) {
            var animationEngine = "";
            switch (animationEngineType) {
                case AnimationEngineType.JS:
                    animationEngine = "js";
                    break;
                case AnimationEngineType.CSS:
                    animationEngine = "css";
                    break;
            }
            return AnimationHelper.createAnimationTransition(animationContainer.firstChild, {
                unit: "px",
                property: AnimationHelper.getModifyProperty(direction),
                onComplete: complete,
                animationEngine: animationEngine
            });
        },
        getSlideInStartPos: function (animationContainer, direction) {
            switch (direction) {
                case AnimationHelper.SLIDE_TOP_DIRECTION:
                    return animationContainer.offsetHeight;
                case AnimationHelper.SLIDE_LEFT_DIRECTION:
                    return animationContainer.offsetWidth;
                case AnimationHelper.SLIDE_RIGHT_DIRECTION:
                    return -animationContainer.offsetWidth;
                case AnimationHelper.SLIDE_BOTTOM_DIRECTION:
                    return -animationContainer.offsetHeight;
            }
        },
        getSlideOutFinishPos: function (animationContainer, direction) {
            switch (direction) {
                case AnimationHelper.SLIDE_TOP_DIRECTION:
                    return -animationContainer.offsetHeight;
                case AnimationHelper.SLIDE_LEFT_DIRECTION:
                    return -animationContainer.offsetWidth;
                case AnimationHelper.SLIDE_RIGHT_DIRECTION:
                    return animationContainer.offsetWidth;
                case AnimationHelper.SLIDE_BOTTOM_DIRECTION:
                    return animationContainer.offsetHeight;
            }
        }
    };
    var GestureHandler = ASPx.CreateClass(null, {
        constructor: function (getAnimationElement, canHandle, allowStart) {
            this.getAnimationElement = getAnimationElement;
            this.canHandle = canHandle;
            this.allowStart = allowStart;
            this.startMousePosX = 0;
            this.startMousePosY = 0;
            this.startTime = null;
            this.isEventsPrevented = false;
            this.savedElements = [];
        },
        OnSelectStart: function (evt) {
            ASPx.Evt.PreventEvent(evt);
        },
        OnDragStart: function (evt) {
            ASPx.Evt.PreventEvent(evt);
        },
        OnMouseDown: function (evt) {
            this.startMousePosX = ASPx.Evt.GetEventX(evt);
            this.startMousePosY = ASPx.Evt.GetEventY(evt);
            this.startTime = new Date();
        },
        OnMouseMove: function (evt) {
            if (!ASPx.Browser.MobileUI)
                ASPx.Selection.Clear();
            if (Math.abs(this.GetCurrentDistanceX(evt)) < GestureHandler.SLIDER_MIN_START_DISTANCE && Math.abs(this.GetCurrentDistanceY(evt)) < GestureHandler.SLIDER_MIN_START_DISTANCE)
                GesturesHelper.isExecutedGesture = false;
        },
        OnMouseUp: function (evt) {
        },
        CanHandleEvent: function (evt) {
            return !this.canHandle || this.canHandle(evt);
        },
        IsStartAllowed: function (value) {
            return !this.allowStart || this.allowStart(value);
        },
        RollbackGesture: function () {
        },
        GetRubberPosition: function (position) {
            return position / GestureHandler.FACTOR_RUBBER;
        },
        GetCurrentDistanceX: function (evt) {
            return ASPx.Evt.GetEventX(evt) - this.startMousePosX;
        },
        GetCurrentDistanceY: function (evt) {
            return ASPx.Evt.GetEventY(evt) - this.startMousePosY;
        },
        GetDistanceLimit: function () {
            return (new Date() - this.startTime) < GestureHandler.MAX_TIME_SPAN ? GestureHandler.MIN_DISTANCE_LIMIT : GestureHandler.MAX_DISTANCE_LIMIT;
        },
        GetContainerElement: function () {
        },
        AttachPreventEvents: function (evt) {
            if (!this.isEventsPrevented) {
                var element = ASPx.Evt.GetEventSource(evt);
                var container = this.GetContainerElement();
                while (element && element != container) {
                    ASPx.Evt.AttachEventToElement(element, "mouseup", ASPx.Evt.PreventEvent);
                    ASPx.Evt.AttachEventToElement(element, "click", ASPx.Evt.PreventEvent);
                    this.savedElements.push(element);
                    element = element.parentNode;
                }
                this.isEventsPrevented = true;
            }
        },
        DetachPreventEvents: function () {
            if (this.isEventsPrevented) {
                window.setTimeout(function () {
                    while (this.savedElements.length > 0) {
                        var element = this.savedElements.pop();
                        ASPx.Evt.DetachEventFromElement(element, "mouseup", ASPx.Evt.PreventEvent);
                        ASPx.Evt.DetachEventFromElement(element, "click", ASPx.Evt.PreventEvent);
                    }
                }.aspxBind(this), 0);
                this.isEventsPrevented = false;
            }
        }
    });
    GestureHandler.MAX_DISTANCE_LIMIT = 70;
    GestureHandler.MIN_DISTANCE_LIMIT = 10;
    GestureHandler.MIN_START_DISTANCE = 0;
    GestureHandler.SLIDER_MIN_START_DISTANCE = 5;
    GestureHandler.MAX_TIME_SPAN = 300;
    GestureHandler.FACTOR_RUBBER = 4;
    GestureHandler.RETURN_ANIMATION_DURATION = 150;
    var SwipeSlideGestureHandler = ASPx.CreateClass(GestureHandler, {
        constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, move) {
            this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle);
            this.slideElement = this.getAnimationElement();
            this.container = this.slideElement.parentNode;
            this.direction = direction;
            this.backward = backward;
            this.forward = forward;
            this.rollback = rollback;
            this.slideElementSize = 0;
            this.containerElementSize = 0;
            this.startSliderElementPosition = 0;
            this.centeredSlideElementPosition = 0;
        },
        OnMouseDown: function (evt) {
            GestureHandler.prototype.OnMouseDown.call(this, evt);
            this.slideElementSize = this.GetElementSize();
            this.startSliderElementPosition = this.GetElementPosition();
            this.containerElementSize = this.GetContainerElementSize();
            if (this.slideElementSize <= this.containerElementSize)
                this.centeredSlideElementPosition = (this.containerElementSize - this.slideElementSize) / 2;
        },
        OnMouseMove: function (evt) {
            GestureHandler.prototype.OnMouseMove.call(this, evt);
            if (!ASPx.Browser.TouchUI && !ASPx.GetIsParent(this.container, ASPx.Evt.GetEventSource(evt))) {
                GesturesHelper.OnDocumentMouseUp(evt);
                return;
            }
            var distance = this.GetCurrentDistance(evt);
            if (Math.abs(distance) < GestureHandler.SLIDER_MIN_START_DISTANCE || ASPx.TouchUIHelper.isGesture)
                return;
            this.SetElementPosition(this.GetCalculatedPosition(distance));
            this.AttachPreventEvents(evt);
            ASPx.Evt.PreventEvent(evt);
        },
        GetCalculatedPosition: function (distance) {
            ASPx.AnimationTransitionBase.Cancel(this.slideElement);
            var position = this.startSliderElementPosition + distance,
                maxPosition = -(this.slideElementSize - this.containerElementSize),
                minPosition = 0;
            if (this.centeredSlideElementPosition > 0)
                position = this.GetRubberPosition(distance) + this.centeredSlideElementPosition;
            else if (position > minPosition)
                position = this.GetRubberPosition(distance);
            else if (position < maxPosition)
                position = this.GetRubberPosition(distance) + maxPosition;
            return position;
        },
        OnMouseUp: function (evt) {
            this.DetachPreventEvents();
            if (this.GetCurrentDistance(evt) != 0)
                this.OnMouseUpCore(evt);
        },
        OnMouseUpCore: function (evt) {
            var distance = this.GetCurrentDistance(evt);
            if (this.centeredSlideElementPosition > 0 || this.CheckSlidePanelIsOutOfBounds())
                this.PerformRollback();
            else
                this.PerformAction(distance);
        },
        PerformAction: function (distance) {
            if (Math.abs(distance) < this.GetDistanceLimit())
                this.PerformRollback();
            else if (distance < 0)
                this.PerformForward();
            else
                this.PerformBackward();
        },
        PerformBackward: function () {
            this.backward();
        },
        PerformForward: function () {
            this.forward();
        },
        PerformRollback: function () {
            this.rollback();
        },
        CheckSlidePanelIsOutOfBounds: function () {
            var minOffset = -(this.slideElementSize - this.containerElementSize), maxOffset = 0;
            var position = null, slideElementPos = this.GetElementPosition();
            if (slideElementPos > maxOffset || slideElementPos < minOffset)
                return true;
            return false;
        },
        GetContainerElement: function () {
            return this.container;
        },
        GetElementSize: function () {
            return this.IsHorizontalDirection() ? this.slideElement.offsetWidth : this.slideElement.offsetHeight;
        },
        GetContainerElementSize: function () {
            return this.IsHorizontalDirection() ? ASPx.GetClearClientWidth(this.container) : ASPx.GetClearClientHeight(this.container);
        },
        GetCurrentDistance: function (evt) {
            return this.IsHorizontalDirection() ? this.GetCurrentDistanceX(evt) : this.GetCurrentDistanceY(evt);
        },
        GetElementPosition: function () {
            return ASPx.AnimationUtils.GetTransformValue(this.slideElement, !this.IsHorizontalDirection());
        },
        SetElementPosition: function (position) {
            ASPx.AnimationUtils.SetTransformValue(this.slideElement, position, !this.IsHorizontalDirection());
        },
        IsHorizontalDirection: function () {
            return this.direction == AnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
        }
    });
    var SwipeSimpleSlideGestureHandler = ASPx.CreateClass(SwipeSlideGestureHandler, {
        constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
            this.constructor.prototype.constructor.call(this, getAnimationElement, direction, canHandle, backward, forward, rollback);
            this.container = this.slideElement;
            this.updatePosition = updatePosition;
            this.prevDistance = 0;
        },
        OnMouseDown: function (evt) {
            GestureHandler.prototype.OnMouseDown.call(this, evt);
            this.prevDistance = 0;
        },
        OnMouseUpCore: function (evt) {
            this.PerformAction(this.GetCurrentDistance(evt));
        },
        PerformAction: function (distance) {
            if (Math.abs(distance) < this.GetDistanceLimit())
                this.PerformRollback();
            else if (distance < 0)
                this.PerformForward();
            else
                this.PerformBackward();
        },
        GetCalculatedPosition: function (distance) {
            var position = distance - this.prevDistance;
            this.prevDistance = distance;
            return position;
        },
        SetElementPosition: function (position) {
            this.updatePosition(position);
        }
    });
    var SwipeGestureHandler = ASPx.CreateClass(GestureHandler, {
        constructor: function (getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType) {
            this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle, allowStart);
            this.start = start;
            this.allowComplete = allowComplete;
            this.complete = complete;
            this.cancel = cancel;
            this.animationTween = null;
            this.currentDistanceX = 0;
            this.currentDistanceY = 0;
            this.tryStartGesture = false;
            this.tryStartScrolling = false;
            this.animationEngineType = animationEngineType;
            this.UpdateAnimationContainer();
        },
        UpdateAnimationContainer: function () {
            this.animationContainer = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, false);
        },
        CanHandleEvent: function (evt) {
            if (GestureHandler.prototype.CanHandleEvent.call(this, evt))
                return true;
            return this.animationTween && this.animationContainer && ASPx.GetIsParent(this.animationContainer, ASPx.Evt.GetEventSource(evt));
        },
        OnMouseDown: function (evt) {
            GestureHandler.prototype.OnMouseDown.call(this, evt);
            if (this.animationTween)
                this.animationTween.Cancel();
            this.currentDistanceX = 0;
            this.currentDistanceY = 0;
            this.tryStartGesture = false;
            this.tryStartScrolling = false;
        },
        OnMouseMove: function (evt) {
            GestureHandler.prototype.OnMouseMove.call(this, evt);
            var isZoomGestureConflict = evt.touches && evt.touches.length > 1;
            if (isZoomGestureConflict)
                return false;
            this.currentDistanceX = this.GetCurrentDistanceX(evt);
            this.currentDistanceY = this.GetCurrentDistanceY(evt);
            if (!this.animationTween && !this.tryStartScrolling && (Math.abs(this.currentDistanceX) >
                GestureHandler.MIN_START_DISTANCE || Math.abs(this.currentDistanceY) > GestureHandler.MIN_START_DISTANCE)) {
                if (Math.abs(this.currentDistanceY) < Math.abs(this.currentDistanceX)) {
                    this.tryStartGesture = true;
                    if (this.IsStartAllowed(this.currentDistanceX)) {
                        this.animationContainer = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, true);
                        this.animationTween = AnimationHelper.createSlideTransition(this.animationContainer, AnimationHelper.SLIDE_LEFT_DIRECTION,
                            function () {
                                AnimationHelper.resetSlideAnimationContainerSize(this.animationContainer);
                                this.animationContainer = null;
                                this.animationTween = null;
                            }.aspxBind(this), this.animationEngineType);
                        this.PerformStart(this.currentDistanceX);
                        this.AttachPreventEvents(evt);
                    }
                }
                else
                    this.tryStartScrolling = true;
            }
            if (this.animationTween) {
                if (this.allowComplete && !this.allowComplete(this.currentDistanceX))
                    this.currentDistanceX = this.GetRubberPosition(this.currentDistanceX);
                this.animationTween.SetValue(this.currentDistanceX);
            }
            if (!this.tryStartScrolling && !ASPx.TouchUIHelper.isGesture && evt.touches && evt.touches.length < 2)
                ASPx.Evt.PreventEvent(evt);
        },
        OnMouseUp: function (evt) {
            if (!this.animationTween) {
                if (this.tryStartGesture)
                    this.PerformCancel(this.currentDistanceX);
            }
            else {
                if (Math.abs(this.currentDistanceX) < this.GetDistanceLimit())
                    this.RollbackGesture();
                else {
                    if (this.IsCompleteAllowed(this.currentDistanceX)) {
                        this.PerformComplete(this.currentDistanceX);
                        this.animationContainer = null;
                        this.animationTween = null;
                    }
                    else
                        this.RollbackGesture();
                }
            }
            this.DetachPreventEvents();
            this.tryStartGesture = false;
            this.tryStartScrolling = false;
        },
        PerformStart: function (value) {
            if (this.start)
                this.start(value);
        },
        IsCompleteAllowed: function (value) {
            return !this.allowComplete || this.allowComplete(value);
        },
        PerformComplete: function (value) {
            if (this.complete)
                this.complete(value);
        },
        PerformCancel: function (value) {
            if (this.cancel)
                this.cancel(value);
        },
        RollbackGesture: function () {
            this.animationTween.Start(this.currentDistanceX, 0);
        },
        ResetGestureElementPosition: function () {
            if (this.currentDistanceX === 0) return;
            var container = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement());
            var onComplete = function () { AnimationHelper.resetSlideAnimationContainerSize(container); };
            var animation = AnimationHelper.createSlideTransition(container, AnimationHelper.SLIDE_LEFT_DIRECTION, onComplete, this.animationEngineType);
            animation.Start(this.currentDistanceX, 0);
        },
        GetContainerElement: function () {
            return this.animationContainer;
        }
    });
    var GesturesHelper = {
        handlers: {},
        activeHandler: null,
        isAttachedEvents: false,
        isExecutedGesture: false,
        AddSwipeGestureHandler: function (id, getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType) {
            this.handlers[id] = new SwipeGestureHandler(getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType);
        },
        UpdateSwipeAnimationContainer: function (id) {
            if (this.handlers[id])
                this.handlers[id].UpdateAnimationContainer();
        },
        AddSwipeSlideGestureHandler: function (id, getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
            if (updatePosition)
                this.handlers[id] = new SwipeSimpleSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition);
            else
                this.handlers[id] = new SwipeSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback);
        },
        getParentDXEditorWithSwipeGestures: function (element) {
            return ASPx.GetParent(element, function (parent) {
                var parentObj = ASPx.GetControlCollection().Get(parent.id);
                return parentObj && parentObj.supportGestures && parentObj.isSwipeGesturesEnabled();
            });
        },
        canHandleMouseDown: function (evt) {
            if (!ASPx.Evt.IsLeftButtonPressed(evt))
                return false;
            var element = ASPx.Evt.GetEventSource(evt);
            var dxFocusedEditor = ASPx.Ident.scripts.ASPxClientEdit && ASPx.GetFocusedEditor();
            if (dxFocusedEditor && dxFocusedEditor.IsEditorElement(element)) {
                var elementParentDXEditorWithSwipeGestures = GesturesHelper.getParentDXEditorWithSwipeGestures(element);
                if (!elementParentDXEditorWithSwipeGestures || !dxFocusedEditor.IsEditorElement(elementParentDXEditorWithSwipeGestures))
                    return false;
            }
            var isTextEditor = element.tagName == "TEXTAREA" || element.tagName == "INPUT" && ASPx.Attr.GetAttribute(element, "type") == "text";
            if (isTextEditor && document.activeElement == element)
                return false;
            return true;
        },
        OnDocumentDragStart: function (evt) {
            if (GesturesHelper.activeHandler)
                GesturesHelper.activeHandler.OnDragStart(evt);
        },
        OnDocumentSelectStart: function (evt) {
            if (GesturesHelper.activeHandler)
                GesturesHelper.activeHandler.OnSelectStart(evt);
        },
        OnDocumentMouseDown: function (evt) {
            if (!GesturesHelper.canHandleMouseDown(evt))
                return;
            GesturesHelper.activeHandler = GesturesHelper.FindHandler(evt);
            if (GesturesHelper.activeHandler)
                GesturesHelper.activeHandler.OnMouseDown(evt);
        },
        OnDocumentMouseMove: function (evt) {
            if (GesturesHelper.activeHandler) {
                GesturesHelper.isExecutedGesture = true;
                GesturesHelper.activeHandler.OnMouseMove(evt);
            }
        },
        OnDocumentMouseUp: function (evt) {
            if (GesturesHelper.activeHandler) {
                GesturesHelper.activeHandler.OnMouseUp(evt);
                GesturesHelper.activeHandler = null;
                window.setTimeout(function () { GesturesHelper.isExecutedGesture = false; }, 0);
            }
        },
        AttachEvents: function () {
            if (!GesturesHelper.isAttachedEvents) {
                GesturesHelper.Attach(ASPx.Evt.AttachEventToElement);
                GesturesHelper.isAttachedEvents = true;
            }
        },
        DetachEvents: function () {
            if (GesturesHelper.isAttachedEvents) {
                GesturesHelper.Attach(ASPx.Evt.DetachEventFromElement);
                GesturesHelper.isAttachedEvents = false;
            }
        },
        Attach: function (changeEventsMethod) {
            var doc = window.document;
            changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseDownEventName, GesturesHelper.OnDocumentMouseDown);
            changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseMoveEventName, GesturesHelper.OnDocumentMouseMove);
            changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseUpEventName, GesturesHelper.OnDocumentMouseUp);
            if (!ASPx.Browser.MobileUI) {
                changeEventsMethod(doc, "selectstart", GesturesHelper.OnDocumentSelectStart);
                changeEventsMethod(doc, "dragstart", GesturesHelper.OnDocumentDragStart);
            }
        },
        FindHandler: function (evt) {
            var handlers = [];
            for (var id in GesturesHelper.handlers) {
                if (GesturesHelper.handlers.hasOwnProperty(id)) {
                    var handler = GesturesHelper.handlers[id];
                    if (handler.CanHandleEvent && handler.CanHandleEvent(evt))
                        handlers.push(handler);
                }
            }
            if (!handlers.length)
                return null;
            handlers.sort(function (a, b) {
                return ASPx.GetIsParent(a.getAnimationElement(), b.getAnimationElement()) ? 1 : -1;
            });
            return handlers[0];
        },
        IsExecutedGesture: function () {
            return GesturesHelper.isExecutedGesture;
        }
    };
    GesturesHelper.AttachEvents();
    var AnimationEngineType = {
        "JS": 0,
        "CSS": 1,
        "DEFAULT": 2
    };
    ASPx.AnimationEngineType = AnimationEngineType;
    ASPx.AnimationHelper = AnimationHelper;
    ASPx.GesturesHelper = GesturesHelper;
})();

(function () {
    var customScrollableElementsCollection = [];
    var SCROLLBAR_CLASSNAMES = {
        VERTICAL: "dxTouchVScrollHandle",
        HORIZONTAL: "dxTouchHScrollHandle",
        SHOWN_VERTICAL: "dxTouchScrollHandleVisible",
        SHOWN_HORIZONTAL: "dxTouchScrollHandleVisible",
        CUSTOMIZED_NATIVE: "dxTouchNativeScrollHandle"
    };
    ASPx.Evt.AttachEventToDocument("gesturestart", function () {
        ASPx.TouchUIHelper.isGesture = true;
    });
    ASPx.Evt.AttachEventToDocument("gestureend", function () {
        ASPx.TouchUIHelper.isGesture = false;
    });
    ASPx.TouchUIHelper.MakeScrollable = function (element, options) {
        return new ASPx.TouchUIHelper.ScrollExtender(element, options);
    };
    ASPx.TouchUIHelper.ScrollExtender = function (element, options) {
        this.parseOptions(options ? options : {});
        this.create(element);
    };
    ASPx.TouchUIHelper.preventScrollOnEvent = function (evt) {
        evt.ASPxTouchUIScrollOff = true;
    };
    var isCustomScroll = function (elem) { return ASPx.Data.ArrayContains(customScrollableElementsCollection, elem); };
    var isNativeScroll = function (elem) {
        var style = window.getComputedStyle(elem);
        return ["overflow", "overflow-x", "overflow-y"].some(function (prop) {
            return ASPx.Data.ArrayContains(["scroll", "auto"], style[prop]);
        });
    };
    var requirePreventCustomScroll = function (elem, scrollElement) {
        if (!scrollElement)
            return;
        while (elem && elem !== scrollElement && elem.tagName !== 'BODY') {
            if (isNativeScroll(elem) || isCustomScroll(elem))
                return true;
            elem = elem.parentNode;
        }
        return false;
    };
    ASPx.TouchUIHelper.RequirePreventCustomScroll = requirePreventCustomScroll;
    ASPx.TouchUIHelper.InitNativeScrolling = function (element, options) {
        if (options.showHorizontalScrollbar || options.showVerticalScrollbar) {
            element.style["overflow"] = "scroll";
            element.style["overflow-x"] = options.showHorizontalScrollbar ? "scroll" : "hidden";
            element.style["overflow-y"] = options.showVerticalScrollbar ? "scroll" : "hidden";
            element.style["-webkit-overflow-scrolling"] = "touch";
            if (options.customizeNativeScrolling)
                ASPx.AddClassNameToElement(element, SCROLLBAR_CLASSNAMES.CUSTOMIZED_NATIVE);
        }
    };
    ASPx.TouchUIHelper.ScrollExtender.prototype = {
        ChangeElement: function (element) {
            this.destroy();
            this.create(element);
        },
        acceptElement: function (element) {
            if (typeof (element) == "string")
                element = document.getElementById(element);
            this.element = element;
            this.touchEventHandlersElement = this.options.touchEventHandlersElement ? this.options.touchEventHandlersElement : this.element;
            if (ASPx.Browser.AndroidMobilePlatform) {
                element.style["overflow-x"] = "hidden";
                element.style["overflow-y"] = "hidden";
            }
            return element;
        },
        create: function (element) {
            this.acceptElement(element);
            if (this.options.nativeScrolling) {
                ASPx.TouchUIHelper.InitNativeScrolling(this.element, this.options);
            } else {
                customScrollableElementsCollection.push(this.element);
                if (ASPx.Browser.IE) {
                    this.msGesture = new MSGesture();
                    this.msGesture.target = this.element;
                    this.pointerCount = 0;
                }
                this.createScrollHandlers();
                this.createEventHandlers();
                this.updateInitData();
                this.updateScrollHandles();
                this.attachEventHandlers();
            }
        },
        destroy: function () {
            this.destroyScrollHandlers();
            this.detachEventHandlers();
            ASPx.Data.ArrayRemove(customScrollableElementsCollection, this.element);
        },
        parseOptions: function (options) {
            this.options = {};
            this.options.showHorizontalScrollbar = options.showHorizontalScrollbar !== false;
            this.options.showVerticalScrollbar = options.showVerticalScrollbar !== false;
            this.options.acceleration = options.acceleration || 0.8;
            this.options.timeStep = options.timeStep || 50;
            this.options.minScrollbarSize = options.minScrollbarSize || 20;
            this.options.vScrollClassName = options.vScrollClassName || SCROLLBAR_CLASSNAMES.VERTICAL;
            this.options.hScrollClassName = options.hScrollClassName || SCROLLBAR_CLASSNAMES.HORIZONTAL;
            this.options.vScrollClassNameShown = [
                this.options.vScrollClassName,
                options.vScrollClassNameShown || SCROLLBAR_CLASSNAMES.SHOWN_VERTICAL
            ].join(" ");
            this.options.hScrollClassNameShown = [
                this.options.hScrollClassName,
                options.hScrollClassNameShown || SCROLLBAR_CLASSNAMES.SHOWN_HORIZONTAL
            ].join(" ");
            this.options.forceCustomScroll = options.forceCustomScroll === true;
            var nativeScrollPossible = !options.acceleration && !options.timeStep && !options.minScrollbarSize && !options.vScrollClassName && !options.hScrollClassName && !options.forceCustomScroll;
            if (nativeScrollPossible && ASPx.TouchUIHelper.IsNativeScrolling())
                this.options.nativeScrolling = true;
            if (ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.WebKitFamily)
                this.options.customizeNativeScrolling = true;
            this.options.touchEventHandlersElement = options.touchEventHandlersElement;
            this.options.scrollPageIfCannotScrollDiv = options.scrollPageIfCannotScrollDiv === true;
        },
        createEventHandlers: function () {
            var instance = this;
            this.onTouchStart = function (e) {
                if (ASPx.Browser.IE) {
                    instance.pointerCount++;
                    instance.msGesture.addPointer(e.pointerId);
                    if (instance.pointerCount != 1) return;
                }
                if (!ASPx.TouchUIHelper.isGesture) {
                    if (!ASPx.TouchUIHelper.ScrollExtender.activeScrolling) {
                        if (requirePreventCustomScroll(ASPx.Evt.GetEventSource(e), instance.element)) {
                            e.stopPropagation();
                            return;
                        }
                        ASPx.TouchUIHelper.ScrollExtender.activeScrolling = instance;
                        instance.startScroll(e);
                    }
                }
            };
            this.onTouchMove = function (e) {
                if (ASPx.Browser.IE && instance.pointerCount != 1) return;
                if (!ASPx.TouchUIHelper.isGesture && instance.ScrollingActive(e)) {
                    var scrolled = instance.scroll(e);
                    var alwaysPreventDefault = !instance.options.scrollPageIfCannotScrollDiv;
                    if ((instance.scrollBarsShown && alwaysPreventDefault) || (!alwaysPreventDefault && scrolled))
                        e.preventDefault();
                }
            };
            this.onTouchEnd = function (e) {
                if (ASPx.Browser.IE) {
                    if (instance.pointerCount == 0) return;
                    instance.pointerCount--;
                }
                if (!ASPx.TouchUIHelper.isGesture) {
                    instance.scrollLeft = instance.element.scrollLeft;
                    instance.scrollTop = instance.element.scrollTop;
                    instance.stopScroll();
                    if (ASPx.TouchUIHelper.ScrollExtender.activeScrolling && ASPx.TouchUIHelper.ScrollExtender.activeScrolling.initTouchX == instance.initTouchX && ASPx.TouchUIHelper.ScrollExtender.activeScrolling.initTouchY == instance.initTouchY)
                        instance.MouseEventEmulationProtectHelper.onTouchEnd(instance.initTouchX, instance.initTouchY, e);
                    instance.ReleaseScrolling();
                }
            };
            this.onScroll = function (e) {
                if (ASPx.TouchUIHelper.isGesture && instance.ScrollingActive(e)) {
                    instance.showScrollBars();
                    instance.updateScrollHandles();
                }
            };
            this.onClick = function () {
                instance.MouseEventEmulationProtectHelper.onClick();
            };
        },
        createScrollHandlers: function () {
            if (this.options.showHorizontalScrollbar) {
                this.hScrollHandleElement = document.createElement("DIV");
                this.hScrollHandleElement.className = this.options.hScrollClassName;
                this.element.appendChild(this.hScrollHandleElement);
                this.hEndMargin = this.options.showVerticalScrollbar ? ASPx.PxToInt(ASPx.GetCurrentStyle(this.hScrollHandleElement).marginRight) : 0;
            }
            if (this.options.showVerticalScrollbar) {
                this.vScrollHandleElement = document.createElement("DIV");
                this.vScrollHandleElement.className = this.options.vScrollClassName;
                this.element.appendChild(this.vScrollHandleElement);
                this.vEndMargin = this.options.showHorizontalScrollbar ? ASPx.PxToInt(ASPx.GetCurrentStyle(this.vScrollHandleElement).marginBottom) : 0;
            }
        },
        destroyScrollHandlers: function () {
            if (this.hScrollHandleElement && this.hScrollHandleElement.parentNode)
                this.hScrollHandleElement.parentNode.removeChild(this.hScrollHandleElement);
            if (this.vScrollHandleElement && this.vScrollHandleElement.parentNode)
                this.vScrollHandleElement.parentNode.removeChild(this.vScrollHandleElement);
            this.hScrollHandleElement = null;
            this.vScrollHandleElement = null;
        },
        attachEventHandlers: function () {
            if (ASPx.Browser.WebKitTouchUI) {
                this.touchEventHandlersElement.addEventListener("touchstart", this.onTouchStart, false);
                this.touchEventHandlersElement.addEventListener("touchend", this.onTouchEnd, false);
                this.touchEventHandlersElement.addEventListener("touchmove", this.onTouchMove, false);
            } else if (ASPx.Browser.IE) {
                this.touchEventHandlersElement.addEventListener(ASPx.TouchUIHelper.pointerDownEventName, this.onTouchStart, false);
                this.touchEventHandlersElement.addEventListener('MSGestureEnd', this.onTouchEnd, false);
                this.touchEventHandlersElement.addEventListener(ASPx.TouchUIHelper.pointerUpEventName, this.onTouchEnd, false);
                this.touchEventHandlersElement.addEventListener(ASPx.TouchUIHelper.pointerCancelEventName, this.onTouchEnd, false);
                this.touchEventHandlersElement.addEventListener(ASPx.TouchUIHelper.pointerMoveEventName, this.onTouchMove, false);
            }
            this.touchEventHandlersElement.addEventListener("scroll", this.onScroll, false);
            this.touchEventHandlersElement.addEventListener("click", this.onClick, false);
        },
        detachEventHandlers: function () {
            if (ASPx.Browser.WebKitTouchUI) {
                this.touchEventHandlersElement.removeEventListener("touchstart", this.onTouchStart, false);
                this.touchEventHandlersElement.removeEventListener("touchend", this.onTouchEnd, false);
                this.touchEventHandlersElement.removeEventListener("touchmove", this.onTouchMove, false);
            } else if (ASPx.Browser.IE) {
                this.touchEventHandlersElement.removeEventListener(ASPx.TouchUIHelper.pointerDownEventName, this.onTouchStart, false);
                this.touchEventHandlersElement.removeEventListener('MSGestureEnd', this.onTouchEnd, false);
                this.touchEventHandlersElement.removeEventListener(ASPx.TouchUIHelper.pointerUpEventName, this.onTouchEnd, false);
                this.touchEventHandlersElement.removeEventListener(ASPx.TouchUIHelper.pointerCancelEventName, this.onTouchEnd, false);
                this.touchEventHandlersElement.removeEventListener(ASPx.TouchUIHelper.pointerMoveEventName, this.onTouchMove, false);
            }
            this.touchEventHandlersElement.removeEventListener("scroll", this.onScroll, false);
            this.touchEventHandlersElement.removeEventListener("click", this.onClick, false);
        },
        updateInitData: function () {
            window.clearTimeout(this.inertialStopTimerId);
            this.initScrollLeft = this.element.scrollLeft;
            this.initScrollTop = this.element.scrollTop;
            this.scrollLeft = this.initScrollLeft;
            this.scrollTop = this.initScrollTop;
            this.initElementX = ASPx.GetAbsoluteX(this.element);
            this.initElementY = ASPx.GetAbsoluteY(this.element);
            this.scrollTime = new Date();
            this.vx = 0;
            this.vy = 0;
            this.vxs = [];
            this.vys = [];
        },
        ScrollingActive: function (e) {
            return (!e || !e.ASPxTouchUIScrollOff) && ASPx.TouchUIHelper.ScrollExtender.activeScrolling == this;
        },
        ReleaseScrolling: function () {
            if (this.ScrollingActive())
                ASPx.TouchUIHelper.ScrollExtender.activeScrolling = null;
        },
        startScroll: function (e) {
            this.initTouchX = ASPx.TouchUIHelper.getEventX(e);
            this.initTouchY = ASPx.TouchUIHelper.getEventY(e);
            this.lastTouchX = this.initTouchX;
            this.lastTouchY = this.initTouchY;
            this.updateInitData();
            this.updateScrollHandles();
            this.showScrollBars();
        },
        scroll: function (e) {
            var el = this.element;
            var opts = this.options;
            var currentTouchX = ASPx.TouchUIHelper.getEventX(e);
            var currentTouchY = ASPx.TouchUIHelper.getEventY(e);
            var newX = this.initScrollLeft + (this.initTouchX - currentTouchX);
            var newY = this.initScrollTop + (this.initTouchY - currentTouchY);
            var dt = (new Date() - this.scrollTime);
            if (dt < 1) dt = 1;
            var dx = this.lastTouchX - currentTouchX;
            var dy = this.lastTouchY - currentTouchY;
            this.lastTouchX = currentTouchX;
            this.lastTouchY = currentTouchY;
            this.vx = dx / dt;
            this.vy = dy / dt;
            this.vxs.push(this.vx);
            this.vys.push(this.vy);
            var applyScrollX = opts.showHorizontalScrollbar;
            var applyScrollY = opts.showVerticalScrollbar;
            var stuck = false;
            if (opts.scrollPageIfCannotScrollDiv) {
                var sensitivity = 5;
                var dxSignificant = Math.abs(dx) > sensitivity;
                var dySignificant = Math.abs(dy) > sensitivity;
                var xStuck = !applyScrollX;
                var yStuck = !applyScrollY;
                xStuck = xStuck || (this.scrollLeft == 0 && dx < 0);
                xStuck = xStuck || (this.scrollLeft == el.scrollWidth - el.clientWidth && dx > 0);
                xStuck = xStuck && dxSignificant && Math.abs(dx) > Math.abs(dy);
                yStuck = yStuck || (this.scrollTop == 0 && dy < 0);
                yStuck = yStuck || (this.scrollTop == el.scrollHeight - el.clientHeight && dy > 0);
                yStuck = yStuck && dySignificant && Math.abs(dy) > Math.abs(dx);
                stuck = xStuck || yStuck;
                applyScrollX = !stuck;
                applyScrollY = !stuck;
            }
            if (applyScrollX) {
                this.scrollLeft = newX;
                el.scrollLeft = newX;
            }
            if (applyScrollY) {
                this.scrollTop = newY;
                el.scrollTop = newY;
            }
            if (stuck) {
                this.scrollLeft = el.scrollLeft;
                this.scrollTop = el.scrollTop;
            }
            this.updateScrollHandles();
            this.scrollTime = new Date();
            var scrolled = applyScrollX || applyScrollY;
            return scrolled;
        },
        stopScroll: function () {
            var instance = this;
            var element = this.element;
            var acceleration = this.options.acceleration;
            var timeStep = this.options.timeStep;
            if (this.vxs && this.vxs.length === 0) return;
            if (this.vxs) {
                var countToSmooth = 3;
                var lenToSlice = Math.max(this.vxs.length - countToSmooth, 0);
                this.vxs = this.vxs.slice(lenToSlice);
                this.vys = this.vys.slice(lenToSlice);
                this.vx = Math.min.apply(null, this.vxs);
                if (this.vx < 0)
                    this.vx = Math.max.apply(null, this.vxs);
                this.vy = Math.min.apply(null, this.vys);
                if (this.vy < 0)
                    this.vy = Math.max.apply(null, this.vys);
                delete this.vxs;
                delete this.vys;
            }
            this.inertialStopTimerId = window.setTimeout(function () {
                instance.vx *= acceleration;
                instance.vy *= acceleration;
                if (Math.abs(instance.vx) < 0.1)
                    instance.vx = 0;
                if (Math.abs(instance.vy) < 0.1)
                    instance.vy = 0;
                if (instance.vx == 0 && instance.vy == 0) {
                    instance.hideScrollBars();
                    return;
                }
                var dx = Math.ceil(instance.vx * timeStep);
                var dy = Math.ceil(instance.vy * timeStep);
                if (instance.options.showHorizontalScrollbar) {
                    instance.scrollLeft += dx;
                    element.scrollLeft = instance.scrollLeft;
                }
                if (instance.options.showVerticalScrollbar) {
                    instance.scrollTop += dy;
                    element.scrollTop = instance.scrollTop;
                }
                if (element.scrollLeft + element.clientWidth >= element.scrollWidth || element.scrollLeft <= 0)
                    instance.vx = 0;
                if (element.scrollTop + element.clientHeight >= element.scrollHeight || element.scrollTop <= 0)
                    instance.vy = 0;
                instance.updateScrollHandles();
                instance.stopScroll();
            }, timeStep);
        },
        updateScrollHandles: function () {
            if (this.hScrollHandleElement) {
                var scrollHandler = this.calcScrollHandles(this.element.scrollWidth, this.element.clientWidth,
                    this.options.minScrollbarSize, this.element.scrollLeft, this.hEndMargin);
                this.hScrollHandleElement.style.width = scrollHandler.size + "px";
                ASPx.SetAbsoluteX(this.hScrollHandleElement, this.initElementX + scrollHandler.pos);
                ASPx.SetAbsoluteY(this.hScrollHandleElement, this.initElementY + this.element.clientHeight -
                    this.hScrollHandleElement.offsetHeight);
            }
            if (this.vScrollHandleElement) {
                var scrollHandler = this.calcScrollHandles(this.element.scrollHeight, this.element.clientHeight,
                    this.options.minScrollbarSize, this.element.scrollTop, this.vEndMargin);
                this.vScrollHandleElement.style.height = scrollHandler.size + "px";
                ASPx.SetAbsoluteX(this.vScrollHandleElement, this.initElementX + this.element.clientWidth - this.vScrollHandleElement.offsetWidth);
                ASPx.SetAbsoluteY(this.vScrollHandleElement, this.initElementY + scrollHandler.pos);
            }
        },
        calcScrollHandles: function (scrollSize, clientSize, scrollBarMinSize, scrollPos, endMargin) {
            var scrollBarSize = clientSize * clientSize / scrollSize;
            scrollBarSize = scrollBarSize > scrollBarMinSize ? scrollBarSize : scrollBarMinSize;
            var k = (scrollSize == clientSize) ? 0 :
                (clientSize - scrollBarSize - endMargin) / (scrollSize - clientSize);
            return { size: scrollBarSize, pos: scrollPos * k };
        },
        showScrollBars: function () {
            var needVScrollHandle = this.element.scrollHeight > this.element.clientHeight;
            var needHScrollHandle = this.element.scrollWidth > this.element.clientWidth;
            if (this.vScrollHandleElement && needVScrollHandle)
                this.vScrollHandleElement.className = this.options.vScrollClassNameShown;
            if (this.hScrollHandleElement && needHScrollHandle)
                this.hScrollHandleElement.className = this.options.hScrollClassNameShown;
            this.scrollBarsShown = needVScrollHandle || needHScrollHandle;
        },
        hideScrollBars: function () {
            if (this.vScrollHandleElement)
                this.vScrollHandleElement.className = this.options.vScrollClassName;
            if (this.hScrollHandleElement)
                this.hScrollHandleElement.className = this.options.hScrollClassName;
            this.scrollBarsShown = false;
        },
        MouseEventEmulationProtectHelper: {
            onTouchEnd: function (initTouchX, initTouchY, e) {
                var difX = initTouchX - ASPx.TouchUIHelper.getEventX(e);
                var difY = initTouchY - ASPx.TouchUIHelper.getEventY(e);
                if (Math.abs(difX) > ASPx.TouchUIHelper.clickSensetivity || Math.abs(difY) > ASPx.TouchUIHelper.clickSensetivity) {
                    ASPx.TouchUIHelper.isMouseEventFromScrolling = true;
                    window.setTimeout(function () { ASPx.TouchUIHelper.isMouseEventFromScrolling = false; }, 100);
                }
            },
            onClick: function () {
                if (ASPx.TouchUIHelper.isMouseEventFromScrolling) {
                    window.setTimeout(function () { ASPx.TouchUIHelper.isMouseEventFromScrolling = false; }, 0);
                }
            }
        }
    };
    ASPx.TouchUIHelper.FastTapHelper = (function () {
        var actions = [];
        var DISTANCE_LIMIT = 10;
        var startX;
        var startY;
        var preventCommonClickEvents = false;
        var invokeActions = function (actions) {
            for (var i = 0; i < actions.length; i++)
                actions[i]();
        };
        var onTouchStart = function (e) {
            if (preventCommonClickEvents)
                e.stopPropagation();
            if (actions.length > 1)
                return;
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            if (ASPx.Browser.AndroidDefaultBrowser)
                e.currentTarget.addEventListener("click", onClick, false);
            else
                e.currentTarget.addEventListener("touchend", onTouchEnd, false);
        };
        if (ASPx.Browser.AndroidDefaultBrowser) {
            var onClick = function (e) {
                invokeActions(actions);
                actions = [];
                e.currentTarget.removeEventListener("click", onClick, false);
            };
        } else {
            var onTouchEnd = function (e) {
                if (preventCommonClickEvents) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                var stopX = e.changedTouches[0].clientX;
                var stopY = e.changedTouches[0].clientY;
                var distanceX = Math.abs(startX - stopX);
                var distanceY = Math.abs(startY - stopY);
                var allowClick = distanceX < DISTANCE_LIMIT && distanceY < DISTANCE_LIMIT;
                if (allowClick) {
                    var actionsToInvoke = actions;
                    setTimeout(function () { invokeActions(actionsToInvoke); }, 0);
                }
                actions = [];
                e.currentTarget.removeEventListener("touchend", onTouchEnd, false);
            };
        }
        return {
            HandleFastTap: function (e, tapAction, preventClickEvents) {
                if (e.touches.length > 1)
                    return;
                preventCommonClickEvents = preventClickEvents;
                actions.push(tapAction);
                onTouchStart(e);
            }
        };
    })();
    ASPx.TouchUIHelper.doubleTapEventName = "dxDoubleTap";
    ASPx.TouchUIHelper.allowDoubleTapProcessing = function (e) {
        var DOUBLE_TAP_DELAY = 600;
        var DISTANCE_LIMIT = 10;
        var currentTapTime = e.timeStamp;
        var currentX = e.changedTouches[0].clientX;
        var currentY = e.changedTouches[0].clientY;
        var lastTapTime = this["lastTap"] || currentTapTime;
        var lastX = this["lastX"] || currentX;
        var lastY = this["lastY"] || currentY;
        this["lastTap"] = currentTapTime;
        this["lastX"] = currentX;
        this["lastY"] = currentY;
        var delay = currentTapTime - lastTapTime;
        return delay && delay <= DOUBLE_TAP_DELAY && e.touches.length === 1 &&
            Math.abs(currentX - lastX) <= DISTANCE_LIMIT &&
            Math.abs(currentY - lastY) <= DISTANCE_LIMIT;
    };
    ASPx.TouchUIHelper.AttachDoubleTapEventToElement = function (element, action) {
        var onTouchEnd = function (e) {
            e.currentTarget.removeEventListener("touchend", onTouchEnd, false);
            e[ASPx.TouchUIHelper.doubleTapEventName] = true;
            var startActionAfterFastTap = function () {
                window.setTimeout(function () { action(e); }, 0);
            };
            startActionAfterFastTap();
        };
        var onTouchStart = function (e) {
            if (ASPx.TouchUIHelper.allowDoubleTapProcessing(e)) {
                var preventZoom = function () { e.preventDefault(); };
                preventZoom();
                e.currentTarget.addEventListener("touchend", onTouchEnd, false);
            }
        };
        element.addEventListener("touchstart", onTouchStart, false);
    };
    window.ASPxClientTouchUI = {};
    window.ASPxClientTouchUI.MakeScrollable = ASPx.TouchUIHelper.MakeScrollable;
    window.ASPxClientTouchUI.ScrollExtender = ASPx.TouchUIHelper.ScrollExtender;
})();
(function () {
    var RelatedControlManager = {
        storage: {},
        GetRelatedCollection: function (masterName) {
            if (!this.storage[masterName])
                this.storage[masterName] = [];
            return this.storage[masterName];
        },
        RegisterRelatedControl: function (masterName, name) {
            this.GetRelatedCollection(masterName)[name] = name;
        },
        RegisterRelatedControls: function (masterName, names) {
            var relatedCollection = this.GetRelatedCollection(masterName);
            var name;
            for (var i = 0; i < names.length; i++) {
                name = names[i];
                relatedCollection[name] = name;
            }
        },
        GetLinkedControls: function (masterControl) {
            var result = [masterControl];
            var collection = this.GetRelatedCollection(masterControl.name);
            for (var name in collection) {
                if (collection.hasOwnProperty(name)) {
                    var control = ASPx.GetControlCollection().Get(name);
                    if (control)
                        result.push(control);
                }
            }
            return result;
        },
        coverCache: {},
        panelCache: {},
        timers: {},
        Shade: function (masterControl) {
            this.ShadeCore(masterControl, true);
            this.timers[masterControl.name] = window.setTimeout(function () { ASPx.RelatedControlManager.ShadeTransition(masterControl.name); }, 750);
        },
        ShadeCore: function (masterControl, isTransparent) {
            if (!isTransparent) {
                this.panelCache[masterControl.name] = masterControl.ShowLoadingPanel();
            }
            var controls = this.GetLinkedControls(masterControl);
            for (var i = 0; i < controls.length; i++) {
                var control = controls[i];
                var cover = control.CreateLoadingDiv(document.body, control.GetMainElement());
                if (ASPx.IsExistsElement(cover)) {
                    if (isTransparent) {
                        cover.className = "";
                        cover.style.background = "white";
                        if (ASPx.Browser.IE)
                            cover.style.filter = "alpha(opacity=1)";
                        else
                            cover.style.opacity = "0.01";
                    }
                    this.coverCache[control.name] = cover;
                }
            }
        },
        ShadeTransition: function (masterName) {
            var obj = ASPx.GetControlCollection().Get(masterName);
            if (obj) {
                this.Unshade(obj);
                this.ShadeCore(obj, false);
            }
        },
        Unshade: function (masterControl) {
            var masterName = masterControl.name;
            ASPx.Timer.ClearTimer(this.timers[masterName]);
            delete this.timers[masterName];
            var panel = this.panelCache[masterName];
            if (ASPx.IsExistsElement(panel))
                ASPx.RemoveElement(panel);
            delete this.panelCache[masterName];
            var controls = this.GetLinkedControls(masterControl);
            for (var i = 0; i < controls.length; i++) {
                var control = controls[i];
                var cover = this.coverCache[control.name];
                if (ASPx.IsExistsElement(cover))
                    ASPx.RemoveElement(cover);
                delete this.coverCache[control.name];
            }
        },
        CreateInfo: function () {
            return {
                clientObjectName: "",
                elementId: "",
                innerHtml: "",
                parameters: ""
            };
        },
        ProcessInfo: function (info) {
            var control = ASPx.GetControlCollection().Get(info.clientObjectName);
            if (!control || !ASPx.IsFunction(control.ProcessCallbackResult))
                this.ProcessCallbackResultDefault(info.elementId, info.innerHtml, info.parameters);
            else
                control.ProcessCallbackResult(info.elementId, info.innerHtml, info.parameters);
        },
        ProcessCallbackResultDefault: function (elementId, innerHtml, parameters) {
            var element = ASPx.GetElementById(elementId);
            if (ASPx.IsExistsElement(element))
                element.innerHTML = innerHtml;
        },
        ParseResult: function (result) {
            var prevIndex = 0;
            var index;
            var lens;
            var info;
            while (true) {
                var remm = result.substring(prevIndex);
                index = result.indexOf("|", prevIndex);
                if (index < 0)
                    break;
                lens = result.substring(prevIndex, index).split(",");
                prevIndex = index + 1;
                info = this.CreateInfo();
                info.clientObjectName = result.substr(prevIndex, lens[0]);
                prevIndex += parseInt(lens[0]);
                info.elementId = result.substr(prevIndex, lens[1]);
                prevIndex += parseInt(lens[1]);
                info.innerHtml = result.substr(prevIndex, lens[2]);
                prevIndex += parseInt(lens[2]);
                info.parameters = result.substr(prevIndex, lens[3]);
                prevIndex += parseInt(lens[3]);
                this.ProcessInfo(info);
            }
        }
    };
    ASPx.RelatedControlManager = RelatedControlManager;
})();
(function () {
    var ASPxClientEditBase = ASPx.CreateClass(ASPxClientControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.EnabledChanged = new ASPxClientEvent();
            this.captionPosition = ASPx.Position.Left;
            this.showCaptionColon = true;
        },
        InlineInitialize: function () {
            ASPxClientControl.prototype.InlineInitialize.call(this);
            this.InitializeEnabled();
        },
        InitializeEnabled: function () {
            this.SetEnabledInternal(this.clientEnabled, true);
        },
        GetValue: function () {
            var element = this.GetMainElement();
            if (ASPx.IsExistsElement(element))
                return element.innerHTML;
            return "";
        },
        GetValueString: function () {
            var value = this.GetValue();
            return (value == null) ? null : value.toString();
        },
        SetValue: function (value) {
            if (value == null)
                value = "";
            var element = this.GetMainElement();
            if (ASPx.IsExistsElement(element))
                element.innerHTML = value;
        },
        GetEnabled: function () {
            return this.enabled && this.clientEnabled;
        },
        SetEnabled: function (enabled) {
            if (this.clientEnabled != enabled) {
                var errorFrameRequiresUpdate = this.GetIsValid && !this.GetIsValid();
                if (errorFrameRequiresUpdate && !enabled)
                    this.UpdateErrorFrameAndFocus(false, null, true);
                this.clientEnabled = enabled;
                this.SetEnabledInternal(enabled, false);
                if (errorFrameRequiresUpdate && enabled)
                    this.UpdateErrorFrameAndFocus(false);
                this.RaiseEnabledChangedEvent();
            }
        },
        SetEnabledInternal: function (enabled, initialization) {
            if (!this.enabled) return;
            if (!initialization || !enabled)
                this.ChangeEnabledStateItems(enabled);
            this.ChangeEnabledAttributes(enabled);
            if (ASPx.Browser.Chrome) {
                var mainElement = this.GetMainElement();
                if (mainElement)
                    mainElement.className = mainElement.className;
            }
        },
        ChangeEnabledAttributes: function (enabled) {
        },
        ChangeEnabledStateItems: function (enabled) {
        },
        RaiseEnabledChangedEvent: function () {
            if (!this.EnabledChanged.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.EnabledChanged.FireEvent(this, args);
            }
        },
        GetDecodeValue: function (value) {
            if (typeof (value) == "string" && value.length > 1)
                value = this.SimpleDecodeHtml(value);
            return value;
        },
        SimpleDecodeHtml: function (html) {
            return ASPx.Str.ApplyReplacement(html, [
                [/&lt;/g, '<'],
                [/&amp;/g, '&'],
                [/&quot;/g, '"'],
                [/&#39;/g, '\''],
                [/&#32;/g, ' ']
            ]);
        },
        GetCachedElementById: function (idSuffix) {
            return ASPx.CacheHelper.GetCachedElementById(this, this.name + idSuffix);
        },
        GetCaptionCell: function () {
            return this.GetCachedElementById(EditElementSuffix.CaptionCell);
        },
        GetExternalTable: function () {
            return this.GetCachedElementById(EditElementSuffix.ExternalTable);
        },
        getCaptionRelatedCellCount: function () {
            if (!this.captionRelatedCellCount)
                this.captionRelatedCellCount = ASPx.GetNodesByClassName(this.GetExternalTable(), CaptionRelatedCellClassName).length;
            return this.captionRelatedCellCount;
        },
        addCssClassToCaptionRelatedCells: function () {
            if (this.captionPosition == ASPx.Position.Left || this.captionPosition == ASPx.Position.Right) {
                var captionRelatedCellsIndex = this.captionPosition == ASPx.Position.Left ? 0 : this.GetCaptionCell().cellIndex;
                for (var i = 0; i < this.GetExternalTable().rows.length; i++)
                    ASPx.AddClassNameToElement(this.GetExternalTable().rows[i].cells[captionRelatedCellsIndex], CaptionRelatedCellClassName);
            }
            if (this.captionPosition == ASPx.Position.Top || this.captionPosition == ASPx.Position.Bottom)
                for (var i = 0; i < this.GetCaptionCell().parentNode.cells.length; i++)
                    ASPx.AddClassNameToElement(this.GetCaptionCell().parentNode.cells[i], CaptionRelatedCellClassName);
        },
        GetCaption: function () {
            if (ASPx.IsExists(this.GetCaptionCell()))
                return this.getCaptionInternal();
            return "";
        },
        SetCaption: function (caption) {
            if (!ASPx.IsExists(this.GetCaptionCell()))
                return;
            if (this.getCaptionRelatedCellCount() == 0)
                this.addCssClassToCaptionRelatedCells();
            if (caption !== "")
                ASPx.RemoveClassNameFromElement(this.GetExternalTable(), ASPxEditExternalTableClassNames.TableWithEmptyCaptionClassName);
            else
                ASPx.AddClassNameToElement(this.GetExternalTable(), ASPxEditExternalTableClassNames.TableWithEmptyCaptionClassName);
            this.setCaptionInternal(caption);
        },
        getCaptionTextNode: function () {
            var captionElement = ASPx.GetNodesByPartialClassName(this.GetCaptionCell(), CaptionElementPartialClassName)[0];
            return ASPx.GetNormalizedTextNode(captionElement);
        },
        getCaptionInternal: function () {
            var captionText = this.getCaptionTextNode().nodeValue;
            if (captionText !== "" && captionText[captionText.length - 1] == ":")
                captionText = captionText.substring(0, captionText.length - 1);
            return captionText;
        },
        setCaptionInternal: function (caption) {
            caption = ASPx.Str.Trim(caption);
            var captionTextNode = this.getCaptionTextNode();
            if (this.showCaptionColon && caption[caption.length - 1] != ":" && caption !== "")
                caption += ":";
            captionTextNode.nodeValue = caption;
        }
    });
    var ValidationPattern = ASPx.CreateClass(null, {
        constructor: function (errorText) {
            this.errorText = errorText;
        }
    });
    var RequiredFieldValidationPattern = ASPx.CreateClass(ValidationPattern, {
        constructor: function (errorText) {
            this.constructor.prototype.constructor.call(this, errorText);
        },
        EvaluateIsValid: function (value) {
            return value != null && (value.constructor == Array || ASPx.Str.Trim(value.toString()) != "");
        }
    });
    var RegularExpressionValidationPattern = ASPx.CreateClass(ValidationPattern, {
        constructor: function (errorText, pattern) {
            this.constructor.prototype.constructor.call(this, errorText);
            this.pattern = pattern;
        },
        EvaluateIsValid: function (value) {
            if (value == null)
                return true;
            var strValue = value.toString();
            if (ASPx.Str.Trim(strValue).length == 0)
                return true;
            var regEx = new RegExp(this.pattern);
            var matches = regEx.exec(strValue);
            return matches != null && strValue == matches[0];
        }
    });
    function _aspxIsEditorFocusable(inputElement) {
        return ASPx.IsFocusableCore(inputElement, function (container) {
            return container.getAttribute("errorFrame") == "errorFrame";
        });
    }
    var invalidEditorToBeFocused = null;
    var ValidationType = {
        PersonalOnValueChanged: "ValueChanged",
        PersonalViaScript: "CalledViaScript",
        MassValidation: "MassValidation"
    };
    var ErrorFrameDisplay = {
        None: "None",
        Static: "Static",
        Dynamic: "Dynamic"
    };
    var EditElementSuffix = {
        ExternalTable: "_ET",
        ControlCell: "_CC",
        ErrorCell: "_EC",
        ErrorTextCell: "_ETC",
        ErrorImage: "_EI",
        CaptionCell: "_CapC",
        AccessibilityAdditionalTextRow: "_AHTR"
    };
    var ASPxEditExternalTableClassNames = {
        ValidStaticTableClassName: "dxeValidStEditorTable",
        ValidDynamicTableClassName: "dxeValidDynEditorTable",
        TableWithSeparateBordersClassName: "tableWithSeparateBorders",
        TableWithEmptyCaptionClassName: "tableWithEmptyCaption"
    };
    var CaptionRelatedCellClassName = "dxeCaptionRelatedCell";
    var CaptionElementPartialClassName = "dxeCaption";
    var AccessibilityAssistantID = "AcAs";
    var ASPxClientEdit = ASPx.CreateClass(ASPxClientEditBase, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientEdit = true;
            this.inputElement = null;
            this.convertEmptyStringToNull = true;
            this.readOnly = false;
            this.focused = false;
            this.focusEventsLocked = false;
            this.receiveGlobalMouseWheel = true;
            this.styleDecoration = null;
            this.heightCorrectionRequired = false;
            this.customValidationEnabled = false;
            this.display = ErrorFrameDisplay.Static;
            this.initialErrorText = "";
            this.causesValidation = false;
            this.validateOnLeave = true;
            this.validationGroup = "";
            this.sendPostBackWithValidation = null;
            this.validationPatterns = [];
            this.setFocusOnError = false;
            this.errorDisplayMode = "it";
            this.errorText = "";
            this.isValid = true;
            this.errorImageIsAssigned = false;
            this.notifyValidationSummariesToAcceptNewError = false;
            this.isErrorFrameRequired = false;
            this.enterProcessed = false;
            this.keyDownHandlers = {};
            this.keyPressHandlers = {};
            this.keyUpHandlers = {};
            this.specialKeyboardHandlingUsed = false;
            this.onKeyDownHandler = null;
            this.onKeyPressHandler = null;
            this.onKeyUpHandler = null;
            this.onGotFocusHandler = null;
            this.onLostFocusHandler = null;
            this.GotFocus = new ASPxClientEvent();
            this.LostFocus = new ASPxClientEvent();
            this.Validation = new ASPxClientEvent();
            this.ValueChanged = new ASPxClientEvent();
            this.KeyDown = new ASPxClientEvent();
            this.KeyPress = new ASPxClientEvent();
            this.KeyUp = new ASPxClientEvent();
            this.eventHandlersInitialized = false;
            this.ariaExplanatoryTextManager = null;
        },
        SetData: function (data) {
            if (data.decorationStyles) {
                for (var i = 0; i < data.decorationStyles.length; i++)
                    this.AddDecorationStyle(data.decorationStyles[i].key,
                        data.decorationStyles[i].className,
                        data.decorationStyles[i].cssText);
            }
        },
        Initialize: function () {
            this.initialErrorText = this.errorText;
            ASPxClientEditBase.prototype.Initialize.call(this);
            this.InitializeKeyHandlers();
            this.UpdateClientValidationState();
            this.UpdateValidationSummaries(null, true);
        },
        InlineInitialize: function () {
            ASPxClientEditBase.prototype.InlineInitialize.call(this);
            if (!this.eventHandlersInitialized)
                this.InitializeEvents();
            if (this.styleDecoration)
                this.styleDecoration.Update();
            var externalTable = this.GetExternalTable();
            if (externalTable && ASPx.IsPercentageSize(externalTable.style.width)) {
                this.width = "100%";
                this.GetMainElement().style.width = "100%";
                if (this.isErrorFrameRequired)
                    externalTable.setAttribute("errorFrame", "errorFrame");
            }
            this.ariaExplanatoryTextManager = this.CreateAriaExplanatoryTextManager();
        },
        AfterInitialize: function () {
            this.ariaExplanatoryTextManager.SetCaptionAssociating();
            this.ariaExplanatoryTextManager.UpdateText();
            this.ariaExplanatoryTextManager.UpdateValidationState();
            ASPxClientEditBase.prototype.AfterInitialize.call(this);
        },
        InitializeEvents: function () {
        },
        InitSpecialKeyboardHandling: function () {
            var name = this.name;
            this.onKeyDownHandler = function (evt) { ASPx.KBSIKeyDown(name, evt); };
            this.onKeyPressHandler = function (evt) { ASPx.KBSIKeyPress(name, evt); };
            this.onKeyUpHandler = function (evt) { ASPx.KBSIKeyUp(name, evt); };
            this.onGotFocusHandler = function (evt) { ASPx.ESGotFocus(name); };
            this.onLostFocusHandler = function (evt) { ASPx.ESLostFocus(name); };
            this.specialKeyboardHandlingUsed = true;
            this.InitializeDelayedSpecialFocus();
        },
        InitializeKeyHandlers: function () {
        },
        AddKeyDownHandler: function (key, handler) {
            this.keyDownHandlers[key] = handler;
        },
        AddKeyPressHandler: function (key, handler) {
            this.keyPressHandlers[key] = handler;
        },
        ChangeSpecialInputEnabledAttributes: function (element, method, doNotChangeAutoComplete) {
            if (!doNotChangeAutoComplete)
                element.autocomplete = "off";
            if (this.onKeyDownHandler != null)
                method(element, "keydown", this.onKeyDownHandler);
            if (this.onKeyPressHandler != null)
                method(element, "keypress", this.onKeyPressHandler);
            if (this.onKeyUpHandler != null)
                method(element, "keyup", this.onKeyUpHandler);
            if (this.onGotFocusHandler != null)
                method(element, "focus", this.onGotFocusHandler);
            if (this.onLostFocusHandler != null)
                method(element, "blur", this.onLostFocusHandler);
        },
        CreateAriaExplanatoryTextManager: function () {
            if (this.accessibilityCompliant)
                return new EditAccessibilityExplanatoryTextManager(this);
            else
                return new DisableAccessibilityExplanatoryTextManager(this);
        },
        UpdateClientValidationState: function () {
            if (!this.customValidationEnabled)
                return;
            var mainElement = this.GetMainElement();
            if (mainElement) {
                var validationState = !this.GetIsValid() ? ("-" + this.GetErrorText()) : "";
                this.UpdateStateObjectWithObject({ validationState: validationState });
            }
        },
        UpdateValidationSummaries: function (validationType, initializing) {
            if (ASPx.Ident.scripts.ASPxClientValidationSummary) {
                var summaryCollection = ASPx.GetClientValidationSummaryCollection();
                summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
            }
        },
        FindInputElement: function () {
            return null;
        },
        GetInputElement: function () {
            if (!ASPx.IsExistsElement(this.inputElement))
                this.inputElement = this.FindInputElement();
            return this.inputElement;
        },
        GetFocusableInputElement: function () {
            return this.GetInputElement();
        },
        GetAccessibilityActiveElements: function () {
            return [this.GetInputElement()];
        },
        GetAccessibilityFirstActiveElement: function () {
            return this.accessibilityHelper ?
                this.accessibilityHelper.getMainElement() :
                this.GetAccessibilityActiveElements()[0];
        },
        GetAccessibilityAssistantElement: function () {
            return this.GetChildElement(AccessibilityAssistantID);
        },
        GetErrorImage: function () {
            return this.GetCachedElementById(EditElementSuffix.ErrorImage);
        },
        GetControlCell: function () {
            return this.GetCachedElementById(EditElementSuffix.ControlCell);
        },
        GetErrorCell: function () {
            return this.GetCachedElementById(EditElementSuffix.ErrorCell);
        },
        GetErrorTextCell: function () {
            return this.GetCachedElementById(this.errorImageIsAssigned ? EditElementSuffix.ErrorTextCell : EditElementSuffix.ErrorCell);
        },
        SetVisible: function (isVisible) {
            if (this.clientVisible == isVisible)
                return;
            var externalTable = this.GetExternalTable();
            if (externalTable) {
                ASPx.SetElementDisplay(externalTable, isVisible);
                if (this.customValidationEnabled) {
                    var isValid = !isVisible ? true : void (0);
                    this.UpdateErrorFrameAndFocus(false, true, isValid);
                }
            }
            ASPxClientControl.prototype.SetVisible.call(this, isVisible);
        },
        GetStateHiddenFieldName: function () {
            return this.uniqueID + "$State";
        },
        GetValueInputToValidate: function () {
            return this.GetInputElement();
        },
        IsVisible: function () {
            if (!this.clientVisible)
                return false;
            var element = this.GetMainElement();
            if (!element)
                return false;
            while (element && element.tagName != "BODY") {
                if (element.getAttribute("errorFrame") != "errorFrame" && (!ASPx.GetElementVisibility(element) || !ASPx.GetElementDisplay(element)))
                    return false;
                element = element.parentNode;
            }
            return true;
        },
        AdjustControlCore: function () {
            this.CollapseEditor();
            this.UnstretchInputElement();
            if (this.heightCorrectionRequired)
                this.CorrectEditorHeight();
        },
        CorrectEditorHeight: function () {
        },
        UnstretchInputElement: function () {
        },
        UseDelayedSpecialFocus: function () {
            return false;
        },
        GetDelayedSpecialFocusTriggers: function () {
            return [this.GetMainElement()];
        },
        InitializeDelayedSpecialFocus: function () {
            if (!this.UseDelayedSpecialFocus())
                return;
            this.specialFocusTimer = -1;
            var handler = function (evt) { this.OnDelayedSpecialFocusMouseDown(evt); }.aspxBind(this);
            var triggers = this.GetDelayedSpecialFocusTriggers();
            for (var i = 0; i < triggers.length; i++)
                ASPx.Evt.AttachEventToElement(triggers[i], "mousedown", handler);
        },
        OnDelayedSpecialFocusMouseDown: function (evt) {
            window.setTimeout(function () { this.SetFocus(); }.aspxBind(this), 0);
        },
        IsFocusEventsLocked: function () {
            return this.focusEventsLocked;
        },
        LockFocusEvents: function () {
            if (!this.focused) return;
            this.focusEventsLocked = true;
        },
        UnlockFocusEvents: function () {
            this.focusEventsLocked = false;
        },
        ForceRefocusEditor: function (evt, isNativeFocus) {
            if (ASPx.Browser.VirtualKeyboardSupported) {
                var focusedEditor = ASPx.VirtualKeyboardUI.getFocusedEditor();
                if (ASPx.VirtualKeyboardUI.getInputNativeFocusLocked() && (!focusedEditor || focusedEditor === this))
                    return;
                ASPx.VirtualKeyboardUI.setInputNativeFocusLocked(!isNativeFocus);
            }
            this.LockFocusEvents();
            this.BlurInputElement();
            window.setTimeout(function () {
                if (ASPx.Browser.VirtualKeyboardSupported) {
                    ASPx.VirtualKeyboardUI.setFocusEditorCore(this);
                } else {
                    this.SetFocus();
                }
            }.aspxBind(this), 0);
        },
        BlurInputElement: function () {
            var inputElement = this.GetFocusableInputElement();
            if (inputElement && inputElement.blur)
                inputElement.blur();
        },
        IsEditorElement: function (element) {
            return this.GetMainElement() == element || ASPx.GetIsParent(this.GetMainElement(), element);
        },
        IsClearButtonElement: function (element) {
            return false;
        },
        IsElementBelongToInputElement: function (element) {
            return this.GetInputElement() == element;
        },
        OnFocusCore: function () {
            if (this.UseDelayedSpecialFocus())
                window.clearTimeout(this.specialFocusTimer);
            if (!this.IsFocusEventsLocked()) {
                this.focused = true;
                ASPx.SetFocusedEditor(this);
                if (this.styleDecoration)
                    this.styleDecoration.Update();
                if (this.isInitialized)
                    this.RaiseFocus();
            }
            else
                this.UnlockFocusEvents();
        },
        OnLostFocusCore: function () {
            if (!this.IsFocusEventsLocked()) {
                this.focused = false;
                if (ASPx.GetFocusedEditor() === this)
                    ASPx.SetFocusedEditor(null);
                if (this.styleDecoration)
                    this.styleDecoration.Update();
                this.RaiseLostFocus();
            }
        },
        OnFocus: function () {
            if (!this.specialKeyboardHandlingUsed)
                this.OnFocusCore();
        },
        OnLostFocus: function () {
            if (this.isInitialized && !this.specialKeyboardHandlingUsed)
                this.OnLostFocusCore();
        },
        OnSpecialFocus: function () {
            if (this.isInitialized)
                this.OnFocusCore();
        },
        OnSpecialLostFocus: function () {
            if (this.isInitialized)
                this.OnLostFocusCore();
        },
        OnMouseWheel: function (evt) {
        },
        OnValidation: function (validationType) {
            if (this.customValidationEnabled && this.isInitialized && ASPx.IsExistsElement(this.GetMainElement()) &&
                (!this.IsErrorFrameDisplayed() || this.GetElementRequiredForErrorFrame())) {
                this.BeginErrorFrameUpdate();
                try {
                    if (this.validateOnLeave || validationType != ValidationType.PersonalOnValueChanged) {
                        this.SetIsValid(true, true);
                        this.SetErrorText(this.initialErrorText, true);
                        this.ValidateWithPatterns();
                        this.RaiseValidation();
                    }
                    this.UpdateErrorFrameAndFocus(this.editorFocusingRequired(validationType));
                } finally {
                    this.EndErrorFrameUpdate();
                }
                this.UpdateValidationSummaries(validationType);
                this.ariaExplanatoryTextManager.UpdateValidationState(validationType);
            }
        },
        GetElementRequiredForErrorFrame: function () {
            return this.GetExternalTable();
        },
        editorFocusingRequired: function (validationType) {
            return !this.GetIsValid() && ((validationType == ValidationType.PersonalOnValueChanged && this.validateOnLeave) ||
                (validationType == ValidationType.PersonalViaScript && this.setFocusOnError));
        },
        OnValueChanged: function () {
            var processOnServer = this.RaiseValidationInternal();
            processOnServer = this.RaiseValueChangedEvent() && processOnServer;
            if (processOnServer)
                this.SendPostBackInternal("");
        },
        ParseValue: function () {
        },
        RaisePersonalStandardValidation: function () {
            if (ASPx.IsFunction(window.ValidatorOnChange)) {
                var inputElement = this.GetValueInputToValidate();
                if (inputElement && inputElement.Validators)
                    window.ValidatorOnChange({ srcElement: inputElement });
            }
        },
        RaiseValidationInternal: function () {
            if (this.isPostBackAllowed() && this.causesValidation && this.validateOnLeave)
                return ASPxClientEdit.ValidateGroup(this.validationGroup);
            else {
                this.OnValidation(ValidationType.PersonalOnValueChanged);
                return this.GetIsValid();
            }
        },
        RaiseValueChangedEvent: function () {
            return this.RaiseValueChanged();
        },
        SendPostBackInternal: function (postBackArg) {
            if (ASPx.IsFunction(this.sendPostBackWithValidation))
                this.sendPostBackWithValidation(postBackArg);
            else
                this.SendPostBack(postBackArg);
        },
        SetElementToBeFocused: function () {
            if (this.IsVisible())
                invalidEditorToBeFocused = this;
        },
        GetFocusSelectAction: function () {
            return null;
        },
        SetFocus: function () {
            var inputElement = this.GetFocusableInputElement();
            if (!inputElement) return;
            var isIE9 = ASPx.Browser.IE && ASPx.Browser.Version >= 9;
            if ((ASPx.GetActiveElement() != inputElement || isIE9) && _aspxIsEditorFocusable(inputElement))
                ASPx.SetFocus(inputElement, this.GetFocusSelectAction());
        },
        SetFocusOnError: function () {
            if (invalidEditorToBeFocused == this) {
                this.SetFocus();
                invalidEditorToBeFocused = null;
            }
        },
        BeginErrorFrameUpdate: function () {
            if (!this.errorFrameUpdateLocked)
                this.errorFrameUpdateLocked = true;
        },
        EndErrorFrameUpdate: function () {
            this.errorFrameUpdateLocked = false;
            var args = this.updateErrorFrameAndFocusLastCallArgs;
            if (args) {
                this.UpdateErrorFrameAndFocus(args[0], args[1]);
                delete this.updateErrorFrameAndFocusLastCallArgs;
            }
        },
        UpdateErrorFrameAndFocus: function (setFocusOnError, ignoreVisibilityCheck, isValid) {
            if (!this.GetEnabled() || !ignoreVisibilityCheck && !this.GetVisible())
                return;
            if (this.errorFrameUpdateLocked) {
                this.updateErrorFrameAndFocusLastCallArgs = [setFocusOnError, ignoreVisibilityCheck];
                return;
            }
            if (this.styleDecoration)
                this.styleDecoration.Update();
            if (typeof (isValid) == "undefined")
                isValid = this.GetIsValid();
            var externalTable = this.GetExternalTable();
            var isStaticDisplay = this.display == ErrorFrameDisplay.Static;
            if (isValid && this.IsErrorFrameDisplayed()) {
                if (isStaticDisplay) {
                    this.HideErrorCell(true);
                    ASPx.AddClassNameToElement(externalTable, ASPxEditExternalTableClassNames.ValidStaticTableClassName);
                } else {
                    this.HideErrorCell();
                    this.SaveControlCellStyles();
                    this.ClearControlCellStyles();
                    ASPx.AddClassNameToElement(externalTable, ASPxEditExternalTableClassNames.ValidDynamicTableClassName);
                }
            } else {
                var editorLocatedWithinVisibleContainer = this.IsVisible();
                if (this.IsErrorFrameDisplayed()) {
                    this.UpdateErrorCellContent();
                    if (isStaticDisplay) {
                        this.ShowErrorCell(true);
                        ASPx.RemoveClassNameFromElement(externalTable, ASPxEditExternalTableClassNames.ValidStaticTableClassName);
                    } else {
                        this.EnsureControlCellStylesLoaded();
                        this.RestoreControlCellStyles();
                        this.ShowErrorCell();
                        ASPx.RemoveClassNameFromElement(externalTable, ASPxEditExternalTableClassNames.ValidDynamicTableClassName);
                    }
                }
                if (editorLocatedWithinVisibleContainer) {
                    if (setFocusOnError && this.setFocusOnError && invalidEditorToBeFocused == null) {
                        this.SetElementToBeFocused();
                        this.SetFocusOnError();
                    }
                }
            }
        },
        ShowErrorCell: function (useVisibilityAttribute) {
            var errorCell = this.GetErrorCell();
            if (errorCell) {
                if (useVisibilityAttribute)
                    ASPx.SetElementVisibility(errorCell, true);
                else
                    ASPx.SetElementDisplay(errorCell, true);
            }
        },
        HideErrorCell: function (useVisibilityAttribute) {
            var errorCell = this.GetErrorCell();
            if (errorCell) {
                if (useVisibilityAttribute)
                    ASPx.SetElementVisibility(errorCell, false);
                else
                    ASPx.SetElementDisplay(errorCell, false);
            }
        },
        SaveControlCellStyles: function () {
            this.EnsureControlCellStylesLoaded();
        },
        EnsureControlCellStylesLoaded: function () {
            if (typeof (this.controlCellStyles) == "undefined") {
                var controlCell = this.GetControlCell();
                this.controlCellStyles = {
                    cssClass: controlCell.className,
                    style: this.ExtractElementStyleStringIgnoringVisibilityProps(controlCell)
                };
            }
        },
        ClearControlCellStyles: function () {
            this.ClearElementStyle(this.GetControlCell());
        },
        RestoreControlCellStyles: function () {
            var controlCell = this.GetControlCell();
            var externalTable = this.GetExternalTable();
            if (ASPx.Browser.WebKitFamily)
                this.MakeBorderSeparateForTable(externalTable);
            controlCell.className = this.controlCellStyles.cssClass;
            controlCell.style.cssText = this.controlCellStyles.style;
            if (ASPx.Browser.WebKitFamily)
                this.UndoBorderSeparateForTable(externalTable);
        },
        MakeBorderSeparateForTable: function (table) {
            ASPx.AddClassNameToElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
        },
        UndoBorderSeparateForTable: function (table) {
            setTimeout(function () {
                ASPx.RemoveClassNameFromElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
            }, 0);
        },
        ExtractElementStyleStringIgnoringVisibilityProps: function (element) {
            var savedVisibility = element.style.visibility;
            var savedDisplay = element.style.display;
            element.style.visibility = "";
            element.style.display = "";
            var styleStr = element.style.cssText;
            element.style.visibility = savedVisibility;
            element.style.display = savedDisplay;
            return styleStr;
        },
        ClearElementStyle: function (element) {
            if (!element)
                return;
            element.className = "";
            var excludedAttrNames = [
                "width", "display", "visibility",
                "position", "left", "top", "z-index",
                "margin", "margin-top", "margin-right", "margin-bottom", "margin-left",
                "float", "clear"
            ];
            var savedAttrValues = {};
            for (var i = 0; i < excludedAttrNames.length; i++) {
                var attrName = excludedAttrNames[i];
                var attrValue = element.style[attrName];
                if (attrValue)
                    savedAttrValues[attrName] = attrValue;
            }
            element.style.cssText = "";
            for (var styleAttrName in savedAttrValues)
                if (savedAttrValues.hasOwnProperty(styleAttrName))
                    element.style[styleAttrName] = savedAttrValues[styleAttrName];
        },
        Clear: function () {
            this.SetValue(null);
            this.SetIsValid(true);
            return true;
        },
        UpdateErrorCellContent: function () {
            if (this.errorDisplayMode.indexOf("t") > -1)
                this.UpdateErrorText();
            if (this.errorDisplayMode == "i")
                this.UpdateErrorImage();
        },
        UpdateErrorImage: function () {
            var image = this.GetErrorImage();
            if (ASPx.IsExistsElement(image)) {
                if (this.accessibilityCompliant) {
                    ASPx.Attr.SetAttribute(image, "aria-label", this.errorText);
                    var innerImg = ASPx.GetNodeByTagName(image, "IMG", 0);
                    if (ASPx.IsExists(innerImg))
                        innerImg.alt = this.errorText;
                }
                image.alt = this.errorText;
                image.title = this.errorText;
            } else {
                this.UpdateErrorText();
            }
        },
        UpdateErrorText: function () {
            var errorTextCell = this.GetErrorTextCell();
            if (ASPx.IsExistsElement(errorTextCell))
                errorTextCell.innerHTML = this.HtmlEncode(this.errorText);
        },
        ValidateWithPatterns: function () {
            if (this.validationPatterns.length > 0) {
                var value = this.GetValue();
                for (var i = 0; i < this.validationPatterns.length; i++) {
                    var validator = this.validationPatterns[i];
                    if (!validator.EvaluateIsValid(value)) {
                        this.SetIsValid(false, true);
                        this.SetErrorText(validator.errorText, true);
                        return;
                    }
                }
            }
        },
        OnSpecialKeyDown: function (evt) {
            this.RaiseKeyDown(evt);
            var handler = this.keyDownHandlers[evt.keyCode];
            if (handler)
                return this[handler](evt);
            return false;
        },
        OnSpecialKeyPress: function (evt) {
            this.RaiseKeyPress(evt);
            var handler = this.keyPressHandlers[evt.keyCode];
            if (handler)
                return this[handler](evt);
            if (ASPx.Browser.NetscapeFamily || ASPx.Browser.Opera) {
                if (evt.keyCode == ASPx.Key.Enter)
                    return this.enterProcessed;
            }
            return false;
        },
        OnSpecialKeyUp: function (evt) {
            this.RaiseKeyUp(evt);
            var handler = this.keyUpHandlers[evt.keyCode];
            if (handler)
                return this[handler](evt);
            return false;
        },
        OnKeyDown: function (evt) {
            if (!this.specialKeyboardHandlingUsed)
                this.RaiseKeyDown(evt);
        },
        OnKeyPress: function (evt) {
            if (!this.specialKeyboardHandlingUsed)
                this.RaiseKeyPress(evt);
        },
        OnKeyUp: function (evt) {
            if (!this.specialKeyboardHandlingUsed)
                this.RaiseKeyUp(evt);
        },
        RaiseKeyDown: function (evt) {
            if (!this.KeyDown.IsEmpty()) {
                var args = new ASPxClientEditKeyEventArgs(evt);
                this.KeyDown.FireEvent(this, args);
            }
        },
        RaiseKeyPress: function (evt) {
            if (!this.KeyPress.IsEmpty()) {
                var args = new ASPxClientEditKeyEventArgs(evt);
                this.KeyPress.FireEvent(this, args);
            }
        },
        RaiseKeyUp: function (evt) {
            if (!this.KeyUp.IsEmpty()) {
                var args = new ASPxClientEditKeyEventArgs(evt);
                this.KeyUp.FireEvent(this, args);
            }
        },
        RaiseFocus: function () {
            if (!this.GotFocus.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.GotFocus.FireEvent(this, args);
            }
        },
        RaiseLostFocus: function () {
            if (!this.LostFocus.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.LostFocus.FireEvent(this, args);
            }
        },
        RaiseValidation: function () {
            if (this.customValidationEnabled && !this.Validation.IsEmpty()) {
                var currentValue = this.GetValue();
                var args = new ASPxClientEditValidationEventArgs(currentValue, this.errorText, this.GetIsValid());
                this.Validation.FireEvent(this, args);
                this.SetErrorText(args.errorText, true);
                this.SetIsValid(args.isValid, true);
                if (args.value != currentValue)
                    this.SetValue(args.value);
            }
        },
        RaiseValueChanged: function () {
            var processOnServer = this.isPostBackAllowed();
            if (!this.ValueChanged.IsEmpty()) {
                var args = new ASPxClientProcessingModeEventArgs(processOnServer);
                this.ValueChanged.FireEvent(this, args);
                processOnServer = args.processOnServer;
            }
            return processOnServer;
        },
        isPostBackAllowed: function () {
            return this.autoPostBack;
        },
        AddDecorationStyle: function (key, className, cssText) {
            if (!this.styleDecoration)
                this.RequireStyleDecoration();
            this.styleDecoration.AddStyle(key, className, cssText);
        },
        RequireStyleDecoration: function () {
            this.styleDecoration = this.CreateStyleDecoration();
            this.PopulateStyleDecorationPostfixes();
        },
        CreateStyleDecoration: function () {
            return new ASPx.EditorStyleDecoration(this);
        },
        PopulateStyleDecorationPostfixes: function () {
            this.styleDecoration.AddPostfix("");
        },
        LockStyleDecorationUpdate: function () {
            if (this.styleDecoration)
                this.styleDecoration.LockUpdate();
        },
        UnlockStyleDecorationUpdate: function () {
            if (this.styleDecoration)
                this.styleDecoration.UnlockUpdate();
        },
        Focus: function () {
            this.SetFocus();
        },
        GetIsValid: function () {
            var hasRequiredInputElement = !this.RequireInputElementToValidate() || ASPx.IsExistsElement(this.GetInputElement());
            if (!hasRequiredInputElement || this.IsErrorFrameDisplayed() && !ASPx.IsExistsElement(this.GetElementRequiredForErrorFrame()))
                return true;
            return this.isValid;
        },
        RequireInputElementToValidate: function () {
            return true;
        },
        IsErrorFrameDisplayed: function () {
            return this.display !== ErrorFrameDisplay.None;
        },
        GetErrorText: function () {
            return this.errorText;
        },
        SetIsValid: function (isValid, validating) {
            if (this.customValidationEnabled && this.isValid != isValid) {
                this.isValid = isValid;
                this.UpdateErrorFrameAndFocus(false);
                this.UpdateClientValidationState();
                if (!validating)
                    this.UpdateValidationSummaries(ValidationType.PersonalViaScript);
            }
        },
        SetErrorText: function (errorText, validating) {
            if (this.customValidationEnabled && this.errorText != errorText) {
                this.errorText = errorText;
                this.UpdateErrorFrameAndFocus(false);
                this.UpdateClientValidationState();
                if (!validating)
                    this.UpdateValidationSummaries(ValidationType.PersonalViaScript);
            }
        },
        Validate: function () {
            this.ParseValue();
            this.OnValidation(ValidationType.PersonalViaScript);
        }
    });
    ASPx.Ident.scripts.ASPxClientEdit = true;
    ASPx.focusedEditorName = "";
    ASPx.GetFocusedEditor = function () {
        var focusedEditor = ASPx.GetControlCollection().Get(ASPx.focusedEditorName);
        if (focusedEditor && !focusedEditor.focused) {
            ASPx.SetFocusedEditor(null);
            focusedEditor = null;
        }
        return focusedEditor;
    };
    ASPx.SetFocusedEditor = function (editor) {
        ASPx.focusedEditorName = editor ? editor.name : "";
    };
    ASPx.FindAssociatedLabelElements = function (editor) {
        var assocciatedLabels = [];
        var inputElement = editor.GetInputElement();
        if (!ASPx.IsExists(inputElement) || !inputElement.id)
            return assocciatedLabels;
        var labels = ASPx.GetNodesByTagName(document, "LABEL");
        for (var i = 0; i < labels.length; i++) {
            if (!!labels[i].htmlFor && labels[i].htmlFor === inputElement.id)
                assocciatedLabels.push(labels[i]);
        }
        return assocciatedLabels;
    };
    var DisableAccessibilityExplanatoryTextManager = ASPx.CreateClass(null, {
        constructor: function (editor) {
            this.editor = editor;
        },
        GetAdditionalTextRowId: function () {
            return this.editor.name + EditElementSuffix.AccessibilityAdditionalTextRow;
        },
        GetErrorTextElement: function () {
            return !!this.editor.GetErrorTextCell() ? this.editor.GetErrorTextCell() : this.editor.GetErrorImage();
        },
        GetTextElement: function () { return null; },
        SetCaptionAssociating: function () { },
        UpdateText: function () { },
        UpdateValidationState: function (validationType) { },
        ToggleErrorAlert: function () { },
        SetOrRemoveText: function (accessibilityElements, textElement, setText, isLabel, isFirst) { }
    });
    var EditAccessibilityExplanatoryTextManager = ASPx.CreateClass(DisableAccessibilityExplanatoryTextManager, {
        constructor: function (editor) {
            this.constructor.prototype.constructor.call(this, editor);
            this.invisibleRowCssClassName = "dxAIR";
        },
        GetTextElement: function () {
            var mainElement = this.editor.GetMainElement();
            if (!mainElement) return null;
            var explanatoryText = "";
            var explanatoryTextElement = null;
            if (!!this.editor.nullText)
                explanatoryText = this.editor.nullText;
            else if (!!this.editor.helpTextObj)
                explanatoryTextElement = this.editor.helpTextObj.helpTextElement;
            else if (!!mainElement.title)
                explanatoryText = mainElement.title;
            if (explanatoryText && mainElement.tagName == "TABLE") {
                var assistantElement = this.editor.GetAccessibilityFirstActiveElement();
                if (assistantElement)
                    ASPx.Attr.Aria.AppendLabel(assistantElement, explanatoryText, true);
            }
            return explanatoryTextElement;
        },
        SetCaptionAssociating: function () {
            var captionCell = this.editor.GetCaptionCell();
            if (!captionCell || captionCell.childNodes[0].tagName == "LABEL") return;
            var labelElement = captionCell.childNodes[0];
            ASPx.EditAccessibilityExplanatoryTextManager.SetLabelAssociating(this.editor, this.editor.GetAccessibilityFirstActiveElement(), labelElement);
        },
        UpdateText: function () {
            var additionalTextElement = this.GetTextElement();
            if (ASPx.IsExists(additionalTextElement)) {
                var pronounceElement = this.editor.GetAccessibilityFirstActiveElement();
                var hasAnyLabel = !!ASPx.Attr.GetAttribute(pronounceElement, "aria-label") ||
                    !!ASPx.Attr.GetAttribute(pronounceElement, "aria-labelledby") ||
                    ASPx.FindAssociatedLabelElements(this.editor).length > 0;
                this.SetOrRemoveText([pronounceElement], additionalTextElement, true, !hasAnyLabel, false);
            }
        },
        UpdateValidationState: function (validationType) {
            if (validationType == ValidationType.PersonalOnValueChanged && this.editor.accessibilityHelper) return;
            var accessibilityElements = this.editor.GetAccessibilityActiveElements();
            var errorTextElement = this.GetErrorTextElement();
            this.SetOrRemoveText(accessibilityElements, errorTextElement, !this.editor.isValid, false, true);
            if (accessibilityElements.length > 0 && !!errorTextElement) {
                for (var i = 0; i < accessibilityElements.length; i++) {
                    if (!ASPx.IsExists(accessibilityElements[i])) continue;
                    ASPx.Attr.SetOrRemoveAttribute(accessibilityElements[i], "aria-invalid", !this.editor.isValid);
                }
            }
        },
        ToggleErrorAlert: function () {
            var errorTextElement = this.GetErrorTextElement();
            ASPx.SetElementDisplay(errorTextElement, false);
            ASPx.Attr.SetAttribute(errorTextElement, 'role', 'alert');
            ASPx.SetElementDisplay(errorTextElement, true);
            setTimeout(function () { ASPx.Attr.RemoveAttribute(errorTextElement, 'role'); }, 500);
        },
        SetOrRemoveText: function (accessibilityElements, textElement, setText, isLabel, isFirst) {
            var idsRefAttribute = isLabel ? "aria-labelledby" : "aria-describedby";
            if (!textElement) return;
            var textId = !!textElement.id ? textElement.id : textElement.parentNode.id;
            for (var i = 0; i < accessibilityElements.length; i++) {
                if (!accessibilityElements[i]) continue;
                var descRefString = ASPx.Attr.GetAttribute(accessibilityElements[i], idsRefAttribute);
                var descRefIds = !!descRefString ? descRefString.split(" ") : [];
                var descIndex = descRefIds.indexOf(textId);
                if (setText && descIndex == -1) {
                    if (isFirst)
                        descRefIds.unshift(textId);
                    else
                        descRefIds.push(textId);
                }
                else if (!setText && descIndex > -1)
                    descRefIds.splice(descIndex, 1);
                ASPx.Attr.SetOrRemoveAttribute(accessibilityElements[i], idsRefAttribute, descRefIds.join(" "));
            }
        }
    });
    ASPx.DisableAccessibilityExplanatoryTextManager = DisableAccessibilityExplanatoryTextManager;
    ASPx.EditAccessibilityExplanatoryTextManager = EditAccessibilityExplanatoryTextManager;
    ASPx.EditAccessibilityExplanatoryTextManager.SetLabelAssociating = function (editor, activeElement, labelElement) {
        var clickHandler = function (evt) {
            if (editor && editor.OnAssociatedLabelClick)
                editor.OnAssociatedLabelClick(evt);
            else
                activeElement.click();
        };
        ASPx.Evt.AttachEventToElement(labelElement, "click", clickHandler);
        if (!!editor) {
            var hasAriaLabel = !!ASPx.Attr.GetAttribute(activeElement, "aria-label");
            editor.ariaExplanatoryTextManager.SetOrRemoveText([activeElement], labelElement, true, !hasAriaLabel, true);
        }
    };
    ASPxClientEdit.ClearEditorsInContainer = function (container, validationGroup, clearInvisibleEditors) {
        invalidEditorToBeFocused = null;
        ASPx.ProcessEditorsInContainer(container, ASPx.ClearProcessingProc, ASPx.ClearChoiceCondition, validationGroup, clearInvisibleEditors, true);
        ASPxClientEdit.ClearExternalControlsInContainer(container, validationGroup, clearInvisibleEditors);
    };
    ASPxClientEdit.ClearEditorsInContainerById = function (containerId, validationGroup, clearInvisibleEditors) {
        var container = document.getElementById(containerId);
        this.ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
    };
    ASPxClientEdit.ClearGroup = function (validationGroup, clearInvisibleEditors) {
        return this.ClearEditorsInContainer(null, validationGroup, clearInvisibleEditors);
    };
    ASPxClientEdit.ValidateEditorsInContainer = function (container, validationGroup, validateInvisibleEditors) {
        var summaryCollection;
        if (ASPx.Ident.scripts.ASPxClientValidationSummary) {
            summaryCollection = ASPx.GetClientValidationSummaryCollection();
            summaryCollection.AllowNewErrorsAccepting(validationGroup);
        }
        var validationResult = ASPx.ProcessEditorsInContainer(container, ASPx.ValidateProcessingProc, _aspxValidateChoiceCondition, validationGroup, validateInvisibleEditors,
            false);
        validationResult.isValid = ASPxClientEdit.ValidateExternalControlsInContainer(container, validationGroup, validateInvisibleEditors) && validationResult.isValid;
        if (typeof (validateInvisibleEditors) == "undefined")
            validateInvisibleEditors = false;
        if (typeof (validationGroup) == "undefined")
            validationGroup = null;
        ASPx.GetControlCollection().RaiseValidationCompleted(container, validationGroup,
            validateInvisibleEditors, validationResult.isValid, validationResult.firstInvalid, validationResult.firstVisibleInvalid);
        if (summaryCollection)
            summaryCollection.ForbidNewErrorsAccepting(validationGroup);
        if (!validationResult.isValid && !!validationResult.firstVisibleInvalid && validationResult.firstVisibleInvalid.accessibilityCompliant && !validationResult.firstVisibleInvalid.setFocusOnError) {
            var accessInvalidControl = validationResult.firstVisibleInvalid;
            if (!summaryCollection && !accessInvalidControl.focused) {
                var beforeDelayActiveElement = ASPx.GetActiveElement();
                setTimeout(function () {
                    var currentActiveElement = ASPx.GetActiveElement();
                    if (accessInvalidControl.focused || (currentActiveElement != beforeDelayActiveElement && ASPx.Attr.IsExistsAttribute(currentActiveElement, 'role')))
                        return;
                    accessInvalidControl.ariaExplanatoryTextManager.ToggleErrorAlert();
                }, 500);
            }
        }
        return validationResult.isValid;
    };
    ASPxClientEdit.ValidateEditorsInContainerById = function (containerId, validationGroup, validateInvisibleEditors) {
        var container = document.getElementById(containerId);
        return this.ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
    };
    ASPxClientEdit.ValidateGroup = function (validationGroup, validateInvisibleEditors) {
        return this.ValidateEditorsInContainer(null, validationGroup, validateInvisibleEditors);
    };
    ASPxClientEdit.AreEditorsValid = function (containerOrContainerId, validationGroup, checkInvisibleEditors) {
        var container = typeof (containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
        var checkResult = ASPx.ProcessEditorsInContainer(container, ASPx.EditorsValidProcessingProc, _aspxEditorsValidChoiceCondition, validationGroup,
            checkInvisibleEditors, false);
        checkResult.isValid = ASPxClientEdit.AreExternalControlsValidInContainer(containerOrContainerId, validationGroup, checkInvisibleEditors) && checkResult.isValid;
        return checkResult.isValid;
    };
    ASPxClientEdit.AreExternalControlsValidInContainer = function (containerId, validationGroup, validateInvisibleEditors) {
        if (ASPx.Ident.scripts.ASPxClientHtmlEditor)
            return ASPxClientHtmlEditor.AreEditorsValidInContainer(containerId, validationGroup, validateInvisibleEditors);
        return true;
    };
    ASPxClientEdit.ClearExternalControlsInContainer = function (containerId, validationGroup, validateInvisibleEditors) {
        if (ASPx.Ident.scripts.ASPxClientHtmlEditor)
            return ASPxClientHtmlEditor.ClearEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
        return true;
    };
    ASPxClientEdit.ValidateExternalControlsInContainer = function (containerId, validationGroup, validateInvisibleEditors) {
        if (ASPx.Ident.scripts.ASPxClientHtmlEditor)
            return ASPxClientHtmlEditor.ValidateEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
        return true;
    };
    var ASPxClientEditKeyEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (htmlEvent) {
            this.constructor.prototype.constructor.call(this);
            this.htmlEvent = htmlEvent;
        }
    });
    var ASPxClientEditValidationEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (value, errorText, isValid) {
            this.constructor.prototype.constructor.call(this);
            this.errorText = errorText;
            this.isValid = isValid;
            this.value = value;
        }
    });
    ASPx.ProcessEditorsInContainer = function (container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
        var allProcessedSuccessfull = true;
        var firstInvalid = null;
        var firstVisibleInvalid = null;
        var invalidEditorToBeFocused = null;
        ASPx.GetControlCollection().ForEachControl(function (control) {
            var needToProcessRatingControl = window.ASPxClientRatingControl && (control instanceof ASPxClientRatingControl) && processingProc === ASPx.ClearProcessingProc;
            if (!ASPx.Ident.isDialogInvisibleControl(control) && (ASPx.Ident.IsASPxClientEdit(control) || needToProcessRatingControl) && (processDisabledEditors || control.GetEnabled())) {
                var mainElement = control.GetMainElement();
                if (mainElement &&
                    (container == null || ASPx.GetIsParent(container, mainElement)) &&
                    (processInvisibleEditors || control.IsVisible()) &&
                    (!choiceCondition || choiceCondition(control, validationGroup))) {
                    var isSuccess = processingProc(control);
                    if (!isSuccess) {
                        allProcessedSuccessfull = false;
                        if (firstInvalid == null)
                            firstInvalid = control;
                        var isVisible = control.IsVisible();
                        if (isVisible && firstVisibleInvalid == null)
                            firstVisibleInvalid = control;
                        if (control.setFocusOnError && invalidEditorToBeFocused == null && isVisible)
                            invalidEditorToBeFocused = control;
                    }
                }
            }
        }, this);
        if (invalidEditorToBeFocused != null)
            invalidEditorToBeFocused.SetFocus();
        return new ASPxValidationResult(allProcessedSuccessfull, firstInvalid, firstVisibleInvalid);
    };
    var ASPxValidationResult = ASPx.CreateClass(null, {
        constructor: function (isValid, firstInvalid, firstVisibleInvalid) {
            this.isValid = isValid;
            this.firstInvalid = firstInvalid;
            this.firstVisibleInvalid = firstVisibleInvalid;
        }
    });
    ASPx.ClearChoiceCondition = function (edit, validationGroup) {
        return !ASPx.IsExists(validationGroup) || (edit.validationGroup == validationGroup);
    };
    function _aspxValidateChoiceCondition(edit, validationGroup) {
        return ASPx.ClearChoiceCondition(edit, validationGroup) && edit.customValidationEnabled;
    }
    function _aspxEditorsValidChoiceCondition(edit, validationGroup) {
        return _aspxValidateChoiceCondition(edit, validationGroup);
    }
    function wrapLostFocusHandler(handler) {
        if (ASPx.Browser.Edge) {
            return function (name) {
                var edit = ASPx.GetControlCollection().Get(name);
                if (edit && !ASPx.IsElementVisible(edit.GetMainElement()))
                    setTimeout(handler, 0, name);
                else
                    handler(name);
            };
        }
        return handler;
    }
    ASPx.EGotFocus = function (name) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (!edit) return;
        if (!edit.isInitialized) {
            var inputElement = edit.GetFocusableInputElement();
            if (inputElement && inputElement === document.activeElement) {
                if (ASPx.Browser.Firefox)
                    window.setTimeout(function () { document.activeElement.blur(); }, 0);
                else
                    document.activeElement.blur();
            }
            return;
        }
        if (ASPx.Browser.VirtualKeyboardSupported)
            ASPx.VirtualKeyboardUI.onCallingVirtualKeyboard(edit, false);
        else
            edit.OnFocus();
    };
    ASPx.ELostFocusCore = function (name) {
        if (ASPx.Browser.VirtualKeyboardSupported) {
            var supressLostFocus = ASPx.VirtualKeyboardUI.isInputNativeBluring();
            if (supressLostFocus)
                return;
            ASPx.VirtualKeyboardUI.resetFocusedEditor();
        }
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit != null)
            edit.OnLostFocus();
    };
    ASPx.ELostFocus = wrapLostFocusHandler(ASPx.ELostFocusCore);
    ASPx.ESGotFocus = function (name) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (!edit) return;
        if (ASPx.Browser.VirtualKeyboardSupported) {
            ASPx.VirtualKeyboardUI.onCallingVirtualKeyboard(edit, true);
        } else {
            edit.OnSpecialFocus();
        }
    };
    ASPx.ESLostFocusCore = function (name) {
        if (ASPx.Browser.VirtualKeyboardSupported) {
            var supressLostFocus = ASPx.VirtualKeyboardUI.isInputNativeBluring();
            if (supressLostFocus)
                return;
            ASPx.VirtualKeyboardUI.resetFocusedEditor();
        }
        var edit = ASPx.GetControlCollection().Get(name);
        if (!edit) return;
        if (edit.UseDelayedSpecialFocus())
            edit.specialFocusTimer = window.setTimeout(function () { edit.OnSpecialLostFocus(); }, 30);
        else
            edit.OnSpecialLostFocus();
    };
    ASPx.ESLostFocus = wrapLostFocusHandler(ASPx.ESLostFocusCore);
    ASPx.EValueChanged = function (name) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit != null)
            edit.OnValueChanged();
    };
    ASPx.VirtualKeyboardUI = (function () {
        var focusedEditor = null;
        var inputNativeFocusLocked = false;
        function elementBelongsToEditor(element) {
            if (!element) return false;
            var isBelongsToEditor = false;
            ASPx.GetControlCollection().ForEachControl(function (control) {
                if (ASPx.Ident.IsASPxClientEdit(control) && control.IsEditorElement(element)) {
                    isBelongsToEditor = true;
                    return true;
                }
            }, this);
            return isBelongsToEditor;
        }
        function elementBelongsToFocusedEditor(element) {
            return focusedEditor && focusedEditor.IsEditorElement(element);
        }
        return {
            onTouchStart: function (evt) {
                if (!ASPx.Browser.VirtualKeyboardSupported || this.isGooglePlaceAutocompleteElementTap(evt)) return;
                inputNativeFocusLocked = false;
                if (ASPx.TouchUIHelper.pointerEnabled) {
                    if (evt.pointerType != ASPx.TouchUIHelper.pointerType.Touch)
                        return;
                    this.processFocusEditorControl(evt);
                } else
                    ASPx.TouchUIHelper.handleFastTapIfRequired(evt, function () { this.processFocusEditorControl(evt); }.aspxBind(this), false);
            },
            processFocusEditorControl: function (evt) {
                var evtSource = ASPx.Evt.GetEventSource(evt);
                var timeEditHasAppliedFocus = focusedEditor && (ASPx.Ident.IsASPxClientTimeEdit && ASPx.Ident.IsASPxClientTimeEdit(focusedEditor));
                var focusedTimeEditBelongsToDateEdit = timeEditHasAppliedFocus && focusedEditor.OwnerDateEdit && focusedEditor.OwnerDateEdit.GetShowTimeSection();
                if (focusedTimeEditBelongsToDateEdit) {
                    focusedEditor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
                    return;
                }
                var elementWithNativeFocus = ASPx.GetActiveElement();
                var someEditorInputIsFocused = elementBelongsToEditor(elementWithNativeFocus);
                var touchKeyboardIsVisible = someEditorInputIsFocused;
                var tapOutsideEditorAndInputs = !elementBelongsToEditor(evtSource) && !ASPx.Ident.IsFocusableElementRegardlessTabIndex(evtSource);
                var blurToHideTouchKeyboard = touchKeyboardIsVisible && tapOutsideEditorAndInputs;
                if (blurToHideTouchKeyboard) {
                    elementWithNativeFocus.blur();
                    return;
                }
                var tapOutsideFocusedEditor = focusedEditor && !elementBelongsToFocusedEditor(evtSource);
                if (tapOutsideFocusedEditor) {
                    var focusedEditorWithBluredInput = !elementBelongsToFocusedEditor(elementWithNativeFocus);
                    if (focusedEditorWithBluredInput)
                        this.lostAppliedFocusOfEditor();
                }
            },
            smartFocusEditor: function (edit) {
                if (!edit.focused) {
                    this.setInputNativeFocusLocked(true);
                    this.setFocusEditorCore(edit);
                } else {
                    edit.ForceRefocusEditor();
                }
            },
            setFocusEditorCore: function (edit) {
                if (ASPx.Browser.MacOSMobilePlatform) {
                    var timeoutDuration = ASPx.Browser.Chrome ? 250 : 30;
                    window.setTimeout(function () { edit.SetFocus(); }, timeoutDuration);
                } else {
                    edit.SetFocus();
                }
            },
            onCallingVirtualKeyboard: function (edit, isSpecial) {
                this.setAppliedFocusOfEditor(edit, isSpecial);
                if (edit.specialKeyboardHandlingUsed == isSpecial && inputNativeFocusLocked)
                    edit.BlurInputElement();
            },
            isInputNativeBluring: function () {
                return focusedEditor && inputNativeFocusLocked;
            },
            setInputNativeFocusLocked: function (locked) {
                inputNativeFocusLocked = locked;
            },
            getInputNativeFocusLocked: function () {
                return inputNativeFocusLocked;
            },
            setAppliedFocusOfEditor: function (edit, isSpecial) {
                if (focusedEditor === edit) {
                    if (edit.specialKeyboardHandlingUsed == isSpecial) {
                        focusedEditor.UnlockFocusEvents();
                        if (focusedEditor.EnsureClearButtonVisibility)
                            focusedEditor.EnsureClearButtonVisibility();
                    }
                    return;
                }
                if (edit.specialKeyboardHandlingUsed == isSpecial) {
                    this.lostAppliedFocusOfEditor();
                    focusedEditor = edit;
                    ASPx.SetFocusedEditor(edit);
                }
                if (isSpecial)
                    edit.OnSpecialFocus();
                else
                    edit.OnFocus();
            },
            lostAppliedFocusOfEditor: function () {
                if (!focusedEditor) return;
                var curEditorName = focusedEditor.name;
                var skbdHandlingUsed = focusedEditor.specialKeyboardHandlingUsed;
                var focusedEditorInputElementExists = focusedEditor.GetInputElement();
                focusedEditor = null;
                if (!focusedEditorInputElementExists)
                    return;
                ASPx.ELostFocusCore(curEditorName);
                if (skbdHandlingUsed)
                    ASPx.ESLostFocusCore(curEditorName);
            },
            getFocusedEditor: function () {
                return focusedEditor;
            },
            resetFocusedEditor: function () {
                focusedEditor = null;
            },
            focusableInputElementIsActive: function (edit) {
                var inputElement = edit.GetFocusableInputElement();
                return !!inputElement ? ASPx.GetActiveElement() === inputElement : false;
            },
            isGooglePlaceAutocompleteElementTap: function (evt) {
                var googlePlaceAutocompleteContainer = ASPx.GetNodeByClassName(document.body, "pac-container", 0);
                if (!googlePlaceAutocompleteContainer)
                    return false;
                return ASPx.GetParentByClassName(ASPx.Evt.GetEventSource(evt), "pac-container") != null;
            }
        };
    })();
    if (ASPx.Browser.VirtualKeyboardSupported) {
        var touchEventName = ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerDownEventName : 'touchstart';
        ASPx.Evt.AttachEventToDocument(touchEventName, function (evt) { ASPx.VirtualKeyboardUI.onTouchStart(evt); });
    }
    ASPx.Evt.AttachEventToDocument("mousedown", function (evt) {
        var editor = ASPx.GetFocusedEditor();
        if (!editor)
            return;
        var evtSource = ASPx.Evt.GetEventSource(evt);
        if (editor.IsClearButtonElement(evtSource))
            return;
        if (editor.OwnerDateEdit && editor.OwnerDateEdit.GetShowTimeSection()) {
            editor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
            return;
        }
        if (editor.IsEditorElement(evtSource) && !editor.IsElementBelongToInputElement(evtSource))
            editor.ForceRefocusEditor(evt);
    });
    ASPx.Evt.AttachEventToDocument(ASPx.Evt.GetMouseWheelEventName(), function (evt) {
        var editor = ASPx.GetFocusedEditor();
        if (editor != null && ASPx.IsExistsElement(editor.GetMainElement()) && editor.focused && editor.receiveGlobalMouseWheel)
            editor.OnMouseWheel(evt);
    });
    ASPx.KBSIKeyDown = function (name, evt) {
        var control = ASPx.GetControlCollection().Get(name);
        if (control != null) {
            var isProcessed = control.OnSpecialKeyDown(evt);
            if (isProcessed)
                return ASPx.Evt.PreventEventAndBubble(evt);
        }
    };
    ASPx.KBSIKeyPress = function (name, evt) {
        var control = ASPx.GetControlCollection().Get(name);
        if (control != null) {
            var isProcessed = control.OnSpecialKeyPress(evt);
            if (isProcessed)
                return ASPx.Evt.PreventEventAndBubble(evt);
        }
    };
    ASPx.KBSIKeyUp = function (name, evt) {
        var control = ASPx.GetControlCollection().Get(name);
        if (control != null) {
            var isProcessed = control.OnSpecialKeyUp(evt);
            if (isProcessed)
                return ASPx.Evt.PreventEventAndBubble(evt);
        }
    };
    ASPx.ClearProcessingProc = function (edit) {
        return edit.Clear();
    };
    ASPx.ValidateProcessingProc = function (edit) {
        edit.OnValidation(ValidationType.MassValidation);
        return edit.GetIsValid();
    };
    ASPx.EditorsValidProcessingProc = function (edit) {
        return edit.GetIsValid();
    };
    var CheckEditElementHelper = ASPx.CreateClass(ASPx.CheckableElementHelper, {
        AttachToMainElement: function (internalCheckBox) {
            ASPx.CheckableElementHelper.prototype.AttachToMainElement.call(this, internalCheckBox);
            this.AttachToLabelElement(this.GetLabelElement(internalCheckBox.container), internalCheckBox);
        },
        AttachToLabelElement: function (labelElement, internalCheckBox) {
            var _this = this;
            if (labelElement) {
                ASPx.Evt.AttachEventToElement(labelElement, "click",
                    function (evt) {
                        _this.InvokeClick(internalCheckBox, evt);
                    }
                );
                ASPx.Evt.AttachEventToElement(labelElement, "mousedown",
                    function (evt) {
                        internalCheckBox.Refocus();
                    }
                );
            }
        },
        GetLabelElement: function (container) {
            var labelElement = ASPx.GetNodeByTagName(container, "LABEL", 0);
            if (!labelElement) {
                var labelCell = ASPx.GetNodeByClassName(container, "dxichTextCellSys", 0);
                labelElement = ASPx.GetNodeByTagName(labelCell, "SPAN", 0);
            }
            return labelElement;
        }
    });
    CheckEditElementHelper.Instance = new CheckEditElementHelper();
    var CalendarSharedParameters = ASPx.CreateClass(null, {
        updateCalendarCallbackCommand: "UPDATE",
        constructor: function () {
            this.minDate = null;
            this.maxDate = null;
            this.disabledDates = [];
            this.calendarCustomDraw = false;
            this.hasCustomDisabledDatesViaCallback = false;
            this.dateRangeMode = false;
            this.currentDateEdit = null;
            this.DaysSelectingOnMouseOver = new ASPxClientEvent();
            this.VisibleDaysMouseOut = new ASPxClientEvent();
            this.CalendarSelectionChangedInternal = new ASPxClientEvent();
        },
        Assign: function (source) {
            this.minDate = source.minDate ? source.minDate : null;
            this.maxDate = source.maxDate ? source.maxDate : null;
            this.calendarCustomDraw = source.calendarCustomDraw ? source.calendarCustomDraw : false;
            this.hasCustomDisabledDatesViaCallback = source.hasCustomDisabledDatesViaCallback ? source.hasCustomDisabledDatesViaCallback : false;
            this.disabledDates = source.disabledDates ? source.disabledDates : [];
            this.currentDateEdit = source.currentDateEdit ? source.currentDateEdit : null;
        },
        GetUpdateCallbackParameters: function () {
            var callbackArgs = this.GetCallbackArgs();
            callbackArgs = this.FormatCallbackArg(this.updateCalendarCallbackCommand, callbackArgs);
            return callbackArgs;
        },
        GetCallbackArgs: function () {
            var args = {};
            if (this.minDate)
                args.clientMinDate = ASPx.DateUtils.GetInvariantDateString(this.minDate);
            if (this.maxDate)
                args.clientMaxDate = ASPx.DateUtils.GetInvariantDateString(this.maxDate);
            if (args.clientMinDate || args.clientMaxDate) {
                var jsonArgs = JSON.stringify(args);
                return ASPx.Str.EncodeHtml(jsonArgs);
            }
            return null;
        },
        FormatCallbackArg: function (prefix, arg) {
            if (!arg) return prefix;
            return [prefix, '|', arg.length, ';', arg, ';'].join('');
        }
    });
    ASPx.CalendarSharedParameters = CalendarSharedParameters;
    ASPx.ValidationType = ValidationType;
    ASPx.ErrorFrameDisplay = ErrorFrameDisplay;
    ASPx.EditElementSuffix = EditElementSuffix;
    ASPx.ValidationPattern = ValidationPattern;
    ASPx.RequiredFieldValidationPattern = RequiredFieldValidationPattern;
    ASPx.RegularExpressionValidationPattern = RegularExpressionValidationPattern;
    ASPx.CheckEditElementHelper = CheckEditElementHelper;
    ASPx.IsEditorFocusable = _aspxIsEditorFocusable;
    window.ASPxClientEditBase = ASPxClientEditBase;
    window.ASPxClientEdit = ASPxClientEdit;
    window.ASPxClientEditKeyEventArgs = ASPxClientEditKeyEventArgs;
    window.ASPxClientEditValidationEventArgs = ASPxClientEditValidationEventArgs;
})();

(function () {
    ASPx.TEInputSuffix = "_I";
    ASPx.PasteCheckInterval = 50;
    ASPx.TEHelpTextElementSuffix = "_HTE";
    var passwordInputClonedSuffix = "_CLND";
    var memoMinHeight = 34;
    var BrowserHelper = {
        SAFARI_SYSTEM_CLASS_NAME: "dxeSafariSys",
        MOBILE_SAFARI_SYSTEM_CLASS_NAME: "dxeIPadSys",
        GetBrowserSpecificSystemClassName: function () {
            if (ASPx.Browser.Safari)
                return ASPx.Browser.MacOSMobilePlatform ? this.MOBILE_SAFARI_SYSTEM_CLASS_NAME : this.SAFARI_SYSTEM_CLASS_NAME;
            return "";
        }
    };
    var focusedNullTextClassName = "dxeFNTextSys";
    var NullTextDisplayMode = {
        Unfocused: "Unfocused",
        UnfocusedAndFocused: "UnfocusedAndFocused"
    };
    var ASPxClientTextEdit = ASPx.CreateClass(ASPxClientEdit, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientTextEdit = true;
            this.nullText = "";
            this.nullTextDisplayMode = NullTextDisplayMode.Unfocused;
            this.nullTextOnFocusCssText = "";
            this.focusedNullTextTimerID = -1;
            this.escCount = 0;
            this.raiseValueChangedOnEnter = true;
            this.autoResizeWithContainer = false;
            this.lastChangedValue = null;
            this.autoCompleteAttribute = null;
            this.passwordNullTextIntervalID = -1;
            this.nullTextInputElement = null;
            this.helpText = "";
            this.helpTextObj = null;
            this.helpTextStyle = [];
            this.externalTableStyle = [];
            this.helpTextPosition = ASPx.Position.Right;
            this.helpTextMargins = null;
            this.helpTextHAlign = ASPxClientTextEditHelpTextHAlign.Left;
            this.helpTextVAlign = ASPxClientTextEditHelpTextVAlign.Top;
            this.enableHelpTextPopupAnimation = true;
            this.helpTextDisplayMode = ASPxClientTextEditHelpTextDisplayMode.Inline;
            this.maskInfo = null;
            this.maskValueBeforeUserInput = "";
            this.maskPasteTimerID = -1;
            this.maskPasteLock = false;
            this.maskPasteCounter = 0;
            this.maskTextBeforePaste = "";
            this.maskHintHtml = "";
            this.maskHintTimerID = -1;
            this.maskedEditorClickEventHandlers = [];
            this.errorCellPosition = ASPx.Position.Right;
            this.inlineInitializeInputValue = null;
            this.initializeInputValue = null;
            this.displayFormat = null;
            this.TextChanged = new ASPxClientEvent();
        },
        SetData: function (data) {
            ASPxClientEdit.prototype.SetData.call(this, data);
            if (data.maskInfo) {
                var maskProperties = data.maskInfo.properties;
                var useInvariantCultureDecimalSymbol = maskProperties && maskProperties.useInvariantCultureDecimalSymbol || false;
                this.maskInfo = ASPx.MaskInfo.Create(data.maskInfo.maskText, data.maskInfo.dateTimeOnly, data.maskInfo.allowEscapingInEnums, useInvariantCultureDecimalSymbol);
                this.SetProperties(data.maskInfo.properties, this.maskInfo);
            }
        },
        InlineInitialize: function () {
            this.SaveInputValue(true);
            ASPxClientEdit.prototype.InlineInitialize.call(this);
            if (this.maskInfo != null)
                this.InitMask();
            this.ApplyBrowserSpecificClassName();
            this.helpTextInitialize();
            if (ASPx.Browser.IE && ASPx.Browser.Version >= 10 && this.nullText != "")
                this.addIEXButtonEventHandler();
        },
        Initialize: function () {
            this.SaveInputValue(false);
            this.SaveChangedValue();
            ASPxClientEdit.prototype.Initialize.call(this);
            this.CorrectInputMaxLength();
            this.SubscribeToIeDropEvent();
            if (ASPx.Browser.WebKitFamily)
                this.CorrectMainElementWhiteSpaceStyle();
            this.InitializeTextDecoration();
            this.InitializeAutocompleteAttribute();
            if (this.IsValueRestoredByBrowser())
                this.SynchronizeRestoredValue();
        },
        InitializeEvents: function () {
            ASPxClientEdit.prototype.InitializeEvents.call(this);
            ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keydown", this.OnKeyDown.aspxBind(this));
            ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keyup", this.OnKeyUp.aspxBind(this));
            ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keypress", this.OnKeyPress.aspxBind(this));
            this.Unload.AddHandler(this.OnUnload.aspxBind(this));
        },
        InitializeTextDecoration: function () {
            if (this.GetInputElement().type == "password")
                this.ToggleTextDecoration();
        },
        InitializeAutocompleteAttribute: function () {
            var input = this.GetInputElement();
            if (this.IsVCardAttributeRequired())
                ASPx.Attr.SetAttribute(input, this.autoCompleteAttribute.name, this.autoCompleteAttribute.value);
            else if (this.IsAutocompleteOffRequiredOnInitialize())
                ASPx.Attr.SetAttribute(input, "autocomplete", "off");
        },
        SaveInputValue: function (isInlineInitialize) {
            var input = this.GetInputElement();
            if (!input)
                return;
            var inputValue = input.value;
            if (inputValue === null)
                inputValue = "";
            if (isInlineInitialize)
                this.inlineInitializeInputValue = inputValue;
            else
                this.initializeInputValue = inputValue;
        },
        IsValueRestoredByBrowser: function () {
            if (this.displayFormat || this.isNative)
                return false;
            return this.IsValueChangedBeforeInitialize() || this.IsClientValueNotExists() || this.IsValueChangedOnMaskInitialize();
        },
        IsValueChangedBeforeInitialize: function () {
            return this.inlineInitializeInputValue !== this.initializeInputValue;
        },
        IsClientValueNotExists: function () {
            return this.inlineInitializeInputValue !== "" &&
                this.inlineInitializeInputValue !== this.nullText &&
                this.inlineInitializeInputValue !== this.GetValue() &&
                this.inlineInitializeInputValue !== this.GetText();
        },
        IsValueChangedOnMaskInitialize: function () {
            return this.maskInfo && this.inlineInitializeInputValue !== this.GetInputElement().value;
        },
        SynchronizeRestoredValue: function () {
            this.SetText(this.initializeInputValue);
        },
        AdjustControl: function () {
            ASPxClientEdit.prototype.AdjustControl.call(this);
            if (ASPx.Browser.IE && ASPx.Browser.Version > 8 && !this.isNative)
                this.correctInputElementHeight();
            this.ensureAdjustFocusedNullTextElement();
        },
        correctInputElementHeight: function () {
            var mainElement = this.GetMainElement();
            if (mainElement) {
                var mainElementHeight = mainElement.style.height;
                var mainElementHeightSpecified = mainElementHeight && mainElementHeight.indexOf('px') !== -1;
                if (mainElementHeightSpecified) {
                    var inputElement = this.GetInputElement();
                    var inputElementHeight = this.getInputElementHeight();
                    inputElement.style.height = inputElementHeight + "px";
                    if (!ASPx.Ident.IsASPxClientMemo(this))
                        inputElement.style.lineHeight = inputElementHeight + "px";
                }
            }
        },
        getInputElementHeight: function () {
            var mainElement = this.GetMainElement(),
                inputElement = this.GetInputElement();
            var inputElementHeight = ASPx.PxToInt(mainElement.style.height) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainElement);
            var inputElementContainer = inputElement.parentNode,
                inputContainerStyle = ASPx.GetCurrentStyle(inputElementContainer);
            inputElementHeight -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(inputElementContainer, inputContainerStyle)
                + ASPx.GetTopBottomMargins(inputElementContainer, inputContainerStyle);
            var mainElementCellspacing = ASPx.GetCellSpacing(mainElement);
            if (mainElementCellspacing)
                inputElementHeight -= mainElementCellspacing * 2;
            var inputStyle = ASPx.GetCurrentStyle(inputElement);
            inputElementHeight -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(inputElement, inputStyle)
                + ASPx.GetTopBottomMargins(inputElement, inputStyle);
            return inputElementHeight;
        },
        addIEXButtonEventHandler: function () {
            var inputElement = this.GetInputElement();
            if (ASPx.IsExists(inputElement)) {
                this.isDeleteOrBackspaceKeyClick = false;
                ASPx.Evt.AttachEventToElement(inputElement, "input", function (evt) {
                    if (this.isDeleteOrBackspaceKeyClick) {
                        this.isDeleteOrBackspaceKeyClick = false;
                        return;
                    }
                    if (inputElement.value === '') {
                        this.SyncRawValue();
                    }
                }.aspxBind(this));
                ASPx.Evt.AttachEventToElement(inputElement, "keydown", function (evt) {
                    this.isDeleteOrBackspaceKeyClick = (evt.keyCode == ASPx.Key.Delete || evt.keyCode == ASPx.Key.Backspace);
                }.aspxBind(this));
            }
        },
        ensureOutOfRangeWarningManager: function (minValue, maxValue, defaultMinValue, defaultMaxValue, valueFormatter) {
            if (!this.outOfRangeWarningManager)
                this.outOfRangeWarningManager = new ASPxOutOfRangeWarningManager(this, minValue, maxValue, defaultMinValue, defaultMaxValue,
                    this.showOutOfRangeWarningElementAtBottom() ? ASPx.Position.Bottom : ASPx.Position.Right, valueFormatter);
        },
        showOutOfRangeWarningElementAtBottom: function () {
            return this.hasRightPopupHelpText();
        },
        GetOutOfRangeWarningElementPrevSibling: function () {
            return this.GetMainElement();
        },
        helpTextInitialize: function () {
            if (this.helpText) {
                this.helpTextObj = new ASPxClientTextEditHelpText(this, this.helpTextStyle, this.helpText, this.helpTextPosition,
                    this.helpTextHAlign, this.helpTextVAlign, this.helpTextMargins, this.enableHelpTextPopupAnimation, this.helpTextDisplayMode);
            }
        },
        hasPopupHelpText: function () {
            return this.helpText && this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup;
        },
        hasRightPopupHelpText: function () {
            return this.hasPopupHelpText() && this.helpTextPosition === ASPx.Position.Right;
        },
        showHelpText: function () {
            if (this.helpTextObj)
                this.helpTextObj.show();
        },
        hideHelpText: function () {
            if (this.helpTextObj)
                this.helpTextObj.hide();
        },
        ApplyBrowserSpecificClassName: function () {
            var mainElement = this.GetMainElement();
            if (ASPx.IsExistsElement(mainElement)) {
                var className = BrowserHelper.GetBrowserSpecificSystemClassName();
                if (className)
                    mainElement.className += " " + className;
            }
        },
        CorrectMainElementWhiteSpaceStyle: function () {
            var inputElement = this.GetInputElement();
            if (inputElement && inputElement.parentNode) {
                if (this.IsElementHasWhiteSpaceStyle(inputElement.parentNode))
                    inputElement.parentNode.style.whiteSpace = "normal";
            }
        },
        IsElementHasWhiteSpaceStyle: function (element) {
            var currentStyle = ASPx.GetCurrentStyle(element);
            return currentStyle.whiteSpace == "nowrap" || currentStyle.whiteSpace == "pre";
        },
        FindInputElement: function () {
            return this.isNative ? this.GetMainElement() : ASPx.GetElementById(this.name + ASPx.TEInputSuffix);
        },
        DecodeRawInputValue: function (value) {
            return value;
        },
        GetRawValue: function (value) {
            return ASPx.IsExists(this.stateObject) ? this.stateObject.rawValue : null;
        },
        SetRawValue: function (value) {
            if (ASPx.IsExists(value))
                value = value.toString();
            this.UpdateStateObjectWithObject({ rawValue: value });
        },
        SyncRawValue: function () {
            if (this.maskInfo != null)
                this.SetRawValue(this.maskInfo.GetValue(true));
            else
                this.SetRawValue(this.GetInputElement().value);
        },
        HasTextDecorators: function () {
            return this.nullText != "" || this.displayFormat != null;
        },
        CanApplyTextDecorators: function () {
            return !this.focused;
        },
        GetDecoratedText: function (value) {
            if (this.IsNull(value) && this.nullText != "") {
                if (this.CanApplyNullTextDecoration) {
                    if (this.CanApplyNullTextDecoration())
                        return this.nullText;
                } else {
                    return this.nullText;
                }
            }
            if (this.displayFormat != null)
                return this.GetDisplayFormatText(value);
            if (this.maskInfo != null)
                return this.maskInfo.GetText();
            if (value == null)
                return "";
            return value;
        },
        GetDisplayFormatText: function (value) {
            return ASPx.Formatter.Format(this.displayFormat, value);
        },
        ToggleTextDecoration: function () {
            if (this.HasTextDecorators()) {
                if (this.focused) {
                    var input = this.GetInputElement();
                    var oldValue = input.value;
                    var sel = ASPx.Selection.GetExtInfo(input);
                    this.ToggleTextDecorationCore();
                    this.ensureActivateFocusedNullTextMechanism();
                    if (oldValue != input.value || !ASPx.Selection.AreEqual(sel, ASPx.Selection.GetExtInfo(input))) {
                        if (sel.startPos == 0 && sel.endPos == oldValue.length)
                            sel.endPos = input.value.length;
                        else
                            sel.endPos = sel.startPos;
                        if (!this.accessibilityCompliant || ASPx.GetActiveElement() == input)
                            this.SetSelectionOnToggleTextDecoration(input, sel);
                    }
                } else {
                    this.ToggleTextDecorationCore();
                    this.ensureDeactivateFocusedNullTextMechanism();
                }
            }
        },
        SetSelectionOnToggleTextDecoration: function (input, sel) {
            ASPx.Selection.Set(input, sel.startPos, sel.endPos);
        },
        ToggleTextDecorationCore: function () {
            if (this.maskInfo != null) {
                this.ApplyMaskInfo(false);
            } else {
                var input = this.GetInputElement();
                var rawValue = this.GetRawValue();
                var value = this.CanApplyTextDecorators() ? this.GetDecoratedText(rawValue) : rawValue;
                if (input.value != value) {
                    if (input.type == "password")
                        this.TogglePasswordInputTextDecoration(value);
                    else
                        input.value = value;
                }
            }
        },
        GetPasswordNullTextInputElement: function () {
            if (!this.isPasswordNullTextInputElementExists())
                this.nullTextInputElement = this.createPasswordNullTextInputElement();
            return this.nullTextInputElement;
        },
        createPasswordNullTextInputElement: function () {
            var inputElement = this.GetInputElement(),
                nullTextInputElement = document.createElement("INPUT");
            nullTextInputElement.className = inputElement.className;
            nullTextInputElement.style.cssText = inputElement.style.cssText;
            nullTextInputElement.id = inputElement.id + passwordInputClonedSuffix;
            nullTextInputElement.type = "text";
            if (ASPx.IsExists(inputElement.tabIndex))
                nullTextInputElement.tabIndex = inputElement.tabIndex;
            var onFocusEventHandler = function () {
                var inputElement = this.GetInputElement(),
                    nullTextInputElement = this.GetPasswordNullTextInputElement();
                if (inputElement) {
                    this.LockFocusEvents();
                    ASPx.SetElementDisplay(inputElement, true);
                    inputElement.focus();
                    ASPx.SetElementDisplay(nullTextInputElement, false);
                    this.ensureAdjustFocusedNullTextElement();
                    this.ReplaceAssociatedIdInLabels(nullTextInputElement.id, inputElement.id);
                }
            }.aspxBind(this);
            ASPx.Evt.AttachEventToElement(nullTextInputElement, "focus", onFocusEventHandler);
            return nullTextInputElement;
        },
        isPasswordNullTextInputElementExists: function () {
            return ASPx.IsExistsElement(this.nullTextInputElement);
        },
        TogglePasswordNullTextTimeoutChecker: function () {
            if (this.passwordNullTextIntervalID < 0) {
                var timeoutChecker = function () {
                    var inputElement = this.GetInputElement();
                    if (ASPx.GetControlCollection().GetByName(this.name) !== this || inputElement == null) {
                        window.clearTimeout(this.passwordNullTextIntervalID);
                        this.passwordNullTextIntervalID = -1;
                        return;
                    } else {
                        if (!this.focused) {
                            var passwordNullTextInputElement = this.GetPasswordNullTextInputElement();
                            if (passwordNullTextInputElement.value != this.nullText && inputElement.value == "") {
                                passwordNullTextInputElement.value = this.nullText;
                                this.SetValue(null);
                            }
                            if (inputElement.value != "") {
                                if (inputElement.style.display == "none") {
                                    this.SetValue(inputElement.value);
                                    this.UnhidePasswordInput();
                                }
                            } else {
                                if (inputElement.style.display != "none") {
                                    this.SetValue(null);
                                    this.HidePasswordInput();
                                }
                            }
                        }
                    }
                }.aspxBind(this);
                timeoutChecker();
                this.passwordNullTextIntervalID = window.setInterval(timeoutChecker, 100);
            }
        },
        TogglePasswordInputTextDecoration: function (value) {
            var inputElement = this.GetInputElement();
            var nullTextInputElement = this.GetPasswordNullTextInputElement();
            nullTextInputElement.value = value;
            var parentNode = inputElement.parentNode;
            if (ASPx.Data.ArrayIndexOf(parentNode.childNodes, nullTextInputElement) < 0) {
                ASPx.Attr.ChangeStyleAttribute(nullTextInputElement, "display", "none");
                parentNode.appendChild(nullTextInputElement);
            }
            this.HidePasswordInput();
            this.TogglePasswordNullTextTimeoutChecker();
        },
        HidePasswordInput: function () {
            ASPx.Attr.ChangeStyleAttribute(this.GetInputElement(), "display", "none");
            ASPx.Attr.ChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "");
            this.ReplaceAssociatedIdInLabels(this.GetInputElement().id, this.GetPasswordNullTextInputElement().id);
        },
        UnhidePasswordInput: function () {
            ASPx.Attr.ChangeStyleAttribute(this.GetInputElement(), "display", "");
            ASPx.Attr.ChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
            this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
        },
        ReplaceAssociatedIdInLabels: function (oldId, newId) {
            var labels = document.getElementsByTagName("LABEL");
            for (var i = 0; i < labels.length; i++) {
                if (labels[i].attributes["for"] && labels[i].attributes["for"].value == oldId)
                    labels[i].attributes["for"].value = newId;
            }
        },
        GetFormattedText: function () {
            var value = this.GetValue();
            if (this.IsNull(value) && this.nullText != "")
                return this.GetText();
            return this.GetDecoratedText(value);
        },
        IsNull: function (value) {
            return value == null || value === "";
        },
        PopulateStyleDecorationPostfixes: function () {
            ASPxClientEdit.prototype.PopulateStyleDecorationPostfixes.call(this);
            this.styleDecoration.AddPostfix(ASPx.TEInputSuffix);
        },
        GetValue: function () {
            var value = null;
            if (this.maskInfo != null)
                value = this.maskInfo.GetValue();
            else if (this.HasTextDecorators())
                value = this.GetRawValue();
            else {
                var input = this.GetInputElement();
                value = input ? input.value : null;
            }
            return (value == "" && this.convertEmptyStringToNull) ? null : value;
        },
        SetValue: function (value) {
            if (value == null || value === undefined)
                value = "";
            if (this.maskInfo != null) {
                this.maskInfo.SetValue(value.toString());
                this.ApplyMaskInfo(false);
                this.SavePrevMaskValue();
            }
            else if (this.HasTextDecorators()) {
                this.SetRawValue(value);
                this.GetInputElement().value = this.CanApplyTextDecorators() && this.GetInputElement().type != "password" ? this.GetDecoratedText(value) : value;
            }
            else
                this.GetInputElement().value = value;
            if (this.styleDecoration)
                this.styleDecoration.Update();
            this.SaveChangedValue();
        },
        SetVisible: function (visible) {
            ASPxClientEdit.prototype.SetVisible.call(this, visible);
            if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
                if (visible)
                    this.showHelpText();
                else
                    this.hideHelpText();
            }
        },
        UnstretchInputElement: function () {
            var inputElement = this.GetInputElement();
            var mainElement = this.GetMainElement();
            var mainElementCurStyle = ASPx.GetCurrentStyle(mainElement);
            if (ASPx.IsExistsElement(mainElement) && ASPx.IsExistsElement(inputElement) && ASPx.IsExists(mainElementCurStyle) &&
                inputElement.style.width == "100%" &&
                (mainElementCurStyle.width == "" || mainElementCurStyle.width == "auto"))
                inputElement.style.width = "";
        },
        RestoreActiveElement: function (activeElement) {
            if (activeElement && activeElement.setActive && activeElement.tagName != "IFRAME")
                activeElement.setActive();
        },
        RaiseValueChangedEvent: function () {
            var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
            processOnServer = this.RaiseTextChanged(processOnServer);
            return processOnServer;
        },
        InitMask: function () {
            var rawValue = this.GetRawValue();
            this.SetValue(rawValue.length ? this.DecodeRawInputValue(rawValue) : this.maskInfo.GetValue());
            this.validationPatterns.unshift(new MaskValidationPattern(this.maskInfo.errorText, this.maskInfo));
        },
        SetMaskPasteTimer: function () {
            this.ClearMaskPasteTimer();
            this.maskPasteTimerID = ASPx.Timer.SetControlBoundInterval(this.MaskPasteTimerProc, this, ASPx.PasteCheckInterval);
        },
        ClearMaskPasteTimer: function () {
            this.maskPasteTimerID = ASPx.Timer.ClearInterval(this.maskPasteTimerID);
        },
        SavePrevMaskValue: function () {
            this.maskValueBeforeUserInput = this.maskInfo.GetValue();
        },
        FillMaskInfo: function () {
            var input = this.GetInputElement();
            if (!input) return;
            var sel = ASPx.Selection.GetInfo(input);
            this.maskInfo.SetCaret(sel.startPos, sel.endPos - sel.startPos);
        },
        ApplyMaskInfo: function (applyCaret) {
            this.SyncRawValue();
            var input = this.GetInputElement();
            var text = this.GetMaskDisplayText();
            this.maskTextBeforePaste = text;
            if (input.value != text)
                input.value = text;
            if (applyCaret)
                ASPx.Selection.Set(input, this.maskInfo.caretPos, this.maskInfo.caretPos + this.maskInfo.selectionLength);
        },
        GetMaskDisplayText: function () {
            if (!this.focused && this.HasTextDecorators())
                return this.GetDecoratedText(this.maskInfo.GetValue());
            return this.maskInfo.GetText();
        },
        ShouldCancelMaskKeyProcessing: function (htmlEvent, keyDownInfo) {
            return ASPx.Evt.IsEventPrevented(htmlEvent);
        },
        HandleMaskKeyDown: function (evt) {
            var keyInfo = ASPx.MaskManager.CreateKeyInfoByEvent(evt);
            ASPx.MaskManager.keyCancelled = this.ShouldCancelMaskKeyProcessing(evt, keyInfo);
            if (ASPx.MaskManager.keyCancelled) {
                ASPx.Evt.PreventEvent(evt);
                return;
            }
            this.maskPasteLock = true;
            this.FillMaskInfo();
            var canHandle = ASPx.MaskManager.CanHandleControlKey(keyInfo);
            ASPx.MaskManager.savedKeyDownKeyInfo = keyInfo;
            if (canHandle) {
                ASPx.MaskManager.OnKeyDown(this.maskInfo, keyInfo);
                this.ApplyMaskInfo(true);
                ASPx.Evt.PreventEvent(evt);
            }
            ASPx.MaskManager.keyDownHandled = canHandle;
            this.maskPasteLock = false;
            this.UpdateMaskHintHtml();
        },
        HandleMaskKeyPress: function (evt) {
            var keyInfo = ASPx.MaskManager.CreateKeyInfoByEvent(evt);
            ASPx.MaskManager.keyCancelled = ASPx.MaskManager.keyCancelled || this.ShouldCancelMaskKeyProcessing(evt, ASPx.MaskManager.savedKeyDownKeyInfo);
            if (ASPx.MaskManager.keyCancelled) {
                ASPx.Evt.PreventEvent(evt);
                return;
            }
            this.maskPasteLock = true;
            var printable = ASPx.MaskManager.savedKeyDownKeyInfo != null && ASPx.MaskManager.IsPrintableKeyCode(ASPx.MaskManager.savedKeyDownKeyInfo);
            if (printable) {
                ASPx.MaskManager.OnKeyPress(this.maskInfo, keyInfo);
                this.ApplyMaskInfo(true);
            }
            if (printable || ASPx.MaskManager.keyDownHandled)
                ASPx.Evt.PreventEvent(evt);
            this.maskPasteLock = false;
            this.UpdateMaskHintHtml();
        },
        MaskPasteTimerProc: function () {
            if (this.maskPasteLock || !this.maskInfo) return;
            this.maskPasteCounter++;
            var inputElement = this.inputElement;
            if (!inputElement || this.maskPasteCounter > 40) {
                this.maskPasteCounter = 0;
                inputElement = this.GetInputElement();
                if (!ASPx.IsExistsElement(inputElement)) {
                    this.ClearMaskPasteTimer();
                    return;
                }
            }
            if (this.maskTextBeforePaste !== inputElement.value) {
                this.maskInfo.ProcessPaste(inputElement.value, ASPx.Selection.GetInfo(inputElement).endPos);
                this.ApplyMaskInfo(true);
            }
            if (!this.focused)
                this.ClearMaskPasteTimer();
        },
        BeginShowMaskHint: function () {
            if (!this.readOnly && this.maskHintTimerID == -1)
                this.maskHintTimerID = window.setInterval(ASPx.MaskHintTimerProc, 500);
        },
        EndShowMaskHint: function () {
            window.clearInterval(this.maskHintTimerID);
            this.maskHintTimerID = -1;
        },
        MaskHintTimerProc: function () {
            if (this.maskInfo) {
                this.FillMaskInfo();
                this.UpdateMaskHintHtml();
            } else {
                this.EndShowMaskHint();
            }
        },
        UpdateMaskHintHtml: function () {
            var hint = this.GetMaskHintElement();
            if (!ASPx.IsExistsElement(hint))
                return;
            var html = ASPx.MaskManager.GetHintHtml(this.maskInfo);
            if (html == this.maskHintHtml)
                return;
            if (html != "") {
                var mainElement = this.GetMainElement();
                if (ASPx.IsExistsElement(mainElement)) {
                    hint.innerHTML = html;
                    hint.style.position = "absolute";
                    hint.style.left = ASPx.PrepareClientPosForElement(ASPx.GetAbsoluteX(mainElement), mainElement, true) + "px";
                    hint.style.top = (ASPx.PrepareClientPosForElement(ASPx.GetAbsoluteY(mainElement), mainElement, false) + mainElement.offsetHeight + 2) + "px";
                    hint.style.display = "block";
                }
            } else {
                hint.style.display = "none";
            }
            this.maskHintHtml = html;
        },
        HideMaskHint: function () {
            var hint = this.GetMaskHintElement();
            if (ASPx.IsExistsElement(hint))
                hint.style.display = "none";
            this.maskHintHtml = "";
        },
        GetMaskHintElement: function () {
            return ASPx.GetElementById(this.name + "_MaskHint");
        },
        OnFocus: function () {
            if (this.maskInfo != null && !ASPx.GetControlCollection().InCallback())
                this.SetMaskPasteTimer();
            if (this.IsAutocompleteDropDownListRequiredOnFocus())
                ASPx.Attr.RemoveAttribute(this.GetInputElement(), "autocomplete");
            ASPxClientEdit.prototype.OnFocus.call(this);
        },
        OnLostFocus: function () {
            if (this.IsAutocompleteOffRequiredOnLostFocus())
                ASPx.Attr.SetAttribute(this.GetInputElement(), "autocomplete", "off");
            ASPxClientEdit.prototype.OnLostFocus.call(this);
        },
        OnMouseWheel: function (evt) {
            if (this.readOnly || this.maskInfo == null) return;
            this.FillMaskInfo();
            ASPx.MaskManager.OnMouseWheel(this.maskInfo, ASPx.Evt.GetWheelDelta(evt) < 0 ? -1 : 1);
            this.ApplyMaskInfo(true);
            ASPx.Evt.PreventEvent(evt);
            this.UpdateMaskHintHtml();
        },
        OnBrowserWindowResize: function (e) {
            if (!this.autoResizeWithContainer)
                this.AdjustControl();
        },
        IsValueChanged: function () {
            return this.GetValue() != this.lastChangedValue;
        },
        OnKeyDown: function (evt) {
            if (this.NeedPreventBrowserUndoBehaviour(evt))
                return ASPx.Evt.PreventEvent(evt);
            if (this.RequireHandleMaxlenManually()) {
                this.onKeyDownInputValue = this.GetInputElement().value;
                var selectionInfo = ASPx.Selection.GetExtInfo(this.GetInputElement());
                this.onKeyDownCursorPos = selectionInfo.startPos;
            }
            if (ASPx.Browser.IE && ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Esc) {
                if (++this.escCount > 1) {
                    ASPx.Evt.PreventEvent(evt);
                    return;
                }
            } else
                this.escCount = 0;
            ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
            if (!this.IsRaiseStandardOnChange(evt)) {
                if (!this.readOnly && this.maskInfo != null)
                    this.HandleMaskKeyDown(evt);
            }
        },
        IsCtrlZ: function (evt) {
            return evt.ctrlKey && !evt.altKey && !evt.shiftKey && (ASPx.Evt.GetKeyCode(evt) == 122 || ASPx.Evt.GetKeyCode(evt) == 90);
        },
        NeedPreventBrowserUndoBehaviour: function (evt) {
            var inputElement = this.GetInputElement();
            return this.IsCtrlZ(evt) && !!inputElement && !inputElement.value;
        },
        OnKeyPress: function (evt) {
            ASPxClientEdit.prototype.OnKeyPress.call(this, evt);
            if (!this.readOnly && this.maskInfo != null && !this.IsRaiseStandardOnChange(evt))
                this.HandleMaskKeyPress(evt);
            if (this.NeedOnKeyEventEnd(evt, true))
                this.OnKeyEventEnd(evt);
        },
        OnKeyUp: function (evt) {
            if (ASPx.Browser.Firefox && !this.focused && ASPx.Evt.GetKeyCode(evt) === ASPx.Key.Tab)
                return;
            if (this.NeedOnKeyEventEnd(evt, false)) {
                var proccessNextCommingPress = ASPx.Evt.GetKeyCode(evt) === ASPx.Key.Alt;
                this.OnKeyEventEnd(evt, proccessNextCommingPress);
            }
            if (this.RequireHandleMaxlenManually()) {
                var inputValueLength = this.GetInputElement().value.length;
                var maxLength = this.GetInputMaxLength();
                if (inputValueLength > maxLength && inputValueLength > this.onKeyDownInputValue.length) {
                    this.GetInputElement().value = this.onKeyDownInputValue;
                    this.SetCaretPosition(this.onKeyDownCursorPos);
                }
            }
            ASPxClientEdit.prototype.OnKeyUp.call(this, evt);
        },
        RequireHandleMaxlenManually: function () {
            return ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.SamsungAndroidDevice && ASPx.Browser.PlaformMajorVersion < 6 && this.GetInputMaxLength() !== -1;
        },
        GetInputMaxLength: function () {
            var input = this.GetInputElement();
            if (ASPx.Attr.IsExistsAttribute(input, "maxlength"))
                return input.maxLength;
            return -1;
        },
        NeedOnKeyEventEnd: function (evt, isKeyPress) {
            var handleKeyPress = this.maskInfo != null && evt.keyCode == ASPx.Key.Enter;
            return handleKeyPress == isKeyPress;
        },
        OnKeyEventEnd: function (evt, withDelay) {
            if (!this.readOnly) {
                if (this.IsRaiseStandardOnChange(evt))
                    this.RaiseStandardOnChange();
                this.SyncRawValueIfHasTextDecorators(withDelay);
            }
        },
        SyncRawValueIfHasTextDecorators: function (withDelay) {
            if (this.HasTextDecorators()) {
                if (withDelay) {
                    window.setTimeout(function () {
                        this.SyncRawValue();
                    }.aspxBind(this), 0);
                } else
                    this.SyncRawValue();
            }
        },
        IsRaiseStandardOnChange: function (evt) {
            return !this.specialKeyboardHandlingUsed && this.raiseValueChangedOnEnter && evt.keyCode == ASPx.Key.Enter;
        },
        GetFocusSelectAction: function () {
            if (this.maskInfo)
                return "start";
            return "all";
        },
        CorrectFocusWhenDisabled: function () {
            if (!this.GetEnabled()) {
                var inputElement = this.GetInputElement();
                if (inputElement)
                    inputElement.blur();
                return true;
            }
            return false;
        },
        EnsureShowPopupHelpText: function () {
            if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
                this.showHelpText();
        },
        EnsureHidePopupHelpText: function () {
            if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
                this.hideHelpText();
        },
        OnFocusCore: function () {
            if (this.CorrectFocusWhenDisabled())
                return;
            var wasLocked = this.IsFocusEventsLocked();
            ASPxClientEdit.prototype.OnFocusCore.call(this);
            this.CorrectInputMaxLength(true);
            if (this.maskInfo != null) {
                this.SavePrevMaskValue();
                this.BeginShowMaskHint();
                this.AttachOnMouseClickIfNeeded();
            }
            if (!wasLocked)
                this.ToggleTextDecoration();
            if (this.isPasswordNullTextInputElementExists())
                setTimeout(function () { this.EnsureShowPopupHelpText(); }.aspxBind(this), 0);
            else
                this.EnsureShowPopupHelpText();
        },
        ensureFocusedNullTextElement: function () {
            if (!this.focusedNullTextElement)
                this.createFocusedNullTextElement();
        },
        getFocusedNullTextElementClassName: function () {
            return focusedNullTextClassName;
        },
        getFocusedNullTextElementTagName: function () {
            return "INPUT";
        },
        getCopyFromInputElementStyles: function () {
            return ["paddingLeft", "paddingTop", "paddingRight", "paddingBottom", "borderCollapse", "borderLeftWidth", "borderTopWidth", "borderRightWidth", "borderBottomWidth"];
        },
        copyStylesFromInputElementToFocusedNullTextElement: function () {
            var input = this.GetInputElement();
            var inputStyle = ASPx.GetCurrentStyle(input);
            var stylesToCopy = this.getCopyFromInputElementStyles();
            for (var i = 0; i < stylesToCopy.length; i++)
                this.focusedNullTextElement.style[stylesToCopy[i]] = inputStyle[stylesToCopy[i]];
        },
        createFocusedNullTextElement: function () {
            this.focusedNullTextElement = document.createElement(this.getFocusedNullTextElementTagName());
            this.focusedNullTextElement.value = this.nullText;
            this.focusedNullTextElement.className = this.getFocusedNullTextElementClassName();
            this.focusedNullTextElement.tabIndex = -1;
            ASPx.SetElementDisplay(this.focusedNullTextElement, false);
            this.copyStylesFromInputElementToFocusedNullTextElement();
            if (this.nullTextOnFocusCssText) {
                var styleSheet = ASPx.GetCurrentStyleSheet();
                this.focusedNullTextElement.className += " " + ASPx.CreateImportantStyleRule(styleSheet, this.nullTextOnFocusCssText);
            }
            var inputElement = this.GetInputElement();
            inputElement.parentNode.insertBefore(this.focusedNullTextElement, inputElement.nextSibling);
        },
        ensureActivateFocusedNullTextMechanism: function () {
            if (this.nullTextDisplayMode === NullTextDisplayMode.UnfocusedAndFocused) {
                if (this.IsNull(this.GetValue()))
                    this.changeFocusedNullTextElementVisibility(true);
                this.setFocusedNullTextTimer();
            }
        },
        ensureDeactivateFocusedNullTextMechanism: function () {
            if (this.nullTextDisplayMode === NullTextDisplayMode.UnfocusedAndFocused) {
                this.clearFocusedNullTextTimer();
                this.changeFocusedNullTextElementVisibility(false);
            }
        },
        setFocusedNullTextTimer: function () {
            if (this.focusedNullTextTimerID === -1)
                this.focusedNullTextTimerID = ASPx.Timer.SetControlBoundInterval(this.onFocusedNullTextVisibilityCheck, this, ASPx.PasteCheckInterval);
        },
        clearFocusedNullTextTimer: function () {
            this.focusedNullTextTimerID = ASPx.Timer.ClearInterval(this.focusedNullTextTimerID);
        },
        onFocusedNullTextVisibilityCheck: function (evt) {
            if (!this.needShowFocusedNullText() && this.isFocusedNullTextElementDisplayed())
                this.changeFocusedNullTextElementVisibility(false);
            else if (this.needShowFocusedNullText() && !this.isFocusedNullTextElementDisplayed())
                this.changeFocusedNullTextElementVisibility(true);
        },
        isFocusedNullTextElementDisplayed: function () {
            return this.focusedNullTextElement && ASPx.GetElementDisplay(this.focusedNullTextElement);
        },
        needShowFocusedNullText: function () {
            if (this.focusedNullTextTimerID === -1)
                return this.IsNull(this.GetValue());
            var result = this.GetInputElement().value === "";
            if (this.CanApplyNullTextDecoration)
                result = result && this.CanApplyNullTextDecoration();
            return result;
        },
        changeFocusedNullTextElementVisibility: function (visible) {
            this.ensureFocusedNullTextElement();
            ASPx.SetElementDisplay(this.focusedNullTextElement, visible);
            if (visible)
                this.adjustFocusedNullTextElement();
        },
        getInputElementAbsoluteX: function (input) {
            var result = ASPx.GetAbsoluteX(input);
            if (ASPx.Browser.Opera || ASPx.Browser.AndroidMobilePlatform)
                result++;
            return result;
        },
        getInputElementAbsoluteY: function (input) {
            var result = ASPx.GetAbsoluteY(input);
            if (ASPx.Browser.Opera || ASPx.Browser.AndroidMobilePlatform)
                result++;
            return result;
        },
        adjustFocusedNullTextElement: function () {
            var input = this.GetInputElement();
            this.focusedNullTextElement.style.width = input.offsetWidth + "px";
            this.focusedNullTextElement.style.height = input.offsetHeight + "px";
            var inputXPos = this.getInputElementAbsoluteX(input);
            var inputYPos = this.getInputElementAbsoluteY(input);
            ASPx.SetAbsoluteX(this.focusedNullTextElement, inputXPos);
            ASPx.SetAbsoluteY(this.focusedNullTextElement, inputYPos);
            var shiftByX = inputXPos - ASPx.GetAbsoluteX(this.focusedNullTextElement);
            var shiftByY = inputYPos - ASPx.GetAbsoluteY(this.focusedNullTextElement);
            if (shiftByX !== 0)
                this.focusedNullTextElement.style.left = ASPx.PxToFloat(this.focusedNullTextElement.style.left) + shiftByX + "px";
            if (shiftByY !== 0)
                this.focusedNullTextElement.style.top = ASPx.PxToFloat(this.focusedNullTextElement.style.top) + shiftByY + "px";
        },
        ensureAdjustFocusedNullTextElement: function () {
            if (this.isFocusedNullTextElementDisplayed())
                this.adjustFocusedNullTextElement(this.focusedNullTextElement);
        },
        clearMaskedEditorClickEventHandlers: function () {
            for (var i = 0; i < this.maskedEditorClickEventHandlers.length; i++)
                ASPx.Evt.DetachEventFromElement(this.GetInputElement(), "click", this.maskedEditorClickEventHandlers[i]);
            this.maskedEditorClickEventHandlers = [];
        },
        addMaskedEditorClickEventHandler: function () {
            this.maskedEditorClickEventHandlers.push(this.MouseClickOnMaskedEditorFunc);
            ASPx.Evt.AttachEventToElement(this.GetInputElement(), "click", this.MouseClickOnMaskedEditorFunc);
        },
        AttachOnMouseClickIfNeeded: function () {
            this.clearMaskedEditorClickEventHandlers();
            if (this.GetValue() == "" || this.GetValue() == null) {
                this.MouseClickOnMaskedEditorFunc = function (e) {
                    this.clearMaskedEditorClickEventHandlers();
                    var selectionInfo = ASPx.Selection.GetExtInfo(this.GetInputElement());
                    if (selectionInfo.startPos == selectionInfo.endPos)
                        this.SetCaretPosition(this.GetInitialCaretPositionInEmptyMaskedInput());
                }.aspxBind(this);
                this.addMaskedEditorClickEventHandler();
            }
        },
        GetInitialCaretPositionInEmptyMaskedInput: function () {
            var maskParts = this.maskInfo.parts;
            return ASPx.MaskManager.IsLiteralPart(maskParts[0]) ? maskParts[0].GetSize() : 0;
        },
        OnLostFocusCore: function () {
            var wasLocked = this.IsFocusEventsLocked();
            ASPxClientEdit.prototype.OnLostFocusCore.call(this);
            this.CorrectInputMaxLength();
            if (this.maskInfo != null) {
                this.EndShowMaskHint();
                this.HideMaskHint();
                if (this.maskInfo.ApplyFixes(null))
                    this.ApplyMaskInfo(false);
                this.RaiseStandardOnChange();
            }
            if (!wasLocked)
                this.ToggleTextDecoration();
            this.escCount = 0;
            this.EnsureHidePopupHelpText();
        },
        InputMaxLengthCorrectionRequired: function () {
            return ASPx.Browser.IE && ASPx.Browser.Version >= 10 && (!this.isNative || this.nullText != "");
        },
        CorrectInputMaxLength: function (onFocus) {
            if (this.InputMaxLengthCorrectionRequired()) {
                var input = this.GetInputElement();
                if (!ASPx.IsExists(this.inputMaxLength))
                    this.inputMaxLength = input.maxLength;
                input.maxLength = onFocus ? this.inputMaxLength : -1;
            }
        },
        SubscribeToIeDropEvent: function () {
            if (this.InputMaxLengthCorrectionRequired()) {
                var input = this.GetInputElement();
                ASPx.Evt.AttachEventToElement(input, "drop", function (e) { this.CorrectInputMaxLength(true); }.aspxBind(this));
            }
        },
        SetFocus: function () {
            if (this.isPasswordNullTextInputElementExists()) {
                this.GetPasswordNullTextInputElement().focus();
            } else {
                ASPxClientEdit.prototype.SetFocus.call(this);
            }
        },
        OnValueChanged: function () {
            if (this.maskInfo != null) {
                if (this.maskInfo.GetValue() == this.maskValueBeforeUserInput && !this.IsValueChangeForced())
                    return;
                this.SavePrevMaskValue();
            }
            if (this.HasTextDecorators())
                this.SyncRawValue();
            if (!this.IsValueChanged() && !this.IsValueChangeForced())
                return;
            this.SaveChangedValue();
            ASPxClientEdit.prototype.OnValueChanged.call(this);
        },
        IsValueChangeForced: function () {
            return false;
        },
        OnTextChanged: function () {
        },
        SaveChangedValue: function () {
            this.lastChangedValue = this.GetValue();
        },
        RaiseStandardOnChange: function () {
            var element = this.GetInputElement();
            if (element && element.onchange) {
                element.onchange({ target: this.GetInputElement() });
            }
            else if (this.ValueChanged) {
                this.ValueChanged.FireEvent(this);
            }
        },
        RaiseTextChanged: function (processOnServer) {
            if (!this.TextChanged.IsEmpty()) {
                var args = new ASPxClientProcessingModeEventArgs(processOnServer);
                this.TextChanged.FireEvent(this, args);
                processOnServer = args.processOnServer;
            }
            return processOnServer;
        },
        GetText: function () {
            if (this.maskInfo != null) {
                return this.maskInfo.GetText();
            } else {
                var value = this.GetValue();
                return value != null ? value : "";
            }
        },
        SetText: function (value) {
            if (this.maskInfo != null) {
                this.maskInfo.SetText(value);
                this.ApplyMaskInfo(false);
                this.SavePrevMaskValue();
            } else {
                this.SetValue(value);
            }
        },
        SelectAll: function () {
            this.SetSelection(0, -1, false);
        },
        SetCaretPosition: function (pos) {
            var inputElement = this.GetInputElement();
            ASPx.Selection.SetCaretPosition(inputElement, pos);
        },
        GetCaretPosition: function () {
            var inputElement = this.GetInputElement();
            return ASPx.Selection.GetCaretPosition(inputElement);
        },
        SetSelection: function (startPos, endPos, scrollToSelection) {
            var inputElement = this.GetInputElement();
            ASPx.Selection.Set(inputElement, startPos, endPos, scrollToSelection);
        },
        ChangeEnabledAttributes: function (enabled) {
            var inputElement = this.GetInputElement();
            if (inputElement) {
                this.ChangeInputEnabledAttributes(inputElement, ASPx.Attr.ChangeAttributesMethod(enabled), enabled);
                if (this.specialKeyboardHandlingUsed)
                    this.ChangeSpecialInputEnabledAttributes(inputElement, ASPx.Attr.ChangeEventsMethod(enabled), true);
                this.ChangeInputEnabled(inputElement, enabled, this.readOnly);
            }
        },
        ChangeEnabledStateItems: function (enabled) {
            if (!this.isNative) {
                var sc = ASPx.GetStateController();
                sc.SetElementEnabled(this.GetMainElement(), enabled);
                sc.SetElementEnabled(this.GetInputElement(), enabled);
            }
        },
        ChangeInputEnabled: function (element, enabled, readOnly) {
            if (this.UseReadOnlyForDisabled())
                element.readOnly = !enabled || readOnly;
            else
                element.disabled = !enabled;
        },
        ChangeInputEnabledAttributes: function (element, method, enabled) {
            var ieTabIndexFix = enabled && ASPx.Browser.IE && element.setAttribute && ASPx.Attr.IsExistsAttribute(element, "savedtabIndex");
            method(element, "tabIndex");
            if (!enabled) element.tabIndex = -1;
            if (ieTabIndexFix) {
                window.setTimeout(function () {
                    if (element && element.parentNode)
                        element.parentNode.replaceChild(element, element);
                }, 0);
            }
            method(element, "onclick");
            if (!this.NeedFocusCorrectionWhenDisabled())
                method(element, "onfocus");
            method(element, "onblur");
            method(element, "onkeydown");
            method(element, "onkeypress");
            method(element, "onkeyup");
        },
        UseReadOnlyForDisabled: function () {
            return (ASPx.Browser.IE && ASPx.Browser.Version < 10) && !this.isNative;
        },
        NeedFocusCorrectionWhenDisabled: function () {
            return (ASPx.Browser.IE && ASPx.Browser.Version < 10) && !this.isNative;
        },
        OnPostFinalization: function (args) {
            if (this.GetEnabled() || !this.UseReadOnlyForDisabled() || args.isDXCallback)
                return;
            var inputElement = this.GetInputElement();
            if (inputElement) {
                var inputDisabled = inputElement.disabled;
                inputElement.disabled = true;
                window.setTimeout(function () {
                    inputElement.disabled = inputDisabled;
                }.aspxBind(this), 0);
            }
        },
        OnUnload: function () {
            var input = this.GetInputElement();
            if (!input)
                return;
            if (this.IsAutocompleteOffNotRequiredOnUnload())
                ASPx.Attr.RemoveAttribute(input, "autocomplete");
            if (this.focusedNullTextElement)
                ASPx.RemoveElement(this.focusedNullTextElement);
        },
        IsVCardAttributeRequired: function () {
            return this.autoCompleteAttribute && this.autoCompleteAttribute.name !== "autocomplete";
        },
        IsAutocompleteDropDownListRequiredOnFocus: function () {
            return !this.autoCompleteAttribute || this.IsVCardAttributeRequired();
        },
        IsAutocompleteOffRequiredOnInitialize: function () {
            return this.autoCompleteAttribute && this.autoCompleteAttribute.name === "autocomplete" || ASPx.Browser.WebKitFamily;
        },
        IsAutocompleteOffRequiredOnLostFocus: function () {
            return !this.autoCompleteAttribute && this.IsNullTextVisible() && !this.IsVCardAttributeRequired();
        },
        IsAutocompleteOffNotRequiredOnUnload: function () {
            return !this.IsNullTextVisible() || this.IsVCardAttributeRequired();
        },
        IsNullTextVisible: function () {
            return this.nullText && !this.GetValue() && !this.GetText();
        }
    });
    MaskValidationPattern = ASPx.CreateClass(ASPx.ValidationPattern, {
        constructor: function (errorText, maskInfo) {
            this.constructor.prototype.constructor.call(this, errorText);
            this.maskInfo = maskInfo;
        },
        EvaluateIsValid: function (value) {
            return this.maskInfo.IsValid();
        }
    });
    ASPx.Ident.IsASPxClientTextEdit = function (obj) {
        return !!obj.isASPxClientTextEdit;
    };
    var ASPxClientTextBoxBase = ASPx.CreateClass(ASPxClientTextEdit, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.sizingConfig.allowSetHeight = false;
            this.sizingConfig.adjustControl = true;
        }
    });
    var ASPxClientTextBox = ASPx.CreateClass(ASPxClientTextBoxBase, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientTextBox = true;
            this.isCaptchaTextBox = false;
        },
        NeedProcessUnload: function () {
            return ASPxClientTextBoxBase.prototype.NeedProcessUnload.call(this) && !this.isCaptchaTextBox;
        },
        IsValueRestoredByBrowser: function () {
            if (this.isCaptchaTextBox)
                return this.initializeInputValue !== "" && this.initializeInputValue !== this.nullText;
            return ASPxClientTextBoxBase.prototype.IsValueRestoredByBrowser.call(this);
        },
        SynchronizeRestoredValue: function () {
            if (this.isCaptchaTextBox)
                this.SetText(null);
            else
                ASPxClientTextBoxBase.prototype.SynchronizeRestoredValue.call(this);
        },
    });
    ASPxClientTextBox.Cast = ASPxClientControl.Cast;
    ASPx.Ident.IsASPxClientTextBox = function (obj) {
        return !!obj.isASPxClientTextBox;
    };
    var ASPxClientMemo = ASPx.CreateClass(ASPxClientTextEdit, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientMemo = true;
            this.raiseValueChangedOnEnter = false;
            this.maxLength = 0;
            this.pasteTimerID = -1;
            this.pasteTimerActivatorCount = 0;
        },
        Initialize: function () {
            ASPxClientTextEdit.prototype.Initialize.call(this);
            this.SaveChangedValue();
            this.maxLengthRestricted = this.maxLength > 0;
        },
        CutString: function () {
            var text = this.GetText();
            if (text.length > this.maxLength) {
                text = text.substring(0, this.maxLength);
                this.SetText(text);
            }
        },
        EventKeyCodeChangesTheInput: function (evt) {
            if (ASPx.IsPasteShortcut(evt))
                return true;
            else if (evt.ctrlKey)
                return false;
            var keyCode = ASPx.Evt.GetKeyCode(evt);
            var isSystemKey = ASPx.Key.Windows <= keyCode && keyCode <= ASPx.Key.ContextMenu;
            var isFKey = ASPx.Key.F1 <= keyCode && keyCode <= 127;
            return ASPx.Key.Delete < keyCode && !isSystemKey && !isFKey || keyCode == ASPx.Key.Enter || keyCode == ASPx.Key.Space;
        },
        OnTextChangingCheck: function () {
            if (this.maxLengthRestricted)
                this.CutString();
        },
        StartTextChangingTimer: function () {
            if (this.maxLengthRestricted) {
                if (this.pasteTimerActivatorCount == 0)
                    this.SetTextChangingTimer();
                this.pasteTimerActivatorCount++;
            }
        },
        EndTextChangingTimer: function () {
            if (this.maxLengthRestricted) {
                this.pasteTimerActivatorCount--;
                if (this.pasteTimerActivatorCount == 0)
                    this.ClearTextChangingTimer();
            }
        },
        CollapseEditor: function () {
            if (!this.IsAdjustmentRequired()) return;
            var mainElement = this.GetMainElement();
            var inputElement = this.GetInputElement();
            if (!ASPx.IsExistsElement(mainElement) || !ASPx.IsExistsElement(inputElement))
                return;
            ASPxClientTextEdit.prototype.CollapseEditor.call(this);
            var mainElementCurStyle = ASPx.GetCurrentStyle(mainElement);
            if (this.heightCorrectionRequired && mainElement && inputElement) {
                if (mainElement.style.height == "100%" || mainElementCurStyle.height == "100%") {
                    mainElement.style.height = "0";
                    mainElement.wasCollapsed = true;
                }
                inputElement.style.height = "0";
            }
        },
        CorrectEditorHeight: function () {
            var mainElement = this.GetMainElement();
            if (mainElement.wasCollapsed) {
                mainElement.wasCollapsed = null;
                ASPx.SetOffsetHeight(mainElement, ASPx.GetClearClientHeight(ASPx.FindOffsetParent(mainElement)));
            }
            if (!this.isNative) {
                var inputElement = this.GetInputElement();
                var inputClearClientHeight = ASPx.GetClearClientHeight(ASPx.FindOffsetParent(inputElement));
                if (ASPx.Browser.IE) {
                    inputClearClientHeight -= 2;
                    var calculatedMainElementStyle = ASPx.GetCurrentStyle(mainElement);
                    inputClearClientHeight += ASPx.PxToInt(calculatedMainElementStyle.borderTopWidth) + ASPx.PxToInt(calculatedMainElementStyle.borderBottomWidth);
                }
                if (inputClearClientHeight < memoMinHeight)
                    inputClearClientHeight = memoMinHeight;
                ASPx.SetOffsetHeight(inputElement, inputClearClientHeight);
                mainElement.style.height = "100%";
                setTimeout(function () {
                    var inputParentOffsetHeight = ASPx.GetClearClientHeight(ASPx.FindOffsetParent(inputElement));
                    if (inputParentOffsetHeight != inputClearClientHeight) {
                        ASPx.SetOffsetHeight(inputElement, inputParentOffsetHeight);
                    }
                }, 0);
            }
        },
        SetWidth: function (width) {
            ASPxClientTextEdit.prototype.SetWidth.call(this, width);
            if (ASPx.Browser.IE)
                this.AdjustControl();
        },
        SetHeight: function (height) {
            var textarea = this.GetInputElement();
            textarea.style.height = "1px";
            ASPxClientTextEdit.prototype.SetHeight.call(this, height);
            textarea.style.height = ASPx.GetClearClientHeight(this.GetMainElement()) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(textarea) + "px";
        },
        ClearErrorFrameElementsStyles: function () {
            var textarea = this.GetInputElement();
            if (!textarea)
                return;
            var scrollBarPosition = textarea.scrollTop;
            ASPxClientTextEdit.prototype.ClearErrorFrameElementsStyles.call(this);
            if (ASPx.Browser.Firefox)
                textarea.scrollTop = scrollBarPosition;
        },
        OnMouseOver: function () {
            this.StartTextChangingTimer();
        },
        OnMouseOut: function () {
            this.EndTextChangingTimer();
        },
        OnFocus: function () {
            this.StartTextChangingTimer();
            ASPxClientEdit.prototype.OnFocus.call(this);
        },
        OnLostFocus: function () {
            this.EndTextChangingTimer();
            ASPxClientEdit.prototype.OnLostFocus.call(this);
        },
        OnKeyDown: function (evt) {
            if (this.NeedPreventBrowserUndoBehaviour(evt))
                return ASPx.Evt.PreventEvent(evt);
            if (this.maxLengthRestricted) {
                var selection = ASPx.Selection.GetInfo(this.GetInputElement());
                var noCharToReplace = selection.startPos == selection.endPos;
                if (this.GetText().length >= this.maxLength && noCharToReplace && this.EventKeyCodeChangesTheInput(evt)) {
                    return ASPx.Evt.PreventEvent(evt);
                }
            }
            ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
        },
        SetTextChangingTimer: function () {
            this.pasteTimerID = ASPx.Timer.SetControlBoundInterval(this.OnTextChangingCheck, this, ASPx.PasteCheckInterval);
        },
        ClearTextChangingTimer: function () {
            this.pasteTimerID = ASPx.Timer.ClearInterval(this.pasteTimerID);
        },
        getFocusedNullTextElementTagName: function () {
            return "TEXTAREA";
        },
        getCopyFromInputElementStyles: function () {
            var result = ASPxClientTextEdit.prototype.getCopyFromInputElementStyles.call(this);
            result.push("resize");
            return result;
        }
    });
    ASPxClientMemo.Cast = ASPxClientControl.Cast;
    ASPx.Ident.IsASPxClientMemo = function (obj) { return obj && !!obj.isASPxClientMemo; };
    var CLEAR_BUTTON_INDEX = -100;
    var HIDE_CONTENT_CSS_CLASS_NAME = "dxHideContent";
    var setContentVisibility = function (clearButtonElement, value) {
        var action = value ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
        action(clearButtonElement, HIDE_CONTENT_CSS_CLASS_NAME);
    };
    var CLEAR_BUTTON_DISPLAY_MODE = {
        AUTO: 'Auto',
        ALWAYS: 'Always',
        NEVER: 'Never',
        ON_HOVER: 'OnHover'
    };
    var AccessibilityFocusedButtonClassName = "dxAFB";
    var ASPxClientButtonEditBase = ASPx.CreateClass(ASPxClientTextBoxBase, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.allowUserInput = true;
            this.isValueChanging = false;
            this.allowMouseWheel = true;
            this.isMouseOver = false;
            this.buttonCount = 0;
            this.emptyValueMaskDisplayText = "";
            this.clearButtonDisplayMode = CLEAR_BUTTON_DISPLAY_MODE.AUTO;
            this.forceShowClearButtonAlways = false;
            this.recoverClearButtonVisibility = false;
            this.ButtonClick = new ASPxClientEvent();
        },
        Initialize: function () {
            ASPxClientTextBoxBase.prototype.Initialize.call(this);
            this.EnsureEmptyValueMaskDisplayText();
            if (this.HasClearButton())
                this.InitializeClearButton();
            this.InitAccessibilityCompliant();
        },
        InlineInitialize: function () {
            ASPxClientTextBoxBase.prototype.InlineInitialize.call(this);
            if (this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.AUTO) {
                this.clearButtonDisplayMode = this.IsClearButtonVisibleAuto() || this.forceShowClearButtonAlways ?
                    CLEAR_BUTTON_DISPLAY_MODE.ALWAYS : CLEAR_BUTTON_DISPLAY_MODE.NEVER;
            }
            this.EnsureClearButtonVisibility();
        },
        InitializeClearButton: function () {
            if (this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ON_HOVER) {
                ASPx.Evt.AttachMouseEnterToElement(this.GetHoverElementToShowClearButton(), this.OnMouseOver.aspxBind(this), this.OnMouseOut.aspxBind(this));
            }
        },
        GetHoverElementToShowClearButton: function () {
            return this.GetMainElement();
        },
        IsClearButtonVisibleAuto: function () {
            return ASPx.Browser.MobileUI;
        },
        EnsureEmptyValueMaskDisplayText: function () {
            if (this.maskInfo && this.HasClearButton()) {
                var savedText = this.maskInfo.GetText();
                this.maskInfo.SetText("");
                this.emptyValueMaskDisplayText = this.maskInfo.GetText();
                this.maskInfo.SetText(savedText);
            }
        },
        GetButton: function (number) {
            return this.GetChildElement("B" + number);
        },
        GetCustomButtonCollection: function () {
            var buttonElements = [];
            for (var i = 0; i < this.buttonCount; i++) {
                var button = this.GetButton(i);
                if (!!button)
                    buttonElements.push(button);
            }
            return buttonElements;
        },
        GetButtonCollection: function () {
            var buttonElements = [];
            var clearButton = this.GetClearButton();
            if (!!clearButton)
                buttonElements.push(clearButton);
            return buttonElements.concat(this.GetCustomButtonCollection());
        },
        GetAccessibilityAnchor: function (buttonElement) {
            var firstChild = buttonElement.firstElementChild;
            var isExistsAnchorElement = ASPx.Attr.GetAttribute(firstChild, "role") === "button";
            return isExistsAnchorElement ? firstChild : null;
        },
        GetButtonByAccessibilityAnchor: function (anchorElement) {
            return anchorElement.parentNode;
        },
        SetAccessibilityAnchorEnabled: function (buttonElement, enabled) {
            var anchorElement = this.GetAccessibilityAnchor(buttonElement);
            if (ASPx.IsExists(anchorElement))
                ASPx.Attr.SetOrRemoveAttribute(anchorElement, "tabindex", enabled ? "0" : "");
        },
        InitAccessibilityCompliant: function () {
            if (!this.accessibilityCompliant) return;
            var buttonElements = this.GetButtonCollection();
            var labelElements = ASPx.FindAssociatedLabelElements(this);
            for (var i = 0; i < buttonElements.length; i++)
                this.InitAccessibilityAnchor(this.GetAccessibilityAnchor(buttonElements[i]), labelElements);
        },
        InitAccessibilityAnchor: function (anchorElement, labelElements) {
            if (!ASPx.IsExists(anchorElement))
                return;
            for (var i = 0; i < labelElements.length; i++)
                this.ariaExplanatoryTextManager.SetOrRemoveText([anchorElement], labelElements[i], true, false, false);
            this.InitAccessibilityAnchorEvents(anchorElement);
        },
        InitAccessibilityAnchorEvents: function (anchorElement) {
            ASPx.Evt.AttachEventToElement(anchorElement, "keydown", function (evt) { this.OnButtonKeysHandling(evt); }.aspxBind(this));
            ASPx.Evt.AttachEventToElement(anchorElement, "keyup", function (evt) { this.OnButtonKeysHandling(evt); }.aspxBind(this));
            ASPx.Evt.AttachEventToElement(anchorElement, "focus", function (evt) { this.OnButtonGotFocus(evt); }.aspxBind(this));
            ASPx.Evt.AttachEventToElement(anchorElement, "blur", function (evt) { this.OnButtonLostFocus(evt); }.aspxBind(this));
        },
        EmulateButtonMouseEvent: function (sourceElement) {
            var buttonElement = this.GetButtonByAccessibilityAnchor(sourceElement);
            var mouseEvent = buttonElement.onclick || buttonElement.onmousedown || buttonElement.ontouchstart || buttonElement.onpointerdown;
            var emulateMouseEvtArgs = { button: 0, which: 1, srcElement: buttonElement, target: buttonElement };
            if (!!mouseEvent) {
                ASPx.Attr.SetAttribute(sourceElement, "aria-pressed", true);
                setTimeout(function () {
                    mouseEvent(emulateMouseEvtArgs);
                    ASPx.Attr.RemoveAttribute(sourceElement, "aria-pressed");
                }, 300);
            }
        },
        OnButtonKeysHandling: function (evt) {
            var isKeyUp = evt.type == "keyup";
            var keyCode = ASPx.Evt.GetKeyCode(evt);
            var sourceElement = ASPx.Evt.GetEventSource(evt);
            if ((keyCode == ASPx.Key.Space && isKeyUp) || (keyCode == ASPx.Key.Enter && !isKeyUp))
                this.EmulateButtonMouseEvent(sourceElement);
            if (keyCode != ASPx.Key.Tab) {
                evt.cancelBubble = true;
                evt.preventDefault();
            }
            return false;
        },
        OnButtonGotFocus: function (evt) {
            var editor = ASPx.GetControlCollection().Get(this.name);
            var sourceElement = ASPx.Evt.GetEventSource(evt);
            if (!!editor && !editor.CorrectAccessibilityButtonFocus(sourceElement)) {
                var buttonElement = editor.GetButtonByAccessibilityAnchor(sourceElement);
                ASPx.AddClassNameToElement(buttonElement, this.GetAccessibilityFocusedButtonClassName());
                ASPx.EGotFocus(editor.name);
                if (editor.specialKeyboardHandlingUsed)
                    ASPx.ESGotFocus(editor.name);
            }
        },
        OnButtonLostFocus: function (evt) {
            var editor = ASPx.GetControlCollection().Get(this.name);
            var sourceElement = ASPx.Evt.GetEventSource(evt);
            if (!!editor) {
                var buttonElement = editor.GetButtonByAccessibilityAnchor(sourceElement);
                ASPx.RemoveClassNameFromElement(buttonElement, this.GetAccessibilityFocusedButtonClassName());
            }
            setTimeout(function () {
                if (!!editor && !editor.IsEditorElement(ASPx.GetActiveElement())) {
                    ASPx.ELostFocus(editor.name);
                    if (editor.specialKeyboardHandlingUsed)
                        ASPx.ESLostFocus(editor.name);
                }
            }.aspxBind(this), 0);
        },
        ForceRefocusEditor: function (evt, isNativeFocus) {
            if (this.accessibilityCompliant) {
                var srcElement = ASPx.Evt.GetEventSource(evt);
                var customButtons = this.GetCustomButtonCollection();
                for (var i = 0; i < customButtons.length; i++)
                    if (customButtons[i] == srcElement || ASPx.GetIsParent(customButtons[i], srcElement))
                        return;
            }
            ASPxClientEdit.prototype.ForceRefocusEditor.call(this, evt, isNativeFocus);
            if (this.GetInputElement().type == "password") {
                window.setTimeout(function () { this.GetInputElement().focus(); }.bind(this), 0);
            }
        },
        CorrectAccessibilityButtonFocus: function (sourceElement) {
            if (ASPx.Attr.IsExistsAttribute(sourceElement, "tabindex"))
                return false;
            setTimeout(function () {
                var buttonElements = this.GetButtonCollection();
                for (var i = 0; i < buttonElements.length; i++)
                    if (ASPx.GetIsParent(buttonElements[i], sourceElement))
                        this.GetAccessibilityAnchor(buttonElements[i]).focus();
            }.aspxBind(this), 0);
            return true;
        },
        OnKeyDown: function (evt) {
            if (this.NeedEnsureClearButtonVisibilityOnKeyDown()) {
                var hasClearButtonOnHover = this.HasClearButton() && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ON_HOVER;
                this.recoverClearButtonVisibility = hasClearButtonOnHover && ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Tab && !evt.shiftKey;
            }
            ASPxClientTextBoxBase.prototype.OnKeyDown.call(this, evt);
        },
        NeedEnsureClearButtonVisibilityOnKeyDown: function () {
            return this.accessibilityCompliant;
        },
        GetAccessibilityFocusedButtonClassName: function () {
            return AccessibilityFocusedButtonClassName;
        },
        SetButtonVisible: function (number, value) {
            var button = this.GetButton(number);
            if (!button)
                return;
            var isAlwaysShownClearButton = number === CLEAR_BUTTON_INDEX && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ALWAYS;
            var visibilityModifier = isAlwaysShownClearButton ? setContentVisibility : ASPx.SetElementDisplay;
            if (isAlwaysShownClearButton && this.accessibilityCompliant)
                this.SetAccessibilityAnchorEnabled(button, value);
            visibilityModifier(button, value);
        },
        GetButtonVisible: function (number) {
            var button = this.GetButton(number);
            if (number === CLEAR_BUTTON_INDEX && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ALWAYS)
                return button && !ASPx.ElementHasCssClass(button, this.GetHideContentCssClassName());
            return button && ASPx.IsElementVisible(button);
        },
        GetHideContentCssClassName: function () {
            return HIDE_CONTENT_CSS_CLASS_NAME;
        },
        ProcessInternalButtonClick: function (buttonIndex) {
            return false;
        },
        OnButtonClick: function (number) {
            var processOnServer = this.RaiseButtonClick(number);
            if (!this.ProcessInternalButtonClick(number) && processOnServer)
                this.SendPostBack('BC:' + number);
        },
        GetLastSuccesfullValue: function () {
            return this.lastChangedValue;
        },
        OnClear: function () {
            this.ClearEditorValueAndForceOnChange();
            this.ForceRefocusEditor(null, true);
            window.setTimeout(this.EnsureClearButtonVisibility.aspxBind(this), 0);
        },
        ClearEditorValueAndForceOnChange: function () {
            if (this.readOnly || !this.GetButtonVisible(CLEAR_BUTTON_INDEX))
                return;
            var raiseOnChange = this.ClearEditorValueByClearButton();
            if (raiseOnChange)
                this.ForceStandardOnChange();
        },
        ClearEditorValueByClearButton: function () {
            var prevValue = this.GetLastSuccesfullValue();
            this.ClearEditorValueByClearButtonCore();
            return prevValue !== this.GetValue();
        },
        ClearEditorValueByClearButtonCore: function () {
            this.Clear();
            this.GetInputElement().value = '';
        },
        ForceStandardOnChange: function () {
            this.forceValueChanged = true;
            this.RaiseStandardOnChange();
            this.forceValueChanged = false;
        },
        IsValueChangeForced: function () {
            return this.forceValueChanged || ASPxClientTextBoxBase.prototype.IsValueChangeForced.call(this);
        },
        IsValueChanging: function () { return this.isValueChanging; },
        StartValueChanging: function () { this.isValueChanging = true; },
        EndValueChanging: function () { this.isValueChanging = false; },
        IsClearButtonElement: function (element) {
            return ASPx.GetIsParent(this.GetClearButton(), element);
        },
        OnFocusCore: function () {
            ASPxClientTextBoxBase.prototype.OnFocusCore.call(this);
            this.EnsureClearButtonVisibility();
        },
        OnLostFocusCore: function () {
            ASPxClientTextBoxBase.prototype.OnLostFocusCore.call(this);
            this.EnsureClearButtonVisibility();
            this.recoverClearButtonVisibility = false;
        },
        GetClearButton: function () {
            return this.GetButton(CLEAR_BUTTON_INDEX);
        },
        HasClearButton: function () {
            return !!this.GetClearButton();
        },
        RequireShowClearButton: function () {
            return !this.IsClearButtonDisabled() && !this.IsClearButtonNotRequired() && this.RequireShowClearButtonInternal();
        },
        IsClearButtonDisabled: function () {
            return !this.clientEnabled || !this.HasClearButton() || this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.NEVER;
        },
        IsClearButtonNotRequired: function () {
            return !this.IsFocused() && !this.isMouseOver && this.clearButtonDisplayMode !== CLEAR_BUTTON_DISPLAY_MODE.ALWAYS && !this.recoverClearButtonVisibility;
        },
        RequireShowClearButtonInternal: function () {
            return this.IsFocused() && this.RequireShowClearButtonCore() || !this.IsNullState();
        },
        RequireShowClearButtonCore: function () {
            var inputText = this.GetInputElement().value;
            return inputText !== this.GetEmptyValueDisplayText();
        },
        IsFocused: function () {
            return this === ASPx.GetFocusedEditor();
        },
        IsNullState: function () {
            var value = this.GetValue();
            return this.IsNull(value) || value == this.GetEmptyValueDisplayText();
        },
        GetEmptyValueDisplayText: function () {
            return this.maskInfo ? this.emptyValueMaskDisplayText : "";
        },
        EnsureClearButtonVisibility: function () {
            this.SetButtonVisible(CLEAR_BUTTON_INDEX, this.RequireShowClearButton());
        },
        OnMouseOver: function () {
            this.isMouseOver = true;
            this.EnsureClearButtonVisibility();
        },
        OnMouseOut: function () {
            this.isMouseOver = false;
            this.EnsureClearButtonVisibility();
        },
        OnKeyPress: function (evt) {
            if (this.allowUserInput)
                ASPxClientTextBoxBase.prototype.OnKeyPress.call(this, evt);
        },
        OnKeyEventEnd: function (evt, withDelay) {
            ASPxClientTextBoxBase.prototype.OnKeyEventEnd.call(this, evt, withDelay);
            this.EnsureClearButtonVisibility();
        },
        RaiseButtonClick: function (number) {
            var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ButtonClick");
            if (!this.ButtonClick.IsEmpty()) {
                var args = new ASPxClientButtonEditClickEventArgs(processOnServer, number);
                this.ButtonClick.FireEvent(this, args);
                processOnServer = args.processOnServer;
            }
            return processOnServer;
        },
        ChangeEnabledAttributes: function (enabled) {
            ASPxClientTextEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
            for (var i = 0; i < this.buttonCount; i++) {
                var element = this.GetButton(i);
                if (element)
                    this.ChangeButtonEnabledAttributes(element, this.GetChangeButtonEnabledAttributesMethod(enabled));
            }
            if (this.accessibilityCompliant)
                this.ChangeAccessibilityButtonEnabledAttributes(enabled);
        },
        ChangeEnabledStateItems: function (enabled) {
            ASPxClientTextEdit.prototype.ChangeEnabledStateItems.call(this, enabled);
            for (var i = 0; i < this.buttonCount; i++) {
                var element = this.GetButton(i);
                if (element)
                    ASPx.GetStateController().SetElementEnabled(element, enabled);
            }
        },
        GetChangeButtonEnabledAttributesMethod: function (enabled) {
            return ASPx.Attr.ChangeAttributesMethod(enabled);
        },
        ChangeButtonEnabledAttributes: function (element, method) {
            method(element, "onclick");
            method(element, "ondblclick");
            if (ASPx.Browser.Edge)
                method(element, "onmousedown");
            method(element, "on" + ASPx.TouchUIHelper.touchMouseDownEventName);
            method(element, "on" + ASPx.TouchUIHelper.touchMouseUpEventName);
        },
        ChangeInputEnabled: function (element, enabled, readOnly) {
            ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || !this.allowUserInput);
        },
        ChangeAccessibilityButtonEnabledAttributes: function (enabled) {
            var buttonElements = this.GetButtonCollection();
            for (var i = 0; i < buttonElements.length; i++)
                this.SetAccessibilityAnchorEnabled(buttonElements[i], enabled);
        },
        SetValue: function (value) {
            ASPxClientTextEdit.prototype.SetValue.call(this, value);
            if (!this.IsFocused())
                this.EnsureClearButtonVisibility();
        },
        OnAssociatedLabelClick: function (focusableElement) {
            var isValidElement = focusableElement && ASPx.IsActionElement(focusableElement) && ASPx.GetIsParent(this.GetMainElement(), focusableElement) && ASPx.IsElementVisible(focusableElement);
            if (isValidElement)
                focusableElement.focus();
            else
                this.SetFocus();
        }
    });
    var ASPxClientButtonEdit = ASPx.CreateClass(ASPxClientButtonEditBase, {
    });
    ASPxClientButtonEdit.Cast = ASPxClientControl.Cast;
    var ASPxClientButtonEditClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
        constructor: function (processOnServer, buttonIndex) {
            this.constructor.prototype.constructor.call(this, processOnServer);
            this.buttonIndex = buttonIndex;
        }
    });
    var ASPxClientTextEditHelpTextHAlign = {
        Left: "Left",
        Right: "Right",
        Center: "Center"
    };
    var ASPxClientTextEditHelpTextVAlign = {
        Top: "Top",
        Bottom: "Bottom",
        Middle: "Middle"
    };
    var ASPxClientTextEditHelpTextDisplayMode = {
        Inline: "Inline",
        Popup: "Popup"
    };
    var ASPxClientTextEditHelpTextConsts = {
        VERTICAL_ORIENTATION_CLASS_NAME: "dxeVHelpTextSys",
        HORIZONTAL_ORIENTATION_CLASS_NAME: "dxeHHelpTextSys"
    };
    var ASPxClientTextEditHelpText = ASPx.CreateClass(null, {
        constructor: function (editor, helpTextStyle, helpText, position, hAlign, vAlign, margins, animationEnabled, helpTextDisplayMode) {
            this.hAlign = hAlign;
            this.vAlign = vAlign;
            this.animationEnabled = animationEnabled;
            this.displayMode = helpTextDisplayMode;
            this.editor = editor;
            this.editorMainElement = editor.GetMainElement();
            this.margins = margins ? { Top: margins[0], Right: margins[1], Bottom: margins[2], Left: margins[3] } : null;
            this.defaultMargins = { Top: 10, Right: 10, Bottom: 10, Left: 10 };
            this.position = position;
            this.helpTextElement = this.createHelpTextElement();
            this.setHelpTextZIndex(true);
            this.prepareHelpTextElement(helpTextStyle, helpText);
        },
        getRows: function (table) {
            return ASPx.GetChildNodesByTagName(table, "TR");
        },
        getCells: function (row) {
            return ASPx.GetChildNodesByTagName(row, "TD");
        },
        getCellByIndex: function (row, cellIndex) {
            return this.getCells(row)[cellIndex];
        },
        getCellIndex: function (row, cell) {
            var cells = this.getCells(row);
            for (var i = 0; i < cells.length; i++) {
                if (cells[i] === cell)
                    return i;
            }
        },
        isHorizontal: function (position) {
            return position === ASPx.Position.Left || position === ASPx.Position.Right;
        },
        isVertical: function (position) {
            return position === ASPx.Position.Top || position === ASPx.Position.Bottom;
        },
        createEmptyCell: function (assignClassName) {
            var cell = document.createElement("TD");
            if (assignClassName)
                cell.className = "dxeFakeEmptyCell";
            return cell;
        },
        addHelpTextCellToExternalTableWithTwoCells: function (captionCell, errorCell, helpTextCell, errorTableBody, tableRows) {
            var captionPosition = this.editor.captionPosition;
            var errorCellPosition = this.editor.errorCellPosition;
            var helpTextRow = this.isVertical(this.position) ? document.createElement("TR") : null;
            if (captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
                captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
            if (captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
                captionCell.parentNode.insertBefore(helpTextCell, captionCell);
            if (captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
                tableRows[0].appendChild(helpTextCell);
            if (captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
                tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
            if (captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.appendChild(helpTextRow);
            }
            if (captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
            }
            if (captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
            }
            if (captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
            }
            if (captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                helpTextRow.appendChild(this.createEmptyCell());
                errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
            }
            if (this.position === ASPx.Position.Bottom) {
                if (captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right) {
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell());
                    errorTableBody.appendChild(helpTextRow);
                }
            }
            if (captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(this.createEmptyCell());
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
            }
            if (captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(this.createEmptyCell());
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.appendChild(helpTextRow);
            }
            if (this.position === ASPx.Position.Right) {
                if (captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Left || captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Top
                    || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right) {
                    tableRows[1].appendChild(helpTextCell);
                    tableRows[0].appendChild(this.createEmptyCell());
                }
                if (captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Bottom || captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left) {
                    tableRows[0].appendChild(helpTextCell);
                    tableRows[1].appendChild(this.createEmptyCell());
                }
            }
            if (this.position === ASPx.Position.Left) {
                if (captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right
                    || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Left) {
                    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
                    tableRows[0].insertBefore(this.createEmptyCell(), tableRows[0].childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Bottom) {
                    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
                    tableRows[0].insertBefore(this.createEmptyCell(errorCellPosition === ASPx.Position.Top), tableRows[0].childNodes[0]);
                    tableRows[2].insertBefore(this.createEmptyCell(errorCellPosition !== ASPx.Position.Top), tableRows[2].childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Top) {
                    tableRows[2].insertBefore(helpTextCell, tableRows[2].childNodes[0]);
                    tableRows[0].insertBefore(this.createEmptyCell(false), tableRows[0].childNodes[0]);
                    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
                    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
                    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
                    tableRows[2].insertBefore(this.createEmptyCell(false), tableRows[2].childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Bottom
                    || captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Right) {
                    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
                    tableRows[1].insertBefore(this.createEmptyCell(), tableRows[1].childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Left && this.isVertical(errorCellPosition)) {
                    captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
                    var emptyCellParentRow = errorCellPosition === ASPx.Position.Top ? tableRows[0] : tableRows[1];
                    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
                    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
                }
            }
            if (this.position === ASPx.Position.Right) {
                if (captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Bottom) {
                    tableRows[1].appendChild(helpTextCell);
                    tableRows[0].appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Top));
                    tableRows[2].appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Top));
                }
                if (captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Top) {
                    tableRows[2].appendChild(helpTextCell);
                    tableRows[0].appendChild(this.createEmptyCell(false));
                    tableRows[1].appendChild(this.createEmptyCell(true));
                }
                if (captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
                    tableRows[0].appendChild(helpTextCell);
                    tableRows[1].appendChild(this.createEmptyCell(true));
                    tableRows[2].appendChild(this.createEmptyCell(false));
                }
                if (captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Right) {
                    tableRows[0].appendChild(helpTextCell);
                    tableRows[1].appendChild(this.createEmptyCell());
                }
                if (captionPosition === ASPx.Position.Right && this.isVertical(errorCellPosition)) {
                    captionCell.parentNode.insertBefore(helpTextCell, captionCell);
                    var emptyCellParentRow = errorCellPosition === ASPx.Position.Top ? tableRows[0] : tableRows[1];
                    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
                    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
                }
            }
            if (captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top && this.isHorizontal(errorCellPosition)) {
                if (errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(helpTextCell);
                }
                else {
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell());
                }
                errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
            }
            if (captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top && this.isHorizontal(errorCellPosition)) {
                if (errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(helpTextCell);
                }
                else {
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell());
                }
                errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
            }
            if (captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom && this.isHorizontal(errorCellPosition)) {
                if (errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(helpTextCell);
                }
                else {
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell());
                }
                errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
            }
            if (captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left) {
                helpTextRow.appendChild(this.createEmptyCell(true));
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.appendChild(helpTextRow);
            }
            if (captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
                helpTextRow.appendChild(helpTextCell);
                helpTextRow.appendChild(this.createEmptyCell());
                errorTableBody.appendChild(helpTextRow);
            }
            if (this.position === ASPx.Position.Bottom) {
                if (captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Right || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Right));
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Right));
                    errorTableBody.appendChild(helpTextRow);
                }
                if (captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(false));
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(helpTextCell);
                    errorTableBody.appendChild(helpTextRow);
                }
                if (captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Right) {
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(this.createEmptyCell(false));
                    errorTableBody.appendChild(helpTextRow);
                }
            }
            if (this.position === ASPx.Position.Top) {
                if (captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Right || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Right));
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Right));
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Left) {
                    helpTextRow.appendChild(this.createEmptyCell(false));
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(helpTextCell);
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                }
                if (captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Right) {
                    helpTextRow.appendChild(helpTextCell);
                    helpTextRow.appendChild(this.createEmptyCell(true));
                    helpTextRow.appendChild(this.createEmptyCell(false));
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                }
            }
        },
        addHelpTextCellToExternalTableWithErrorCell: function (errorCell, helpTextCell, errorTableBody, tableRows) {
            var errorCellPosition = this.editor.errorCellPosition;
            var helpTextRow = document.createElement("TR");
            if (this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
                tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
            if (this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
                tableRows[0].appendChild(helpTextCell);
            if (this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
            }
            if (this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
                helpTextRow.appendChild(helpTextCell);
                errorTableBody.appendChild(helpTextRow);
            }
            if (errorCellPosition === ASPx.Position.Left && this.isVertical(this.position)) {
                helpTextRow.appendChild(this.createEmptyCell(true));
                helpTextRow.appendChild(helpTextCell);
                if (this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                else
                    errorTableBody.appendChild(helpTextRow);
            }
            if (errorCellPosition === ASPx.Position.Right && this.isVertical(this.position)) {
                helpTextRow.appendChild(helpTextCell);
                helpTextRow.appendChild(this.createEmptyCell(true));
                if (this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                else
                    errorTableBody.appendChild(helpTextRow);
            }
            if (this.position === ASPx.Position.Left && this.isVertical(errorCellPosition)) {
                var helpTextParentRowIndex = errorCellPosition === ASPx.Position.Top ? 1 : 0;
                var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
                tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
                tableRows[emptyCellRowIndex].insertBefore(this.createEmptyCell(true), tableRows[emptyCellRowIndex].childNodes[0]);
            }
            if (this.position === ASPx.Position.Right && this.isVertical(errorCellPosition)) {
                var helpTextParentRowIndex = errorCellPosition === ASPx.Position.Top ? 1 : 0;
                var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
                tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
                tableRows[emptyCellRowIndex].appendChild(this.createEmptyCell(true));
            }
        },
        addHelpTextCellToExternalTableWithCaption: function (captionCell, helpTextCell, errorTableBody, tableRows) {
            var captionPosition = this.editor.captionPosition;
            var helpTextRow = document.createElement("TR");
            if (captionPosition === ASPx.Position.Left && this.isVertical(this.position)) {
                helpTextRow.appendChild(this.createEmptyCell());
                helpTextRow.appendChild(helpTextCell);
                if (this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                else
                    errorTableBody.appendChild(helpTextRow);
            }
            if (this.position === ASPx.Position.Left && this.isVertical(captionPosition)) {
                var helpTextParentRowIndex = captionPosition === ASPx.Position.Top ? 1 : 0;
                var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
                tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
                tableRows[emptyCellParentRowIndex].insertBefore(this.createEmptyCell(), tableRows[emptyCellParentRowIndex].childNodes[0]);
            }
            if (this.position === ASPx.Position.Right && this.isVertical(captionPosition)) {
                var helpTextParentRowIndex = captionPosition === ASPx.Position.Top ? 1 : 0;
                var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
                tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
                tableRows[emptyCellParentRowIndex].appendChild(this.createEmptyCell());
            }
            if (captionPosition === ASPx.Position.Right && this.isVertical(this.position)) {
                helpTextRow.appendChild(helpTextCell);
                helpTextRow.appendChild(this.createEmptyCell());
                if (this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                else
                    errorTableBody.appendChild(helpTextRow);
            }
            if (this.isVertical(captionPosition) && this.isVertical(this.position)) {
                helpTextRow.appendChild(helpTextCell);
                if (captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
                if (captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom)
                    errorTableBody.appendChild(helpTextRow);
                if (captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                if (captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom)
                    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
            }
            if (captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Left)
                captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
            if (captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Right)
                captionCell.parentNode.insertBefore(helpTextCell, captionCell);
            if (captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Right)
                tableRows[0].appendChild(helpTextCell);
            if (captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Left)
                tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
        },
        addHelpTextCellToExternalTableWithEditorOnly: function (helpTextCell, errorTableBody, tableRows) {
            if (this.isHorizontal(this.position)) {
                if (this.position === ASPx.Position.Left)
                    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
                else
                    tableRows[0].appendChild(helpTextCell);
            }
            else {
                var helpTextRow = document.createElement("TR");
                helpTextRow.appendChild(helpTextCell);
                if (this.position === ASPx.Position.Top)
                    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
                else
                    errorTableBody.appendChild(helpTextRow);
            }
        },
        addHelpTextCellToExternalTable: function (errorTable, helpTextCell) {
            var errorTableBody = ASPx.GetNodeByTagName(errorTable, "TBODY", 0);
            var tableRows = this.getRows(errorTableBody);
            var captionCell = this.editor.GetCaptionCell();
            var errorCell = this.editor.GetErrorCell();
            if (captionCell) {
                if (errorCell)
                    this.addHelpTextCellToExternalTableWithTwoCells(captionCell, errorCell, helpTextCell, errorTableBody, tableRows);
                else
                    this.addHelpTextCellToExternalTableWithCaption(captionCell, helpTextCell, errorTableBody, tableRows);
            }
            else if (errorCell)
                this.addHelpTextCellToExternalTableWithErrorCell(errorCell, helpTextCell, errorTableBody, tableRows);
            else
                this.addHelpTextCellToExternalTableWithEditorOnly(helpTextCell, errorTableBody, tableRows);
        },
        createExternalTable: function () {
            var externalTable = document.createElement("TABLE");
            externalTable.id = this.editor.name + ASPx.EditElementSuffix.ExternalTable;
            externalTable.cellPadding = 0;
            externalTable.cellSpacing = 0;
            this.applyExternalTableStyle(externalTable);
            var editorWidth = this.editorMainElement.style.width;
            if (ASPx.IsPercentageSize(editorWidth)) {
                externalTable.style.width = editorWidth;
                this.editorMainElement.style.width = "100%";
                this.editor.width = "100%";
            }
            var externalTableBody = document.createElement("TBODY");
            var externalTableRow = document.createElement("TR");
            var externalTableCell = document.createElement("TD");
            externalTable.appendChild(externalTableBody);
            externalTableBody.appendChild(externalTableRow);
            externalTableRow.appendChild(externalTableCell);
            this.editorMainElement.parentNode.appendChild(externalTable);
            ASPx.ChangeElementContainer(this.editorMainElement, externalTableCell, true);
            return externalTable;
        },
        applyExternalTableStyle: function (externalTable) {
            var externalTableStyle = this.editor.externalTableStyle;
            if (externalTableStyle.length > 0) {
                this.applyStyleToElement(externalTable, externalTableStyle);
            }
        },
        applyStyleToElement: function (element, style) {
            element.className = style[0];
            if (style[1]) {
                var styleSheet = ASPx.GetCurrentStyleSheet();
                element.className += " " + ASPx.CreateImportantStyleRule(styleSheet, style[1]);
            }
        },
        createInlineHelpTextElement: function () {
            var helpTextElement = document.createElement("TD");
            var externalTable = this.editor.GetExternalTable();
            if (!externalTable)
                externalTable = this.createExternalTable();
            this.addHelpTextCellToExternalTable(externalTable, helpTextElement);
            return helpTextElement;
        },
        createPopupHelpTextElement: function () {
            var helpTextElement = document.createElement("DIV");
            ASPx.InsertElementAfter(helpTextElement, this.editor.GetMainElement());
            ASPx.AnimationHelper.setOpacity(helpTextElement, 0);
            ASPx.SetElementDisplay(helpTextElement, false);
            return helpTextElement;
        },
        createHelpTextElement: function () {
            return this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup ?
                this.createPopupHelpTextElement() : this.createInlineHelpTextElement();
        },
        prepareHelpTextElement: function (helpTextStyle, helpText) {
            this.helpTextElement.id = this.getHelpTextElementId();
            this.applyStyleToElement(this.helpTextElement, helpTextStyle);
            ASPx.SetInnerHtml(this.helpTextElement, "<SPAN>" + helpText + "</SPAN>");
            if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
                this.updatePopupHelpTextPosition();
            else {
                var isVerticalOrientation = this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom;
                var orientationClassName = isVerticalOrientation ? ASPxClientTextEditHelpTextConsts.VERTICAL_ORIENTATION_CLASS_NAME :
                    ASPxClientTextEditHelpTextConsts.HORIZONTAL_ORIENTATION_CLASS_NAME;
                this.helpTextElement.className += " " + orientationClassName;
                this.setInlineHelpTextElementAlign();
                ASPx.SetElementDisplay(this.helpTextElement, this.editor.clientVisible);
            }
        },
        getHelpTextElementId: function () {
            return this.editor.name + ASPx.TEHelpTextElementSuffix;
        },
        setInlineHelpTextElementAlign: function () {
            var hAlignValue = "", vAlignValue = "";
            switch (this.hAlign) {
                case ASPxClientTextEditHelpTextHAlign.Left: hAlignValue = "left"; break;
                case ASPxClientTextEditHelpTextHAlign.Right: hAlignValue = "right"; break;
                case ASPxClientTextEditHelpTextHAlign.Center: hAlignValue = "center"; break;
            }
            switch (this.vAlign) {
                case ASPxClientTextEditHelpTextVAlign.Top: vAlignValue = "top"; break;
                case ASPxClientTextEditHelpTextVAlign.Bottom: vAlignValue = "bottom"; break;
                case ASPxClientTextEditHelpTextVAlign.Middle: vAlignValue = "middle"; break;
            }
            this.helpTextElement.style.textAlign = hAlignValue;
            this.helpTextElement.style.verticalAlign = vAlignValue;
        },
        getHelpTextMargins: function () {
            if (this.margins)
                return this.margins;
            var result = this.defaultMargins;
            if (this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom)
                result.Left = result.Right = 0;
            else
                result.Top = result.Bottom = 0;
            return result;
        },
        updatePopupHelpTextPosition: function (editorMainElement) {
            var editorWidth = this.editorMainElement.offsetWidth;
            var editorHeight = this.editorMainElement.offsetHeight;
            var helpTextWidth = this.helpTextElement.offsetWidth;
            var helpTextHeight = this.helpTextElement.offsetHeight;
            var editorX = ASPx.GetAbsoluteX(this.editorMainElement);
            var editorY = ASPx.GetAbsoluteY(this.editorMainElement);
            var helpTextX = 0, helpTextY = 0;
            var margins = this.getHelpTextMargins();
            if (this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom) {
                if (this.position === ASPx.Position.Top)
                    helpTextY = editorY - margins.Bottom - helpTextHeight;
                else if (this.position === ASPx.Position.Bottom)
                    helpTextY = editorY + editorHeight + margins.Top;
                if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Left)
                    helpTextX = editorX + margins.Left;
                else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Right)
                    helpTextX = editorX + editorWidth - helpTextWidth - margins.Right;
                else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Center) {
                    var editorCenterX = editorX + editorWidth / 2;
                    var helpTextWidthWithMargins = helpTextWidth + margins.Left + margins.Right;
                    helpTextX = editorCenterX - helpTextWidthWithMargins / 2 + margins.Left;
                }
            } else {
                if (this.position === ASPx.Position.Left)
                    helpTextX = editorX - margins.Right - helpTextWidth;
                else if (this.position === ASPx.Position.Right)
                    helpTextX = editorX + editorWidth + margins.Left;
                if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Top)
                    helpTextY = editorY + margins.Top;
                else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Bottom)
                    helpTextY = editorY + editorHeight - helpTextHeight - margins.Bottom;
                else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Middle) {
                    var editorCenterY = editorY + editorHeight / 2;
                    var helpTextHeightWithMargins = helpTextHeight + margins.Top + margins.Bottom;
                    helpTextY = editorCenterY - helpTextHeightWithMargins / 2 + margins.Top;
                }
            }
            helpTextX = helpTextX < 0 ? 0 : helpTextX;
            helpTextY = helpTextY < 0 ? 0 : helpTextY;
            ASPx.SetAbsoluteX(this.helpTextElement, helpTextX);
            ASPx.SetAbsoluteY(this.helpTextElement, helpTextY);
        },
        setHelpTextZIndex: function (hide) {
            var newZIndex = 41998 * (hide ? -1 : 1);
            if (this.helpTextElement.style.zIndex != newZIndex)
                this.helpTextElement.style.zIndex = newZIndex;
        },
        hide: function () {
            if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
                ASPx.SetElementDisplay(this.helpTextElement, false);
            }
            else
                this.hidePopupHelpText();
        },
        hidePopupHelpText: function () {
            var onHidePopupHelpTextComplete = function () {
                this.setHelpTextZIndex(true);
                ASPx.SetElementDisplay(this.helpTextElement, false);
            }.aspxBind(this);
            if (this.animationEnabled)
                ASPx.AnimationHelper.fadeOut(this.helpTextElement, onHidePopupHelpTextComplete);
            else {
                ASPx.AnimationHelper.setOpacity(this.helpTextElement, 0);
                onHidePopupHelpTextComplete();
            }
        },
        show: function () {
            if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
                ASPx.SetElementDisplay(this.helpTextElement, true);
            }
            else
                this.showPopupHelpText();
        },
        showPopupHelpText: function () {
            ASPx.SetElementDisplay(this.helpTextElement, true);
            this.updatePopupHelpTextPosition();
            if (this.animationEnabled)
                ASPx.AnimationHelper.fadeIn(this.helpTextElement);
            else
                ASPx.AnimationHelper.setOpacity(this.helpTextElement, 1);
            this.setHelpTextZIndex(false);
        }
    });
    var ASPxOutOfRangeWarningManager = ASPx.CreateClass(null, {
        constructor: function (editor, minValue, maxValue, defaultMinValue, defaultMaxValue, outOfRangeWarningElementPosition, valueFormatter) {
            this.editor = editor;
            this.outOfRangeWarningElementPosition = outOfRangeWarningElementPosition;
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.defaultMinValue = defaultMinValue;
            this.defaultMaxValue = defaultMaxValue;
            this.minMaxValueFormatter = valueFormatter;
            this.animationDuration = 150;
            this.CreateOutOfRangeWarningElement();
        },
        SetMinValue: function (minValue) {
            this.minValue = minValue;
            this.UpdateOutOfRangeWarningElementText();
        },
        SetMaxValue: function (maxValue) {
            this.maxValue = maxValue;
            this.UpdateOutOfRangeWarningElementText();
        },
        CreateOutOfRangeWarningElement: function () {
            this.outOfRangeWarningElement = document.createElement("DIV");
            this.outOfRangeWarningElement.id = this.editor.name + "OutOfRWarn";
            ASPx.InsertElementAfter(this.outOfRangeWarningElement, this.editor.GetOutOfRangeWarningElementPrevSibling());
            ASPx.AnimationHelper.setOpacity(this.outOfRangeWarningElement, 0);
            this.outOfRangeWarningElement.className = this.editor.outOfRangeWarningClassName;
            this.UpdateOutOfRangeWarningElementText();
        },
        IsValueInRange: function (value) {
            return (!this.IsMinValueExists() || value >= this.minValue)
                && (!this.IsMaxValueExists() || value <= this.maxValue);
        },
        IsMinValueExists: function () {
            return ASPx.IsExists(this.minValue) && !isNaN(this.minValue) && this.minValue !== this.defaultMinValue;
        },
        IsMaxValueExists: function () {
            return ASPx.IsExists(this.maxValue) && !isNaN(this.maxValue) && this.maxValue !== this.defaultMaxValue;
        },
        GetFormattedTextByValue: function (value) {
            if (this.minMaxValueFormatter)
                return this.minMaxValueFormatter.Format(value);
            return value;
        },
        GetWarningText: function () {
            var textTemplate = arguments[0];
            var valueTexts = [];
            for (var i = 1; i < arguments.length; i++) {
                var valueText = this.GetFormattedTextByValue(arguments[i]);
                valueTexts.push(valueText);
            }
            return ASPx.Formatter.Format(textTemplate, valueTexts);
        },
        UpdateOutOfRangeWarningElementText: function () {
            var text = "";
            if (this.IsMinValueExists() && this.IsMaxValueExists())
                text = this.GetWarningText(this.editor.outOfRangeWarningMessages[0], this.minValue, this.maxValue);
            if (this.IsMinValueExists() && !this.IsMaxValueExists())
                text = this.GetWarningText(this.editor.outOfRangeWarningMessages[1], this.minValue);
            if (!this.IsMinValueExists() && this.IsMaxValueExists())
                text = this.GetWarningText(this.editor.outOfRangeWarningMessages[2], this.maxValue);
            ASPx.SetInnerHtml(this.outOfRangeWarningElement, "<LABEL>" + text + "</LABEL>");
        },
        UpdateOutOfRangeWarningElementVisibility: function (currentValue) {
            var isValidValue = currentValue == null || this.IsValueInRange(currentValue);
            if (!isValidValue && !this.outOfRangeWarningElementShown)
                this.ShowOutOfRangeWarningElement();
            if (isValidValue && this.outOfRangeWarningElementShown)
                this.HideOutOfRangeWarningElement();
        },
        GetOutOfRangeWarningElementCoordinates: function () {
            var editorMainElement = this.editor.GetMainElement();
            var editorWidth = editorMainElement.offsetWidth;
            var editorHeight = editorMainElement.offsetHeight;
            var editorX = ASPx.GetAbsoluteX(editorMainElement);
            var editorY = ASPx.GetAbsoluteY(editorMainElement);
            var outOfRangeWarningElementX = this.outOfRangeWarningElementPosition === ASPx.Position.Right ? editorX + editorWidth : editorX;
            var outOfRangeWarningElementY = this.outOfRangeWarningElementPosition === ASPx.Position.Right ? editorY : editorY + editorHeight;
            outOfRangeWarningElementX = outOfRangeWarningElementX < 0 ? 0 : outOfRangeWarningElementX;
            outOfRangeWarningElementY = outOfRangeWarningElementY < 0 ? 0 : outOfRangeWarningElementY;
            return {
                x: outOfRangeWarningElementX,
                y: outOfRangeWarningElementY
            };
        },
        ShowOutOfRangeWarningElement: function () {
            this.outOfRangeWarningElement.style.display = "inline";
            var outOfRangeWarningElementCoordinates = this.GetOutOfRangeWarningElementCoordinates();
            ASPx.SetAbsoluteX(this.outOfRangeWarningElement, outOfRangeWarningElementCoordinates.x);
            ASPx.SetAbsoluteY(this.outOfRangeWarningElement, outOfRangeWarningElementCoordinates.y);
            ASPx.AnimationHelper.fadeIn(this.outOfRangeWarningElement, null, this.animationDuration);
            this.ScrollToWarningElementIfRequired(outOfRangeWarningElementCoordinates);
            this.outOfRangeWarningElementShown = true;
        },
        HideOutOfRangeWarningElement: function () {
            ASPx.AnimationHelper.fadeOut(this.outOfRangeWarningElement, function () {
                ASPx.SetElementDisplay(this.outOfRangeWarningElement, false);
            }.aspxBind(this), this.animationDuration);
            this.outOfRangeWarningElementShown = false;
        },
        ScrollToWarningElementIfRequired: function (outOfRangeWarningElementCoordinates) {
            if (this.outOfRangeWarningElementPosition === ASPx.Position.Right) {
                var warnElementRightPos = outOfRangeWarningElementCoordinates.x
                    + ASPx.PxToInt(ASPx.GetCurrentStyle(this.outOfRangeWarningElement).marginLeft)
                    + this.outOfRangeWarningElement.offsetWidth;
                if (warnElementRightPos > ASPx.GetCurrentDocumentWidth())
                    window.scrollTo(warnElementRightPos, ASPx.GetDocumentScrollTop());
            }
            if (this.outOfRangeWarningElementPosition === ASPx.Position.Bottom) {
                var warnElementBottomPos = outOfRangeWarningElementCoordinates.y
                    + ASPx.PxToInt(ASPx.GetCurrentStyle(this.outOfRangeWarningElement).marginTop)
                    + this.outOfRangeWarningElement.offsetHeight;
                if (warnElementBottomPos > ASPx.GetCurrentDocumentHeight())
                    window.scrollTo(ASPx.GetDocumentScrollLeft(), warnElementBottomPos);
            }
        }
    });
    ASPx.MMMouseOut = function (name, evt) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit != null) edit.OnMouseOut(evt);
    };
    ASPx.MMMouseOver = function (name, evt) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit != null) edit.OnMouseOver(evt);
    };
    ASPx.MaskHintTimerProc = function () {
        var focusedEditor = ASPx.GetFocusedEditor();
        if (focusedEditor != null && ASPx.IsFunction(focusedEditor.MaskHintTimerProc))
            focusedEditor.MaskHintTimerProc();
    };
    ASPx.ETextChanged = function (name) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit != null) edit.OnTextChanged();
    };
    ASPx.BEClick = function (name, number) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit != null) edit.OnButtonClick(number);
    };
    ASPx.BEClear = function (name, evt) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit && (evt.button === 0 || ASPx.Browser.TouchUI)) {
            var requireFocus = !ASPx.Browser.VirtualKeyboardSupported || ASPx.Browser.MSTouchUI;
            (function performOnClean() {
                if (requireFocus && !edit.IsFocused())
                    edit.GetInputElement().focus();
                if (edit.IsFocused() || !requireFocus)
                    edit.OnClear();
                else
                    window.setTimeout(performOnClean, 100);
            })();
        }
    };
    ASPx.SetFocusToTextEditWithDelay = function (name) {
        window.setTimeout(function () {
            var edit = ASPx.GetControlCollection().Get(name);
            if (!edit)
                return;
            if (ASPx.Browser.IE)
                edit.SetCaretPosition(0);
            else
                edit.SetFocus();
        }, 500);
    };
    window.ASPxClientTextEdit = ASPxClientTextEdit;
    window.ASPxClientTextBoxBase = ASPxClientTextBoxBase;
    window.ASPxClientTextBox = ASPxClientTextBox;
    window.ASPxClientMemo = ASPxClientMemo;
    window.ASPxClientButtonEditBase = ASPxClientButtonEditBase;
    window.ASPxClientButtonEdit = ASPxClientButtonEdit;
    window.ASPxClientButtonEditClickEventArgs = ASPxClientButtonEditClickEventArgs;
})();

var MVCx = {};
(function (jQuery) {
    var RunStartupScriptBlockID = "dxrssb";
    var $ = jQuery;
    MVCx.CallbackHtmlContentPrefix = "/*DXHTML*/";
    MVCx.CallbackHtmlContentPlaceholder = "<%html%>";
    MVCx.EditorsValuesKey = "DXMVCEditorsValues";
    MVCx.ScriptNames = {
        MicrosoftMvcAjax: 'Microsoft Mvc Ajax',
        JQuery: 'jQuery',
        JQueryValidation: 'jQuery Validation',
        JQueryUnobtrusiveValidation: 'jQuery Unobtrusive Validation'
    };
    MVCx.PerformControlCallback = function (name, url, arg, params, customParams) {
        if (ASPx.GetPostHandler().cancelPostProcessing)
            return;
        var data = {};
        data.DXCallbackName = name;
        data["__DXCallbackArgument"] = arg;
        ASPx.Data.MergeHashTables(data, params);
        ASPx.Data.MergeHashTables(data, customParams);
        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'html',
            data: data,
            error: function (response) {
                var ctrl = ASPx.GetControlCollection().Get(data.DXCallbackName);
                if (ctrl != null) {
                    if (typeof (response.responseText) == "string" && response.responseText != "")
                        ctrl.DoCallbackError(response.responseText);
                    else if (typeof (response) == "string" && response != "")
                        ctrl.DoCallbackError(response);
                }
            },
            success: function (response) {
                var ctrl = ASPx.GetControlCollection().Get(data.DXCallbackName);
                if (ctrl != null) ctrl.DoCallback(response);
            }
        });
    };
    MVCx.ThrowExceptionOnCallback = function () {
        ASPx.ShowKBErrorMessage("Invalid server response. It is required that a Partial View contains only the extension definition code, without any additional markup. To learn more, see ", "KA20010");
    };
    MVCx.IsCustomCallback = function (command) {
        return command && command.toUpperCase() == "CUSTOMCALLBACK";
    };
    MVCx.IsCustomDataCallback = function (command) {
        var commandInUpperCase = command.toUpperCase();
        return commandInUpperCase == "CUSTOMDATACALLBACK" || commandInUpperCase == "CUSTOMVALUES";
    };
    MVCx.GetCustomActionCallBackMethod = function (control) {
        return control.customActionCallBack || control.callBack;
    };
    MVCx.AddCallbackParam = function (params, input) {
        if (!params || !input || input.name == "undefined" || input.disabled) return;
        if (params.hasOwnProperty(input.name))
            return;
        switch (input.type) {
            case "checkbox":
                params[input.name] = input.checked;
                break;
            case "radio":
                if (input.checked)
                    params[input.name] = input.value;
                break;
            case "select-multiple":
                var values = $(input).val() || [];
                params[input.name] = values.join ? values.join(',') : values;
                break;
            default:
                params[input.name] = input.value;
        }
    };
    MVCx.AddCallbackParamsInContainer = function (params, container) {
        if (!params || !container) return;
        var requireCollectEditorValues = true;
        var dxEditorValues = {};
        var $form = $(container).closest("form");
        if ($form.length > 0) {
            dxEditorValues = GetCachedVisibleEditorValues($form[0].DXEditorValues);
            requireCollectEditorValues = false;
        }
        $(container).find("input,textarea,select").each(function () {
            MVCx.AddCallbackParam(params, this);
            if (requireCollectEditorValues) {
                var dxEditor = ASPx.GetControlCollection().Get(this.name);
                if (IsPossiblePassEditorValue(dxEditor))
                    dxEditorValues[this.name] = MVCx.GetEditorValueByControl(dxEditor);
            }
        });
        params[MVCx.EditorsValuesKey] = ASPx.Json.ToJson(dxEditorValues);
    };
    MVCx.AddDXEditorValuesInContainer = function (params, container) {
        if (!params || !container || !ASPx.ProcessEditorsInContainer)
            return;
        var editorValues = {};
        ASPx.ProcessEditorsInContainer(container, function (control) {
            editorValues[control.name] = MVCx.GetEditorValueByControl(control);
        }, null, null, true, false);
        params[MVCx.EditorsValuesKey] = ASPx.Json.ToJson(editorValues);
    };
    function GetCachedVisibleEditorValues(editorValues) {
        var result = {};
        for (var key in editorValues) {
            if (!editorValues.hasOwnProperty(key)) continue;
            var editor = ASPx.GetControlCollection().GetByName(key);
            if (editor && ASPx.IsValidElement(editor.GetMainElement()))
                result[key] = editorValues[key];
        }
        return result;
    }
    function IsPossiblePassEditorValue(dxEditor) {
        if (!dxEditor || !dxEditor.GetEnabled || !dxEditor.GetEnabled())
            return false;
        if (dxEditor.InCallback() || !dxEditor.GetValueString)
            return false;
        if (IsGridLookup(dxEditor))
            return !dxEditor.GetGridView().InCallback();
        return true;
    }
    MVCx.EditorValuesSynchronizer = {
        RefreshFormsCache: function () {
            ASPx.GetControlCollection().ForEachControl(function (control) { this.UpdateFormValue(control); }.aspxBind(this));
            this.CacheAllFormValues();
        },
        UpdateFormValue: function (control, isPushValueToCache) {
            if (!control || !control.GetMainElement) return;
            var mainElement = control.GetMainElement();
            var form = ASPx.GetParentByTagName(mainElement, "FORM");
            if (!form || !MVCx.IsExistingClientEdit(control) || !mainElement || !ASPx.IsValidElement(mainElement)) {
                this.RemoveFormCacheValue(form);
                return;
            }
            var newEditorValue = control.GetEnabled() ? MVCx.GetEditorValueByControl(control) : null;
            this.SetFormCacheValue(form, control.name, newEditorValue);
            if (isPushValueToCache)
                this.CacheFormValues(form);
        },
        CacheAllFormValues: function () {
            for (var i = 0; i < document.forms.length; i++) {
                this.CacheFormValues(document.forms[i]);
            }
        },
        CacheFormValues: function (form) {
            if (!form || !form.DXEditorValues || !form.dxRequireCache)
                return;
            if (!ASPx.IsValidElement(form.DXEditorValuesField)) {
                form.DXEditorValuesField = ASPx.CreateHiddenField(MVCx.EditorsValuesKey, "");
                form.appendChild(form.DXEditorValuesField);
            }
            if (form.DXEditorValuesField)
                form.DXEditorValuesField.value = ASPx.Json.ToJson(form.DXEditorValues);
        },
        SetFormCacheValue: function (form, controlName, value) {
            if (!form.DXEditorValues)
                form.DXEditorValues = {};
            if (form.DXEditorValues[controlName] !== value) {
                form.DXEditorValues[controlName] = value;
                form.dxRequireCache = true;
            }
        },
        RemoveFormCacheValue: function (form, controlName) {
            if (!form || !form.DXEditorValues) return;
            if (ASPx.IsExistsElement(form.DXEditorValues[controlName])) {
                delete form.DXEditorValues[controlName];
                form.dxRequireCache = true;
            }
        }
    };
    MVCx.IsExistingClientEdit = function (control) {
        if (!ASPx.Ident.IsASPxClientEdit(control))
            return false;
        var getValueInputMethod = MVCx.GetValueInputMethod(control);
        return getValueInputMethod ? ASPx.IsExistsElement(getValueInputMethod.call(control)) : true;
    };
    MVCx.GetValueInputElement = function (control) {
        var method = MVCx.GetValueInputMethod(control);
        return method ? method.call(control) : null;
    };
    MVCx.GetValueInputMethod = function (control) {
        return control.FindStateInputElement || control.GetStateInput || control.GetInputElement;
    };
    MVCx.GetEditorValueByControl = function (control) {
        if (IsMultipleValueOwner(control))
            return control.GetSelectedValues();
        if (IsTokenBox(control))
            return control.GetTokenValuesCollection();
        return control.GetValue();
    };
    MVCx.EditorValueChanged = function (s, e) {
        MVCx.EditorValuesSynchronizer.UpdateFormValue(s, true);
        if (s.context) s.context.validate("blur");
    };
    MVCx.GetEditorByElements = function (elements) {
        for (var i = 0; i < elements.length; i++) {
            var control = MVCx.GetEditorByElement(elements[i]);
            if (control)
                return control;
        }
        return null;
    };
    MVCx.GetEditorByElement = function (element) {
        var control = MVCx.GetControlByElement(element);
        return control && ASPx.Ident.IsASPxClientEdit(control) ? control : null;
    };
    MVCx.GetControlByElement = function (element) {
        var valueInputPostfixes = ["", "_I", "_S", "_VI", "_STATE", "_KBS"];
        for (var j = 0; j < valueInputPostfixes.length; j++) {
            var regexp = new RegExp("(\S*)" + valueInputPostfixes[j] + "$");
            var controlName = regexp.test(element.id) ? element.id.replace(regexp, function (a, b) { return b; }) : "";
            var control = ASPx.GetControlCollection().Get(controlName);
            if (control)
                return control;
        }
        return null;
    };
    MVCx.JQueryValidation = {
        IsEnabled: function (control) {
            return !!($.validator && control.GetParentForm());
        },
        Validate: function (control) {
            var valueInput = MVCx.GetValueInputElement(control);
            return $(valueInput).valid();
        },
        SetUVAttributes: function (editor, rules) {
            if (!editor || !rules) return;
            $input = $(MVCx.GetValueInputElement(editor));
            $.each(rules, function (ruleName, ruleValue) {
                if (ruleName === 'data-val-remote-dxfieldsmap')
                    editor.uvRemoteAdditionalFields = ASPx.GetObjectKeys(ruleValue);
                var attrValue = ruleName === 'data-val-remote-dxfieldsmap' ? JSON.stringify(ruleValue) : ruleValue;
                $input.attr(ruleName, attrValue);
            });
        },
        PrepareUVRules: function (control, prepareMethod) {
            var form = control.GetParentForm();
            if (form.dxUVExecuted)
                return;
            if (prepareMethod)
                prepareMethod();
            var $form = $(form);
            if ($form.off)
                $form.off(".validate");
            $form.removeData("validator");
            $.validator.unobtrusive.parse(form);
            form.dxUVExecuted = true;
        },
        ResetUVRules: function (control) {
            var form = control.GetParentForm();
            if (form && typeof (form.dxUVExecuted) !== "undefined")
                delete form.dxUVExecuted;
        },
        HasPendingRequests: function (control) {
            var validator = this.GetValidator(control);
            return validator && validator.pendingRequest;
        },
        SetOnStopRequestHandler: function (control, handler) {
            var validator = this.GetValidator(control);
            if (validator)
                validator.dxOnStopRequestHandler = handler;
        },
        GetValidator: function (control) {
            var form = control.GetParentForm();
            return form ? $(form).data('validator') : null;
        },
        EnsureStopRequestHandling: function (validator) {
            if (!validator || validator.pendingRequest || !validator.dxOnStopRequestHandler) return;
            validator.dxOnStopRequestHandler();
            delete validator.dxOnStopRequestHandler;
        },
        GetValidationErrorMessage: function (editor) {
            var validator = this.GetValidator(editor);
            return validator && validator.errorMap && validator.errorMap[editor.uniqueID];
        }
    };
    function PatchScript(scriptName, markerObjectName, patchMethod, required) {
        var externalScriptProcessor = ASPx.GetExternalScriptProcessor();
        if (externalScriptProcessor)
            externalScriptProcessor.Process(scriptName, markerObjectName, patchMethod, required);
        else if (ASPx.GetGlobalObject(markerObjectName))
            patchMethod();
    }
    PatchScript(MVCx.ScriptNames.MicrosoftMvcAjax, 'Sys.Mvc', function () {
        MVCx.RequiredValidator = function MVCx_RequiredValidator() {
            MVCx.RequiredValidator.initializeBase(this);
        };
        MVCx.RequiredValidator.prototype = {
            editor: null,
            getEditor: function (context) {
                if (!this.editor)
                    this.editor = MVCx.GetEditorByElements(context.fieldContext.elements);
                return this.editor;
            },
            validate: function (value, context) {
                var editor = this.getEditor(context);
                if (editor)
                    return value != null && String(value).length > 0;
                return MVCx.RequiredValidator.callBaseMethod(this, 'validate', [value, context]);
            }
        };
        MVCx.RequiredValidator.registerClass('MVCx.RequiredValidator', Sys.Mvc.RequiredValidator);
        MVCx.RequiredValidator.create = function (rule) {
            return Function.createDelegate(new MVCx.RequiredValidator(), new MVCx.RequiredValidator().validate);
        };
        Sys.Mvc.ValidatorRegistry.validators["required"] = MVCx.RequiredValidator.create;
        MVCx.FieldContext = function MVCx_FieldContext(formContext) {
            MVCx.FieldContext.initializeBase(this);
        };
        MVCx.FieldContext.prototype = {
            editor: null,
            getEditor: function () {
                if (!this.editor)
                    this.editor = MVCx.GetEditorByElements(this.elements);
                return this.editor;
            },
            getDisabled: function () {
                var editor = this.getEditor();
                return this.elements[0].disabled || editor && !editor.GetEnabled();
            },
            enableDynamicValidation: function () {
                MVCx.FieldContext.callBaseMethod(this, 'enableDynamicValidation');
                var editor = this.getEditor(this.elements);
                if (editor) editor.context = this;
            },
            _getStringValue: function () {
                var editor = this.getEditor();
                if (editor)
                    return editor.GetValueString();
                return MVCx.FieldContext.callBaseMethod(this, '_getStringValue');
            },
            $12: function () {
                var editor = this.getEditor();
                if (editor)
                    return editor.GetValueString();
                return MVCx.FieldContext.callBaseMethod(this, '$12');
            },
            validate: function (eventName) {
                var errors = MVCx.FieldContext.callBaseMethod(this, 'validate', [eventName]);
                var editor = this.getEditor();
                if (editor) {
                    var errorMessage = errors.length == 0 ? null : errors[0];
                    MVCx.SetEditorValidationParameters(editor, errorMessage);
                }
                return errors;
            }
        };
        MVCx.FieldContext.registerClass('MVCx.FieldContext', Sys.Mvc.FieldContext);
        if (Sys.Mvc.FormContext) {
            if (Sys.Mvc.FormContext._parseJsonOptions)
                eval("Sys.Mvc.FormContext._parseJsonOptions = " + Sys.Mvc.FormContext._parseJsonOptions.toString().replace("Sys.Mvc.FieldContext", "MVCx.FieldContext"));
            else if (Sys.Mvc.FormContext.$12)
                eval("Sys.Mvc.FormContext.$12 = " + Sys.Mvc.FormContext.$12.toString().replace("Sys.Mvc.FieldContext", "MVCx.FieldContext"));
            if (Sys.Mvc.FormContext.prototype.validate)
                eval("Sys.Mvc.FormContext.prototype.validate = " + Sys.Mvc.FormContext.prototype.validate.toString().replace("elements[0].disabled", "getDisabled()"));
        }
        if (typeof (ASPx.ClearProcessingProc) != "undefined") {
            MVCx.ClearProcessingProc = ASPx.ClearProcessingProc;
            ASPx.ClearProcessingProc = function (edit) {
                MVCx.ClearProcessingProc(edit);
                if (edit.context) edit.context.clearErrors();
            };
        }
        if (typeof (Sys.Mvc.MvcHelpers) != "undefined") {
            var _asyncRequestInternal = Sys.Mvc.MvcHelpers._asyncRequest || Sys.Mvc.MvcHelpers.$2;
            Sys.Mvc.MvcHelpers._asyncRequest = Sys.Mvc.MvcHelpers.$2 = function (url, verb, body, triggerElement, ajaxOptions) {
                ASPx.ResourceManager.SynchronizeResources(
                    function (name, resource) {
                        if (body && body.length > 0 && !body.endsWith('&'))
                            body += '&';
                        body += (name + "=" + resource);
                    }
                );
                var customMethodOnSuccess = ajaxOptions.onSuccess;
                ajaxOptions.onSuccess = function (ajaxContext) {
                    if (customMethodOnSuccess)
                        customMethodOnSuccess(ajaxContext);
                    ASPx.ProcessScriptsAndLinks('', true);
                };
                _asyncRequestInternal(url, verb, body, triggerElement, ajaxOptions);
            };
        }
    });
    PatchScript(MVCx.ScriptNames.JQueryValidation, 'jQuery.validator', function () {
        MVCx.getValueOfEditor = function (element) {
            var control = MVCx.GetEditorByElement(element);
            return control ? control.GetValueString() : element.value.replace(/\r/g, "");
        };
        function getMainElement(element) {
            var control = MVCx.GetEditorByElement(element);
            if (!control)
                return element;
            return control.GetExternalTable() || control.GetMainElement();
        }
        var elementsInternal = $.validator.prototype.elements;
        $.validator.prototype.elements = function () {
            var $elements = elementsInternal.call(this);
            var $dxElements = $();
            ASPxClientControl.GetControlCollection().ProcessControlsInContainer(this.currentForm, function (control) {
                if (!MVCx.IsExistingClientEdit(control))
                    return;
                var input = MVCx.GetValueInputElement(control);
                if (input && $.inArray(input, $elements) == -1)
                    $dxElements = $dxElements.add(input);
            });
            $elements = $.merge($elements, $dxElements);
            if ($dxElements.length) {
                var allFormInputElements = Array.prototype.slice.call(this.currentForm.getElementsByTagName("INPUT"));
                $elements.sort(function (a, b) {
                    return allFormInputElements.indexOf(a) - allFormInputElements.indexOf(b);
                });
            }
            return $elements;
        };
        var validationTargetForBase = $.validator.prototype.validationTargetFor;
        $.validator.prototype.validationTargetFor = function (element) {
            return MVCx.GetEditorByElement(element) ? element : validationTargetForBase.call(this, element);
        };
        var checkInternal = $.validator.prototype.check;
        $.validator.prototype.check = function (element) {
            var control = MVCx.GetEditorByElement(element);
            if (control && (!control.GetEnabled() || !MVCx.validateInvisibleEditors && !control.IsVisible()))
                return;
            var isValid = checkInternal.call(this, element, $);
            if (control)
                MVCx.SetEditorValidationParameters(control, this.errorMap[element.name]);
            return isValid;
        };
        var elementValueBase = $.validator.prototype.elementValue;
        $.validator.prototype.elementValue = elementValueBase && function (element) {
            var dxControl = MVCx.GetEditorByElement(element);
            return dxControl ? GetStringValue(dxControl) : elementValueBase.call(this, element);
        };
        var GetStringValue = function (dxControl) {
            var value = dxControl.GetValueString();
            return value == null ? '' : value;
        };
        var showLabelInternal = $.validator.prototype.showLabel;
        $.validator.prototype.showLabel = function (element, message) {
            var control = MVCx.GetEditorByElement(element);
            if (control)
                MVCx.SetEditorValidationParameters(control, message);
            if (control && !$.validator.unobtrusive)
                element = control.GetMainElement();
            if (!control || !control.GetErrorCell() && !control.dxgvColumnIndex)
                showLabelInternal.call(this, element, message);
        };
        var optionalInternal = $.validator.prototype.optional;
        $.validator.prototype.optional = function (element) {
            var dxControl = MVCx.GetEditorByElement(element);
            if (!this.elementValue && dxControl)
                return !$.validator.methods.required.call(this, dxControl.GetValueString(), element) && "dependency-mismatch";
            return optionalInternal.call(this, element);
        };
        if (!$.validator.prototype.elementValue) {
            var requiredInternal = $.validator.methods.required;
            $.validator.methods.required = function (value, element, param) {
                return requiredInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var rangeInternal = $.validator.methods.range;
            $.validator.methods.range = function (value, element, param) {
                return rangeInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
            var minlengthInternal = $.validator.methods.minlength;
            $.validator.methods.minlength = function (value, element, param) {
                return minlengthInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
            var maxlengthInternal = $.validator.methods.maxlength;
            $.validator.methods.maxlength = function (value, element, param) {
                return maxlengthInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
            var rangelengthInternal = $.validator.methods.rangelength;
            $.validator.methods.rangelength = function (value, element, param) {
                return rangelengthInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
            var minInternal = $.validator.methods.min;
            $.validator.methods.min = function (value, element, param) {
                return minInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
            var maxInternal = $.validator.methods.max;
            $.validator.methods.max = function (value, element, param) {
                return maxInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
            var emailInternal = $.validator.methods.email;
            $.validator.methods.email = function (value, element) {
                return emailInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var urlInternal = $.validator.methods.url;
            $.validator.methods.url = function (value, element) {
                return urlInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var dateISOInternal = $.validator.methods.dateISO;
            $.validator.methods.dateISO = function (value, element) {
                return dateISOInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var numberInternal = $.validator.methods.number;
            $.validator.methods.number = function (value, element) {
                return numberInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var digitsInternal = $.validator.methods.digits;
            $.validator.methods.digits = function (value, element) {
                return digitsInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var creditcardInternal = $.validator.methods.creditcard;
            $.validator.methods.creditcard = function (value, element) {
                return creditcardInternal.call(this, MVCx.getValueOfEditor(element), element);
            };
            var acceptInternal = $.validator.methods.accept;
            $.validator.methods.accept = function (value, element, param) {
                return acceptInternal.call(this, MVCx.getValueOfEditor(element), element, param);
            };
        }
        var dateInternal = $.validator.methods.date;
        $.validator.methods.date = function (value, element) {
            var editor = MVCx.GetEditorByElement(element);
            if (editor)
                value = editor.GetValue();
            return dateInternal.call(this, value, element);
        };
        var equalToInternal = $.validator.methods.equalTo;
        $.validator.methods.equalTo = function (value, element, param) {
            var target = $(param).unbind(".validate-equalTo").bind("blur.validate-equalTo", function () {
                $(element).valid();
            });
            var dxEditor;
            if (target.length > 0)
                dxEditor = MVCx.GetEditorByElement(target[0]);
            return dxEditor ? value == dxEditor.GetValue() : equalToInternal.call(this, value, element, param);
        };
        var remoteInternal = $.validator.methods.remote;
        $.validator.methods.remote = function (value, element, param) {
            if (param && param.data) {
                $.each(param.data, function (fieldName) {
                    var editorName = param.dxfieldsmap && param.dxfieldsmap[fieldName] || fieldName;
                    var dxeditor = ASPx.GetControlCollection().Get(editorName);
                    if (dxeditor)
                        param.data[fieldName] = dxeditor.GetValueString();
                });
            }
            return remoteInternal.call(this, value, element, param);
        };
        var stopRequestInternal = $.validator.prototype.stopRequest;
        $.validator.prototype.stopRequest = function (element, valid) {
            stopRequestInternal.call(this, element, valid);
            MVCx.JQueryValidation.EnsureStopRequestHandling(this);
        };
        var focusInvalidInternal = $.validator.prototype.focusInvalid;
        $.validator.prototype.focusInvalid = function () {
            if (!this.settings.focusInvalid)
                return;
            var firstInvalidElement = this.errorList.length && this.errorList[0].element;
            var control = firstInvalidElement && MVCx.GetEditorByElement(firstInvalidElement);
            if (control)
                control.SetFocus();
            else
                focusInvalidInternal.call(this);
        };
        $.validator.addMethod("dxmask", function (value, element, params) {
            var control = MVCx.GetEditorByElement(element);
            if (control && control.maskInfo)
                return control.maskInfo.IsValid();
            return true;
        });
        $.validator.addMethod("dxdaterange", function (value, element, params) {
            var control = MVCx.GetEditorByElement(element);
            if (!control || !control.GetStartDateEdit)
                return;
            if (control.MinOrMaxRangeExist && !control.MinOrMaxRangeExist())
                return true;
            var pattern = new ASPx.DateRangeValidationPattern(control.GetStartDateEdit(), control);
            return pattern && pattern.EvaluateIsValid();
        });
    });
    PatchScript(MVCx.ScriptNames.JQueryUnobtrusiveValidation, 'jQuery.validator.unobtrusive', function () {
        $.validator.unobtrusive.adapters.add("dxmask", [], function (options) {
            options.rules["dxmask"] = {};
            options.messages["dxmask"] = options.message;
        });
        $.validator.unobtrusive.adapters.add("dxdaterange", [], function (options) {
            options.rules["dxdaterange"] = {};
            options.messages["dxdaterange"] = options.message;
        });
        $.each($.validator.unobtrusive.adapters, function (i, adapter) {
            if (adapter.name != "remote") return;
            adapter.params.push("dxfieldsmap");
            adapter.adaptCore = adapter.adapt;
            adapter.adapt = function (options) {
                this.adaptCore(options);
                if (options.params.dxfieldsmap)
                    $.extend(options.rules["remote"], { dxfieldsmap: ASPx.Json.Eval(options.params.dxfieldsmap) });
            };
        });
        $.validator.unobtrusive.prototype = {
            parseElement: $.validator.unobtrusive.parseElement
        };
        $.validator.unobtrusive.parseElement = function (element, skipAttach) {
            $.validator.unobtrusive.prototype.parseElement.call(this, element, skipAttach);
            var editor = MVCx.GetEditorByElement(element);
            if (editor && ASPx.IsExists(editor.validationPatterns))
                editor.validationPatterns = [];
        };
    });
    PatchScript(MVCx.ScriptNames.JQuery, 'jQuery', function () {
        if ($.expr && $.expr[":"] && $.expr[":"].tabbable) {
            var tabbableCore = $.expr[":"].tabbable;
            $.expr[":"].tabbable = function (element) {
                return tabbableCore.call(this, element) || isInternalTabbableInput(element);
            };
            var isInternalTabbableInput = function (element) {
                if (!element || element.tagName != 'INPUT') return false;
                var tabIndex = ASPx.Attr.GetAttribute(element, ASPx.Attr.GetTabIndexAttributeName());
                return (!tabIndex || tabIndex >= 0) && IsVisibleControlInput(element);
            };
            var IsVisibleControlInput = function (element) {
                var control = MVCx.GetControlByElement(element);
                return control && control.IsVisible();
            };
        }
        $.prototype.ajax = $.ajax;
        $.ajax = function (url, settings) {
            if (typeof url === "object") {
                settings = url;
                url = undefined;
            }
            if (typeof url === "string" && !ASPx.IsExists(settings)) {
                settings = { url: url };
                url = undefined;
            }
            if (isPassDXHeaders(settings)) {
                var baseBeforeSendMethod = settings.beforeSend || jQuery.ajaxSettings.beforeSend;
                settings.beforeSend = function (jqXHR, options) {
                    var result;
                    if (baseBeforeSendMethod)
                        result = baseBeforeSendMethod.call(this, jqXHR, options);
                    ASPx.ResourceManager.SynchronizeResources(
                        function (name, resource) {
                            jqXHR.setRequestHeader(name, resource);
                        }
                    );
                    return result;
                };
            }
            var baseCompleteMethod = settings.complete;
            settings.complete = function (jqXHR, status) {
                $("[data-ajax=true]")
                    .filter(function () { return (this.action || this.href) === settings.url; })
                    .each(function () {
                        var insertionMode = ($(this).attr("data-ajax-mode") || "").toUpperCase();
                        if (insertionMode && insertionMode != "REPLACE" && MVCx.isDXScriptInitializedOnLoad)
                            ASPx.RunStartupScripts();
                    });
                var result;
                if (baseCompleteMethod)
                    result = baseCompleteMethod.call(this, jqXHR, status);
                return result;
            };
            var params = [];
            if (url)
                params.push(url);
            params.push(settings);
            return $.prototype.ajax.apply(this, params);
        };
        if (compareJQueryVersion("1.12") < 0) {
            $.prototype.clean = $.clean;
            $.clean = function (elems, context, fragment, scripts) {
                var result = $.prototype.clean.call(this, elems, context, fragment, scripts);
                for (var i = 0; scripts && i < scripts.length; i++) {
                    var script = scripts[i];
                    if (isDXScriptElement(script)) {
                        fragment.appendChild(script);
                        scripts.splice(i--, 1);
                    }
                }
                return result;
            };
            var mapBase = $.map;
            $.map = function (elems, callback, arg) {
                function calbackInternal(element, index, arg) {
                    if (isDXScriptElement(element))
                        return;
                    return callback(element, index, arg);
                }
                return mapBase.call(this, elems, calbackInternal, arg);
            };
            $.fn.prototype = {
                domManip: $.fn.domManip
            };
            $.fn.domManip = function (args, table, callback) {
                var result = $.fn.prototype.domManip.apply(this, arguments);
                if (MVCx.isDXScriptInitializedOnLoad && haveElementsDXScript(args))
                    ASPx.RunStartupScripts();
                return result;
            };
        }
        if (compareJQueryVersion("1.12") >= 0) {
            var mapBase = $.map;
            $.map = function (elems, callback, arg) {
                var reenableScripts = [];
                function calbackInternal(element, index, arg) {
                    var disabledDXScript = isDXScriptElement(element) && element.type.indexOf("true") == 0;
                    var ret = callback(element, index, arg);
                    if (disabledDXScript && element.type.indexOf("true") < 0)
                        reenableScripts.push(element);
                    return ret;
                }
                var ret = mapBase.call(this, elems, calbackInternal, arg);
                var lastIndex = -1;
                for (var i = 0; i < reenableScripts.length; i++) {
                    lastIndex = elems.indexOf(reenableScripts[i]);
                    elems[lastIndex] = document.createElement("script");
                }
                if (lastIndex > -1) {
                    ASPxClientUtils.ArrayRemoveAt(elems, lastIndex);
                    elems.push(createRunStartupScriptBlock());
                    window.setTimeout(function () { disposeRunStartupScriptBlock(); }, 0);
                }
                return ret;
            };
        }
        function compareJQueryVersion(version) {
            if (!$.fn.jquery)
                return 1;
            var jQVersionParts = $.fn.jquery.split('.');
            var versionParts = version.split('.');
            var count = Math.max(jQVersionParts.length, versionParts.length);
            for (var i = 0; i < count; i++) {
                var jQPart = i < jQVersionParts.length ? parseInt(jQVersionParts[i]) : 0;
                var vPart = i < versionParts.length ? parseInt(versionParts[i]) : 0;
                var cmp = (jQPart > vPart) - (jQPart < vPart);
                if (cmp != 0)
                    return cmp;
            }
            return 0;
        }
        function isDXScriptElement(element) {
            return element && element.id && element.id.indexOf && element.id.indexOf(ASPx.startupScriptPrefix) == 0;
        }
        function haveElementsDXScript(elements) {
            if (!elements || !elements.length)
                return false;
            var isDXScriptFound = false;
            var dxScriptSelector = "script[id^=" + ASPx.startupScriptPrefix + "]";
            var isHtmlExpression = /<|&#?\w+;/;
            for (var i = 0; i < elements.length && !isDXScriptFound; i++) {
                var element = elements[i];
                if ($.type(element) != "object" && !isHtmlExpression.test(element)) continue;
                var $element = element instanceof $ ? element : $("<div>" + element + "</div>");
                $element.each(function () {
                    var $this = $(this);
                    if ($this.is(dxScriptSelector) || $this.find(dxScriptSelector).length) {
                        isDXScriptFound = true;
                        return false;
                    }
                });
            }
            return isDXScriptFound;
        }
        function createRunStartupScriptBlock() {
            var script = document.getElementById(RunStartupScriptBlockID);
            if (script)
                return script;
            var script = document.createElement("script");
            script.id = RunStartupScriptBlockID;
            script.type = "dx/script";
            script.text = "MVCx.isDXScriptInitializedOnLoad && ASPx.RunStartupScripts();";
            document.body.appendChild(script);
            script.type = "text/javascript";
            return script;
        }
        function disposeRunStartupScriptBlock() {
            var script = ASPx.GetElementById(RunStartupScriptBlockID);
            ASPx.RemoveElement(script);
        }
        function isPassDXHeaders(ajaxOptions) {
            if (!ajaxOptions)
                return true;
            if (ajaxOptions.hasOwnProperty("passDXHeaders"))
                return ajaxOptions.passDXHeaders;
            var JSON_VERBOSE_MIME_TYPE = "application/json;odata=verbose";
            if (ajaxOptions.accepts && ajaxOptions.accepts.json && ajaxOptions.accepts.json.indexOf(JSON_VERBOSE_MIME_TYPE) > -1)
                return false;
            if (ajaxOptions.headers && ajaxOptions.headers.hasOwnProperty("accepts") && ajaxOptions.headers.accepts.indexOf(JSON_VERBOSE_MIME_TYPE) > -1)
                return false;
            return true;
        }
    }, true);
    MVCx.isDXScriptInitializedOnLoad = false;
    MVCx.validateInvisibleEditors = false;
    MVCx.EditorSetValue = function (value) {
        if (this.oldSetValue)
            this.oldSetValue(value);
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.SetEditorValidationParameters = function (control, errorText) {
        var isValid = !errorText;
        if (control.GetIsValid() == isValid && (isValid || control.GetErrorText() == errorText))
            return;
        if (!isValid)
            control.SetErrorText(errorText, true);
        if (ASPx.Ident.scripts.ASPxClientValidationSummary)
            ASPx.GetClientValidationSummaryCollection().AllowNewErrorsAccepting();
        control.SetIsValid(isValid);
        if (ASPx.Ident.scripts.ASPxClientValidationSummary)
            ASPx.GetClientValidationSummaryCollection().ForbidNewErrorsAccepting();
    };
    MVCx.MultipleEditorSelectValues = function (values) {
        if (this.oldSelectValues)
            this.oldSelectValues(values);
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.MultipleEditorSelectAll = function () {
        if (this.oldSelectAll)
            this.oldSelectAll();
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.MultipleEditorUnselectAll = function () {
        if (this.oldUnselectAll)
            this.oldUnselectAll();
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.ListBoxSetSelectedIndex = function (index) {
        if (this.oldSetSelectedIndex)
            this.oldSetSelectedIndex(index);
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.ListBoxSetIndicesSelectionState = function (indices, selected) {
        if (this.oldSetIndicesSelectionState) {
            this.oldSetIndicesSelectionState(indices, selected);
        }
        MVCx.EditorValueChanged(this.listBoxControl, new ASPxClientEventArgs());
    };
    MVCx.ComboBoxSelectIndex = function (index, initialize) {
        if (this.oldSelectIndex)
            this.oldSelectIndex(index, initialize);
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
        MVCx.EditorValueChanged(this.GetListBoxControl(), new ASPxClientEventArgs());
    };
    MVCx.TokenBoxAddToken = function (text) {
        if (this.oldAddToken)
            this.oldAddToken(text);
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.TokenBoxClearTokenCollection = function () {
        if (this.oldClearTokenCollection)
            this.oldClearTokenCollection();
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    MVCx.TokenBoxSetTokenCollection = function (collection) {
        if (this.oldSetTokenCollection)
            this.oldSetTokenCollection(collection);
        MVCx.EditorValueChanged(this, new ASPxClientEventArgs());
    };
    function aspxMVCControlsInitialized(s, e) {
        ASPx.GetControlCollection().ForEachControl(function (control) {
            if (!MVCx.IsExistingClientEdit(control) || control.AreSyncHandlersAdded || !control.ValueChanged)
                return;
            if (IsTokenBox(control))
                InitializeTokenBoxHandlers(control);
            else
                control.ValueChanged.InsertFirstHandler(MVCx.EditorValueChanged);
            control.EnabledChanged.InsertFirstHandler(MVCx.EditorValueChanged);
            control.LostFocus.InsertFirstHandler(function () { MVCx.EditorValuesSynchronizer.RefreshFormsCache(); });
            if (IsMultipleValueOwner(control))
                control.SelectedIndexChanged.InsertFirstHandler(MVCx.EditorValueChanged);
            if (!control.oldSetValue) {
                control.oldSetValue = control.SetValue;
                control.SetValue = MVCx.EditorSetValue;
            }
            if (IsMultipleValueOwner(control) && !control.oldSelectValues) {
                control.oldSelectValues = control.SelectValues;
                control.SelectValues = MVCx.MultipleEditorSelectValues;
            }
            if (IsMultipleValueOwner(control) && !control.oldSelectAll) {
                control.oldSelectAll = control.SelectAll;
                control.SelectAll = MVCx.MultipleEditorSelectAll;
            }
            if (IsMultipleValueOwner(control) && !control.oldUnselectAll) {
                control.oldUnselectAll = control.UnselectAll;
                control.UnselectAll = MVCx.MultipleEditorUnselectAll;
            }
            if (IsListBox(control)) {
                if (!control.oldSetSelectedIndex) {
                    control.oldSetSelectedIndex = control.SetSelectedIndex;
                    control.SetSelectedIndex = MVCx.ListBoxSetSelectedIndex;
                }
                var itemSelectionHelper = control.GetItemSelectionHelper();
                if (itemSelectionHelper && !itemSelectionHelper.oldSetIndicesSelectionState) {
                    itemSelectionHelper.oldSetIndicesSelectionState = itemSelectionHelper.SetIndicesSelectionState;
                    itemSelectionHelper.SetIndicesSelectionState = MVCx.ListBoxSetIndicesSelectionState;
                }
            }
            if (IsComboBox(control) && !control.oldSelectIndex) {
                control.oldSelectIndex = control.SelectIndex;
                control.SelectIndex = MVCx.ComboBoxSelectIndex;
            }
            if ($.validator && (IsGridLookup(control) || IsSpinEdit(control) || HasControlDxMaskAttribute(control))) {
                control.ValueChanged.AddHandler(function (s, e) {
                    if (MVCx.JQueryValidation.IsEnabled(s))
                        MVCx.JQueryValidation.Validate(s);
                });
            }
            control.AreSyncHandlersAdded = true;
        });
        ASPx.GetPostHandler().SetBeforeOnSubmit(function () {
            if (!ASPx.GetFocusedEditor)
                return;
            var focusedEditor = ASPx.GetFocusedEditor();
            if (focusedEditor)
                MVCx.EditorValuesSynchronizer.UpdateFormValue(focusedEditor, true);
        });
        ASPx.GetPostHandler().Update();
        MVCx.EditorValuesSynchronizer.RefreshFormsCache();
    }
    function InitializeTokenBoxHandlers(tokenBox) {
        tokenBox.TokensChanged.InsertFirstHandler(MVCx.EditorValueChanged);
        if (!tokenBox.oldAddToken) {
            tokenBox.oldAddToken = tokenBox.AddToken;
            tokenBox.AddToken = MVCx.TokenBoxAddToken;
        }
        if (!tokenBox.oldClearTokenCollection) {
            tokenBox.oldClearTokenCollection = tokenBox.ClearTokenCollection;
            tokenBox.ClearTokenCollection = MVCx.TokenBoxClearTokenCollection;
        }
        if (!tokenBox.oldSetTokenCollection) {
            tokenBox.oldSetTokenCollection = tokenBox.SetTokenCollection;
            tokenBox.SetTokenCollection = MVCx.TokenBoxSetTokenCollection;
        }
    }
    function HasControlDxMaskAttribute(control) {
        var inputElement = MVCx.GetValueInputElement(control);
        return inputElement && inputElement.getAttribute("data-val-dxmask");
    }
    function IsMultipleValueOwner(control) {
        return IsListBox(control) || IsCheckBoxList(control);
    }
    function IsCheckBoxList(control) {
        return control && typeof (ASPxClientCheckBoxList) != "undefined" && control instanceof ASPxClientCheckBoxList;
    }
    function IsListBox(control) {
        return control && typeof (ASPxClientListBox) != "undefined" && control instanceof ASPxClientListBox;
    }
    function IsComboBox(control) {
        return control && typeof (ASPxClientComboBox) != "undefined" && control instanceof ASPxClientComboBox;
    }
    function IsTokenBox(control) {
        return control && typeof (ASPxClientTokenBox) != "undefined" && control instanceof ASPxClientTokenBox;
    }
    function IsGridLookup(control) {
        return control && typeof (MVCxClientGridLookup) != "undefined" && control instanceof MVCxClientGridLookup;
    }
    function IsSpinEdit(control) {
        return control && typeof (ASPxClientSpinEdit) != "undefined" && control instanceof ASPxClientSpinEdit;
    }
    ASPx.GetControlCollection().ControlsInitialized.AddHandler(aspxMVCControlsInitialized);
    ASPx.Evt.AttachEventToElement(window, "load", function (evt) {
        MVCx.isDXScriptInitializedOnLoad = true;
    });
    var MVCxClientUtils = {};
    MVCxClientUtils.FinalizeCallback = function () {
        ASPx.ProcessScriptsAndLinks('', true);
    };
    MVCxClientUtils.GetSerializedEditorValuesInContainer = function (containerOrId, processInvisibleEditors) {
        var container = typeof (containerOrId) === "string" ? ASPx.GetElementById(containerOrId) : containerOrId;
        var result = {};
        ASPx.ProcessEditorsInContainer(container, function (editor) {
            result[editor.name] = GetCorrectedByTypeValue(MVCx.GetEditorValueByControl(editor));
        }, null, null, processInvisibleEditors, false);
        return result;
    };
    var GetCorrectedByTypeValue = function (value) {
        if (ASPx.Ident.IsArray(value)) {
            for (var i = 0; i < value.length; i++) {
                value[i] = GetCorrectedByTypeValue(value[i]);
            }
        }
        if (ASPx.Ident.IsDate(value))
            return ASPx.DateUtils.GetInvariantDateTimeString(value);
        return value;
    };
    var MVCxClientBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientBeginCallbackEventArgs, {
        constructor: function (command) {
            this.constructor.prototype.constructor.call(this, command);
            this.customArgs = {};
        }
    });
    var MVCxClientGlobalBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientGlobalBeginCallbackEventArgs, {
        constructor: function (control, command) {
            this.constructor.prototype.constructor.call(this, control, command);
            this.customArgs = {};
        }
    });
    var MVCxClientGlobalEvents = {
        ControlsInitialized: new ASPxClientEvent(),
        BeginCallback: new ASPxClientEvent(),
        EndCallback: new ASPxClientEvent(),
        CallbackError: new ASPxClientEvent(),
        OnControlsInitialized: function (sender, args) {
            if (!this.ControlsInitialized.IsEmpty())
                this.ControlsInitialized.FireEvent(this, args);
        },
        OnBeginCallback: function (sender, args) {
            if (!this.BeginCallback.IsEmpty()) {
                args = new MVCxClientGlobalBeginCallbackEventArgs(args.control, args.command);
                this.BeginCallback.FireEvent(this, args);
                if (args.control && args.control.callbackCustomArgs)
                    ASPx.Data.MergeHashTables(args.control.callbackCustomArgs, args.customArgs);
            }
        },
        OnEndCallback: function (sender, args) {
            if (!this.EndCallback.IsEmpty())
                this.EndCallback.FireEvent(this, args);
        },
        OnCallbackError: function (sender, args) {
            if (!this.CallbackError.IsEmpty())
                this.CallbackError.FireEvent(this, args);
        }
    };
    MVCxClientGlobalEvents.AddControlsInitializedEventHandler = function (handler) {
        this.ControlsInitialized.AddHandler(handler);
    };
    MVCxClientGlobalEvents.AddBeginCallbackEventHandler = function (handler) {
        this.BeginCallback.AddHandler(handler);
    };
    MVCxClientGlobalEvents.AddEndCallbackEventHandler = function (handler) {
        this.EndCallback.AddHandler(handler);
    };
    MVCxClientGlobalEvents.AddCallbackErrorHandler = function (handler) {
        this.CallbackError.AddHandler(handler);
    };
    var collection = ASPx.GetControlCollection();
    if (collection) {
        var AddHandlerToCollection = function (eventName) {
            collection[eventName].AddHandler(MVCxClientGlobalEvents["On" + eventName].aspxBind(MVCxClientGlobalEvents));
        };
        AddHandlerToCollection("ControlsInitialized");
        AddHandlerToCollection("BeginCallback");
        AddHandlerToCollection("EndCallback");
        AddHandlerToCollection("CallbackError");
    }
    window.MVCxClientUtils = MVCxClientUtils;
    window.MVCxClientGlobalEvents = MVCxClientGlobalEvents;
    window.MVCxClientBeginCallbackEventArgs = MVCxClientBeginCallbackEventArgs;
})(window.jQuery);

(function () {
    ASPx.currentDragHelper = null;
    var currentCursorTargets = null;
    var DragHelper = ASPx.CreateClass(null, {
        constructor: function (e, root, clone) {
            if (ASPx.currentDragHelper != null) ASPx.currentDragHelper.cancelDrag();
            this.dragArea = 5;
            this.clickX = ASPx.Evt.GetEventX(e);
            this.clickY = ASPx.Evt.GetEventY(e);
            this.centerClone = false;
            this.cachedCloneWidth = -1;
            this.cachedCloneHeight = -1;
            this.cachedOriginalX = -1;
            this.cachedOriginalY = -1;
            this.canDrag = true;
            if (typeof (root) == "string")
                root = ASPx.GetParentByTagName(ASPx.Evt.GetEventSource(e), root);
            this.source = e ? ASPx.Evt.GetEventSource(e) : null;
            this.obj = root && root != null ? root : ASPx.Evt.GetEventSource(e);
            this.clone = clone;
            this.dragObj = null;
            this.additionalObj = null;
            this.onDoClick = null;
            this.onEndDrag = null;
            this.onCancelDrag = null;
            this.onDragDivCreating = null;
            this.onDragDivCreated = null;
            this.onCloneCreating = null;
            this.onCloneCreated = null;
            this.dragDiv = null;
            ASPx.currentDragHelper = this;
            this.clearSelectionOnce = false;
            this.PreventContextMenuOnLongTap();
        },
        drag: function (e) {
            if (!this.canDrag) return;
            ASPx.Selection.Clear();
            if (!this.isDragging()) {
                if (!this.isOutOfDragArea(e))
                    return;
                this.startDragCore(e);
            }
            if (ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(e)) {
                this.cancelDrag(e);
                return;
            }
            if (!ASPx.Browser.IE)
                ASPx.Selection.SetElementSelectionEnabled(document.body, false);
            this.dragCore(e);
        },
        startDragCore: function (e) {
            this.dragObj = this.clone != true ? this.obj : this.createClone(e);
        },
        dragCore: function (e) {
            this.updateDragDivPosition(e);
        },
        endDrag: function (e) {
            if (!this.isDragging() && !this.isOutOfDragArea(e)) {
                if (this.onDoClick)
                    this.onDoClick(this, e);
            } else {
                if (this.onEndDrag)
                    this.onEndDrag(this, e);
            }
            this.cancelDrag();
        },
        cancel: function () {
            this.cancelDrag();
        },
        cancelDrag: function () {
            if (this.dragDiv != null) {
                document.body.removeChild(this.dragDiv);
                this.dragDiv = null;
            }
            if (this.onCancelDrag)
                this.onCancelDrag(this);
            ASPx.currentDragHelper = null;
            if (!ASPx.Browser.IE)
                ASPx.Selection.SetElementSelectionEnabled(document.body, true);
        },
        isDragging: function () {
            return this.dragObj != null;
        },
        updateDragDivPosition: function (e) {
            if (this.centerClone) {
                this.dragDiv.style.left = ASPx.Evt.GetEventX(e) - this.cachedCloneWidth / 2 + "px";
                ASPx.SetAbsoluteY(this.dragDiv, ASPx.Evt.GetEventY(e) - this.cachedCloneHeight / 2);
            } else {
                this.dragDiv.style.left = this.cachedOriginalX + ASPx.Evt.GetEventX(e) - this.clickX + "px";
                ASPx.SetAbsoluteY(this.dragDiv, this.cachedOriginalY + ASPx.Evt.GetEventY(e) - this.clickY);
            }
        },
        createClone: function (e) {
            this.dragDiv = document.createElement("div");
            if (this.onDragDivCreating)
                this.onDragDivCreating(this, this.dragDiv);
            var clone = this.creatingClone();
            this.dragDiv.appendChild(clone);
            document.body.appendChild(this.dragDiv);
            this.dragDiv.style.position = "absolute";
            this.dragDiv.style.cursor = "move";
            this.dragDiv.style.borderStyle = "none";
            this.dragDiv.style.padding = "0";
            this.dragDiv.style.margin = "0";
            this.dragDiv.style.backgroundColor = "transparent";
            this.dragDiv.style.zIndex = 20000;
            if (this.onCloneCreated)
                this.onCloneCreated(clone);
            this.cachedCloneWidth = clone.offsetWidth;
            this.cachedCloneHeight = clone.offsetHeight;
            if (!this.centerClone) {
                this.cachedOriginalX = ASPx.GetAbsoluteX(this.obj);
                this.cachedOriginalY = ASPx.GetAbsoluteY(this.obj);
            }
            this.dragDiv.style.width = this.cachedCloneWidth + "px";
            this.dragDiv.style.height = this.cachedCloneHeight + "px";
            if (this.onDragDivCreated)
                this.onDragDivCreated(this, this.dragDiv);
            this.updateDragDivPosition(e);
            return this.dragDiv;
        },
        creatingClone: function () {
            var clone = this.obj.cloneNode(true);
            var scripts = ASPx.GetNodesByTagName(clone, "SCRIPT");
            for (var i = scripts.length - 1; i >= 0; i--)
                ASPx.RemoveElement(scripts[i]);
            ASPx.RippleHelper.RemoveRippleContainer(clone);
            if (!this.onCloneCreating) return clone;
            return this.onCloneCreating(clone);
        },
        addElementToDragDiv: function (element) {
            if (this.dragDiv == null) return;
            this.additionalObj = element.cloneNode(true);
            this.additionalObj.style.visibility = "visible";
            this.additionalObj.style.display = "";
            this.additionalObj.style.top = "";
            this.dragDiv.appendChild(this.additionalObj);
        },
        removeElementFromDragDiv: function () {
            if (this.additionalObj == null || this.dragDiv == null) return;
            this.dragDiv.removeChild(this.additionalObj);
            this.additionalObj = null;
        },
        isOutOfDragArea: function (e) {
            return Math.max(
                Math.abs(ASPx.Evt.GetEventX(e) - this.clickX),
                Math.abs(ASPx.Evt.GetEventY(e) - this.clickY)
            ) >= this.dragArea;
        },
        PreventContextMenuOnLongTap: function () {
            if (!ASPx.DragUtils.RequirePreventContextMenuOnLongTap(this.obj))
                return;
            this.contextMenuHandler = function (e) {
                ASPx.Evt.DetachEventFromElement(this.obj, "contextmenu", this.contextMenuHandler);
                e.preventDefault();
            }.bind(this);
            ASPx.Evt.AttachEventToElement(this.obj, "contextmenu", this.contextMenuHandler);
        }
    });
    var DragUtils = {
        PreventContextMenuOnLongTapMarker: "dxPCM",
        RequirePreventContextMenuOnLongTap: function (element) {
            return element && ASPx.ElementHasCssClass(element, this.PreventContextMenuOnLongTapMarker);
        },
        PreventContextMenuOnLongTap: function (element) {
            if (element && ASPx.Browser.Edge && ASPx.Browser.MSTouchUI) {
                ASPx.AddClassNameToElement(element, this.PreventContextMenuOnLongTapMarker);
            }
        }
    };
    var CursorTargetTag = { Right: 0, Left: 1, Top: 2, Bottom: 3 };
    var CursorTargets = ASPx.CreateClass(null, {
        constructor: function (control) {
            this.control = control;
            this.list = [];
            this.oldtargetElement = null;
            this.oldtargetTag = CursorTargetTag.Right;
            this.targetElement = null;
            this.targetTag = CursorTargetTag.Right;
            this.x = 0;
            this.y = 0;
            this.onTargetCreated = null;
            this.onTargetChanging = null;
            this.onTargetChanged = null;
            this.onTargetAdding = null;
            this.onTargetAllowed = null;
            currentCursorTargets = this;
            this.treeLine = null;
            this.initialScrollOffsetInfo = this.GetParentElementsScrollOffsetInfo();
        },
        addElement: function (element) {
            if (!this.canAddElement(element)) return null;
            var target = new CursorTarget(element);
            if (this.onTargetCreated)
                this.onTargetCreated(this, target);
            this.list.push(target);
            return target;
        },
        removeElement: function (element) {
            for (var i = 0; i < this.list.length; i++) {
                if (this.list[i].element == element) {
                    this.list.splice(i, 1);
                    return;
                }
            }
        },
        addParentElement: function (parent, child) {
            var target = this.addElement(parent);
            if (target != null) {
                target.targetElement = child;
            }
            return target;
        },
        RegisterTargets: function (element, idPrefixArray) {
            this.addFunc = this.addElement;
            this.RegisterTargetsCore(element, idPrefixArray);
        },
        UnregisterTargets: function (element, idPrefixArray) {
            this.addFunc = this.removeElement;
            this.RegisterTargetsCore(element, idPrefixArray);
        },
        RegisterTargetsCore: function (element, idPrefixArray) {
            if (element == null) return;
            for (var i = 0; i < idPrefixArray.length; i++)
                this.RegisterTargetCore(element, idPrefixArray[i]);
        },
        RegisterTargetCore: function (element, idPrefix) {
            if (!ASPx.IsExists(element.id)) return;
            if (element.id.indexOf(idPrefix) > -1)
                this.addFunc(element);
            for (var i = 0; i < element.childNodes.length; i++)
                this.RegisterTargetCore(element.childNodes[i], idPrefix);
        },
        canAddElement: function (element) {
            if (element == null || !ASPx.GetElementDisplay(element))
                return false;
            for (var i = 0; i < this.list.length; i++) {
                if (this.list[i].targetElement == element) return false;
            }
            if (this.onTargetAdding != null && !this.onTargetAdding(this, element)) return false;
            return element.style.visibility != "hidden";
        },
        getTarget: function (x, y) {
            for (var i = 0; i < this.list.length; i++) {
                var record = this.list[i];
                if (record.contains(x, y)) {
                    if (!this.onTargetAllowed || this.onTargetAllowed(record.targetElement, x, y))
                        return record.targetElement;
                }
            }
            return null;
        },
        targetChanged: function (element, tag) {
            this.targetElement = element;
            this.targetTag = ASPx.IsExists(tag) ? tag : ASPx.CursorTargetTag.Right;
            if (this.onTargetChanging)
                this.onTargetChanging(this);
            if (this.oldtargetElement != this.targetElement || this.oldtargetTag != this.targetTag) {
                if (this.onTargetChanged)
                    this.onTargetChanged(this);
                this.oldtargetElement = this.targetElement;
                this.oldtargetTag = this.targetTag;
            }
        },
        cancelChanging: function () {
            this.targetElement = this.oldtargetElement;
            this.targetTag = this.oldtargetTag;
        },
        refreshTargetTag: function (allowVerticalTags) {
            this.targetTag = this.calculateTargetTag(allowVerticalTags);
        },
        calculateTargetTag: function (allowVerticalTags) {
            if (allowVerticalTags && this.isCenterPartOfElement())
                return this.isTopPartOfElement() ? CursorTargetTag.Top : CursorTargetTag.Bottom;
            return this.isLeftPartOfElement() ? CursorTargetTag.Left : CursorTargetTag.Right;
        },
        isCenterPartOfElement: function () {
            if (!this.targetElement) return false;
            var coordinate = this.y - this.targetElementY();
            return coordinate < this.targetElement.offsetHeight / 3 || coordinate > 2 * this.targetElement.offsetHeight / 3;
        },
        isLeftPartOfElement: function () {
            if (!this.targetElement) return true;
            var left = this.x - this.targetElementX();
            return left < this.targetElement.offsetWidth / 2;
        },
        isTopPartOfElement: function () {
            if (!this.targetElement) return true;
            var top = this.y - this.targetElementY();
            return top < this.targetElement.offsetHeight / 2;
        },
        targetElementX: function () {
            return this.targetElement != null ? ASPx.GetAbsoluteX(this.targetElement) : 0;
        },
        targetElementY: function () {
            return this.targetElement != null ? ASPx.GetAbsoluteY(this.targetElement) : 0;
        },
        onmousemove: function (e) {
            this.doTargetChanged(e);
        },
        onmouseup: function (e) {
            this.doTargetChanged(e);
            currentCursorTargets = null;
        },
        doTargetChanged: function (e) {
            this.x = ASPx.Evt.GetEventX(e);
            this.y = ASPx.Evt.GetEventY(e);
            var coords = this.GetScrollOffsetCoordinates(this.x, this.y);
            this.targetChanged(this.getTarget(coords.x, coords.y), 0);
        },
        GetScrollOffsetCoordinates: function (x, y) {
            var scrollOffsetInfo = this.GetParentElementsScrollOffsetInfo();
            var dx = scrollOffsetInfo.left - this.initialScrollOffsetInfo.left;
            var dy = scrollOffsetInfo.top - this.initialScrollOffsetInfo.top;
            return {
                x: x + dx,
                y: y + dy
            };
        },
        GetParentElementsScrollOffsetInfo: function () {
            var result = { top: 0, left: 0 };
            var treeLine = this.GetScrollableElementsTreeLine();
            for (var i = 0; i < treeLine.length; i++) {
                result.top += treeLine[i].scrollTop;
                result.left += treeLine[i].scrollLeft;
            }
            return result;
        },
        GetScrollableElementsTreeLine: function () {
            if (!this.treeLine)
                this.treeLine = ASPx.GetElementTreeLine(this.control.GetMainElement().parentNode).filter(function (el) {
                    return ASPx.IsScrollableElement(el);
                });
            return this.treeLine;
        }
    });
    var CursorTarget = ASPx.CreateClass(null, {
        constructor: function (element) {
            this.element = element;
            this.targetElement = element;
            this.UpdatePosition();
        },
        contains: function (x, y) {
            return x >= this.absoluteX && x <= this.absoluteX + this.GetElementWidth() &&
                y >= this.absoluteY && y <= this.absoluteY + this.GetElementHeight();
        },
        GetElementWidth: function () {
            return this.element.offsetWidth;
        },
        GetElementHeight: function () {
            return this.element.offsetHeight;
        },
        UpdatePosition: function () {
            this.absoluteX = ASPx.GetAbsoluteX(this.element);
            this.absoluteY = ASPx.GetAbsoluteY(this.element);
        }
    });
    if (ASPx.Browser.MSTouchUI)
        ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.pointerCancelEventName, function (e) {
            if (ASPx.currentDragHelper != null) {
                ASPx.currentDragHelper.cancel(e);
                return true;
            }
        });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function (e) {
        if (ASPx.currentDragHelper != null) {
            ASPx.currentDragHelper.endDrag(e);
            return true;
        }
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, function (e) {
        if (ASPx.currentDragHelper != null && !(ASPx.Browser.WebKitTouchUI && ASPx.TouchUIHelper.isGesture)) {
            ASPx.currentDragHelper.drag(e);
            if (ASPx.TouchUIHelper.isTouchEvent(e) && ASPx.currentDragHelper.canDrag) {
                e.preventDefault();
                ASPx.TouchUIHelper.preventScrollOnEvent(e);
            }
            return true;
        }
    });
    ASPx.Evt.AttachEventToDocument("keydown", function (e) {
        if (!ASPx.currentDragHelper) return;
        if (e.keyCode == ASPx.Key.Esc)
            ASPx.currentDragHelper.cancelDrag();
        return true;
    });
    ASPx.Evt.AttachEventToDocument("keyup", function (e) {
        if (!ASPx.currentDragHelper) return;
        if (e.keyCode == ASPx.Key.Esc && ASPx.Browser.WebKitFamily)
            ASPx.currentDragHelper.cancelDrag();
        return true;
    });
    ASPx.Evt.AttachEventToDocument("selectstart", function (e) {
        var drag = ASPx.currentDragHelper;
        if (drag && (drag.canDrag || drag.clearSelectionOnce)) {
            ASPx.Selection.Clear();
            drag.clearSelectionOnce = false;
            e.preventDefault();
            return false;
        }
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function (e) {
        if (currentCursorTargets != null) {
            currentCursorTargets.onmouseup(e);
            return true;
        }
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, function (e) {
        if (currentCursorTargets != null) {
            currentCursorTargets.onmousemove(e);
            return true;
        }
    });
    ASPx.DragHelper = DragHelper;
    ASPx.CursorTargets = CursorTargets;
    ASPx.CursorTarget = CursorTarget;
    ASPx.CursorTargetTag = CursorTargetTag;
    ASPx.DragUtils = DragUtils;
})();
(function () {
    var PivotDragManager = ASPx.CreateClass(null, {
        constructor: function (pivot, drag) {
            this.DragTargets = new ASPx.CursorTargets(pivot);
            this.Configure(pivot, drag, this.DragTargets);
        },
        Configure: function (pivot, drag, targets) {
            this.configureDrag(pivot, drag, targets);
            this.configureTargets(pivot, targets, drag);
            this.registerTargets(targets, drag.obj);
        },
        configureDrag: function (pivot, drag, targets) {
            drag.pGrid = pivot;
            drag.targets = targets;
            drag.onCloneCreating = this.cloneCreating;
            drag.onCloneCreated = this.cloneCreated;
            drag.onDragDivCreating = this.onDragDivCreating;
            drag.onEndDrag = this.endDrag;
            drag.onCancelDrag = function () {
                if (drag.pGrid)
                    drag.pGrid.DragDropManager.DragTargets = null;
            };
        },
        configureTargets: function (pivot, targets, drag) {
            targets.pGrid = pivot;
            targets.drag = drag;
            targets.onTargetChanging = this.targetChanging;
            targets.onTargetChanged = this.targetChanged;
            targets.onTargetAllowed = this.targetAllowed;
        },
        cloneCreating: function (clone) {
            var pGrid = ASPx.currentDragHelper.pGrid;
            var groups = pGrid.getGroups();
            if (groups == null) return clone;
            for (var i = 0; i < groups.length; i++) {
                if (groups[i].ContainsField(clone.id)) {
                    ASPx.currentDragHelper.obj = pGrid.getField(groups[i], 0);
                    clone = pGrid.cloneGroup(groups[i]);
                    break;
                }
            }
            if (clone.clientLeft == 0 && clone.offsetTop == 0)
                this.centerClone = true;
            return clone;
        },
        cloneCreated: function (clone) {
            var dragHelper = this;
            var list = [];
            var width = dragHelper.obj.offsetWidth + "px";
            clone.style.width = width;
            clone.style.opacity = 0.5;
            clone.style.filter = 'alpha(opacity=50)';
            if (clone.addEventListener) {
                clone.addEventListener('DOMMouseScroll', dragHelper.pGrid.ScrollFieldList, false);
            }
            clone.onmousewheel = dragHelper.pGrid.ScrollFieldList;
            clone.DragDropHelper = dragHelper;
            list.push(clone);
            for (var i = 0; i < clone.childNodes.length; i++) {
                if (ASPx.IsExists(clone.childNodes[i].style))
                    clone.childNodes[i].style.width = width;
                list.push(clone.childNodes[i]);
            }
            for (var i = 0; i < list.length; i++) {
                if (!ASPx.IsExists(list[i].style)) continue;
                width = new String(list[i].style.width);
                if (width.indexOf("%") > -1) {
                    list[i].style.width = "";
                }
            }
        },
        onDragDivCreating: function (drag, dragDiv) {
            var rootElement = drag.pGrid.GetMainElement();
            if (!dragDiv || !rootElement) return;
            dragDiv.className = rootElement.className;
            dragDiv.style.cssText = rootElement.style.cssText;
        },
        endDrag: function (drag) {
            var pGrid = drag.pGrid;
            pGrid.targetImagesChangeVisibility(false);
            var targets = drag.targets;
            var manager = pGrid.DragDropManager;
            var targetElement = targets.targetElement;
            if (targetElement == drag.obj || !manager.isTargetAllowed(targets))
                return;
            if (typeof (targetElement.pgddCustomDrop) != "undefined") {
                targetElement.pgddCustomDrop(drag.obj, targets.targetTag);
                return;
            }
            if (pGrid.isDeferUpdatesChecked() && pGrid.GetCustomizationFieldsWindowContentDiv().className != "TopPanelOnly" && pGrid.isFieldListElement(targetElement)) {
                manager.endDragClientSide(drag, pGrid, targets, targetElement);
                pGrid.forcePerformDeferUpdatesCallback = true;
            }
            else {
                pGrid.PerformCallbackInternal(targetElement, 'D' + '|' + drag.obj.id + '|' + targetElement.id + '|' + targets.targetTag);
            }
        },
        endDragClientSide: function (drag, pGrid, targets, targetElement) {
            var targetTableBody;
            var movedRow;
            if (pGrid.isFieldListElement(drag.obj))
                movedRow = ASPx.GetParentByTagName(drag.obj, "tr");
            else {
                var groupIndex;
                var movedRowId;
                var lastIndex = drag.obj.id.lastIndexOf("_");
                var groups = pGrid.getGroups();
                for (var i = 0; i < groups.length; i++)
                    if (groups[i].ContainsField(drag.obj.id))
                        groupIndex = i;
                if (groupIndex == null)
                    movedRowId = drag.obj.id.substr(0, lastIndex).replace("_DHP", "") + "_dxpgCustFields" + drag.obj.id.substr(lastIndex, drag.obj.id.length);
                else
                    movedRowId = drag.obj.id.substr(0, lastIndex).replace("_DHP", "") + "_dxpgCustFields_pgGroupHeader" + groupIndex;
                movedRow = ASPx.GetParentByTagName(document.getElementById(movedRowId), "tr");
            }
            var treeView = pGrid.GetCustomizationTreeView();
            var sourceTable = ASPx.GetParentByTagName(movedRow, "table");
            if (sourceTable.id.indexOf("listCF") != -1 && treeView)
                treeView.HandleDragFromCompleted(drag);
            if (targetElement.id.indexOf("pgHeader") != -1 || targetElement.id.indexOf("pgGroupHeader") != -1) {
                targetTableBody = ASPx.GetParentByTagName(targetElement.parentNode, "tbody");
                targetRow = targetElement.parentNode.parentNode;
                if (targetRow != movedRow) {
                    movedRow.parentNode.removeChild(movedRow);
                    if (targets.targetTag)
                        targetTableBody.insertBefore(movedRow, targetRow);
                    else
                        ASPx.InsertElementAfter(movedRow, targetRow);
                }
            } else {
                movedRow.parentNode.removeChild(movedRow);
                targetTableBody = ASPx.GetNodeByTagName(targetElement, "tbody", 0);
                if (targetTableBody.parentNode.style["display"] == "none" && treeView)
                    treeView.HandleDragToCompleted(drag);
                if (targets.targetTag && targetTableBody.firstChild)
                    targetTableBody.insertBefore(movedRow, targetTableBody.firstChild);
                else
                    targetTableBody.appendChild(movedRow);
            }
            pGrid.resetDragOverFieldList(pGrid.LastHoverFieldList);
            pGrid.FixIEFieldListScrollbar();
        },
        targetAllowed: function (targetElement, x, y) {
            if (ASPx.IsExists(targetElement.pgddIsAllowed))
                return targetElement.pgddIsAllowed(x, y);
            return true;
        },
        targetChanging: function (targets) {
            var pGrid = targets.pGrid;
            if (pGrid.IsTargetElementArea(targets))
                targets.targetTag = true;
            if (pGrid.isVerticalElement(targets.targetElement)) {
                if (targets.targetElement.id.indexOf("pgArea") > -1)
                    targets.targetTag = targets.y < ASPx.GetAbsoluteY(ASPx.GetNodesByPartialClassName(targets.targetElement, "dxpgFLListDiv")[0]) + 2;
                else
                    targets.targetTag = targets.isTopPartOfElement();
            }
            else
                targets.targetTag = targets.isLeftPartOfElement();
            if (pGrid.isInnerGroupTarget(targets.targetElement, targets.targetTag)) {
                targets.targetElement = null;
                return;
            }
            if (targets.dataHeadersPopup != null) {
                var manager = pGrid.DragDropManager;
                manager.targetChangingDataHeadersPopup(targets);
            }
        },
        targetChangingDataHeadersPopup: function (targets) {
            var popupControl = targets.dataHeadersPopup;
            if (targets.dataHeadersPopupCellRect.Contains(targets.x, targets.y)) {
                if (!popupControl.IsVisible()) {
                    popupControl.Show();
                    var windowElem = popupControl.GetWindowElement(-1);
                    popupControl.bounds = ASPx.GetBounds(windowElem);
                    var list = [];
                    ASPx.GetNodesByPartialId(windowElem, 'pgHeader', list);
                    ASPx.GetNodesByPartialId(windowElem, 'pgGroupHeader', list);
                    for (var i = 0; i < list.length; i++)
                        for (var j = 0; j < targets.list.length; j++) {
                            if (targets.list[j].targetElement == list[i]) {
                                targets.list[j].absoluteX = ASPx.GetAbsoluteX(list[i]);
                                targets.list[j].absoluteY = ASPx.GetAbsoluteY(list[i]);
                                break;
                            }
                        }
                }
            } else {
                if (ASPx.IsExists(popupControl.bounds) && popupControl.bounds != null && popupControl.IsVisible()) {
                    if (popupControl.bounds.Contains(targets.x, targets.y)) {
                        if (ASPx.IsExists(targets.targetElement) && targets.targetElement.id.indexOf("DHP") < 0)
                            targets.cancelChanging();
                    } else {
                        popupControl.Hide();
                        popupControl.bounds = null;
                    }
                }
            }
        },
        targetChanged: function (targets) {
            var pGrid = targets.pGrid;
            var manager = pGrid.DragDropManager;
            var isHeadersTable = pGrid.IsHeadersTable(targets.targetElement);
            pGrid.resetDragOverFieldList(pGrid.LastHoverFieldList);
            if (ASPx.currentDragHelper != null && targets.targetElement != ASPx.currentDragHelper.obj && manager.isTargetAllowed(targets)) {
                if (isHeadersTable && manager.changeTarget(targets))
                    targets.targetTag = false;
                pGrid.setDragImagesPosition(targets.targetElement, targets.targetTag);
            } else {
                pGrid.targetImagesChangeVisibility(false);
            }
        },
        registerTargets: function (targets, dragObj) {
            var pGrid = targets.pGrid;
            pGrid.ListTargets = [];
            var targetIds = [];
            targetIds.push("pgGroupHeader", "pgHeader");
            if (pGrid.GetCustomizationFieldsWindowContentDiv() != null) {
                targets.instantAddElement = targets.addElement;
                targets.addElement = this.fieldListAddTarget;
                targets.onTargetAdding = this.fieldListTargetAdding;
                var fieldList = pGrid.getFieldListFields();
                var filterArea = pGrid.getFilterAreaFieldList();
                var columnArea = pGrid.getColumnAreaFieldList();
                var rowArea = pGrid.getRowAreaFieldList();
                var dataArea = pGrid.getDataAreaFieldList();
                targets.RegisterTargets(columnArea, targetIds);
                targets.RegisterTargets(dataArea, targetIds);
                targets.RegisterTargets(filterArea, targetIds);
                targets.RegisterTargets(rowArea, targetIds);
                targets.addElement = targets.instantAddElement;
                targets.instantAddElement = null;
                targets.onTargetAdding = null;
                targets.addElement(fieldList);
                targets.addElement(columnArea);
                targets.addElement(dataArea);
                targets.addElement(filterArea);
                targets.addElement(rowArea);
            }
            targets.onTargetAdding = this.targetAdding;
            targets.RegisterTargets(pGrid.GetDataHeadersPopupWindowElement(), targetIds);
            targets.RegisterTargets(pGrid.GetHeadersTable("DataArea"), targetIds);
            targets.RegisterTargets(pGrid.GetHeadersTable("RowArea"), targetIds);
            targets.RegisterTargets(pGrid.GetHeadersTable("ColumnArea"), targetIds);
            targets.RegisterTargets(pGrid.GetHeadersTable("FilterArea"), targetIds);
            targets.UnregisterTargets(dragObj, targetIds);
            targets.onTargetAdding = null;
            targets.addElement(pGrid.GetHeadersTable("DataArea"));
            targets.addElement(pGrid.GetHeadersTable("ColumnArea"));
            targets.addElement(pGrid.GetHeadersTable("FilterArea"));
            targets.dataHeadersPopup = pGrid.IsDataHeadersPopupExists() ? pGrid.GetDataHeadersPopup() : null;
            if (targets.dataHeadersPopup != null) {
                targets.dataHeadersPopupCell = pGrid.GetDataHeadersPopupCell();
                targets.dataHeadersPopupCellRect = ASPx.GetBounds(targets.dataHeadersPopupCell);
            }
            for (var i = 0; i <= 3; i++) {
                targets.addElement(pGrid.GetEmptyAreaCell(i));
            }
            pGrid.RaiseCustomTargets(targets);
        },
        fieldListAddTarget: function (element) {
            var targets = this;
            var element = targets.instantAddElement(element);
            if (element != null) {
                element.element = element.targetElement.parentNode;
                element.absoluteX = ASPx.GetAbsoluteX(element.element);
                element.absoluteY = ASPx.GetAbsoluteY(element.element);
            }
        },
        fieldListTargetAdding: function (sender, element) {
            var id = sender.pGrid.getLastIdPart(element.id);
            if (id.length == 0) return false;
            var lastChar = id.charAt(id.length - 1);
            if (!(lastChar >= '0' && lastChar <= '9'))
                return false;
            if (!sender.pGrid.IsFieldListTargetAllowed(element)) {
                sender.pGrid.ListTargets.push(element);
                return false;
            }
            return true;
        },
        targetAdding: function (sender, element) {
            return sender.pGrid.IsValidDragDropTarget(element);
        },
        isTargetAllowed: function (targets) {
            if (targets.targetElement == null) return false;
            var pGrid = targets.pGrid;
            if (ASPx.ElementContainsCssClass(targets.targetElement, "dxpgCustFields") && !ASPx.ElementContainsCssClass(targets.targetElement, "dxpgCustFieldsFieldList")) {
                var listTable = ASPx.GetNodeByTagName(targets.targetElement, "table", 0);
                var listTop = ASPx.GetAbsolutePositionY(listTable);
                if (targets.y > listTop && listTop + listTable.offsetHeight > targets.y)
                    return false;
            }
            if (pGrid.IsHeadersTable(targets.targetElement) && !pGrid.DragDropManager.isNewTargetArea(targets.drag.obj, targets.targetElement))
                return false;
            var allAllowedIds = pGrid.pivotGrid_AllowedAreaIds[pGrid.name];
            if (allAllowedIds == null) return true;
            var allowedIds = allAllowedIds[targets.drag.obj.id];
            if (!allowedIds)
                allowedIds = allAllowedIds[targets.drag.obj.id.replace("_dxpgCustFields", "").replace("_DHP", "")];
            var isAllowed;
            if (allowedIds != null) {
                var checkTarget;
                if (pGrid.isFieldListHeader(targets.targetElement))
                    checkTarget = ASPx.GetParentByPartialClassName(targets.targetElement.parentNode, "dxpgCustFields");
                else
                    checkTarget = targets.targetElement;
                isAllowed = ASPx.Data.ArrayIndexOf(allowedIds, checkTarget.id.replace("_dxpgCustFields", "").replace("_DHP", "")) > -1;
                isAllowed |= ASPx.Data.ArrayIndexOf(allowedIds, checkTarget.id) > -1;
                isAllowed |= pGrid.getFieldListFields().id == targets.targetElement.id && targets.pGrid.getLastIdPart(targets.drag.obj.id).indexOf("pgdthdr") == -1;
                isAllowed &= !this.isTargetDraggedBackToCustForm(targets);
            }
            else {
                isAllowed = !this.isTargetDraggedBackToCustForm(targets);
            }
            return isAllowed;
        },
        isNewTargetArea: function (element, parent) {
            while (element) {
                if (element.parentNode == parent)
                    return false;
                element = element.parentNode;
            }
            return true;
        },
        isTargetDraggedBackToCustForm: function (targets) {
            return targets.targetElement.className.indexOf("dxpgCustFieldsFieldList") >= 0 && ASPx.GetParentByPartialClassName(targets.drag.obj, "dxpgCustFieldsFieldList") != null;
        },
        changeTarget: function (targets) {
            var pGrid = targets.pGrid;
            var targetElement = targets.targetElement;
            var list = [];
            ASPx.GetNodesByPartialId(targetElement, "pgHeader", list);
            ASPx.GetNodesByPartialId(targetElement, "pgGroupHeader", list);
            for (var i = list.length - 1; i >= 0; i--) {
                if (pGrid.IsValidDragDropTarget(list[i])) {
                    targets.targetElement = list[i];
                    return true;
                }
            }
            return false;
        }
    });
    ASPx.PivotDragManager = PivotDragManager;
})();
(function () {
    var State = {
        Initial: 'Initial',
        Collapsed: 'Collapsed',
        Adjusted: 'Adjusted'
    };
    var PivotTableWrapper = ASPx.CreateClass(null, {
        constructor: function (utils) {
            this.constructor.prototype.constructor.call(this);
            this.utils = utils;
        },
        Initialize: function (pivot, pivotTable, opts, onPagingRequest, onForceRedraw) {
            var that = this,
                elements = this.parseDomElements(pivotTable);
            that.pivot = pivot;
            that.pivotTable = pivotTable;
            that._domElements = elements;
            that.onPagingRequest = onPagingRequest;
            that.onForceRedraw = onForceRedraw;
            that.patchOpts(opts);
            that.opts = opts;
            var spacerDiv = document.createElement('div');
            spacerDiv.style.width = '0px';
            spacerDiv.style.height = '0px';
            that.pivotTable.parentNode.appendChild(spacerDiv);
            elements.spacerDiv = spacerDiv;
            ASPx.Attr.ChangeStyleAttribute(document.body, "padding-right", "");
            that.prepareElements();
            that.prepareScrollingContainers();
            that.state = State.Initial;
            that._scrollPos = {
                horz: null,
                vert: null
            };
            that._scrollableSizes = {};
        },
        CalculateSizes: function (newOpts, getScrollableSizesOnCollapse) {
            this.opts = newOpts;
            var that = this,
                horzOpts = that.opts.Horz,
                vertOpts = that.opts.Vert,
                scrollBarModes = {
                    horzMode: horzOpts.ScrollBarMode,
                    vertMode: vertOpts.ScrollBarMode
                },
                scrollingOpts = that.createConfiguration(horzOpts.Enabled, vertOpts.Enabled);
            that.toInitialState();
            var allSizes = that.measureAllSizes(scrollBarModes);
            that.prepareScrollableSizes(allSizes, getScrollableSizesOnCollapse, scrollingOpts, scrollBarModes);
        },
        MergeBeforeCollapse: function (src) {
            var that = this,
                elems = that._domElements,
                rowHeaderCell = elems.rowHeaderCells[0],
                srcElems = src._domElements,
                srcRowHeaderCell = srcElems.rowHeaderCells[0];
            ASPx.SetOffsetHeight(rowHeaderCell, srcRowHeaderCell.offsetHeight);
            ASPx.SetOffsetWidth(rowHeaderCell, srcRowHeaderCell.offsetWidth);
            that._scrollPos = src._scrollPos;
        },
        Adjust: function (opts, isPartialRender) {
            var that = this,
                horz = opts.Horz,
                vert = opts.Vert,
                elems = that._domElements,
                sizes = that._sizes,
                sizeInfos = that._sizeInfos,
                virtualWidth = sizeInfos.column.fullSize,
                virtualHeight = sizeInfos.row.fullSize,
                vertEnabled = vert.Enabled,
                horzEnabled = horz.Enabled;
            that.opts = opts;
            if (!isPartialRender)
                that.ejectPivotTable();
            if (elems.columnHeadersContainer)
                elems.columnHeadersContainer.style.display = '';
            elems.spacerDiv.style.width = '0px';
            if (!vertEnabled) that._scrollableSizes.scrollableHeight = virtualHeight;
            if (!horzEnabled) that._scrollableSizes.scrollableWidth = virtualWidth;
            that.preparePivotTable("fixed",
                {
                    rowAreaColWidths: sizes.rowHeaderWidths.length > 1 ? sizes.rowHeaderWidths : sizes.rowAreaColWidths,
                    dataWidth: that._scrollableSizes.scrollableWidth
                },
                that._sbConf);
            var columnSize = {
                viewPort: {
                    width: that._scrollableSizes.scrollableWidth,
                    height: sizes.rowHeaderHeight
                },
                scrollable: {
                    width: sizes.columnCellsTotalWidth,
                    height: sizes.rowHeaderHeight
                },
                virtual: {
                    width: virtualWidth,
                    height: sizes.rowHeaderHeight
                }
            },
                rowSize = {
                    viewPort: {
                        width: sizes.rowTotalWidth,
                        height: that._scrollableSizes.scrollableHeight
                    },
                    scrollable: {
                        width: sizes.rowTotalWidth,
                        height: sizes.rowCellsTotalHeight
                    },
                    virtual: {
                        width: sizes.rowTotalWidth,
                        height: virtualHeight
                    }
                },
                dataSize = {
                    viewPort: {
                        width: that._scrollableSizes.scrollableWidth,
                        height: that._scrollableSizes.scrollableHeight
                    },
                    scrollable: {
                        width: sizes.dataCellsTotalWidth,
                        height: sizes.dataCellsTotalHeight
                    },
                    virtual: {
                        width: virtualWidth,
                        height: virtualHeight
                    }
                },
                columnOpts = {
                    colWidths: sizes.dataCellWidths,
                    rowHeights: sizes.columnHeights
                },
                rowOpts = {
                    colWidths: sizes.rowAreaColWidths,
                    rowHeights: sizes.dataCellHeights
                },
                dataOpts = {
                    colWidths: sizes.dataCellWidths,
                    rowHeights: sizes.dataCellHeights
                };
            that.setPivotCellsStyles('auto');
            that.prepareScrollableContainerCell(elems.columnContainer, columnSize, columnOpts, elems.columnCellRows);
            that.prepareScrollableContainerCell(elems.rowContainer, rowSize, rowOpts, elems.rowCellRows);
            that.prepareScrollableContainerCell(elems.dataContainer, dataSize, dataOpts, elems.dataCellRows);
            that._scrollSizes = {
                column: columnSize,
                row: rowSize,
                data: dataSize
            };
            if (!isPartialRender)
                that.adjectPivotTable();
            that.prepareScrolling(horz, vert, isPartialRender);
            that.state = State.Adjusted;
        },
        ResetScrollPos: function (horz, vert) {
            var that = this,
                scrollPos = that._scrollPos;
            this._scrollPos = {
                horz: horz ? null : scrollPos.horz,
                vert: vert ? null : scrollPos.vert,
                prev: scrollPos.prev
            };
        },
        Merge: function (newWrapper) {
            this.inRequest = false;
            var that = this;
            that._domElements.rowCellRows = newWrapper._domElements.rowCellRows;
            that._domElements.columnCellRows = newWrapper._domElements.columnCellRows;
            that._domElements.dataCellRows = newWrapper._domElements.dataCellRows;
            that._domElements.rowCellsMatrix = newWrapper._domElements.rowCellsMatrix;
            that._domElements.columnCellsMatrix = newWrapper._domElements.columnCellsMatrix;
            that._sizes = newWrapper._sizes;
            that._scrollableSizes = newWrapper._scrollableSizes;
            that._pagingOptions = newWrapper._pagingOptions;
            that._sizeInfos = newWrapper._sizeInfos;
            that._sbConf = newWrapper._sbConf;
        },
        GetCallbackAnimationElement: function () {
            var that = this,
                elems = that._domElements;
            return elems.dataContainer.rootDiv;
        },
        patchOpts: function (opts) {
            opts.Vert.ScrollBarMode = ASPx.Browser.WebKitTouchUI ? 'Hidden' : opts.Vert.ScrollBarMode;
            opts.Horz.ScrollBarMode = ASPx.Browser.WebKitTouchUI ? 'Hidden' : opts.Horz.ScrollBarMode;
        },
        prepareScrollingContainers: function () {
            var that = this,
                elems = that._domElements,
                horzOnlyConf = that.createConfiguration(true, false),
                vertOnlyConf = that.createConfiguration(false, true),
                bothConf = that.createConfiguration(true, true);
            that.prepareContainerScrolling(elems.dataContainer, bothConf, true);
            that.prepareContainerScrolling(elems.rowContainer, vertOnlyConf, false);
            that.prepareContainerScrolling(elems.columnContainer, horzOnlyConf, false);
            if (that.opts.Vert.ScrollBarMode != 'Hidden')
                that.prepareContainerScrolling(elems.vertScrollBarContainer, vertOnlyConf, false);
            if (that.opts.Horz.ScrollBarMode != 'Hidden')
                that.prepareContainerScrolling(elems.horzScrollBarContainer, horzOnlyConf, false);
        },
        prepareContainerScrolling: function (container, conf, showScrollbars) {
            var that = this;
            ASPx.Evt.AttachEventToElement(container.viewPortDiv, 'scroll', function () {
                that.onScroll(container, conf);
            });
            ASPx.Evt.AttachEventToElement(container.viewPortDiv, "wheel", function (eventArgs) {
                that.onMouseWheel(container, conf, eventArgs);
            });
            if (ASPx.Browser.WebKitTouchUI) {
                container.viewPortDiv.className += 'dxpgTouchScrollBars' + (showScrollbars ? 'Visible' : 'Hidden');
                container.touchScroller = new ASPx.TouchUIHelper.ScrollExtender(container.viewPortDiv, {
                    forceCustomScroll: true,
                    touchEventHandlersElement: container.viewPortDiv,
                    showHorizontalScrollbar: conf.horz,
                    showVerticalScrollbar: conf.vert
                });
            }
            else if (ASPx.Browser.MSTouchUI)
                container.touchUIScroller = ASPx.MouseScroller.Create(
                    function () { return container.viewPortDiv; }.aspxBind(that),
                    function () { return conf.horz ? container.viewPortDiv : null; }.aspxBind(that),
                    function () { return conf.vert ? container.viewPortDiv : null; }.aspxBind(that),
                    function () { return false; },
                    true
                );
        },
        prepareElements: function () {
            var that = this,
                elems = that._domElements,
                columnContainer = elems.columnContainer,
                rowContainer = elems.rowContainer,
                dataContainer = elems.dataContainer,
                columnCellsMatrix = elems.columnCellsMatrix,
                rowCellsMatrix = elems.rowCellsMatrix,
                dataCellRows = elems.dataCellRows,
                horzSbContainer = elems.horzScrollBarContainer,
                vertSbContainer = elems.vertScrollBarContainer;
            that.pivotTable.style.display = '';
            if (columnCellsMatrix.getColumnCount() > 0 && columnCellsMatrix.getRowCount() > 0) {
                var leftTopColumnCellStyle = ASPx.GetCurrentStyle(columnCellsMatrix.getLeftTopElement()),
                    rightBottomColumnCellStyle = ASPx.GetCurrentStyle(columnCellsMatrix.getRightBottomElement());
                that.prepareValuesContainerStyle(columnContainer, leftTopColumnCellStyle, 'Left');
                that.prepareValuesContainerStyle(columnContainer, leftTopColumnCellStyle, 'Top');
                that.prepareValuesContainerStyle(columnContainer, rightBottomColumnCellStyle, 'Right');
                that.prepareValuesContainerStyle(columnContainer, rightBottomColumnCellStyle, 'Bottom');
            }
            if (rowCellsMatrix.getColumnCount() > 0 && rowCellsMatrix.getRowCount() > 0) {
                var leftTopRowCellStyle = ASPx.GetCurrentStyle(rowCellsMatrix.getLeftTopElement()),
                    rightBottomRowCellStyle = ASPx.GetCurrentStyle(rowCellsMatrix.getRightBottomElement());
                that.prepareValuesContainerStyle(rowContainer, leftTopRowCellStyle, 'Left');
                that.prepareValuesContainerStyle(rowContainer, leftTopRowCellStyle, 'Top');
                that.prepareValuesContainerStyle(rowContainer, rightBottomRowCellStyle, 'Right');
                that.prepareValuesContainerStyle(rowContainer, rightBottomRowCellStyle, 'Bottom');
            }
            if (dataCellRows.length > 0) {
                var leftTopDataCellStyle = ASPx.GetCurrentStyle(dataCellRows[0].cells[0]),
                    rightBottomDataCellStyle = ASPx.GetCurrentStyle(dataCellRows[dataCellRows.length - 1].cells[dataCellRows[0].cells.length - 1]),
                    scrollBarEdgeCellStyle = ASPx.GetCurrentStyle(elems.scrollBarEdgeCell);
                that.prepareDataContainerStyle(dataContainer, leftTopColumnCellStyle, leftTopDataCellStyle, 'Left');
                that.prepareDataContainerStyle(dataContainer, leftTopRowCellStyle, leftTopDataCellStyle, 'Top');
                that.prepareDataContainerStyle(dataContainer, rightBottomColumnCellStyle, rightBottomDataCellStyle, 'Right');
                that.prepareDataContainerStyle(dataContainer, rightBottomRowCellStyle, rightBottomDataCellStyle, 'Bottom');
                that.prepareScrollBarContainer(horzSbContainer, leftTopDataCellStyle, 'Left', true);
                that.prepareScrollBarContainer(horzSbContainer, scrollBarEdgeCellStyle, 'Top', true);
                that.prepareScrollBarContainer(horzSbContainer, rightBottomDataCellStyle, 'Right', true);
                that.prepareScrollBarContainer(horzSbContainer, scrollBarEdgeCellStyle, 'Bottom', true);
                that.prepareScrollBarContainer(vertSbContainer, scrollBarEdgeCellStyle, 'Left', false);
                that.prepareScrollBarContainer(vertSbContainer, leftTopDataCellStyle, 'Top', false);
                that.prepareScrollBarContainer(vertSbContainer, scrollBarEdgeCellStyle, 'Right', false);
                that.prepareScrollBarContainer(vertSbContainer, rightBottomDataCellStyle, 'Bottom', false);
            }
            that.setScrollBarContainerSizes(horzSbContainer, true);
            that.setScrollBarContainerSizes(vertSbContainer, false);
        },
        prepareValuesContainerStyle: function (container, style, side) {
            var that = this;
            that.mergeBorderStyle(container.decoratorDiv, style, side);
            that.mergeBorderWidth(container.viewPortDiv, style, 'margin', side, '-');
        },
        prepareDataContainerStyle: function (container, valueCellStyle, dataCellStyle, side) {
            var that = this;
            that.mergeBorderStyle(container.decoratorDiv, dataCellStyle, side);
            var styleName = "border" + side + "Style";
            if (dataCellStyle[styleName] == "none" && (side == 'Left' || side == 'Top')) {
                that.mergeBorderWidth(container.decoratorDiv, valueCellStyle, 'padding', side);
            }
            that.mergeBorderWidth(container.viewPortDiv, valueCellStyle, 'margin', side, '-');
        },
        prepareScrollBarContainer: function (container, style, side, isHorz) {
            var that = this;
            that.mergeBorderStyle(container.decoratorDiv, style, side);
            if ((isHorz && (side == 'Left' || side == 'Right')) || (!isHorz && (side == 'Top' || side == 'Bottom'))) {
                that.mergeBorderWidth(container.viewPortDiv, style, 'margin', side, '-');
            }
        },
        setScrollBarContainerSizes: function (sbContainer, isHorz) {
            var sbWidth = this.getScrollBarWidth() + 1,
                side = isHorz ? "Top" : "Left",
                size = isHorz ? "height" : "width";
            sbContainer.viewPortDiv.style[size] = sbWidth + "px";
            sbContainer.scrollableDiv.style[size] = sbWidth + "px";
            sbContainer.viewPortDiv.style["margin" + side] = "-1px";
        },
        mergeBorderStyle: function (el, style, side) {
            var that = this,
                borderName = 'border' + side,
                styleName = borderName + 'Style',
                widthName = borderName + 'Width',
                colorName = borderName + 'Color',
                optsList = [
                    { same: styleName },
                    { same: widthName },
                    { same: colorName }
                ];
            that.each(optsList, function (opts) {
                that.mergeStyle(el, style, opts);
            });
        },
        mergeBorderWidth: function (el, style, property, side, prefix) {
            var that = this,
                borderWidthName = 'border' + side + 'Width',
                propertyName = property + side;
            if (style['border' + side + 'Style'] != 'none') {
                that.mergeStyle(el, style, {
                    from: borderWidthName,
                    to: propertyName,
                    prefix: prefix
                });
            }
        },
        mergeStyle: function (el, style, opts) {
            var to = opts.same || opts.to,
                from = opts.same || opts.from,
                prefix = opts.prefix || '';
            el.style[to] = prefix + style[from];
        },
        parseDomElements: function (pivotTable) {
            var that = this,
                columnCellRows = [],
                dataCellRows = [],
                rowCellRows = [],
                rowHeaderCells = [],
                rowContainerCell = undefined,
                columnContainerCell = undefined,
                dataContainerCell = undefined,
                columnHeadersCell = undefined,
                dataHeadersCell = undefined,
                horzScrollBarRowAreaCell = undefined,
                horzScrollBarContainerCell = undefined,
                vertScrollBarColumnAreaCell = undefined,
                vertScrollBarContainerCell = undefined,
                scrollBarEdgeCell = undefined,
                columnHeadersContainer = undefined,
                columnFieldValuesRowsStarted = false;
            that.each(pivotTable.rows, function (row) {
                var columnCells = [],
                    rowCells = [],
                    dataCells = [];
                that.each(row.cells, function (cell) {
                    if (cell.className.indexOf('dxpgColumnFieldValue') !== -1)
                        columnCells.push(cell);
                    if (cell.className.indexOf('dxpgRowFieldValue') !== -1)
                        rowCells.push(cell);
                    if (cell.className.indexOf('dxpgCell') !== -1)
                        dataCells.push(cell);
                    if (cell.className.indexOf('dxpgRowArea') !== -1)
                        rowHeaderCells.push(cell);
                    if (cell.className.indexOf('dxpgColumnArea') !== -1)
                        columnHeadersCell = cell;
                    if (cell.className.indexOf('dxpgDataArea') !== -1)
                        dataHeadersCell = cell;
                    if (cell.id) {
                        if (that.endsWith(cell.id, '_RVSCell'))
                            rowContainerCell = cell;
                        if (that.endsWith(cell.id, '_CVSCell'))
                            columnContainerCell = cell;
                        if (that.endsWith(cell.id, '_DCSCell'))
                            dataContainerCell = cell;
                        if (that.endsWith(cell.id, '_HSBRACell'))
                            horzScrollBarRowAreaCell = cell;
                        if (that.endsWith(cell.id, '_HSBCCell'))
                            horzScrollBarContainerCell = cell;
                        if (that.endsWith(cell.id, '_VSBCACell'))
                            vertScrollBarColumnAreaCell = cell;
                        if (that.endsWith(cell.id, '_VSBCCell'))
                            vertScrollBarContainerCell = cell;
                        if (that.endsWith(cell.id, '_SBECell'))
                            scrollBarEdgeCell = cell;
                    }
                });
                var inColumnFieldValuesRows = columnFieldValuesRowsStarted && !rowContainerCell;
                if (columnCells.length > 0 || inColumnFieldValuesRows) {
                    columnFieldValuesRowsStarted = true;
                    columnCellRows.push(that.createCellsRow(row, columnCells));
                }
                if (rowCells.length > 0)
                    rowCellRows.push(that.createCellsRow(row, rowCells));
                if (dataCells.length > 0)
                    dataCellRows.push(that.createCellsRow(row, dataCells));
            });
            var rowCellsMatrix = that.createCellsMatrix(rowCellRows),
                columnCellsMatrix = that.createCellsMatrix(columnCellRows);
            if (columnHeadersCell)
                columnHeadersContainer = that.findChildByIdSuffix(columnHeadersCell, 'ColumnArea');
            var rowContainer = that.createContainer(rowContainerCell),
                columnContainer = that.createContainer(columnContainerCell),
                dataContainer = that.createContainer(dataContainerCell),
                horzScrollBarContainer = that.createContainer(horzScrollBarContainerCell),
                vertScrollBarContainer = that.createContainer(vertScrollBarContainerCell),
                scrollableContainers = {};
            scrollableContainers['horz'] = [dataContainer, columnContainer, horzScrollBarContainer];
            scrollableContainers['vert'] = [dataContainer, rowContainer, vertScrollBarContainer];
            return {
                columnCellRows: columnCellRows,
                rowCellRows: rowCellRows,
                dataCellRows: dataCellRows,
                rowHeaderCells: rowHeaderCells,
                columnHeadersCell: columnHeadersCell,
                dataHeadersCell: dataHeadersCell,
                columnHeadersContainer: columnHeadersContainer,
                rowContainer: rowContainer,
                columnContainer: columnContainer,
                dataContainer: dataContainer,
                horzScrollBarContainer: horzScrollBarContainer,
                vertScrollBarContainer: vertScrollBarContainer,
                horzScrollBarRowAreaCell: horzScrollBarRowAreaCell,
                scrollableContainers: scrollableContainers,
                vertScrollBarColumnAreaCell: vertScrollBarColumnAreaCell,
                scrollBarEdgeCell: scrollBarEdgeCell,
                rowCellsMatrix: rowCellsMatrix,
                columnCellsMatrix: columnCellsMatrix
            };
        },
        createCellsRow: function (row, cells) {
            var that = this;
            return {
                row: row,
                cells: cells,
                styles: that.getCellStyles(cells)
            };
        },
        getCellStyles: function (cells) {
            var that = this,
                styles = [];
            that.each(cells, function (cell) {
                styles.push({
                    width: cell.style.width,
                    height: cell.style.height
                });
            });
            return styles;
        },
        toInitialState: function () {
            var that = this,
                state = that.state;
            if (state != State.Adjusted && state != State.Initial) {
                throw new Error('Incorrect state');
            }
            if (state == State.Adjusted) {
                that.ejectPivotTable();
                that.adjustedToInitial();
                that.adjectPivotTable();
            }
            ASPx.Attr.ChangeStyleAttribute(document.body, "padding-right", "");
            that.state = State.Initial;
        },
        getScrollBarsConf: function (sizeInfos, scrollableSizes, scrolling, scrollBarModes) {
            var that = this,
                calculationError = that.getCalculationError(),
                horz = scrolling.horz ? sizeInfos.column.fullSize > scrollableSizes.scrollableWidth + calculationError : false,
                vert = scrolling.vert ? sizeInfos.row.fullSize > scrollableSizes.scrollableHeight + calculationError : false;
            if (scrollBarModes.horzMode == 'Visible') horz = true;
            if (scrollBarModes.vertMode == 'Visible') vert = true;
            return that.createConfiguration(horz, vert);
        },
        getCalculationError: function () {
            return 0.1;
        },
        prepareScrollableSizes: function (allSizes, getScrollableSizesOnCollapse, scrollingConf, scrollBarModes) {
            var that = this,
                elems = that._domElements,
                opts = that.opts,
                scrollableSizes = undefined,
                sizes = undefined,
                availableConfs = that.getAvailableConfigurations(scrollBarModes),
                sbConf = undefined,
                sizeInfos = undefined,
                isVerticalScrollExistsInInitialState,
                isVerticalScrollExistsInCollapsedState;
            that.each(availableConfs, function (availableConf) {
                sizes = allSizes[availableConf.toKey()];
                isVerticalScrollExistsInInitialState = ASPx.PopupUtils.IsVerticalScrollExists();
                that.collapseInitial(sizes, scrollingConf, availableConf);
                isVerticalScrollExistsInCollapsedState = ASPx.PopupUtils.IsVerticalScrollExists();
                if (isVerticalScrollExistsInInitialState && !isVerticalScrollExistsInCollapsedState) {
                    ASPx.Attr.ChangeStyleAttribute(document.body, "padding-right", that.getScrollBarWidth() + "px");
                }
                that.forceRedraw(that.pivotTable);
                scrollableSizes = getScrollableSizesOnCollapse();
                if (scrollingConf.horz && ASPx.Browser.WebKitFamily) {
                    scrollableSizes.scrollableWidth += 1;
                }
                sbConf = availableConf;
                sizeInfos = {
                    row: that.createSizeInfo(opts.Vert, sizes.rowCellsTotalHeight, elems.rowCellsMatrix.getLastLevel(false), sizes.rowAreaRowHeights),
                    column: that.createSizeInfo(opts.Horz, sizes.columnCellsTotalWidth, elems.columnCellsMatrix.getLastLevel(true), sizes.columnAreaColumnWidths)
                };
                return that.getScrollBarsConf(sizeInfos, scrollableSizes, scrollingConf, scrollBarModes).equal(availableConf);
            });
            that._sizes = sizes;
            that._sbConf = sbConf;
            that._scrollableSizes = scrollableSizes;
            that._sizeInfos = sizeInfos;
        },
        createConfiguration: function (horz, vert) {
            return {
                horz: horz,
                vert: vert,
                toKey: function () {
                    return [horz, vert];
                },
                equal: function (conf) {
                    return conf.horz == horz && conf.vert == vert;
                },
                inArray: function (array) {
                    var that = this,
                        i = array.length;
                    while (i--) {
                        if (that.equal(array[i])) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        },
        getAvailableConfigurations: function (scrollBarModes) {
            var that = this,
                rules = {
                    'Hidden': [false],
                    'Visible': [true],
                    'Auto': [true, false]
                },
                horzStates = rules[scrollBarModes.horzMode],
                vertStates = rules[scrollBarModes.vertMode],
                confs = [];
            that.each(horzStates, function (horzState) {
                that.each(vertStates, function (vertState) {
                    confs.push(that.createConfiguration(horzState, vertState));
                });
            });
            return confs;
        },
        ejectPivotTable: function () {
            this.pivotTable.style.display = 'none';
        },
        adjectPivotTable: function () {
            this.pivotTable.style.display = '';
        },
        measureAllSizes: function (scrollBarsModes) {
            var that = this,
                allSizes = {};
            that.each(that.getAvailableConfigurations(scrollBarsModes), function (conf) {
                allSizes[conf.toKey()] = that.measureSizes(conf);
            });
            that.measureSizes(that.createConfiguration(false, false));
            return allSizes;
        },
        measureSizes: function (conf) {
            var that = this;
            that.preparePivotTableConf(conf);
            return that.measureElements();
        },
        preparePivotTableConf: function (conf) {
            var that = this,
                scrollBarWidth = that.getScrollBarWidth() + 1;
            that.pivotTable.style.paddingBottom = (conf.horz ? scrollBarWidth : 0) + "px";
            that.pivotTable.style.paddingRight = (conf.vert ? scrollBarWidth : 0) + "px";
        },
        forceRedraw: function () {
            this.onForceRedraw();
        },
        measureElements: function () {
            var that = this,
                elems = that._domElements,
                dataCellWidths = [],
                dataCellHeights = [],
                columnHeights = [],
                rowAreaColWidths = [],
                rowHeaderWidths = [],
                rowHeaderHeight = 0,
                dataCellsTotalWidth = 0,
                dataCellsTotalHeight = 0,
                rowCellsTotalHeight = 0,
                columnCellsTotalWidth = 0,
                rowTotalWidth = 0,
                columnHeadersWidth = 0,
                columnHeadersHeight = 0;
            that.forceRedraw();
            var dataRows = elems.dataCellRows,
                fDataRow = dataRows[0],
                lDataRow = dataRows[dataRows.length - 1],
                fRowRow = elems.rowCellRows[0],
                lRowRow = elems.rowCellRows[elems.rowCellRows.length - 1],
                fColumnRow = elems.columnCellRows[0];
            if (fDataRow) {
                that.each(fDataRow.cells, function (cell) {
                    var width = that.getCellWidth(cell);
                    dataCellWidths.push(width);
                });
                dataCellsTotalWidth = that.utils.getRoundingRect(fDataRow.cells[0], fDataRow.cells[fDataRow.cells.length - 1]).width;
                that.each(dataRows, function (row) {
                    var height = that.getCellHeight(row.cells[0]);
                    dataCellHeights.push(height);
                });
                dataCellsTotalHeight = that.utils.getRoundingRect(fDataRow.cells[0], lDataRow.cells[0]).height;
            }
            rowCellsTotalHeight = that.utils.getRoundingRect(fRowRow.cells[0], lRowRow.cells[lRowRow.cells.length - 1]).height;
            if (fColumnRow) {
                columnCellsTotalWidth = that.utils.getRoundingRect(fColumnRow.cells[0], fColumnRow.cells[fColumnRow.cells.length - 1]).width;
            }
            columnHeights = that.getRowHeights(elems.columnCellRows);
            this.each(elems.rowHeaderCells, function (cell) {
                var width = that.getCellWidth(cell);
                rowHeaderWidths.push(width);
                rowTotalWidth += width;
            });
            rowAreaColWidths = that.measureRowAreaColWidths(elems, rowHeaderWidths);
            var rowAreaRowHeights = [];
            that.each(elems.rowCellsMatrix.getLastLevel(false), function (cell) {
                rowAreaRowHeights.push(that.getCellHeight(cell));
            });
            var columnAreaColumnWidths = [];
            that.each(elems.columnCellsMatrix.getLastLevel(true), function (cell) {
                columnAreaColumnWidths.push(that.getCellWidth(cell));
            });
            rowHeaderHeight = that.getCellHeight(elems.rowHeaderCells[0]);
            if (elems.columnHeadersCell)
                columnHeadersHeight = that.getCellHeight(elems.columnHeadersCell);
            if (elems.columnHeadersContainer) {
                columnHeadersWidth = that.utils.getRect(elems.columnHeadersContainer).width;
            }
            return {
                dataCellWidths: dataCellWidths,
                dataCellHeights: dataCellHeights,
                columnHeights: columnHeights,
                rowAreaColWidths: rowAreaColWidths,
                rowHeaderWidths: rowHeaderWidths,
                rowHeaderHeight: rowHeaderHeight,
                dataCellsTotalWidth: dataCellsTotalWidth,
                dataCellsTotalHeight: dataCellsTotalHeight,
                rowTotalWidth: rowTotalWidth,
                columnHeadersWidth: columnHeadersWidth,
                columnHeadersHeight: columnHeadersHeight,
                rowCellsTotalHeight: rowCellsTotalHeight,
                columnCellsTotalWidth: columnCellsTotalWidth,
                rowAreaRowHeights: rowAreaRowHeights,
                columnAreaColumnWidths: columnAreaColumnWidths
            };
        },
        measureRowAreaColWidths: function (elems, rowHeaderWidths) {
            var that = this,
                rowAreaColWidths = [],
                index = 0,
                cellsMatrix = elems.rowCellsMatrix,
                rowCount = cellsMatrix.getRowCount(),
                columnCount = cellsMatrix.getColumnCount();
            if (rowCount > 0 && columnCount > 0) {
                while (rowAreaColWidths.length == 0) {
                    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
                        var isRowWithDifferentCells = true;
                        for (var columnIndex = 1; columnIndex < (columnCount - index); columnIndex++) {
                            if (cellsMatrix.getElement(rowIndex, columnIndex) === cellsMatrix.getElement(rowIndex, columnIndex - 1)) {
                                isRowWithDifferentCells = false;
                                break;
                            }
                        }
                        if (isRowWithDifferentCells) {
                            that.each(cellsMatrix.getRow(rowIndex), function (cell) {
                                rowAreaColWidths.push(that.getCellWidth(cell) / cell.colSpan);
                            });
                            break;
                        }
                    }
                    index++;
                }
            }
            if (rowAreaColWidths.length == 0) {
                rowAreaColWidths = rowHeaderWidths.length > 0 ? rowHeaderWidths :
                    [elems.dataHeadersCell ? that.getCellWidth(elems.dataHeadersCell) : 0];
            }
            return rowAreaColWidths;
        },
        createCellsMatrix: function (cellRows) {
            var that = this,
                matrix = {};
            var rowCount = 0,
                columnCount = 0,
                rowIndex = 0,
                columnIndex;
            that.each(cellRows, function (row) {
                columnIndex = 0;
                that.each(row.cells, function (cell) {
                    while (matrix[[rowIndex, columnIndex]]) {
                        columnIndex++;
                    }
                    for (var rowSpanIndex = 0; rowSpanIndex < cell.rowSpan; rowSpanIndex++) {
                        for (var colSpanIndex = 0; colSpanIndex < cell.colSpan; colSpanIndex++) {
                            matrix[[rowIndex + rowSpanIndex, columnIndex + colSpanIndex]] = cell;
                        }
                    }
                    rowCount = Math.max(rowCount, rowIndex + cell.rowSpan);
                    columnCount = Math.max(columnCount, columnIndex + cell.colSpan);
                    columnIndex = columnIndex + cell.colSpan;
                });
                rowIndex++;
            });
            function getRowCount() {
                return rowCount;
            }
            function getColumnCount() {
                return columnCount;
            }
            function getElement(rowIndex, columnIndex) {
                return matrix[[rowIndex, columnIndex]]
            }
            function getLeftTopElement() {
                return getElement(0, 0);
            }
            function getRightBottomElement() {
                return getElement(getRowCount() - 1, getColumnCount() - 1);
            }
            function getRow(rowIndex) {
                var cells = [];
                for (var i = 0; i < getColumnCount(); i++) {
                    cells.push(getElement(rowIndex, i));
                }
                return cells;
            }
            function getColumn(columnIndex) {
                var cells = [];
                for (var i = 0; i < getRowCount(); i++) {
                    cells.push(getElement(i, columnIndex));
                }
                return cells;
            }
            function getLastLevel(isHorz) {
                return isHorz ? getRow(getRowCount() - 1) : getColumn(getColumnCount() - 1);
            }
            return {
                getRowCount: getRowCount,
                getColumnCount: getColumnCount,
                getElement: getElement,
                getLeftTopElement: getLeftTopElement,
                getRightBottomElement: getRightBottomElement,
                getRow: getRow,
                getColumn: getColumn,
                getLastLevel: getLastLevel
            };
        },
        collapseInitial: function (sizes, sOpts, sbConf) {
            var that = this,
                elems = that._domElements,
                columnRootDiv = elems.columnContainer.rootDiv,
                rowRootDiv = elems.rowContainer.rootDiv,
                dataRootDiv = elems.dataContainer.rootDiv,
                horzScrollBarRootDiv = elems.horzScrollBarContainer.rootDiv,
                vertScrollBarRootDiv = elems.vertScrollBarContainer.rootDiv,
                vert = sOpts.vert,
                horz = sOpts.horz;
            that.createPivotTableColGroup();
            that.preparePivotTable("fixed",
                {
                    rowAreaColWidths: sizes.rowHeaderWidths.length > 1 ? sizes.rowHeaderWidths : sizes.rowAreaColWidths,
                    dataWidth: horz ? 0 : sizes.dataCellsTotalWidth
                },
                sbConf);
            this.each(elems.rowHeaderCells, function (cell, i) {
                that.setCellWidth(cell, sizes.rowHeaderWidths[i]);
            });
            rowRootDiv.style.width = 'auto';
            rowRootDiv.style.height = (vert ? 0 : sizes.dataCellsTotalHeight) + 'px';
            columnRootDiv.style.width = (horz ? 0 : sizes.dataCellsTotalWidth) + 'px';
            columnRootDiv.style.height = sizes.rowHeaderHeight + 'px';
            dataRootDiv.style.width = (horz ? 0 : sizes.dataCellsTotalWidth) + 'px';
            dataRootDiv.style.height = (vert ? 0 : sizes.dataCellsTotalHeight) + 'px';
            horzScrollBarRootDiv.style.width = (horz ? 0 : sizes.dataCellsTotalWidth) + 'px';
            vertScrollBarRootDiv.style.height = (vert ? 0 : sizes.dataCellsTotalHeight) + 'px';
            rowRootDiv.style.overflow = 'hidden';
            dataRootDiv.style.overflow = 'hidden';
            columnRootDiv.style.overflow = 'hidden';
            horzScrollBarRootDiv.style.overflow = 'hidden';
            vertScrollBarRootDiv.style.overflow = 'hidden';
            if (elems.columnHeadersCell)
                that.setRowHeight(elems.columnHeadersCell.parentNode, sizes.columnHeadersHeight);
            that.removeCells();
            elems.columnContainer.cell.style.display = '';
            elems.rowContainer.cell.style.display = '';
            elems.dataContainer.cell.style.display = '';
            if (elems.columnHeadersContainer)
                elems.columnHeadersContainer.style.display = 'none';
            elems.spacerDiv.style.width = sizes.rowTotalWidth + sizes.columnHeadersWidth + 'px';
        },
        setScrollBarsVisiblity: function (sbConf) {
            var that = this,
                horz = sbConf.horz,
                vert = sbConf.vert,
                elems = that._domElements;
            elems.vertScrollBarContainer.viewPortDiv.style.height = '0px';
            elems.vertScrollBarContainer.scrollableDiv.style.height = '0px';
            elems.horzScrollBarContainer.viewPortDiv.style.width = '0px';
            elems.horzScrollBarContainer.scrollableDiv.style.width = '0px';
            elems.horzScrollBarContainer.viewPortDiv.style.display = '';
            elems.vertScrollBarContainer.viewPortDiv.style.display = '';
            elems.vertScrollBarColumnAreaCell.style.display = vert ? '' : 'none';
            elems.vertScrollBarContainer.cell.style.display = vert ? '' : 'none';
            elems.horzScrollBarRowAreaCell.style.display = horz ? '' : 'none';
            elems.horzScrollBarContainer.cell.style.display = horz ? '' : 'none';
            elems.scrollBarEdgeCell.style.display = vert && horz ? '' : 'none';
            if (elems.columnHeadersCell)
                elems.columnHeadersCell.colSpan = vert ? 2 : 1;
        },
        adjustedToInitial: function () {
            var that = this,
                elems = that._domElements;
            that.removeCells();
            that.setPivotCellsStyles('');
            that.clearScrollableContainer(elems.columnContainer);
            that.clearScrollableContainer(elems.rowContainer);
            that.clearScrollableContainer(elems.dataContainer);
            that.clearScrollBars();
            that.preparePivotTable("auto",
                {
                    rowAreaColWidths: [],
                    dataWidth: []
                },
                that.createConfiguration(false, false));
            this.each(elems.rowHeaderCells, function (cell) {
                cell.style.width = '';
            });
            if (elems.columnHeadersCell)
                elems.columnHeadersCell.parentNode.style.height = 'auto';
            if (elems.columnHeadersCell && elems.dataCellRows[0]) {
                var colspan = elems.dataCellRows[0].cells.length,
                    maxColspan = 1000;
                elems.columnHeadersCell.colSpan = Math.min(colspan, maxColspan);
            }
            that.insertCellsToPivotTable();
        },
        createSizeInfo: function (opts, contentSize, lastLevelCells, sizes) {
            var that = this,
                pagingOpts = opts.PagingOptions,
                virtualPaging = opts.VirtualPagingEnabled,
                fullSize = contentSize,
                pageSize = contentSize,
                approxRowSize = undefined,
                areas = undefined;
            if (opts.Enabled) {
                approxRowSize = contentSize / pagingOpts.RowsCount;
                if (virtualPaging)
                    fullSize = approxRowSize * pagingOpts.TotalRowsCount;
                pageSize = 0;
                var startId = that.pivot.name + '_' + pagingOpts.StartPageCellId,
                    endId = that.pivot.name + '_' + pagingOpts.EndPageCellId,
                    startIndex = that.getCellIndexById(lastLevelCells, startId),
                    endIndex = that.getCellIndexById(lastLevelCells, endId),
                    pageStartIndex = pagingOpts.PageIndex * pagingOpts.PageSize,
                    knownAreaStartIndex = pageStartIndex - startIndex,
                    beforeAreaSize = virtualPaging ? knownAreaStartIndex * approxRowSize : 0,
                    knownAreaStartOffset = beforeAreaSize,
                    knownAreaEndIndex = knownAreaStartIndex + pagingOpts.RowsCount - 1,
                    afterAreaStartOffset = knownAreaStartOffset + contentSize,
                    afterAreaSize = virtualPaging ? (pagingOpts.TotalRowsCount - (knownAreaEndIndex + 1)) * approxRowSize : 0;
                for (var i = startIndex; i <= endIndex; i++) {
                    pageSize += sizes[i];
                }
                areas = [
                    {
                        startOffset: 0,
                        size: beforeAreaSize,
                        itemSize: approxRowSize,
                        startIndex: 0,
                        count: knownAreaStartIndex
                    },
                    {
                        startOffset: knownAreaStartOffset,
                        size: contentSize,
                        startIndex: knownAreaStartIndex,
                        count: pagingOpts.RowsCount,
                        itemSizes: sizes
                    },
                    {
                        startOffset: afterAreaStartOffset,
                        size: afterAreaSize,
                        itemSize: approxRowSize,
                        startIndex: knownAreaEndIndex + 1,
                        count: pagingOpts.TotalRowsCount - (knownAreaEndIndex + 1)
                    }
                ];
            }
            return {
                fullSize: fullSize,
                pageSize: pageSize,
                approxRowSize: approxRowSize,
                areas: areas
            };
        },
        getScrollLocation: function (sizeInfo, offset, size) {
            var that = this;
            return {
                start: that.getAreaLocation(sizeInfo, offset),
                end: that.getAreaLocation(sizeInfo, offset + size)
            }
        },
        getScrollOffset: function (sizeInfo, scrollLocation) {
            var that = this,
                itemIndex = scrollLocation.index,
                currentArea = undefined,
                areas = sizeInfo.areas,
                lastArea = areas[areas.length - 1],
                startIndex = areas[0].startIndex,
                endIndex = lastArea.startIndex + lastArea.count - 1;
            itemIndex = itemIndex < startIndex ? startIndex : itemIndex;
            itemIndex = itemIndex > endIndex ? endIndex : itemIndex;
            that.each(areas, function (area) {
                if (that.insideInterval(itemIndex, area.startIndex, area.count - 1)) {
                    currentArea = area;
                    return true;
                }
            });
            var itemOffset = currentArea.startOffset;
            if (currentArea.itemSizes) {
                that.each(currentArea.itemSizes, function (size, index) {
                    var currentIndex = currentArea.startIndex + index;
                    if (currentIndex == itemIndex) {
                        return true;
                    }
                    itemOffset += size;
                });
            }
            else {
                var offsetInArea = (itemIndex - currentArea.startIndex) * currentArea.itemSize;
                itemOffset += offsetInArea;
            }
            return itemOffset + scrollLocation.offset;
        },
        getScrollPos: function () {
            var that = this,
                prevScrollPos = that._scrollPos,
                elems = that._domElements,
                viewPortDiv = elems.dataContainer.viewPortDiv,
                opts = that.opts,
                horzOpts = opts.Horz,
                vertOpts = opts.Vert,
                sizeInfos = that._sizeInfos,
                colSizeInfo = sizeInfos.column,
                rowSizeInfo = sizeInfos.row,
                scrollLeft = elems.columnContainer.viewPortDiv.scrollLeft,
                scrollTop = elems.rowContainer.viewPortDiv.scrollTop,
                viewPortWidth = viewPortDiv.offsetWidth,
                viewPortHeight = viewPortDiv.offsetHeight,
                horz = horzOpts.PagingOptions ? that.getScrollLocation(colSizeInfo, scrollLeft, viewPortWidth) : null,
                vert = vertOpts.PagingOptions ? that.getScrollLocation(rowSizeInfo, scrollTop, viewPortHeight) : null;
            if (JSON.stringify(prevScrollPos.horz) == JSON.stringify(horz) && JSON.stringify(prevScrollPos.vert) == JSON.stringify(vert))
                prevScrollPos = prevScrollPos.prev;
            return {
                horz: horz,
                vert: vert,
                prev: prevScrollPos
            };
        },
        getAreaLocation: function (sizeInfo, offset) {
            var that = this,
                currentArea = undefined,
                itemIndex = -1,
                locationOffset = 0,
                fullSize = sizeInfo.fullSize;
            offset = offset <= fullSize ? offset : fullSize;
            that.each(sizeInfo.areas, function (area) {
                if (that.insideInterval(offset, area.startOffset, area.size)) {
                    currentArea = area;
                    return true;
                }
            });
            var areaOffset = currentArea.startOffset;
            if (currentArea.itemSizes) {
                var itemOffset = areaOffset;
                that.each(currentArea.itemSizes, function (size, index) {
                    if (index == currentArea.itemSizes.length - 1) {
                        itemIndex = index;
                        return true;
                    }
                    if (that.insideInterval(offset, itemOffset, size)) {
                        itemIndex = index;
                        locationOffset = offset - itemOffset;
                        return true;
                    }
                    itemOffset += size;
                });
            }
            else {
                var offsetInArea = offset - areaOffset;
                itemIndex = Math.floor(offsetInArea / currentArea.itemSize);
                locationOffset = offsetInArea - itemIndex * currentArea.itemSize;
            }
            itemIndex += currentArea.startIndex;
            return {
                index: itemIndex,
                offset: locationOffset
            }
        },
        insideInterval: function (value, start, length) {
            if (length === 0) length += this.getCalculationError();
            return value >= start && value <= start + length;
        },
        getCellIndexById: function (cells, id) {
            var that = this,
                foundIndex = -1;
            that.each(cells, function (cell, i) {
                if (cell.id === id)
                    foundIndex = i;
            });
            return foundIndex;
        },
        prepareScrollableContainerCell: function (container, scrollSize, cellSizes, cellRows) {
            var that = this,
                rootDiv = container.rootDiv,
                viewPortDiv = container.viewPortDiv,
                scrollableDiv = container.scrollableDiv,
                table = container.table;
            that.clearScrollableContainer(container);
            container.cell.style.display = '';
            viewPortDiv.style.overflow = 'hidden';
            viewPortDiv.style.height = scrollSize.viewPort.height + 'px';
            scrollableDiv.style.width = scrollSize.virtual.width + 'px';
            that.setSize(false, scrollableDiv, scrollSize.virtual.height);
            rootDiv.style.overflow = 'auto';
            rootDiv.style.width = 'auto';
            rootDiv.style.height = 'auto';
            table.style.top = '';
            table.style.left = '';
            that.prepareScrollableTable(table, scrollSize.scrollable, cellSizes, cellRows);
        },
        prepareScrollableTable: function (table, totalSizes, cellSizes, cellRows) {
            var that = this;
            if (cellSizes.colWidths.length > 0) {
                that.prepareTableColGroup(table, cellSizes.colWidths);
                table.style['table-layout'] = 'fixed';
            }
            that.each(cellRows, function (row, i) {
                var tr = table.insertRow(i);
                that.setRowHeight(tr, cellSizes.rowHeights[i]);
                that.each(row.cells, function (cell) {
                    tr.appendChild(cell);
                });
            });
            table.style.width = totalSizes.width + 'px';
            table.style.height = totalSizes.height + 'px';
        },
        prepareTableColGroup: function (table, widths) {
            var colGroup = this.findChildByIdSuffix(table, '_CG');
            this.prepareColGroup(colGroup, widths);
        },
        prepareColGroup: function (colGroup, widths) {
            var that = this;
            that.each(widths, function (width) {
                var col = document.createElement('col');
                col.style.width = that.getPreparedSizeValue(width) + 'px';
                colGroup.appendChild(col);
            });
        },
        setColGroupWidths: function (colGroup, widths) {
            for (var i = colGroup.childNodes.length - 1; i >= 0; i--) {
                colGroup.removeChild(colGroup.childNodes[i]);
            }
            this.prepareColGroup(colGroup, widths);
        },
        createPivotTableColGroup: function () {
            var that = this;
            if (!that.pivotTableColGroup) {
                var tableColGroup = document.createElement('colgroup');
                that.pivotTable.insertBefore(tableColGroup, that.pivotTable.children[0]);
                that.pivotTableColGroup = tableColGroup;
            }
        },
        setPivotTableWidth: function (colWidths) {
            var tableWidth = 0;
            this.each(colWidths, function (width) {
                tableWidth += width;
            });
            this.pivotTable.style.width = (tableWidth > 0) ? tableWidth + "px" : '100%';
        },
        getPivotTableColGroupWidths: function (rowAreaColWidths, dataWidth, vert) {
            var colWidths = rowAreaColWidths.concat(dataWidth);
            if (vert) colWidths = colWidths.concat(this.getScrollBarWidth() + 1);
            return colWidths;
        },
        setPivotTableWidthWithColGroup: function (rowAreaColWidths, dataWidth, vert) {
            var colWidths = this.getPivotTableColGroupWidths(rowAreaColWidths, dataWidth, vert);
            this.setColGroupWidths(this.pivotTableColGroup, colWidths);
            this.setPivotTableWidth(colWidths);
        },
        preparePivotTable: function (tableLayout, widths, sbConf) {
            this.setPivotTableWidthWithColGroup(widths.rowAreaColWidths, widths.dataWidth, sbConf.vert);
            this.pivotTable.style.tableLayout = tableLayout;
            this.setScrollBarsVisiblity(sbConf);
        },
        prepareScrolling: function (horz, vert) {
            var that = this,
                scrollPos = that._scrollPos,
                elems = that._domElements,
                actions = [
                    {
                        direction: 'horz',
                        action: function () {
                            if (horz.Enabled)
                                that.prepareContainersScrolling(true, horz, elems.columnContainer, elems.dataContainer,
                                    elems.horzScrollBarContainer, scrollPos);
                        }
                    },
                    {
                        direction: 'vert',
                        action: function () {
                            if (vert.Enabled)
                                that.prepareContainersScrolling(false, vert, elems.rowContainer, elems.dataContainer,
                                    elems.vertScrollBarContainer, scrollPos);
                        }
                    }];
            actions = that.sortPrepareScrollingActions(actions);
            that.each(actions, function (ar) {
                ar.action();
            });
            that.requestCheckPaging();
        },
        sortPrepareScrollingActions: function (actions) {
            var that = this,
                scrollPos = that._scrollPos,
                prevScrollPos = scrollPos.prev;
            if (prevScrollPos) {
                var emptyPos = {
                    start: {
                        index: 0,
                        offset: 0
                    }
                },
                    currentVert = scrollPos.vert ? scrollPos.vert : emptyPos,
                    currentHorz = scrollPos.horz ? scrollPos.horz : emptyPos,
                    prevtVert = prevScrollPos.vert ? prevScrollPos.vert : emptyPos,
                    prevHorz = prevScrollPos.horz ? prevScrollPos.horz : emptyPos,
                    indexDeltaVert = Math.abs(currentVert.start.index - prevtVert.start.index),
                    indexDeltaHorz = Math.abs(currentHorz.start.index - prevHorz.start.index),
                    offsetDeltaVert = Math.abs(currentVert.start.offset - prevtVert.start.offset),
                    offsetDeltaHorz = Math.abs(currentHorz.start.offset - prevHorz.start.offset),
                    deltas = {
                        horz: {
                            index: indexDeltaHorz,
                            offset: offsetDeltaHorz
                        },
                        vert: {
                            index: indexDeltaVert,
                            offset: offsetDeltaVert
                        }
                    };
                actions = actions.sort(function (a1, a2) {
                    var delta = deltas[a2.direction].index - deltas[a1.direction].index;
                    delta = (delta == 0) ? deltas[a2.direction].offset - deltas[a1.direction].offset : delta;
                    return delta;
                });
            }
            return actions;
        },
        prepareContainersScrolling: function (isHorz, opts, targetContainer, dataContainer, scrollBarContainer, scrollPos) {
            var that = this,
                dataScrollSize = that._scrollSizes.data,
                sizeInfos = that._sizeInfos,
                sizeInfo = isHorz ? sizeInfos.column : sizeInfos.row,
                areas = sizeInfo.areas,
                scrollPos = isHorz ? scrollPos.horz : scrollPos.vert,
                scrollPos = scrollPos || {
                    start: {
                        index: opts.PagingOptions.PageIndex * opts.PagingOptions.PageSize,
                        offset: 0
                    }
                },
                scrollLocation = scrollPos.start,
                scrollOffset = that.getScrollOffset(sizeInfo, scrollLocation);
            var offsetProperty = isHorz ? 'left' : 'top',
                sizeProperty = isHorz ? 'width' : 'height',
                scrollProperty = isHorz ? 'scrollLeft' : 'scrollTop';
            targetContainer.table.style[offsetProperty] = areas[1].startOffset + 'px';
            dataContainer.table.style[offsetProperty] = areas[1].startOffset + 'px';
            that.prepareScrollBar(isHorz, opts.ScrollBarMode, dataScrollSize.viewPort[sizeProperty], dataScrollSize.virtual[sizeProperty], scrollBarContainer,
                [targetContainer, dataContainer]);
            targetContainer.viewPortDiv[scrollProperty] = scrollOffset;
            that.onScroll(targetContainer, that.createConfiguration(isHorz, !isHorz));
        },
        prepareScrollBar: function (isHorz, mode, outerSize, innerSize, scrollBar) {
            var that = this;
            that.inTimeout = false;
            if (mode) {
                scrollBar.rootDiv.style.overflow = 'auto';
                scrollBar.rootDiv.style.width = 'auto';
                scrollBar.rootDiv.style.height = 'auto';
                that.setSize(isHorz, scrollBar.viewPortDiv, outerSize);
                that.setSize(isHorz, scrollBar.scrollableDiv, innerSize);
            }
        },
        onScroll: function (container, conf) {
            var that = this,
                elems = that._domElements,
                containers = elems.scrollableContainers,
                scrollProps = that.getProps(conf),
                calculationError = that.getCalculationError();
            that.each(scrollProps, function (prop) {
                var value = container.viewPortDiv[prop.scrollProp],
                    maxValue = that.getMaxScrollValue(prop.sizeProp, container),
                    delta = value - maxValue;
                value = delta < calculationError ? value : maxValue;
                that.each(containers[prop.direction], function (cont) {
                    cont.viewPortDiv[prop.scrollProp] = value;
                });
            });
            that._scrollPos = that.getScrollPos();
            that.requestCheckPaging();
        },
        onMouseWheel: function (container, conf, eventArgs) {
            var that = this,
                scrollProps = that.getProps(conf),
                deltas = that.getMouseWheelDeltas(eventArgs),
                changed = false;
            that.each(scrollProps, function (prop) {
                var value = container.viewPortDiv[prop.scrollProp],
                    delta = deltas[prop.direction],
                    newValue = value + delta,
                    maxValue = that.getMaxScrollValue(prop.sizeProp, container);
                container.viewPortDiv[prop.scrollProp] = newValue;
                if (delta != 0 && newValue >= 0 && newValue <= maxValue)
                    changed = true;
            });
            if (!changed)
                return;
            return ASPx.Evt.PreventEvent(eventArgs);
        },
        getMouseWheelDeltas: function (e) {
            var deltas = {};
            deltas["horz"] = e.deltaX || 0;
            deltas["vert"] = e.deltaY || 0;
            if (ASPx.Browser.Firefox) {
                var muliplier = 30;
                deltas["horz"] *= muliplier;
                deltas["vert"] *= muliplier;
            }
            return deltas;
        },
        getProps: function (conf) {
            var props = [];
            if (conf.horz)
                props.push({
                    direction: 'horz',
                    scrollProp: 'scrollLeft',
                    sizeProp: 'width'
                }
                );
            if (conf.vert)
                props.push({
                    direction: 'vert',
                    scrollProp: 'scrollTop',
                    sizeProp: 'height'
                }
                );
            return props;
        },
        requestCheckPaging: function () {
            var that = this;
            if (!that.inTimeout) {
                window.setTimeout(function () {
                    that.inTimeout = false;
                    if (!that.inRequest) {
                        that.checkPaging();
                    }
                }, 300);
                that.inTimeout = true;
            }
        },
        checkPaging: function () {
            var that = this,
                vertPagingEnabled = that.opts.Vert.VirtualPagingEnabled,
                horzPagingEnabled = that.opts.Horz.VirtualPagingEnabled;
            if (!vertPagingEnabled && !horzPagingEnabled)
                return;
            var elems = that._domElements,
                sizeInfos = that._sizeInfos,
                scrollTop = elems.rowContainer.viewPortDiv.scrollTop,
                scrollLeft = elems.columnContainer.viewPortDiv.scrollLeft,
                viewPort = elems.dataContainer.viewPortDiv,
                viewPortHeight = that.utils.getRect(viewPort).height,
                viewPortWidth = that.utils.getRect(viewPort).width,
                vertOpts = vertPagingEnabled ? that.opts.Vert.PagingOptions : null,
                horzOpts = horzPagingEnabled ? that.opts.Horz.PagingOptions : null,
                vertPageIndex = vertOpts ? vertOpts.PageIndex : -1,
                vertPageSize = vertOpts ? vertOpts.PageSize : -1,
                horzPageIndex = horzOpts ? horzOpts.PageIndex : -1,
                horzPageSize = horzOpts ? horzOpts.PageSize : -1;
            var newVertPageIndex = vertOpts ? vertOpts.PageIndex : -1,
                newHorzPageIndex = horzOpts ? horzOpts.PageIndex : -1;
            var newHorzPageSize = horzOpts ? that.getPageSize(horzOpts, sizeInfos.column, viewPortWidth) : horzPageSize;
            var newVertPageSize = vertOpts ? that.getPageSize(vertOpts, sizeInfos.row, viewPortHeight) : vertPageSize;
            var pageSizesChanged = newHorzPageSize != horzPageSize || newVertPageSize != vertPageSize,
                pageIndicesChanged = false;
            if (!pageSizesChanged) {
                var horzScrollPos = horzOpts ? that.getScrollLocation(sizeInfos.column, scrollLeft, viewPortWidth) : null;
                var vertScrollPos = vertOpts ? that.getScrollLocation(sizeInfos.row, scrollTop, viewPortHeight) : null;
                if (vertOpts)
                    newVertPageIndex = that.getPageIndex(vertScrollPos.start.index, vertScrollPos.end.index, vertOpts);
                if (horzOpts)
                    newHorzPageIndex = that.getPageIndex(horzScrollPos.start.index, horzScrollPos.end.index, horzOpts);
                pageIndicesChanged = vertPageIndex != newVertPageIndex || horzPageIndex != newHorzPageIndex;
            }
            if (pageSizesChanged || pageIndicesChanged) {
                that.onPagingRequest(newVertPageIndex, newVertPageSize, newHorzPageIndex, newHorzPageSize);
                that.inRequest = true;
            }
        },
        getPageSize: function (opts, sizeInfo, viewPortSize) {
            var newPageSize = opts.PageSize;
            if (opts.PageIndex != opts.PageCount - 1) {
                if (sizeInfo.pageSize < viewPortSize) {
                    var approxPageSizeRatio = 1.25;
                    newPageSize = Math.ceil((viewPortSize / sizeInfo.approxRowSize) * approxPageSizeRatio);
                    if (newPageSize < opts.PageSize) {
                        newPageSize = opts.PageSize * 2;
                    }
                }
            }
            return newPageSize;
        },
        getPageIndex: function (startPos, endPos, opts) {
            var pageSize = opts.PageSize,
                medianPos = (startPos + endPos) / 2,
                pageIndex = Math.floor(medianPos / pageSize),
                startPageIndex = Math.floor(startPos / pageSize),
                endPageIndex = Math.floor(endPos / pageSize);
            if (endPageIndex == opts.PageCount - 1) {
                pageIndex = endPageIndex;
            }
            return pageIndex;
        },
        getMaxScrollValue: function (sizeProp, container) {
            var that = this,
                outerRect = that.utils.getRect(container.viewPortDiv),
                innerRect = that.utils.getRect(container.scrollableDiv),
                outerValue = outerRect[sizeProp],
                innerValue = innerRect[sizeProp];
            return innerValue - outerValue;
        },
        setSize: function (isHorz, el, value) {
            if (isHorz)
                el.style.width = value + 'px';
            else {
                this.prepareVirtualScrollMarginDiv(el, value);
            }
        },
        prepareVirtualScrollMarginDiv: function (div, height) {
            if (!div) return;
            var maxPieceHeight = 1100000;
            if (height <= maxPieceHeight) {
                div.style.height = height + "px";
            } else {
                div.style.height = "";
                div.innerHTML = "";
                while (height > 0) {
                    var pieceHeight = height >= maxPieceHeight ? maxPieceHeight : height;
                    height -= maxPieceHeight;
                    var pieceDiv = document.createElement("DIV");
                    pieceDiv.style.height = pieceHeight + "px";
                    div.appendChild(pieceDiv);
                }
            }
        },
        findChildByIdSuffix: function (el, idSuffix, deep) {
            deep = !!deep;
            var that = this,
                foundChild = undefined;
            that.each(el.childNodes, function (node) {
                if (deep) {
                    foundChild = that.findChildByIdSuffix(node, idSuffix, deep);
                    if (foundChild)
                        return true;
                }
                if (node.id && that.endsWith(node.id, idSuffix)) {
                    foundChild = node;
                    return true;
                }
                return false;
            });
            return foundChild;
        },
        removeCells: function () {
            var that = this,
                elems = that._domElements;
            that.removeElements(elems.columnCellRows, false);
            that.removeElements(elems.rowCellRows, true);
            that.removeElements(elems.dataCellRows, true);
        },
        setCellStyles: function (cellRows, sizeStyle) {
            var that = this;
            that.each(cellRows, function (row) {
                that.each(row.cells, function (cell) {
                    cell.style.width = sizeStyle;
                    cell.style.height = sizeStyle;
                });
            });
        },
        setPivotCellsStyles: function (sizeStyle) {
            var that = this,
                elems = that._domElements;
            that.setCellStyles(elems.columnCellRows, sizeStyle);
            that.setCellStyles(elems.rowCellRows, sizeStyle);
            that.setCellStyles(elems.dataCellRows, sizeStyle);
        },
        clearScrollableContainer: function (container) {
            var that = this,
                viewPort = container.viewPortDiv,
                scrollableDiv = container.scrollableDiv,
                table = container.table,
                tableColGroup = that.findChildByIdSuffix(table, '_CG');
            for (var i = tableColGroup.childNodes.length - 1; i >= 0; i--) {
                tableColGroup.removeChild(tableColGroup.childNodes[i]);
            }
            for (var i = table.rows.length - 1; i >= 0; i--) {
                table.deleteRow(i);
            }
            table.style['table-layout'] = 'auto';
            table.style.width = '';
            table.style.height = '';
            viewPort.style.width = '';
            viewPort.style.height = '';
            scrollableDiv.style.width = '';
            scrollableDiv.style.height = '';
            container.cell.style.display = 'none';
            container.cell.style.width = '';
            container.cell.style.height = '';
        },
        clearScrollBars: function () {
            var that = this,
                elems = that._domElements,
                scrollBar = elems.horzScrollBarContainer;
            scrollBar.viewPortDiv.style.width = '';
            scrollBar.viewPortDiv.style.display = 'none';
            scrollBar.scrollableDiv.style.width = '';
        },
        insertCellsToPivotTable: function () {
            var that = this,
                elems = that._domElements,
                columnBeforeCell = elems.columnContainer.cell,
                pivotTable = that.pivotTable,
                columnTableRow = columnBeforeCell.parentNode,
                rowAndDataBeforeCell = elems.rowContainer.cell,
                rowAndDataTableRow = rowAndDataBeforeCell.parentNode;
            that.applyRowCellStyles(elems.columnCellRows);
            that.applyRowCellStyles(elems.rowCellRows);
            that.applyRowCellStyles(elems.dataCellRows);
            that.each(elems.columnCellRows, function (row, i) {
                that.each(row.cells, function (cell) {
                    if (i == 0) {
                        columnTableRow.insertBefore(cell, columnBeforeCell);
                    }
                    else {
                        columnTableRow.appendChild(cell);
                    }
                });
                row.row = columnTableRow;
                columnTableRow = columnTableRow.nextSibling;
            });
            that.each(elems.rowCellRows, function (row, i) {
                var dataCellRow = elems.dataCellRows[i];
                rowAndDataTableRow = pivotTable.insertRow(rowAndDataTableRow.rowIndex + 1);
                row.row = rowAndDataTableRow;
                that.each(row.cells, function (cell) {
                    rowAndDataTableRow.appendChild(cell);
                });
                if (dataCellRow) {
                    dataCellRow.row = rowAndDataTableRow;
                    that.each(dataCellRow.cells, function (cell) {
                        rowAndDataTableRow.appendChild(cell);
                    });
                }
            });
        },
        applyRowCellStyles: function (cellRows) {
            var that = this;
            that.each(cellRows, function (row) {
                that.each(row.cells, function (cell, i) {
                    var style = row.styles[i],
                        width = style.width,
                        height = style.height;
                    if (width != undefined)
                        cell.style.width = width;
                    if (height != undefined)
                        cell.style.height = height;
                });
            });
        },
        createContainer: function (cell) {
            var that = this,
                rootDiv = that.findChildByIdSuffix(cell, '_SCRootDiv', true),
                decoratorDiv = that.findChildByIdSuffix(rootDiv, '_SCDecorDiv'),
                viewPortDiv = that.findChildByIdSuffix(decoratorDiv, '_SCVPDiv'),
                scrollableDiv = that.findChildByIdSuffix(viewPortDiv, '_SCSDiv'),
                table = that.findChildByIdSuffix(viewPortDiv, '_SCDTable');
            return {
                cell: cell,
                rootDiv: rootDiv,
                decoratorDiv: decoratorDiv,
                viewPortDiv: viewPortDiv,
                scrollableDiv: scrollableDiv,
                table: table
            };
        },
        removeElements: function (rows, removeRows) {
            var that = this;
            that.each(rows, function (row, i) {
                that.each(row.cells, function (cell, j) {
                    var rowEl = cell.parentNode;
                    if (rowEl) {
                        if (j == 0) {
                            that.setElementStyle(rowEl, 'height', '');
                            if (rowEl.parentNode && removeRows) {
                                rowEl.parentNode.removeChild(rowEl);
                            }
                        }
                        rowEl.removeChild(cell);
                    }
                });
            });
        },
        setElementStyle: function (el, prop, value) {
            if (!ASPx.IsExists(el.style)) {
                el.cssText += prop + ': ' + value + ';';
            }
            else {
                el.style[prop] = value;
            }
        },
        getPreparedSizeValue: function (sizeValue) {
            if (ASPx.Browser.WebKitFamily && sizeValue == 0)
                sizeValue = 1;
            if (!ASPx.Browser.IE || ASPx.Browser.MajorVersion < 9)
                return sizeValue;
            return Math.ceil(sizeValue * 100) / 100;
        },
        each: function (list, process, reverse) {
            reverse = !!reverse;
            var listSize = list.length,
                startIndex = reverse ? listSize - 1 : 0,
                increment = reverse ? -1 : 1,
                i = startIndex;
            while (i <= listSize - 1 && i >= 0) {
                if (process(list[i], i) === true)
                    break;
                i += increment;
            };
        },
        endsWith: function (str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        },
        setCellWidth: function (el, width) {
            ASPx.SetOffsetWidth(el, width);
        },
        setRowHeight: function (el, height) {
            el.style.height = (height == null) ? '' : height.toFixed(2) + 'px';
        },
        getRowHeights: function (rows) {
            var that = this,
                heights = [];
            that.each(rows, function (row, index) {
                var isLastRow = index == rows.length - 1,
                    minCell = that.getMinHeightCell(row),
                    height = null;
                if (minCell) {
                    height = that.getCellHeight(minCell);
                    if (!isLastRow && minCell.rowSpan && minCell.rowSpan > 1)
                        height = null;
                }
                heights.push(height);
            });
            return heights;
        },
        getMinHeightCell: function (row) {
            var that = this,
                minCell = null,
                minHeight = undefined;
            that.each(row.cells, function (cell) {
                var height = that.getCellHeight(cell);
                if (minHeight === undefined || height < minHeight) {
                    minHeight = height;
                    minCell = cell;
                }
            });
            return minCell;
        },
        getCellWidth: function (cell) {
            return this.utils.getRect(cell).width;
        },
        getCellHeight: function (cell) {
            return this.utils.getRect(cell).height;
        },
        getScrollBarWidth: function () {
            if (ASPx.Browser.MacOSPlatform) {
                return 15;
            } else {
                return ASPx.GetVerticalScrollBarWidth();
            }
        }
    });
    ASPx.PivotTableWrapper = PivotTableWrapper;
})();
(function () {
    var PivotAdjustingManager = ASPx.CreateClass(null, {
        constructor: function (pivot, onCollapsed) {
            this.pivot = pivot;
            this.onCollapsed = onCollapsed;
            this.utils = this.createSizeUtils();
            this.opts = null;
        },
        getMainElement: function () { return ASPx.GetElementById(this.pivot.name); },
        getMainTable: function () { return this.pivot.GetChildElement("MT"); },
        getPivotTableContainer: function () { return this.pivot.GetChildElement("PTCDiv"); },
        getDummyPivotTableContainer: function () { return this.pivot.GetChildElement("PTCDiv_Dummy"); },
        getFilterAreaContainer: function () { return this.pivot.GetChildElement("FilterAreaContainer"); },
        getCallbackAnimationElement: function () { return this.pivot.GetChildElement("DCSCell_SCRootDiv") },
        HasAdjustingLogic: function () {
            return this.opts != null;
        },
        SetRenderOptions: function (options) {
            this.opts = options;
            var wrapper = this.pivotTableWrapper;
            if (wrapper && wrapper.state != "Initial")
                wrapper.toInitialState();
            this.invalidateWrapper();
        },
        UpdatePartial: function (pivotTableInnerHtml) {
            var that = this,
                dummyContainer = that.getDummyPivotTableContainer();
            ASPx.SetInnerHtml(dummyContainer, pivotTableInnerHtml);
        },
        OnNewMarkup: function () {
            this.invalidateWrapper();
        },
        Adjust: function () {
            var that = this,
                utils = that.utils,
                wrapper = that.getPivotTableWrapper(),
                pivotTable = that.getPivotTableFromContainer(that.getWorkingPivotTableContainer()),
                isPartialRender = that.isPartialRender();
            if (pivotTable.offsetParent == null)
                return;
            that.setFilterAreaDivWidth(0);
            if (isPartialRender) {
                that.setPivotTableContainerVisibility(that.getDummyPivotTableContainer(), true);
                that.setPivotTableContainerVisibility(that.getPivotTableContainer(), false);
            }
            if (!!that.basePivotTableWrapper) {
                wrapper.MergeBeforeCollapse(that.basePivotTableWrapper);
            }
            wrapper.CalculateSizes(that.opts, function () {
                that.onCollapsed();
                that.onForceRedraw();
                var mainContainer = that.getMainElement(),
                    containerWidth = utils.getRect(mainContainer).width - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(mainContainer),
                    containerHeight = utils.getRect(mainContainer).height - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainContainer),
                    scrollableWidth = containerWidth - utils.getRect(pivotTable).width,
                    scrollableHeight = containerHeight - utils.getRect(that.getMainTable()).height;
                return {
                    scrollableWidth: scrollableWidth,
                    scrollableHeight: scrollableHeight
                };
            });
            if (isPartialRender) {
                var newWrapper = wrapper;
                that.basePivotTableWrapper.Merge(newWrapper);
                that.pivotTableWrapper = that.basePivotTableWrapper;
                wrapper = that.pivotTableWrapper;
                that.setPivotTableContainerVisibility(that.getDummyPivotTableContainer(), false);
                that.setPivotTableContainerVisibility(that.getPivotTableContainer(), true);
                that.getDummyPivotTableContainer().innerHTML = '';
            }
            wrapper.Adjust(that.opts, isPartialRender);
            that.onForceRedraw();
            var mainContainer = that.getMainElement(),
                containerWidth = utils.getRect(mainContainer).width - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(mainContainer);
            that.setFilterAreaDivWidth(containerWidth);
        },
        ResetScrollPos: function () {
            var that = this;
            if (that.pivotTableWrapper) {
                that.pivotTableWrapper.ResetScrollPos(false, true);
            }
        },
        GetCallbackAnimationElement: function () {
            return this.getCallbackAnimationElement();
        },
        invalidateWrapper: function () {
            var that = this;
            if (!!that.pivotTableWrapper)
                that.basePivotTableWrapper = that.pivotTableWrapper;
            this.pivotTableWrapper = null;
        },
        isPartialRender: function () {
            var that = this,
                dummyContainer = that.getDummyPivotTableContainer();
            return !!that.getPivotTableFromContainer(dummyContainer);
        },
        getPivotTableFromContainer: function (container) {
            var childNodes = container.childNodes;
            for (var i = 0; i < childNodes.length; i++) {
                var el = childNodes[i];
                if (el.tagName == 'TABLE')
                    return el;
            }
            return null;
        },
        onPagingRequest: function (vertPageIndex, vertPageSize, horzPageIndex, horzPageSize) {
            var that = this,
                pivot = that.pivot;
            pivot.PerformCallbackInternal(pivot.GetMainTable(),
                'VS|' + vertPageIndex + '|' + vertPageSize + '|' + horzPageIndex + '|' + horzPageSize);
        },
        setPivotTableContainerVisibility: function (container, visible) {
            var sizeStyle = visible ? '' : '0px';
            container.style.width = sizeStyle;
            container.style.height = sizeStyle;
        },
        getWorkingPivotTableContainer: function () {
            var that = this,
                container = that.isPartialRender() ? that.getDummyPivotTableContainer() : that.getPivotTableContainer();
            return container;
        },
        createSizeUtils: function () {
            var createRect = function (left, top, right, bottom) {
                return {
                    left: left,
                    top: top,
                    right: right,
                    bottom: bottom,
                    width: right - left,
                    height: bottom - top
                };
            },
                getRect = function (el) {
                    var rect = el.getBoundingClientRect();
                    if (!ASPx.IsExists(rect.width))
                        rect = createRect(rect.left, rect.top, rect.right, rect.bottom);
                    return rect;
                };
            return {
                getRect: getRect,
                getRoundingRect: function (el1, el2) {
                    var rect1 = getRect(el1),
                        rect2 = getRect(el2);
                    return createRect(
                        Math.min(rect1.left, rect2.left),
                        Math.min(rect1.top, rect2.top),
                        Math.max(rect1.right, rect2.right),
                        Math.max(rect1.bottom, rect2.bottom)
                    );
                }
            };
        },
        getPivotTableWrapper: function () {
            var that = this,
                wrapper = that.pivotTableWrapper;
            if (!wrapper) {
                var container = that.isPartialRender() ? that.getDummyPivotTableContainer() : that.getPivotTableContainer(),
                    pivotTable = that.getPivotTableFromContainer(container);
                wrapper = new ASPx.PivotTableWrapper(that.utils);
                wrapper.Initialize(that.pivot, pivotTable, that.opts,
                    that.onPagingRequest,
                    function () {
                        that.onForceRedraw();
                    }
                );
                that.pivotTableWrapper = wrapper;
            }
            return wrapper;
        },
        onForceRedraw: function () {
            if (ASPx.Browser.IE && ASPx.Browser.MajorVersion < 9) {
                var that = this;
                var mainEl = that.getMainElement();
                that.forceRedrawEl(mainEl);
                var pivotTableEl = that.getPivotTableWrapper().pivotTable;
                that.forceRedrawEl(pivotTableEl);
            }
        },
        forceRedrawEl: function (el) {
            var dummyEl = document.createTextNode("dummyEl");
            el.appendChild(dummyEl);
            var width = el.parentNode.offsetWidth;
            el.removeChild(dummyEl);
            width = el.parentNode.offsetWidth;
        },
        setFilterAreaDivWidth: function (width) {
            var filterAreaDiv = this.getFilterAreaContainer();
            if (filterAreaDiv != null) filterAreaDiv.style.width = width + 'px';
        }
    });
    ASPx.PivotAdjustingManager = PivotAdjustingManager;
})();
(function () {
    ASPx.pivotGrid_FilterPopupSize = [];
    var ASPxClientPivotGridControlCollection = ASPx.CreateClass(ASPxClientControlCollection, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
        },
        GetCollectionType: function () {
            return "Pivot";
        },
        Remove: function (pivot) {
            if (ASPx.pivotGrid_FilterPopupSize[pivot.name])
                delete ASPx.pivotGrid_FilterPopupSize[pivot.name];
            ASPxClientControlCollection.prototype.Remove.call(this, pivot);
        },
        OnMouseMove: function (evt) {
            this.ForEachControl(function (control) {
                control.OnMouseMove(evt);
            });
        }
    });
    ASPxClientPivotGridControlCollection.GetPivotGridControlCollection = function () {
        return aspxGetPivotGridControlCollection();
    };
    var pivotGrid_GetControlCollection = null;
    function aspxGetPivotGridControlCollection() {
        if (pivotGrid_GetControlCollection == null)
            pivotGrid_GetControlCollection = new ASPxClientPivotGridControlCollection();
        return pivotGrid_GetControlCollection;
    }
    var ASPxRect = ASPx.CreateClass(null, {
        constructor: function (left, top, right, bottom) {
            if (ASPx.IsExistsElement(arguments[0])) {
                this.left = ASPx.GetAbsoluteX(arguments[0]);
                this.top = ASPx.GetAbsoluteY(arguments[0]);
                this.right = this.left + (arguments[0]).offsetWidth;
                this.bottom = this.top + (arguments[0]).offsetHeight;
            }
            else {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }
        },
        Contains: function (x, y) {
            return this.left < x && x < this.right && this.top < y && y < this.bottom;
        },
        Intersects: function (rect) {
            if (rect.left > this.right || rect.top > this.bottom ||
                this.left > rect.right || this.top > rect.bottom) return false;
            return true;
        },
        ToString: function () {
            return "{" + this.left + "," + this.top + "," + this.right + "," + this.bottom + "}";
        }
    });
    ASPx.GetBounds = function (elem) {
        var left = ASPx.GetAbsoluteX(elem),
            top = ASPx.GetAbsoluteY(elem),
            right = left + elem.offsetWidth,
            bottom = top + elem.offsetHeight;
        return new ASPxRect(left, top, right, bottom);
    }
    var ASPxClientPivotGridGroup = ASPx.CreateClass(null, {
        constructor: function (pivotName, fields) {
            this.pivotName = pivotName;
            this.fields = fields;
            this.count = fields.length;
        },
        ContainsField: function (fieldId) {
            return this.IndexOf(fieldId) >= 0;
        },
        IsInnerField: function (fieldId) {
            var index = this.IndexOf(fieldId);
            return index > 0 && index < this.count - 1 && this.count >= 2;
        },
        IndexOf: function (fieldId) {
            for (var i = 0; i < this.count; i++) {
                if (this.GetFieldId(i) == fieldId)
                    return i;
            }
            return -1;
        },
        GetFieldId: function (index) {
            return this.pivotName + "_" + this.fields[index];
        }
    });
    var ASPxCheckBoxHelper = ASPx.CreateClass(null, {
        IsNative: function (checkBox) {
            if (checkBox.GetChecked)
                return false;
            return true;
        },
        Find: function (id) {
            var checkBox = this.Get(id, false);
            return (checkBox) ? checkBox : this.Get(id, true);
        },
        Get: function (id, isNative) {
            return isNative ? ASPx.GetElementById(id) : ASPx.GetControlCollection().Get(id);
        },
        GetChecked: function (checkBox) {
            return (checkBox.GetChecked) ? checkBox.GetChecked() : checkBox.checked;
        },
        SetChecked: function (checkBox, check) {
            if (checkBox.SetCheckState)
                this.SetCheckedCore(checkBox, check);
            else
                checkBox.checked = check != null ? check : false;
        },
        SetCheckedCore: function (checkBox, check) {
            if (check == null) {
                checkBox.SetCheckState('Indeterminate');
                return;
            }
            if (check)
                checkBox.SetCheckState('Checked');
            else
                checkBox.SetCheckState('Unchecked');
        }
    });
    var ASPxClientPivotGrid = ASPx.CreateClass(ASPxClientControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.sizingConfig.allowSetWidth = true;
            this.sizingConfig.allowSetHeight = true;
            this.pivotGrid_FieldValueCMParams = [];
            this.pivotGrid_HeaderCMParams = [];
            this.pivotGrid_AllowedAreaIds = [];
            this.pivotGrid_Groups = [];
            this.adjustingManager = new ASPx.PivotAdjustingManager(this, this.AdjustPagers);
            this.filterValues = "";
            this.initialFilterValues = "";
            this.filterPersister = "";
            this.filterFieldIndex = "";
            this.headerMenuHideColumn = "";
            this.fieldMenuCellState = "";
            this.DragDropManager = null;
            this.isCallbackInProcess = false;
            this.ResetCallBackStateFlags();
            this.HFPFieldIndex = -1;
            this.HFPFieldDefere = "N";
            this.HFPDefereHeader = null,
                this.pageIndex = 0;
            this.pageCount = 0;
            this.supportGestures = true;
            this.CustomizationFieldsVisibleChanged = new ASPxClientEvent();
            this.AfterCallback = this.EndCallback;
            this.BeforeCallback = this.BeginCallback;
            this.CellClick = new ASPxClientEvent();
            this.CellDblClick = new ASPxClientEvent();
            this.PopupMenuItemClick = new ASPxClientEvent();
            this.customTargets = new ASPxClientEvent();
            this.checkBoxHelper = new ASPxCheckBoxHelper();
            this.currentEnableFieldListAnimation = false;
            this.forcePerformDeferUpdatesCallback = false;
        },
        HeaderFilterPopupSuffix: "_DXHFP",
        HeaderFilterButtonClassName: "dxpg__hfb",
        GetMainElement: function () { return ASPx.GetElementById(this.name); },
        GetMainDiv: function () { return this.GetChildElement("MTD"); },
        GetMainTable: function () { return this.GetChildElement("MT"); },
        GetEmptyAreaCell: function (intAreaID) { return this.GetChildElement("pgArea" + intAreaID); },
        GetHeadersTable: function (stringAreaID) { return this.GetChildElement("ACC" + stringAreaID); },
        GetFilterWindowContent: function () { return this.GetChildElement("FPC"); },
        GetArrowDragDownImage: function () { return this.GetChildElement("IADD"); },
        GetArrowDragUpImage: function () { return this.GetChildElement("IADU"); },
        GetArrowDragRightImage: function () { return this.GetChildElement("IADR"); },
        GetArrowDragLeftImage: function () { return this.GetChildElement("IADL"); },
        GetDragHideFieldImage: function () { return this.GetChildElement("IDHF"); },
        GetGroupSeparatorImage: function () { return this.GetChildElement("IGS"); },
        GetResizerImage: function () { return this.GetChildElement("FPWR"); },
        GetCustomizationFieldsWindow: function () {
            if (typeof (ASPx.GetPopupControlCollection) == "undefined") return null;
            return ASPx.GetPopupControlCollection().Get(this.name + "_DXCustFields");
        },
        GetCustomizationFieldsWindowElement: function () {
            var custFieldsWindow = this.GetCustomizationFieldsWindow();
            if (custFieldsWindow)
                return custFieldsWindow.GetWindowElement(-1);
            return null;
        },
        GetCustomizationFieldsWindowContentDiv: function () {
            return this.GetChildElement("dxpgCustFields");
        },
        GetPrefilterWindow: function () {
            if (typeof (ASPx.GetPopupControlCollection) == "undefined") return null;
            return ASPx.GetPopupControlCollection().Get(this.name + "_DXPFCForm");
        },
        GetFilterControl: function () {
            return ASPx.GetControlCollection().Get(this.name + "_DXPFCForm_DXPFC");
        },
        GetDataHeadersPopupCell: function () { return this.GetChildElement("DHPC"); },
        GetDataHeadersPopup: function () {
            if (typeof (ASPx.GetPopupControlCollection) == "undefined") return null;
            return ASPx.GetPopupControlCollection().Get(this.name + "_DHP");
        },
        GetDataHeadersPopupWindowElement: function () {
            var popupControl = this.GetDataHeadersPopup();
            if (popupControl == null) return null;
            return popupControl.GetWindowElement(-1);
        },
        GetTreeView: function () { return ASPx.GetControlCollection().Get(this.name + this.HeaderFilterPopupSuffix + "_treeGFTR"); },
        GetCustomizationTreeView: function () { return ASPx.GetControlCollection().Get(this.name + "_dxpgCustFields_treeCF"); },
        GetCustomizationHeaders: function () { return ASPx.GetElementById(this.name + "_dxpgCustFields_listCF"); },
        GetHeaderFilterPopup: function () { return ASPx.GetControlCollection().Get(this.name + this.HeaderFilterPopupSuffix); },
        IsDataHeadersPopupExists: function () {
            var headersPopup = this.GetDataHeadersPopup();
            if (!ASPx.IsExists(headersPopup)) return false;
            var headersPopupWindow = headersPopup.GetWindowElement(-1);
            return ASPx.IsExists(headersPopupWindow) && ASPx.IsExists(headersPopupWindow.id);
        },
        IsHeadersTable: function (element) {
            if (element == null) return false;
            var id = this.getLastIdPart(element.id);
            if (id.length == 0) return false;
            return id.substr(0, 3) == "ACC";
        },
        IsValidDragDropTarget: function (element) {
            var id = this.getLastIdPart(element.id);
            if (id.length == 0) return false;
            var lastChar = id.charAt(id.length - 1);
            return lastChar >= '0' && lastChar <= '9' &&
                (id.indexOf("pgGroupHeader") >= 0 || (id.indexOf("pgHeader") >= 0 && !this.isInnerRowAreaGroupField(element.id)));
        },
        InlineInitialize: function () {
            ASPxClientControl.prototype.InlineInitialize.call(this);
            this.adjustingManager.OnNewMarkup();
        },
        Initialize: function () {
            ASPxClientControl.prototype.Initialize.call(this);
            ASPxClientPivotGridControlCollection.GetPivotGridControlCollection().Add(this);
            this.SubscribeFilterPopupEvents();
            var resizerImage = this.GetResizerImage();
            if (resizerImage != null)
                resizerImage.ondragstart = function () { this.releaseCapture(); return false; };
            this.AfterCallBackInitialize();
            this.InitializeGroupFilterTreeView();
            this.InitializeCustomizationTreeView();
            this.InitializeHeaderFilterPopup();
            this.InitializeHeaderFilterPopupEvents();
        },
        InitializeHeaderFilterPopupEvents: function () {
            var filterPopup = this.GetHeaderFilterPopup();
            if (!filterPopup)
                return;
            filterPopup.PopUp.AddHandler(function () { this.OnPopUpHeaderFilterWindow(); }.aspxBind(this));
        },
        InitializeHeaderFilterPopup: function () {
            var filterPopup = this.GetHeaderFilterPopup();
            if (!filterPopup)
                return;
            var buttons = this.GetHeaderFilterButtons();
            for (var i = 0; i < buttons.length; i++)
                filterPopup.AddPopupElement(buttons[i]);
        },
        GetHeaderFilterButtons: function () {
            var buttons = [];
            this.PopulateHeaderFilterButtons(this.GetCustomizationFieldsWindowContentDiv(), buttons);
            this.PopulateHeaderFilterButtons(this.GetHeadersTable("RowArea"), buttons);
            this.PopulateHeaderFilterButtons(this.GetHeadersTable("DataArea"), buttons);
            this.PopulateHeaderFilterButtons(this.GetHeadersTable("ColumnArea"), buttons);
            this.PopulateHeaderFilterButtons(this.GetHeadersTable("FilterArea"), buttons);
            return buttons;
        },
        PopulateHeaderFilterButtons: function (container, buttons) {
            if (!container) return;
            var images = container.getElementsByTagName("IMG");
            for (var i = 0; i < images.length; i++) {
                var el = ASPx.getSpriteMainElement(images[i]);
                if (ASPx.ElementContainsCssClass(el, this.HeaderFilterButtonClassName))
                    buttons.push(el);
            }
        },
        GetHeaderElementByHeaderFilterButton: function (element) {
            var buttonId = this.getHeaderFilterButtonIDByButton(element);
            var headerId = buttonId.substr(0, buttonId.length - 1);
            var header = ASPx.GetElementById(headerId);
            if (header == null)
                header = ASPx.GetElementById(buttonId);
            return header;
        },
        GetFieldIndexByHeaderFilterButton: function (element) {
            var buttonId = this.getHeaderFilterButtonIDByButton(element);
            var headerId = buttonId.substr(0, buttonId.length - 1);
            return this.GetNumberFromEndOfString(headerId);
        },
        getHeaderFilterButtonIDByButton: function (element) {
            if (!element)
                return "";
            var level = 0;
            while (level < 4) {
                if (element.id)
                    return element.id;
                element = element.parentNode;
                level++;
            }
            return "";
        },
        GetPopupElementIndex: function (headerFilterButton) {
            if (!headerFilterButton)
                return -1;
            var filterPopup = this.GetHeaderFilterPopup();
            var popupElements = filterPopup.GetPopupElementList(-1);
            for (var i = 0; i < popupElements.length; i++) {
                if (popupElements[i] === headerFilterButton)
                    return i;
            }
            return -1;
        },
        GetNumberFromEndOfString: function (st) {
            var value = -1;
            if (!st)
                return value;
            var n = st.length - 1;
            while (parseInt(st.substr(n), 10) >= 0) {
                value = parseInt(st.substr(n), 10);
                n--;
            }
            return value;
        },
        SubscribeFilterPopupEvents: function () {
            var filterPopup = this.GetHeaderFilterPopup();
            filterPopup.Resize.AddHandler(function (s) {
                if (ASPx.pivotGrid_FilterPopupSize[this.name] == null)
                    ASPx.pivotGrid_FilterPopupSize[this.name] = [];
                ASPx.pivotGrid_FilterPopupSize[this.name][this.HFPFieldIndex] = [s.GetWidth(), s.GetHeight()];
            }.aspxBind(this));
            filterPopup.Closing.AddHandler(function (s) {
                if (s.GetContentHtml().length > 100000 || this.isFilterValuesChanged()) {
                    this.ResetFilterCache();
                    this.resetFilterValues();
                    window.setTimeout(function () { s.SetContentHtml("") }, 0);
                }
            }.aspxBind(this));
        },
        InitializeGroupFilterTreeView: function () {
            var treeView = this.GetTreeView();
            if (treeView)
                treeView.InitPivotGridCallbacks(this);
        },
        InitializeCustomizationTreeView: function () {
            var customizationTreeView = this.GetCustomizationTreeView();
            if (customizationTreeView)
                customizationTreeView.InitializePivotGrid(this, this.isDeferUpdatesChecked());
        },
        OnMouseMove: function (evt) {
            if (!this.IsDataHeadersPopupExists())
                return;
            var headersPopup = this.GetDataHeadersPopup();
            if (!headersPopup.IsVisible())
                return;
            var pe = headersPopup.GetWindowElement(-1);
            var rect = new ASPxRect(pe);
            if (!rect.Contains(ASPx.Evt.GetEventX(evt), ASPx.Evt.GetEventY(evt)))
                headersPopup.Hide();
            if (ASPx.Browser.WebKitTouchUI)
                evt.preventDefault();
        },
        AfterInitialize: function () {
            ASPxClientControl.prototype.AfterInitialize.call(this);
            this.AfterInitializeCore();
        },
        AfterInitializeCore: function () {
            if (this.IsDataHeadersPopupExists()) {
                var headersPopup = this.GetDataHeadersPopup();
                headersPopup.SetSize(1, 1);
                if (headersPopup.IsVisible())
                    headersPopup.Hide();
            }
            if (!this.isFilterValuesCallBack) {
                this.FixHeaderImageDrag(this.GetHeadersTable("RowArea"));
                this.FixHeaderImageDrag(this.GetHeadersTable("ColumnArea"));
                this.FixHeaderImageDrag(this.GetHeadersTable("FilterArea"));
            }
            this.InitTouchEvents(this.name, this.GetMainElement());
            this.InitExcelCustForm();
            this.UpdateExcelCustForm();
            this.ResetCallBackStateFlags();
        },
        AdjustControlCore: function () {
            ASPxClientControl.prototype.AdjustControlCore.call(this);
            if (!this.isFilterValuesCallBack) {
                if (this.adjustingManager.HasAdjustingLogic()) {
                    this.adjustingManager.Adjust();
                    this.AfterCallBackInitialize();
                }
                else {
                    this.AdjustPagerControls();
                }
            }
        },
        SetSizeCore: function (sizePropertyName, size, getFunctionName, corrected) {
            if (size < 0)
                return;
            this.GetMainElement().style[sizePropertyName] = size + "px";
            this.AdjustControlCore();
        },
        AdjustPagers: function () {
            if (typeof (ASPx.GetPagersCollection) != "undefined") {
                ASPx.GetPagersCollection().ForEachControl(function (pager) {
                    pager.AdjustControl();
                });
            }
        },
        NeedCollapseControlCore: function () {
            return this.adjustingManager.HasAdjustingLogic();
        },
        BrowserWindowResizeSubscriber: function () {
            return this.adjustingManager.HasAdjustingLogic();
        },
        OnBrowserWindowResize: function () {
            this.AdjustControlCore();
        },
        AfterCallBackInitialize: function () {
            this.AssignContextMenus(this.pivotGrid_FieldValueCMParams, pivotGrid_FieldValueContextMenuHandler);
            this.AssignContextMenus(this.pivotGrid_HeaderCMParams, pivotGrid_HeaderContextMenuHandler);
        },
        SetRenderOptions: function (options) {
            this.adjustingManager.SetRenderOptions(options);
        },
        SetCallBackStateFlags: function () {
            this.isFilterValuesCallBack = true;
        },
        ResetCallBackStateFlags: function () {
            this.isFilterValuesCallBack = false;
        },
        InitTouchEvents: function (pivotId, mainElement) {
            if (!pivotId || !mainElement) return;
            var list = [];
            var attachEventsClosure = function (header) {
                if (header.getAttribute("data-dx-dragable") == '1') {
                    header.removeAttribute("data-dx-dragable");
                    ASPx.DragUtils.PreventContextMenuOnLongTap(header);
                    ASPx.Evt.AttachEventToElement(header, ASPx.TouchUIHelper.touchMouseDownEventName, function (e) {
                        ASPx.pivotGrid_HeaderMouseDown(pivotId, header, e);
                    }, true);
                }
            };
            ASPx.GetNodesByPartialId(mainElement, 'pgHeader', list);
            ASPx.GetNodesByPartialId(mainElement, 'pgGroupHeader', list);
            for (var i = 0; i < list.length; i++) {
                attachEventsClosure(list[i]);
            }
        },
        FixHeaderImageDrag: function (fobject) {
            if (fobject == null) return;
            var images = ASPx.GetNodesByTagName(fobject, "img");
            if (!images || !images.length) return;
            for (var i = 0; i < images.length; i++)
                if (ASPx.ElementContainsCssClass(images[i], "Button"))
                    images[i].ondragstart = function () { return false };
        },
        AssignContextMenus: function (cmParams, handler) {
            if (ASPx.IsExists(cmParams) && ASPx.IsExists(cmParams[this.name])) {
                var params = cmParams[this.name];
                for (var i = 0; i < params.length; i++) {
                    var id = params[i][0];
                    var elem = this.GetChildElement(id);
                    if (elem != null) {
                        elem.contextMenuParams = params[i];
                        elem.pivotClientID = this.name;
                        ASPx.Evt.AttachEventToElement(elem, "contextmenu", handler);
                    }
                }
            }
        },
        SetHFPOkButtonEnabled: function (enabled) {
            var okBtn = ASPx.GetControlCollection().Get(this.GetHeaderFilterPopup().cpOkButtonID);
            if (okBtn)
                okBtn.SetEnabled(enabled);
        },
        getDefereText: function (header) {
            return this.isFieldListElement(header) && this.isDeferUpdatesChecked() ? "D" : "N";
        },
        OnPopUpHeaderFilterWindow: function () {
            var filterPopup = this.GetHeaderFilterPopup();
            var headerFilterButton = filterPopup.GetCurrentPopupElement();
            var fieldIndex = this.GetFieldIndexByHeaderFilterButton(headerFilterButton);
            var header = this.GetHeaderElementByHeaderFilterButton(headerFilterButton);
            if (header)
                filterPopup.UpdatePositionAtElement(header);
            if (fieldIndex == -1 || this.HFPFieldIndex == fieldIndex && this.HFPFieldDefere == this.getDefereText(header))
                return;
            var size = this.GetFilterPopupSize(fieldIndex);
            if (size && size.length == 2)
                filterPopup.SetSize(size[0], size[1]);
            this.SetCallBackStateFlags();
            var addPars = "";
            if (header && this.isFieldListElement(header) && this.isDeferUpdatesChecked())
                addPars = "|D";
            this.HFPFieldIndex = fieldIndex;
            this.CreateCallback("FS|" + fieldIndex + addPars);
            filterPopup.SetContentHtml('');
            this.CreateLoadingPanelInsideContainer(filterPopup.GetContentContainer(-1), false, true, true);
            this.SetHFPOkButtonEnabled(false);
        },
        ShowFilterPopup: function (headerId) {
            var filterPopup = this.GetHeaderFilterPopup();
            var buttons = [];
            this.PopulateHeaderFilterButtons(ASPx.GetElementById(headerId), buttons);
            var popupElementIndex = this.GetPopupElementIndex(buttons[0]);
            if (popupElementIndex == -1)
                return;
            if (filterPopup.IsVisible())
                filterPopup.Hide();
            filterPopup.Show(popupElementIndex);
        },
        GetFilterPopupSize: function (index) {
            if (ASPx.pivotGrid_FilterPopupSize[this.name] == null)
                return null;
            if (ASPx.pivotGrid_FilterPopupSize[this.name][index] == null)
                return ASPx.pivotGrid_FilterPopupSize[this.name]["default"];
            else return ASPx.pivotGrid_FilterPopupSize[this.name][index];
        },
        SaveContentDivScrollTop: function () {
            var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
            if (contentDiv != null)
                this.contentDivScrollTop = contentDiv.scrollTop;
            else
                this.contentDivScrollTop = -1;
        },
        RestoreContentDivScrollTop: function () {
            if (!ASPx.IsExists(this.contentDivScrollTop) || this.contentDivScrollTop < 0) return;
            var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
            if (contentDiv != null) {
                contentDiv.scrollTop = this.contentDivScrollTop;
                this.contentDivScrollTop = -1;
            }
        },
        performCallbackInternalBase: function (el, arg, isOwnerCallBack, command, handler) {
            if (!isOwnerCallBack) {
                this.ClearCallbackOwner();
            }
            this.isCallbackInProcess = true;
            if (isOwnerCallBack || this.callBacksEnabled) {
                this.OnBeginCallback(el);
                this.CreateCallback(arg, command, handler);
            }
            else
                this.SendPostBack(arg);
        },
        TestPerformDragHeaderCallback: function (arg) {
            this.PerformCallbackInternal(this.GetMainTable(), arg);
        },
        PerformCallbackInternal: function (el, arg, command, handler) {
            var value = new String(arg);
            var sIndex = value.indexOf("|");
            var id = value.substr(0, sIndex);
            this.forcePerformDeferUpdatesCallback = !((id == "S" || id == "DF" || id == "FL") && this.isDeferUpdatesChecked());
            this.performCallbackInternalBase(el, arg, false, command, handler);
        },
        ClearCallbackOwner: function () {
            this.callbackOwner = null;
        },
        OnCallback: function (resultObj) {
            this.UpdateStateObjectWithObject(resultObj.stateObject);
            var result = resultObj.result;
            var isOwnerCallback = this.callbackOwner != null;
            if (isOwnerCallback) {
                this.callbackOwner.OnCallback(result[1]);
            }
            this.OnInnerCallback(result[0], !isOwnerCallback);
        },
        BeforeDoEndCallback: function () {
            if (this.isGeneralCallback) {
                this.AdjustControlCore();
            }
        },
        OnInnerCallback: function (result, state) {
            this.ChangePrefilterVisibilityClientSize(false);
            var separatorIndex = result.indexOf("|");
            var id;
            if (separatorIndex == -1)
                id = result;
            else
                id = result.substr(0, separatorIndex);
            var argument = result.substr(separatorIndex + 1),
                isGeneral = id == "G";
            if (id == "F") {
                this.PreventCallbackAnimation();
                this.doFilterCallback(argument, state);
            }
            if (id == "DF") {
                this.PreventCallbackAnimation();
                this.doDefereFilterCallback(argument);
            }
            if (isGeneral) {
                this.adjustingManager.OnNewMarkup();
                ASPx.RelatedControlManager.ParseResult(argument);
                var popup = this.GetHeaderFilterPopup();
                if (popup) {
                    popup.Hide();
                    popup.RemoveAllPopupElements();
                    this.InitializeHeaderFilterPopup();
                }
            }
            this.OnEndCallback(isGeneral);
            this.isGeneralCallback = isGeneral;
        },
        DoEndCallback: function () {
            this.BeforeDoEndCallback();
            ASPxClientControl.prototype.DoEndCallback.call(this);
            this.InitializeGroupFilterTreeView();
            this.InitializeCustomizationTreeView();
            this.isCallbackInProcess = false;
            this.ResetCallBackStateFlags();
        },
        ProcessCallbackResult: function (id, html, params) {
            if (params && params.length) {
                switch (params) {
                    case 'pivotTable':
                        this.adjustingManager.UpdatePartial(html);
                        break;
                    default:
                        var element = ASPx.GetElementById(id);
                        if (ASPx.IsExistsElement(element))
                            element.innerHTML = html;
                        break;
                }
            }
            else {
                this.doGridRefreshCallback(html);
            }
        },
        OnCallbackError: function (result, data) {
            ASPxClientControl.prototype.OnCallbackError.call(this, result, data);
            this.OnEndCallback();
        },
        OnBeginCallback: function (el) {
            this.SaveContentDivScrollTop();
            this.ShowLoadingElements();
        },
        ShowLoadingPanel: function () {
            var mainDiv = this.GetMainDiv();
            if (!mainDiv) return;
            this.CreateLoadingPanelWithAbsolutePosition(mainDiv, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
        },
        ShowLoadingDiv: function () {
            this.CreateLoadingDiv(this.GetMainDiv(), this.GetMainElement());
        },
        GetCallbackAnimationElement: function () {
            return this.adjustingManager.GetCallbackAnimationElement();
        },
        OnEndCallback: function () {
            this.AfterInitializeCore();
        },
        SendTreeViewCallback: function (treeView, callbackString) {
            this.SetCallBackStateFlags();
            this.callbackOwner = treeView;
            var pivotCallbackString = "FC|" + this.filterFieldIndex + '|' + this.filterPersister + '|' + this.filterValues;
            this.performCallbackInternalBase(this.GetMainTable(), pivotCallbackString + '|' + callbackString, true);
        },
        doDefereFilterCallback: function (argument) {
            if (this.HFPDefereHeader) {
                var list = []
                this.PopulateHeaderFilterButtons(this.HFPDefereHeader, list);
                if (list.length != 0) {
                    var image = list[0];
                    if (!ASPx.ElementContainsCssClass(image, "pgFilterButtonActive")) {
                        image.className = image.className.replace("pgFilterButton", "pgFilterButtonActive");
                    }
                }
                this.HFPDefereHeader = null;
            }
            this.setDeferButtonEnabled(this.isDeferUpdatesChecked());
        },
        doFilterCallback: function (argument, changeContent) {
            var values = argument.split("|");
            if (values.length != 5) return;
            if (values[2] == this.HFPFieldIndex) {
                this.filterValues = values[0];
                this.filterPersister = values[1];
                this.filterFieldIndex = values[2];
                this.HFPFieldDefere = values[3];
                if (changeContent) {
                    this.initialFilterValues = values[0];
                    this.GetHeaderFilterPopup().SetContentHtml(values[4], this.enableCallbackAnimation);
                }
                this.SetHFPOkButtonEnabled(true);
            }
        },
        doGridRefreshCallback: function (argument) {
            this.ResetFilterCache();
            var mainDiv = this.GetMainDiv();
            if (mainDiv == null) return;
            ASPx.SetInnerHtml(mainDiv, argument);
        },
        isAllFilterValuesChecked: function () {
            var hasCheckedItems = this.filterValues.indexOf('T') != -1;
            var hasUncheckedItems = this.filterValues.indexOf('F') != -1;
            if (hasCheckedItems && hasUncheckedItems) return null;
            return hasCheckedItems;
        },
        isFilterValuesChanged: function () {
            return this.filterValues != this.initialFilterValues;
        },
        resetFilterValues: function () {
            this.initialFilterValues = this.filterValues;
        },
        fieldFilterValueChanged: function (index) {
            var showAllCheckBox = this.checkBoxHelper.Find(this.name + this.HeaderFilterPopupSuffix + '_FTRIAll');
            if (index < 0) {
                var isNative = this.checkBoxHelper.IsNative(showAllCheckBox);
                var isShowAllChecked = this.checkBoxHelper.GetChecked(showAllCheckBox);
                var newFilterValues = '', newChar = isShowAllChecked ? 'T' : 'F';
                var i = 0, checkBox;
                while (ASPx.IsExists(checkBox = this.checkBoxHelper.Get(this.name + this.HeaderFilterPopupSuffix + '_FTRI' + i, isNative))) {
                    if (!isNative && !checkBox.GetMainElement())
                        break;
                    this.checkBoxHelper.SetChecked(checkBox, isShowAllChecked);
                    newFilterValues += newChar;
                    i++;
                }
                this.filterValues = newFilterValues;
            } else {
                var oldChar = this.filterValues.charAt(index);
                this.UpdateFilterValues(index, 1, oldChar != 'T');
                this.checkBoxHelper.SetChecked(showAllCheckBox, this.isAllFilterValuesChecked());
            }
            this.UpdateFilterButtons();
        },
        UpdateFilterValues: function (index, count, isChecked) {
            var newChar = 'I';
            if (isChecked != null)
                newChar = isChecked ? 'T' : 'F';
            var newValues = newChar;
            for (var i = 1; i < count; i++)
                newValues += newChar;
            this.filterValues = this.filterValues.substr(0, index) + newValues + this.filterValues.substr(index + count, this.filterValues.length - index - count);
        },
        UpdateFilterButtons: function () {
            this.SetHFPOkButtonEnabled(this.filterValues.indexOf('T') != -1 || this.filterValues.indexOf('I') != -1);
        },
        SelectAllFilterValues: function (checked) {
            var newChar = checked ? 'T' : 'F';
            var newValues = '';
            for (var i = 0; i < this.filterValues.length; i++) {
                newValues += newChar;
            }
            this.filterValues = newValues;
        },
        applyFilter: function () {
            var isChanged = this.isFilterValuesChanged() ? 'T' : 'F';
            var filterPopup = this.GetHeaderFilterPopup()
            var header = this.GetHeaderElementByHeaderFilterButton(filterPopup.GetCurrentPopupElement());
            var filterString;
            if (header && this.isFieldListElement(header) && this.isDeferUpdatesChecked()) {
                filterString = "DF";
                if (isChanged == "T")
                    this.HFPDefereHeader = header;
            }
            else
                filterString = "F";
            filterPopup.Hide();
            if (filterString == "DF")
                this.setDeferButtonEnabled(false);
            this.PerformCallbackInternal(this.GetMainTable(), filterString + '|' + this.filterValues + '|' + this.filterPersister + '|' + this.filterFieldIndex + '|' + isChanged);
        },
        setDeferButtonEnabled: function (enabled) {
            var a = ASPx.GetControlCollection().GetByName(this.name + "_dxpgCustFields_dxpgFLDefereDB");
            if (a)
                a.SetEnabled(enabled)
        },
        headerMouseDown: function (root, e) {
            if (!ASPx.Evt.IsLeftButtonPressed(e) || this.isCallbackInProcess) return;
            var drag = new ASPx.DragHelper(e, root, true);
            if (ASPx.Browser.MacOSMobilePlatform)
                drag.onDoClick = function (arg) { this.dnDHelperClickedHeader = true; }.aspxBind(this);
            this.DragDropManager = new ASPx.PivotDragManager(this, drag);
        },
        getFilterAreaFieldList: function () {
            return ASPx.GetNodesByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsFilterAreaHeaders")[0];
        },
        getColumnAreaFieldList: function () {
            return ASPx.GetNodesByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsColumnAreaHeaders")[0];
        },
        getRowAreaFieldList: function () {
            return ASPx.GetNodesByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsRowAreaHeaders")[0];
        },
        getDataAreaFieldList: function () {
            return ASPx.GetNodesByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsDataAreaHeaders")[0];
        },
        isInnerRowAreaGroupField: function (id) {
            var groups = this.getGroups();
            if (groups != null) {
                for (var i = 0; i < groups.length; i++) {
                    if (!groups[i].ContainsField(id))
                        continue;
                    return groups[i].IsInnerField(id);
                }
            }
            return false;
        },
        isInnerGroupTarget: function (targetElement, isLeft) {
            if (targetElement == null) return false;
            var id = targetElement.id;
            var groups = this.getGroups();
            if (groups == null) return false;
            for (var i = 0; i < groups.length; i++) {
                var index = groups[i].IndexOf(id);
                if (index < 0) continue;
                return groups[i].count >= 2 &&
                    ((index > 0 && index < groups[i].count - 1) ||
                        (index == 0 && !isLeft) ||
                        (index == groups[i].count - 1 && isLeft));
            }
            return false;
        },
        getLastIdPart: function (id) {
            var separatorIndex = id.lastIndexOf('_');
            return separatorIndex >= 0 ? id.substr(separatorIndex + 1) : id;
        },
        getGroups: function () {
            return this.pivotGrid_Groups[this.name];
        },
        getField: function (group, index) {
            return this.GetChildElement(group.fields[index]);
        },
        headerClick: function (element) {
            if ((element.id.indexOf("sorted") >= 0 || element.id.indexOf("pgGroupHeader") >= 0) && (this.dnDHelperClickedHeader || !ASPx.Browser.MacOSMobilePlatform) && !(this.isFieldListHeader(element) && this.isDeferUpdatesChecked())) {
                this.ResetFilterCache(this.filterFieldIndex);
                this.PerformCallbackInternal(element, 'S|' + element.id);
            }
        },
        ResetFilterCache: function (indexToReset) {
            if (!ASPx.IsExists(indexToReset) || indexToReset == this.HFPFieldIndex)
                this.HFPFieldIndex = -1;
        },
        cloneGroup: function (group) {
            var separatorWidth = this.getSeparatorWidth(group);
            var table = document.createElement("table");
            table.cellPadding = 0;
            table.cellSpacing = 0;
            var row = table.insertRow(0);
            for (var i = 0; i < group.count; i++) {
                var header = this.getField(group, i);
                if (header == null) continue;
                var cell = row.insertCell(row.cells.length);
                cell.appendChild(this.cloneHeader(header));
                if (i != group.count - 1) {
                    cell = row.insertCell(row.cells.length);
                    cell.appendChild(this.cloneGroupSeparator(separatorWidth));
                }
            }
            return table;
        },
        cloneHeader: function (header) {
            var clone = header.cloneNode(true);
            clone.style.width = header.offsetWidth + "px";
            return clone;
        },
        cloneGroupSeparator: function (separatorWidth) {
            var groupSeparator = this.GetGroupSeparatorImage();
            var clone = document.createElement("img");
            clone.src = groupSeparator.src;
            clone.width = separatorWidth;
            clone.height = groupSeparator.height;
            return clone;
        },
        getSeparatorWidth: function (group) {
            if (group.count < 2) return 0;
            var header0 = this.getField(group, 0);
            header1 = this.getField(group, 1);
            if (header0 == null || header1 == null) return 0;
            return ASPx.GetAbsoluteX(header1) - ASPx.GetAbsoluteX(header0) - header0.offsetWidth;
        },
        IsTargetElementArea: function (targets) {
            return targets.targetElement != null && targets.targetElement.id.indexOf("_pgArea") > -1;
        },
        isFieldListHeader: function (element) {
            return ASPx.ElementContainsCssClass(element, "dxpgHeader") && this.isFieldListElement(element);
        },
        isFieldListElement: function (element) {
            return element != null && element.id.indexOf("dxpgCustFields") != -1;
        },
        IsFieldListTargetAllowed: function (element) {
            if (this.isFieldListHeader(element)) {
                var scrolledList = ASPx.GetParentByPartialClassName(element, "dxpgFLListDiv");
                var headerTop = ASPx.GetAbsolutePositionY(element);
                var listY = ASPx.GetAbsolutePositionY(scrolledList);
                if (headerTop < listY || headerTop + element.offsetHeight - 1 > listY + scrolledList.offsetHeight) return false;
            }
            return true;
        },
        resetDragOverFieldList: function (element) {
            if (element != null)
                element.className = element.className.replace("DragOver", "");
        },
        targetImagesChangeVisibility: function (vis, name) {
            if (this.GetArrowDragDownImage() == null) return;
            if (!vis || name == "v") {
                this.changeElementVisibility(this.GetArrowDragDownImage(), vis);
                this.changeElementVisibility(this.GetArrowDragUpImage(), vis);
            }
            if (!vis || name == "h") {
                this.changeElementVisibility(this.GetArrowDragRightImage(), vis);
                this.changeElementVisibility(this.GetArrowDragLeftImage(), vis);
            }
            if (ASPx.currentDragHelper != null) {
                ASPx.currentDragHelper.removeElementFromDragDiv();
            }
        },
        changeElementVisibility: function (elem, vis) {
            elem.style.visibility = vis ? "visible" : "hidden";
            elem.style.display = vis ? "inline" : "none";
        },
        getFieldListFields: function () {
            if (this.GetCustomizationFieldsWindowContentDiv())
                return ASPx.GetNodesByPartialClassName(this.GetCustomizationFieldsWindowContentDiv(), "dxpgCustFieldsFieldList")[0];
        },
        setVerticalDragImagePosition: function (el, isLeft) {
            var mainElement = this.GetMainElement();
            var windowElem = this.GetDataHeadersPopupWindowElement();
            var prevElementZIndex = windowElem ? windowElem.style.zIndex : mainElement.style.zIndex;
            var arrowUp = this.GetArrowDragUpImage();
            var arrowDown = this.GetArrowDragDownImage();
            var left = ASPx.GetAbsoluteX(el);
            var top = ASPx.GetAbsoluteY(el);
            arrowDown.style.zIndex = prevElementZIndex + 1;
            arrowUp.style.zIndex = prevElementZIndex + 1;
            if (!isLeft) {
                left += el.offsetWidth;
            }
            this.targetImagesChangeVisibility(true, "v");
            var x = left - (arrowDown.offsetWidth / 2);
            x = isLeft ? Math.floor(x) : Math.ceil(x);
            ASPx.SetAbsoluteX(arrowDown, x);
            ASPx.SetAbsoluteY(arrowDown, top - arrowDown.offsetHeight);
            ASPx.SetAbsoluteX(arrowUp, x);
            ASPx.SetAbsoluteY(arrowUp, top + el.offsetHeight);
        },
        setHorizontalDragImagePosition: function (el, isTop) {
            var arrowLeft = this.GetArrowDragLeftImage();
            var arrowRight = this.GetArrowDragRightImage();
            var left = 0, top = 0;
            if (el.id.indexOf("DHP") < 0) {
                left = ASPx.GetAbsoluteX(el);
                top = ASPx.GetAbsoluteY(el);
            } else {
                var windowElem = this.GetDataHeadersPopupWindowElement();
                left = ASPx.GetAbsoluteX(el);
                top = ASPx.GetAbsoluteY(el);
                arrowDown.style.zIndex = windowElem.style.zIndex + 1;
                arrowUp.style.zIndex = windowElem.style.zIndex + 1;
            }
            if (!isTop)
                top += el.offsetHeight;
            this.targetImagesChangeVisibility(true, "h");
            top -= (arrowLeft.offsetHeight / 2);
            top = isTop ? Math.floor(top) : Math.ceil(top);
            ASPx.SetAbsoluteX(arrowRight, left - arrowLeft.offsetWidth);
            ASPx.SetAbsoluteY(arrowRight, top);
            ASPx.SetAbsoluteX(arrowLeft, left + el.offsetWidth);
            ASPx.SetAbsoluteY(arrowLeft, top);
        },
        isVerticalElement: function (el) {
            if (el == null) return false;
            return this.isFieldListElement(el) || el.pgddVerticalElement;
        },
        setPivotDragImagePosition: function (el, isLeft) {
            if (this.isVerticalElement(el))
                this.setHorizontalDragImagePosition(el, isLeft);
            else
                this.setVerticalDragImagePosition(el, isLeft);
        },
        ScrollFieldList: function (event) {
            var target = this.DragDropHelper.targets.targetElement;
            var pivotGrid = this.DragDropHelper.pGrid;
            if (!pivotGrid.isFieldListElement(target))
                return;
            var wheelDelta = 0;
            if (!event)
                event = window.event;
            if (event.wheelDelta)
                wheelDelta = event.wheelDelta / 120;
            else if (event.detail)
                wheelDelta = -event.detail / 3;
            if (wheelDelta) {
                var targetDiv;
                if (target.id.indexOf("pgHeader") < 0 && target.id.indexOf("pgGroupHeader") < 0)
                    targetDiv = pivotGrid.getFielListArrowsHorElement(ASPx.GetNodesByPartialClassName(target, "dxpgFLListDiv")[0]);
                else
                    targetDiv = pivotGrid.getFielListArrowsHorElement(ASPx.GetParentByPartialClassName(target, "dxpgFLListDiv"));
                if (targetDiv == null) return;
                if (wheelDelta > 0 && targetDiv.scrollTop > 0) {
                    if (targetDiv.scrollTop < 20)
                        targetDiv.scrollTop = 0;
                    else
                        targetDiv.scrollTop -= 20;
                }
                if (wheelDelta < 0 && targetDiv.scrollTop + targetDiv.clientHeight < targetDiv.scrollHeight)
                    targetDiv.scrollTop += 20;
                if (event.preventDefault) {
                    event.preventDefault();
                }
                event.returnValue = false;
            }
        },
        updateListElements: function (targets, event) {
            for (var i = targets.list.length - 1; i >= 0; i--) {
                if (!this.IsFieldListTargetAllowed(targets.list[i].targetElement)) {
                    this.ListTargets.push(targets.list[i].targetElement);
                    targets.removeElement(targets.list[i].element);
                } else {
                    if (this.isFieldListElement(targets.list[i].targetElement))
                        targets.list[i].absoluteY = ASPx.GetAbsoluteY(targets.list[i].targetElement);
                }
            }
            for (var i = this.ListTargets.length - 1; i >= 0; i--) {
                if (this.IsFieldListTargetAllowed(this.ListTargets[i])) {
                    var target = new ASPx.CursorTarget(this.ListTargets[i]);
                    target.element = target.targetElement.parentNode;
                    targets.list.unshift(target);
                    this.ListTargets.splice(i, 1);
                }
            }
            targets.doTargetChanged(event);
        },
        getFielListArrowsHorElement: function (element) {
            return ASPx.GetNodeByTagName(ASPx.GetNodeByTagName(element, "div", 0), "div", 0);
        },
        setFieldListDragImagePosition: function (el, isLeft) {
            this.LastHoverFieldList = ASPx.GetParentByPartialClassName(el, "dxpgCustFields");
            var horEl = el, vertEl = el;
            var left = 0, top = 0;
            if (el.id.indexOf("pgHeader") < 0 && el.id.indexOf("pgGroupHeader") < 0) {
                var el1 = ASPx.GetNodeByTagName(el, "table", 0);
                var el2 = ASPx.GetNodesByPartialClassName(el, "dxpgFLListDiv")[0];
                if (el1.offsetHeight < el2.offsetHeight)
                    vertEl = el1;
                else
                    vertEl = el2;
                horEl = this.getFielListArrowsHorElement(el2);
            } else {
                var lists = ASPx.GetParentByPartialClassName(el, "dxpgFLListDiv");
                horEl = this.getFielListArrowsHorElement(lists);
            }
            var leftArrow = this.GetArrowDragRightImage();
            var rightArrow = this.GetArrowDragLeftImage();
            var scrollWidth;
            if (horEl.clientHeight >= horEl.scrollHeight)
                scrollWidth = 0;
            else
                scrollWidth = ASPx.GetVerticalScrollBarWidth();
            left = ASPx.GetAbsoluteX(horEl);
            top = ASPx.GetAbsoluteY(vertEl);
            if (!isLeft)
                top += vertEl.offsetHeight;
            this.targetImagesChangeVisibility(true, "h");
            var windowElem = this.GetCustomizationFieldsWindowElement();
            rightArrow.style.zIndex = windowElem ? windowElem.style.zIndex + 1 : 12000;
            leftArrow.style.zIndex = windowElem ? windowElem.style.zIndex + 1 : 12000;
            var y = top - (leftArrow.offsetHeight / 2);
            y = isLeft ? Math.floor(y) : Math.ceil(y);
            if (ASPx.Browser.WebKitFamily) {
                if (!isLeft)
                    y += 2;
                left += 1;
            } else {
                if (isLeft)
                    y -= 1;
                else
                    y += 1;
            }
            ASPx.SetAbsoluteX(leftArrow, (left - leftArrow.offsetWidth));
            ASPx.SetAbsoluteY(leftArrow, y);
            ASPx.SetAbsoluteX(rightArrow, left + horEl.offsetWidth - scrollWidth);
            ASPx.SetAbsoluteY(rightArrow, y);
        },
        setDragImagesPosition: function (el, isLeft) {
            this.LastHoverFieldList = null;
            this.targetImagesChangeVisibility(false);
            if (el == this.getFieldListFields()) {
                ASPx.currentDragHelper.addElementToDragDiv(this.GetDragHideFieldImage());
                this.LastHoverFieldList = el;
            } else {
                if (this.isFieldListElement(el))
                    this.setFieldListDragImagePosition(el, isLeft);
                else
                    this.setPivotDragImagePosition(el, isLeft);
            }
            if (this.LastHoverFieldList != null)
                this.LastHoverFieldList.className = this.LastHoverFieldList.className + " DragOver";
        },
        isDeferUpdatesChecked: function () {
            var input = this.GetChildElement("dxpgCustFields_dxpgFLDefere_S");
            return input == null ? false : input.value != "U";
        },
        isTreeViewNode: function (element) {
            return element != null && element.id.indexOf("treeCF") != -1;
        },
        PerformDeferUpdatesCallback: function () {
            function SplitHeadersList(fieldsContainer) {
                var fields = ASPx.GetNodesByPartialClassName(fieldsContainer, "dxpgHeader");
                var str = "";
                for (var i = 0; i < fields.length; i++) {
                    var lastChar = fields[i].id.charAt(fields[i].id.length - 1);
                    if (lastChar >= '0' && lastChar <= '9') {
                        if (str != "")
                            str += ",";
                        str += fields[i].id.substr(fields[i].id.lastIndexOf('_'));
                    }
                }
                return str;
            }
            var callbackStr = "FL";
            callbackStr += "|" + SplitHeadersList(this.getRowAreaFieldList());
            callbackStr += "|" + SplitHeadersList(this.getColumnAreaFieldList());
            callbackStr += "|" + SplitHeadersList(this.getFilterAreaFieldList());
            callbackStr += "|" + SplitHeadersList(this.getDataAreaFieldList());
            callbackStr += "|" + SplitHeadersList(this.getFieldListFields());
            this.PerformCallbackInternal(null, callbackStr)
        },
        HideCustomizationFields: function () {
            this.ChangeCustomizationFieldsVisibilityInternal(false, true);
        },
        ShowCustomizationFields: function (animate) {
            this.ChangeCustomizationFieldsVisibilityInternal(true, animate);
        },
        IsCustomizationFieldsVisible: function () {
            var fieldsWindow = this.GetCustomizationFieldsWindow();
            if (fieldsWindow == null) return false;
            return fieldsWindow.IsVisible();
        },
        ChangeCustomizationFieldsVisibilityInternal: function (visible, animate) {
            if (!ASPx.IsExists(visible)) {
                visible = !this.IsCustomizationFieldsVisible();
            }
            var fieldsWindow = this.GetCustomizationFieldsWindow();
            if (fieldsWindow == null) return;
            if (!animate)
                fieldsWindow.LockAnimation();
            this.currentEnableFieldListAnimation = animate;
            if (visible) {
                fieldsWindow.Show();
            } else {
                fieldsWindow.Hide();
            }
            if (!animate)
                fieldsWindow.UnlockAnimation();
        },
        IsDeferUpdatesChecked: function () {
            return isDeferUpdatesChecked();
        },
        IsPrefilterVisible: function () {
            var prefilterPopup = this.GetPrefilterWindow();
            return prefilterPopup != null && prefilterPopup.GetVisible();
        },
        ShowPrefilter: function () {
            this.ChangePrefilterVisibility(true);
        },
        ApplyPrefilter: function () {
            this.PreventCallbackAnimation();
            var fc = this.GetFilterControl();
            if (fc == null) return;
            fc.Apply(this);
        },
        HidePrefilter: function () {
            this.PreventCallbackAnimation();
            this.ChangePrefilterVisibility(false);
        },
        ChangePrefilterVisibility: function (visible) {
            this.PreventCallbackAnimation();
            this.ChangePrefilterVisibilityClientSize(visible);
            this.PerformCallbackInternal(this.GetMainTable(), "PREFILTER|" + (visible ? "Show" : "Hide"));
        },
        ChangePrefilterVisibilityClientSize: function (visible) {
            if (!visible) {
                var prefilterPopup = this.GetPrefilterWindow();
                if (prefilterPopup != null)
                    prefilterPopup.Hide();
            }
        },
        ClearPrefilter: function () {
            this.PerformCallbackInternal(this.GetMainTable(), "PREFILTER|Reset");
        },
        ChangePrefilterEnabled: function () {
            this.PerformCallbackInternal(this.GetMainTable(), "PREFILTER|ChangeEnabled");
        },
        showHeaderMenu: function (e, fieldID) {
            this.headerMenuFieldID = fieldID;
            var source = ASPx.Evt.GetEventSource(e);
            if (source == null)
                return;
            this.headerMenuElementID = source.id;
            if (!this.headerMenuElementID && source.parentNode && source.parentNode.id)
                this.headerMenuElementID = source.parentNode.id;
            var menu = ASPx.GetControlCollection().Get(this.name + "_HM");
            if (menu == null) return;
            this.SetMenuItemVisibilityState(menu, "Hide", this.headerMenuElementID.indexOf("Header") > 0 && this.headerMenuElementID.indexOf("scig") == -1 && this.headerMenuElementID.indexOf("pgdthdr") == -1);
            this.SetMenuItemVisibilityState(menu, "HideList", this.IsCustomizationFieldsVisible());
            this.SetMenuItemVisibilityState(menu, "ShowList", !this.IsCustomizationFieldsVisible());
            this.SetMenuItemVisibilityState(menu, "ShowPrefilter", !this.IsPrefilterVisible());
            var isVisible = this.isOLAPSortModeNoneItemsVisible();
            this.SetMenuItemState(menu, "SortAZ", isVisible, true, this.isOLAPSortModeNoneSortAZChecked());
            this.SetMenuItemState(menu, "SortZA", isVisible, true, this.isOLAPSortModeNoneSortZAChecked());
            this.SetMenuItemState(menu, "ClearSort", isVisible, this.isOLAPSortModeNoneClearSortEnabled(), false);
            this.showMenu(e, menu);
        },
        showFieldListMenu: function (e) {
            var menu = ASPx.GetControlCollection().Get(this.name + "_FM");
            this.showMenu(e, menu);
        },
        SetMenuItemVisibilityState: function (menu, name, isVisible) {
            menuItem = menu.GetItemByName(name);
            if (menuItem != null)
                menuItem.SetVisible(isVisible);
        },
        SetMenuItemState: function (menu, name, isVisible, isEnabled, isChecked) {
            menuItem = menu.GetItemByName(name);
            if (menuItem != null) {
                menuItem.SetVisible(isVisible);
                menuItem.SetEnabled(isEnabled);
                menuItem.SetChecked(isChecked);
            }
        },
        isOLAPSortModeNoneItemsVisible: function () {
            return (this.headerMenuElementID.indexOf("osmn") > 0);
        },
        isOLAPSortModeNoneSortAZChecked: function () {
            return (this.headerMenuElementID.indexOf("osmnSAZ") > 0);
        },
        isOLAPSortModeNoneSortZAChecked: function () {
            return (this.headerMenuElementID.indexOf("osmnSZA") > 0);
        },
        isOLAPSortModeNoneClearSortEnabled: function () {
            return (((this.headerMenuElementID.indexOf("osmnSAZ") > 0) || (this.headerMenuElementID.indexOf("osmnSZA") > 0)));
        },
        onHeaderMenuClick: function (itemName) {
            switch (itemName) {
                case "Refresh": this.PerformCallbackInternal(this.GetMainTable(), "RELOAD"); break;
                case "Hide":
                    if (this.headerMenuElementID)
                        this.PerformCallbackInternal(this.GetMainTable(), "H|" + this.headerMenuElementID);
                    break;
                case "HideList": this.HideCustomizationFields(); break;
                case "ShowList": this.ShowCustomizationFields(true); break;
                case "ShowPrefilter": this.ShowPrefilter(); break;
                case "SortAZ":
                    if (this.isOLAPSortModeNoneSortAZChecked()) break;
                    this.PerformCallbackInternal(this.GetMainTable(), "SAZ|" + this.headerMenuElementID);
                    this.ResetFilterCache(this.filterFieldIndex);
                    break;
                case "SortZA":
                    if (this.isOLAPSortModeNoneSortZAChecked()) break;
                    this.PerformCallbackInternal(this.GetMainTable(), "SZA|" + this.headerMenuElementID);
                    this.ResetFilterCache(this.filterFieldIndex);
                    break;
                case "ClearSort":
                    this.PerformCallbackInternal(this.GetMainTable(), "CS|" + this.headerMenuElementID);
                    this.ResetFilterCache(this.filterFieldIndex);
                    break;
                default:
                    if (ASPx.IsExists(this.RaisePopupMenuItemClick))
                        this.RaisePopupMenuItemClick("HeaderMenu", itemName, this.headerMenuFieldID, -1);
                    break;
            }
        },
        showFieldValueMenu: function (e, state, iscollapsed, fieldID, itemVisibleIndex, canShowSortBySummary, area, sortedFields, dataIndex, itemIndex) {
            this.fieldMenuCellState = state;
            this.fieldMenuFieldID = fieldID;
            this.fieldMenuFieldValueIndex = itemVisibleIndex;
            this.fieldMenuFieldItemIndex = itemIndex;
            this.fieldMenuDataIndex = dataIndex;
            this.fieldMenuArea = area;
            var menu = ASPx.GetControlCollection().Get(this.name + "_FVM");
            if (menu == null) return;
            this.FilterFieldValueMenuItems(menu, state, iscollapsed, canShowSortBySummary, area, sortedFields, dataIndex);
            if (this.MenuHasVisibleItems(menu))
                this.showMenu(e, menu);
        },
        MenuHasVisibleItems: function (menu) {
            var itemsCount = menu.GetItemCount();
            for (var i = 0; i < itemsCount; i++) {
                var menuItem = menu.GetItem(i);
                if (menuItem.GetVisible())
                    return true;
            }
            return false;
        },
        FilterFieldValueMenuItems: function (menu, state, iscollapsed, canShowSortBySummary, area, sortedFields, dataIndex) {
            this.SetMenuItemVisibilityState(menu, "Expand", iscollapsed && state != "");
            this.SetMenuItemVisibilityState(menu, "Collapse", !iscollapsed && state != "");
            this.SetMenuItemVisibilityState(menu, "ExpandAll", state != "");
            this.SetMenuItemVisibilityState(menu, "CollapseAll", state != "");
            var itemsCount = menu.GetItemCount(),
                showRemoveAll = false;
            for (var i = 0; i < itemsCount; i++) {
                var menuItem = menu.GetItem(i);
                if (menuItem.name.indexOf("SortBy_") == 0) {
                    var isRemoveAll = menuItem.name.indexOf("RemoveAll") >= 0;
                    var visible = canShowSortBySummary && menuItem.name.indexOf(area) > 0;
                    if (isRemoveAll) {
                        visible = visible && showRemoveAll;
                    } else {
                        if (dataIndex >= 0)
                            visible = visible && menuItem.name.indexOf("_" + dataIndex) == menuItem.name.lastIndexOf("_");
                    }
                    menuItem.SetVisible(visible);
                    if (visible && !isRemoveAll) {
                        var isChecked = this.GetSortByMenuItemCheckedState(menuItem, sortedFields);
                        showRemoveAll |= isChecked;
                        menuItem.SetChecked(isChecked);
                    }
                }
            }
        },
        GetSortByMenuItemCheckedState: function (menuItem, sortedFields) {
            if (menuItem.name.indexOf("RemoveAll") >= 0) return false;
            for (var i = 0; i < sortedFields.length; i++) {
                if (menuItem.name.indexOf(sortedFields[i]) >= 0)
                    return true;
            }
            return false;
        },
        showMenu: function (e, menu) {
            menu.ShowInternal(e);
            ASPx.Evt.PreventEventAndBubble(e);
        },
        onFieldValueMenuClick: function (itemName) {
            switch (itemName) {
                case "Expand":
                case "Collapse": this.PerformCallbackInternal(this.GetMainTable(), this.fieldMenuCellState); break;
                case "ExpandAll": this.PerformCallbackInternal(this.GetMainTable(), this.fieldMenuCellState + "|EA"); break;
                case "CollapseAll": this.PerformCallbackInternal(this.GetMainTable(), this.fieldMenuCellState + "|CA"); break;
                default:
                    if (itemName.indexOf("SortBy_") == 0)
                        this.onSortByFieldValueMenuClick(itemName);
                    else {
                        if (ASPx.IsExists(this.RaisePopupMenuItemClick))
                            this.RaisePopupMenuItemClick("FieldValueMenu", itemName, this.fieldMenuFieldID, this.fieldMenuFieldValueIndex);
                    }
                    break;
            }
        },
        onFieldListMenuClick: function (itemName) {
            this.GetCustomizationFieldsWindowContentDiv().className = itemName;
            this.GetChildElement("dxpgCustFields_dxpgFLButton").value = itemName;
            this.UpdateExcelCustForm();
        },
        onSortByFieldValueMenuClick: function (itemName) {
            var argument = this.GetSortByArgument(itemName);
            this.PerformCallbackInternal(this.GetMainTable(), "SS|" + this.fieldMenuFieldID + "|" + this.fieldMenuFieldValueIndex + "|" + argument + "|" + this.fieldMenuFieldItemIndex);
            this.ResetFilterCache(this.filterFieldIndex);
        },
        GetSortByArgument: function (itemName) {
            var sortByStr = "SortBy_";
            var startIndex = itemName.indexOf("_", sortByStr.length + 1) + 1;
            var res = itemName.substr(startIndex).replace("_", "|");
            if (res == "RemoveAll")
                res += "|" + this.fieldMenuDataIndex + "|" + this.fieldMenuArea;
            return res;
        },
        DoPagerClick: function (element, value) {
            this.AssignSlideAnimationDirectionByPagerArgument(value, this.pageIndex);
            this.PerformCallbackInternal(element, "P|" + value);
            this.adjustingManager.ResetScrollPos(false, true);
        },
        CanHandleGesture: function (evt) {
            var source = ASPx.Evt.GetEventSource(evt);
            var el = this.adjustingManager.GetCallbackAnimationElement();
            return source === el || ASPx.GetIsParent(el, source);
        },
        AllowStartGesture: function () {
            return ASPxClientControl.prototype.AllowStartGesture.call(this) &&
                (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
        },
        AllowExecuteGesture: function (value) {
            return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
        },
        ExecuteGesture: function (value, count) {
            this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function (arg) { this.DoPagerClick(null, arg); }.aspxBind(this));
        },
        ExcelCustFormRerenderList: function (element) {
            if (element == null) return;
            element = ASPx.GetNodesByTagName(element, "tbody")[0];
            var child = element.lastChild;
            element.removeChild(child);
            element.appendChild(child);
        },
        ForceUpdateFieldListLists: function () {
            this.ExcelCustFormRerenderList(this.getFieldListFields());
            this.ExcelCustFormRerenderList(this.getFilterAreaFieldList());
            this.ExcelCustFormRerenderList(this.getColumnAreaFieldList());
            this.ExcelCustFormRerenderList(this.getRowAreaFieldList());
            this.ExcelCustFormRerenderList(this.getDataAreaFieldList());
        },
        InitExcelCustForm: function () {
            var content = this.GetCustomizationFieldsWindowContentDiv();
            if (content == null)
                return;
            this.InitTouchEvents(this.name, content);
            var custFields = ASPx.GetNodesByPartialClassName(content, "dxpgCustFields");
            for (var i = 0; i < custFields.length; i++) {
                if (ASPx.ElementContainsCssClass(custFields[i], "dxpgCustFieldsDiv")) continue;
                if (ASPx.ElementContainsCssClass(custFields[i], "FieldsFieldList")) {
                    var listDiv = ASPx.GetNodesByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
                    var scrolledDiv = this.getFielListArrowsHorElement(listDiv);
                    if (scrolledDiv)
                        ASPx.Evt.AttachEventToElement(scrolledDiv, "scroll", this.UpdateFieldListScrollLeft);
                } else {
                    var listDiv = ASPx.GetNodesByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
                    var scrolledDiv = this.getFielListArrowsHorElement(listDiv);
                    ASPx.Evt.AttachEventToElement(scrolledDiv, "scroll", this.UpdateFieldListTargets);
                    scrolledDiv.pivotGrid = this;
                    this.FixHeaderImageDrag(scrolledDiv);
                }
            }
        },
        UpdateFieldListScrollLeft: function (event) {
            var source = ASPx.Evt.GetEventSource(event);
            if (source == null)
                return;
            if (source.scrollLeft > 0 && ASPx.GetCurrentStyle(source).overflowX == "hidden")
                source.scrollLeft = 0;
        },
        UpdateFieldListTargets: function (event) {
            var source = ASPx.Evt.GetEventSource(event);
            if (source == null || source.pivotGrid == null)
                return;
            if (source.scrollLeft > 0)
                source.scrollLeft = 0;
            var pivotGrid = source.pivotGrid;
            if (pivotGrid.DragDropManager == null || pivotGrid.DragDropManager.DragTargets == null)
                return;
            pivotGrid.updateListElements(pivotGrid.DragDropManager.DragTargets, ASPx.Evt.GetEvent(event));
        },
        UpdateExcelCustForm: function () {
            var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
            if (contentDiv) {
                if (this.IsDisplayedElement(contentDiv) && (contentDiv.clientHeight > 0 || contentDiv.offsetHeight > 0) && (contentDiv.clientWidth > 0 || contentDiv.offsetWidth > 0)) {
                    pivotGrid_UpdateCustomizationFieldsHeight(contentDiv);
                    this.UpdateExcelCustFormHeaders();
                    this.UpdateExcelCustomFormFieldsContent();
                    if (ASPx.Browser.Opera)
                        this.ForceUpdateFieldListLists();
                    this.FixIEFieldListScrollbar();
                    var menu = ASPx.GetControlCollection().Get(this.name + "_FM");
                    if (contentDiv.className != "" && menu) {
                        this.SetMenuItemState(menu, "StackedDefault", true, true, false);
                        this.SetMenuItemState(menu, "StackedSideBySide", true, true, false);
                        this.SetMenuItemState(menu, "TopPanelOnly", true, true, false);
                        this.SetMenuItemState(menu, "BottomPanelOnly2by2", true, true, false);
                        this.SetMenuItemState(menu, "BottomPanelOnly1by4", true, true, false);
                        this.SetMenuItemState(menu, contentDiv.className, true, false, false);
                    }
                }
                else {
                    if (this.CustFormControlID) {
                        var custFromControl = ASPx.GetControlCollection().Get(this.CustFormControlID);
                        if (custFromControl)
                            custFromControl.ResetControlAdjustment();
                    }
                }
            }
        },
        FixIEFieldListScrollbar: function () {
            var browserPutsScrollBarOnContent = ASPx.Browser.IE && document.documentMode && document.documentMode < 8;
            if (!browserPutsScrollBarOnContent) return;
            this.FixIEFieldListScrollbarCore(this.getFieldListFields());
            this.FixIEFieldListScrollbarCore(this.getFilterAreaFieldList());
            this.FixIEFieldListScrollbarCore(this.getColumnAreaFieldList());
            this.FixIEFieldListScrollbarCore(this.getRowAreaFieldList());
            this.FixIEFieldListScrollbarCore(this.getDataAreaFieldList());
        },
        FixIEFieldListScrollbarCore: function (element) {
            if (element == null) return;
            var scrollBarWidth = ASPx.GetVerticalScrollBarWidth();
            var element = ASPx.GetNodesByTagName(element, "table")[0].parentNode;
            if (element.clientHeight < element.scrollHeight)
                element.style.paddingRight = scrollBarWidth + "px";
            else
                element.style.paddingRight = "0px";
        },
        UpdateExcelCustFormHeaders: function () {
            var contentDiv = this.GetCustomizationFieldsWindowContentDiv();
            if (contentDiv == null)
                return;
            var listsDiv = ASPx.GetNodesByPartialClassName(contentDiv, "dxpgCustFieldsDiv")[0];
            if (listsDiv == null)
                listsDiv = this.getFieldListFields();
            if (listsDiv == null)
                return;
            var headersList = ASPx.GetNodes(listsDiv, function (e) { return ASPx.ElementContainsCssClass(e, "dxpgHeaderTable"); });
            for (var i = 0; i < headersList.length; i++) {
                var headerTable = headersList[i];
                var sortCells = ASPx.GetNodesByPartialClassName(headerTable, "dxpgHeaderSort");
                var filterCells = ASPx.GetNodesByPartialClassName(headerTable, "dxpgHeaderFilter");
                if (sortCells.length > 0)
                    this.UpdateExcelCustFormSortOrFilterCell(sortCells[0], false);
                if (filterCells.length > 0)
                    this.UpdateExcelCustFormSortOrFilterCell(filterCells[0], true);
                headerTable.style.borderCollapse = this.isDeferUpdatesChecked() ? "separate" : "collapse";
            }
        },
        UpdateExcelCustomFormFieldsContent: function () {
            var customizationTreeView = this.GetCustomizationTreeView();
            if (customizationTreeView)
                customizationTreeView.AdjustControl();
        },
        UpdateExcelCustFormSortOrFilterCell: function (cell, isfilter) {
            var visible = isfilter || !this.isDeferUpdatesChecked();
            cell.style.display = visible ? "" : "none";
            cell.style.width = "";
            var width = cell.childNodes[0].offsetWidth;
            if (visible && width == 0)
                width = cell.childNodes[0].clientWidth;
            cell.style.width = (width + (ASPx.Browser.WebKitFamily ? ASPx.GetLeftRightBordersAndPaddingsSummaryValue(cell) : 0)) + "px";
        },
        RaiseCustomTargets: function (targets) {
            if (!this.customTargets.IsEmpty()) {
                var args = new ASPxClientPivotCustomTargetsEventArgs(targets);
                this.customTargets.FireEvent(this, args);
            }
        },
        RaiseCustomizationFieldsVisibleChanged: function () {
            if (!this.CustomizationFieldsVisibleChanged.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.CustomizationFieldsVisibleChanged.FireEvent(this, args);
            }
        },
        RaiseCellClick: function (htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
            if (!this.CellClick.IsEmpty()) {
                var args = new ASPxClientClickEventArgs(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
                this.CellClick.FireEvent(this, args);
            }
        },
        RaiseCellDblClick: function (htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
            if (!this.CellDblClick.IsEmpty()) {
                var args = new ASPxClientClickEventArgs(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
                this.CellDblClick.FireEvent(this, args);
            }
        },
        RaisePopupMenuItemClick: function (menuType, menuItemName, fieldID, fieldValueIndex) {
            if (!this.PopupMenuItemClick.IsEmpty()) {
                var args = new ASPxClientPivotMenuItemClickEventArgs(menuType, menuItemName, fieldID, fieldValueIndex);
                this.PopupMenuItemClick.FireEvent(this, args);
            }
        },
        GetCustomizationFieldsVisibility: function () {
            return this.IsCustomizationFieldsVisible();
        },
        SetCustomizationFieldsVisibility: function (value, animate) {
            if (!ASPx.IsExists(animate))
                animate = true;
            this.ChangeCustomizationFieldsVisibilityInternal(value, animate);
        },
        ChangeCustomizationFieldsVisibility: function (animate) {
            if (!ASPx.IsExists(animate))
                animate = true;
            this.ChangeCustomizationFieldsVisibilityInternal(!this.IsCustomizationFieldsVisible(), animate);
        },
        PerformCallback: function (args, onSuccess) {
            if (!ASPx.IsExists(args)) args = "";
            this.ResetFilterCache();
            this.PerformCallbackInternal(this.GetMainTable(), "C|" + args, "CUSTOMCALLBACK", onSuccess);
        }
    });
    ASPxClientPivotGrid.Cast = ASPxClientControl.Cast;
    var ASPxClientClickEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
            this.constructor.prototype.constructor.call(this);
            this.HtmlEvent = htmlEvent;
            this.Value = value;
            this.ColumnIndex = columnIndex;
            this.RowIndex = rowIndex;
            this.ColumnValue = columnValue;
            this.RowValue = rowValue;
            this.ColumnFieldName = columnFieldName;
            this.RowFieldName = rowFieldName;
            this.ColumnValueType = columnValueType;
            this.RowValueType = rowValueType;
            this.DataIndex = dataIndex;
        }
    });
    var ASPxClientPivotMenuItemClickEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (menuType, menuItemName, fieldID, fieldValueIndex) {
            this.constructor.prototype.constructor.call(this);
            this.MenuType = menuType;
            this.MenuItemName = menuItemName;
            this.FieldID = fieldID;
            this.FieldValueIndex = fieldValueIndex;
        }
    });
    var ASPxClientPivotCustomTargetsEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (targets) {
            this.constructor.prototype.constructor.call(this);
            this.Targets = targets;
        }
    });
    var ASPxClientPivotCustomization = ASPx.CreateClass(ASPxClientControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
        },
        GetMainContainer: function () {
            if (this.ContainerID == null)
                return null;
            return document.getElementById(this.ContainerID);
        },
        GetPivotGrid: function () {
            if (this.PivotGridID == null)
                return null;
            return pivotGrid_GetGrid(this.PivotGridID);
        },
        SetHeight: function (value) {
            this.GetMainContainer().style.height = value + "px";
            this.UpdateHeight();
        },
        SetWidth: function (value) {
            this.GetMainContainer().style.width = value + "px";
        },
        UpdateHeight: function () {
            var PivotGrid = this.GetPivotGrid();
            if (PivotGrid != null)
                this.GetPivotGrid().UpdateExcelCustForm();
        },
        InitForm: function () {
            var controlName = this.GetPivotGrid() != null ? this.GetPivotGrid().name : this.name;
            var custFieldsContent = ASPx.GetElementById(controlName + "_dxpgCustFields");
            pivotGrid_UpdateCustomizationFieldsHeight(custFieldsContent);
        },
        SetLayout: function (layout) {
            var PivotGrid = this.GetPivotGrid();
            if (PivotGrid == null)
                return;
            PivotGrid.GetChildElement("dxpgCustFields_dxpgFLButton").value = layout;
            PivotGrid.GetCustomizationFieldsWindowContentDiv().className = layout;
            PivotGrid.UpdateExcelCustForm();
        },
        AdjustControlCore: function () {
            ASPxClientControl.prototype.AdjustControlCore.call(this);
            this.UpdateHeight();
        }
    });
    ASPx.pivotGrid_GetGrid = function (id) {
        return pivotGrid_GetGrid(id);
    }
    ASPx.pivotGrid_IsBusy = function (id) {
        return pivotGrid_IsBusy(id);
    }
    function pivotGrid_GetGrid(id) {
        return ASPx.GetControlCollection().Get(id);
    }
    function pivotGrid_IsBusy(id) {
        var grid = pivotGrid_GetGrid(id);
        if (grid.isCallbackInProcess)
            return true;
        var filterControl = grid.GetFilterControl();
        if (filterControl != null && filterControl.isCallbackInProcess)
            return true;
        return false;
    }
    function pivotGrid_GetGridFromMenu(menu) {
        if (menu == null) return null;
        var pos = menu.name.lastIndexOf("_");
        if (pos > -1) {
            return pivotGrid_GetGrid(menu.name.substring(0, pos));
        }
        return null;
    }
    ASPx.pivotGrid_OnHeaderMenuClick = function (s, args) {
        var grid = pivotGrid_GetGridFromMenu(s);
        if (grid != null) {
            grid.onHeaderMenuClick(args.item.name);
        }
    }
    function pivotGrid_ShowHeaderMenu(id, e, fieldID) {
        var grid = pivotGrid_GetGrid(id);
        if (grid != null) {
            grid.showHeaderMenu(e, fieldID);
        }
    }
    ASPx.pivotGrid_OnFieldValueMenuClick = function (s, args) {
        var grid = pivotGrid_GetGridFromMenu(s);
        if (grid != null) {
            grid.onFieldValueMenuClick(args.item.name);
        }
    }
    ASPx.pivotGrid_OnFieldListMenuClick = function (s, args) {
        var grid = pivotGrid_GetGridFromMenu(s);
        if (grid != null) {
            grid.onFieldListMenuClick(args.item.name);
        }
    }
    ASPx.pivotGrid_OnFieldListLayoutButtonClick = function (id, evt) {
        var evt = ASPx.Evt.GetEvent(evt);
        var pivotGrid = pivotGrid_GetGrid(id);
        if (pivotGrid == null) return;
        pivotGrid.showFieldListMenu(evt);
    }
    function pivotGrid_ShowFieldValueMenu(id, e, state, iscollapsed, fieldID, itemVisibleIndex, canShowSortBySummary, area, sortedFields, dataIndex, itemIndex) {
        var grid = pivotGrid_GetGrid(id);
        if (grid != null) {
            grid.showFieldValueMenu(e, state, iscollapsed, fieldID, itemVisibleIndex, canShowSortBySummary, area, sortedFields, dataIndex, itemIndex);
        }
    }
    ASPx.pivotGrid_HeaderMouseDown = function (id, element, e) {
        var grid = pivotGrid_GetGrid(id);
        if (grid != null) {
            if (!element.id || !(element.id.indexOf("pgHeader") != -1 || element.id.indexOf("pgGroupHeader") != -1))
                return;
            grid.headerMouseDown(element, e);
        }
    }
    ASPx.pivotGrid_HeaderClick = function (id, element, e) {
        var grid = pivotGrid_GetGrid(id);
        if (grid != null) {
            grid.headerClick(element);
        }
    }
    ASPx.pivotGrid_CustFormHeaderClick = function (id, element, e) {
        var grid = pivotGrid_GetGrid(id);
        if (grid != null && !pivotGrid_IsBusy(id))
            grid.headerClick(element);
    }
    ASPx.pivotGrid_ShowFilterPopup = function (name, headerId, isFieldList) {
        var pg = pivotGrid_GetGrid(name);
        if (pg != null)
            pg.ShowFilterPopup(headerId);
    }
    ASPx.pivotGrid_PerformCallback = function (name, el, value) {
        var pg = pivotGrid_GetGrid(name);
        if (pg != null)
            pg.PerformCallbackInternal(el, value);
    }
    ASPx.pivotGrid_FieldFilterValueChanged = function (name, index) {
        var pg = pivotGrid_GetGrid(name);
        if (pg != null)
            pg.fieldFilterValueChanged(index);
        else
            pivotGrid_WasNotFound();
    }
    ASPx.pivotGrid_ApplyFilter = function (name) {
        var pg = pivotGrid_GetGrid(name);
        if (pg != null) {
            if (!pg.GetHeaderFilterPopup().IsVisible()) return;
            pg.applyFilter();
        }
        else
            pivotGrid_WasNotFound();
    }
    function pivotGrid_WasNotFound() {
        alert("PivotGrid was not found");
    }
    ASPx.pivotGrid_HideFilter = function (name) {
        var pg = pivotGrid_GetGrid(name);
        if (pg != null)
            pg.GetHeaderFilterPopup().Hide();
    }
    ASPx.pivotGrid_ClearSelection = function () {
        if (!ASPx.Browser.Opera)
            return;
        if (ASPx.IsExists(window.getSelection) && ASPx.Browser.WebKitFamily && ASPx.IsExists(window.getSelection().removeAllRanges)) {
            window.getSelection().removeAllRanges();
        }
        else if (ASPx.IsExists(document.selection)) {
            if (ASPx.IsExists(document.selection.empty))
                document.selection.empty();
            else if (ASPx.IsExists(document.selection.clear))
                document.selection.clear();
        }
    }
    ASPx.pivotGrid_PagerClick = function (name, element, id) {
        var pg = pivotGrid_GetGrid(name);
        if (pg != null) pg.DoPagerClick(element, id);
    }
    function pivotGrid_GetGridByCustomizationFields(custFields) {
        if (!ASPx.IsExists(custFields.pivotGrid) || custFields.pivotGrid == null) {
            var name = custFields.name.substr(0, custFields.name.length - ("_DXCustFields").length);
            custFields.pivotGrid = ASPx.GetControlCollection().Get(name);
        }
        return custFields.pivotGrid;
    }
    ASPx.pivotGrid_CustomizationFormDeferUpdates = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg == null) return;
        pg.UpdateExcelCustFormHeaders();
    }
    ASPx.pivotGrid_CustomizationFormResumeUpdates = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg == null) return;
        if (pg.forcePerformDeferUpdatesCallback) {
            pg.PerformDeferUpdatesCallback();
            pg.forcePerformDeferUpdatesCallback = false;
        }
        else
            pg.UpdateExcelCustFormHeaders();
    }
    ASPx.pivotGrid_CustomizationFormUpdate = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg == null) return;
        pg.PerformDeferUpdatesCallback();
    }
    function pivotGrid_UpdateCustomizationFieldsHeight(content) {
        if (content == null)
            return;
        var buttonDiv = ASPx.GetNodesByPartialClassName(content, "dxpgFLButtonDiv")[0];
        var deferDiv = ASPx.GetNodesByPartialClassName(content, "dxpgFLDefereDiv")[0];
        var listsDiv = ASPx.GetNodesByPartialClassName(content, "dxpgCustFieldsDiv")[0];
        if (buttonDiv == null || deferDiv == null || listsDiv == null)
            return;
        var isIE10 = ASPx.Browser.IE && ASPx.Browser.Version > 9;
        var isIE11 = ASPx.Browser.IE && ASPx.Browser.Version > 10;
        var isNotTopPanelOnly = content.className != "TopPanelOnly";
        if (ASPx.Browser.IE && isNotTopPanelOnly) {
            deferDiv.style.display = "none";
            deferDiv.style.display = "block";
        }
        var custFields = ASPx.GetNodesByPartialClassName(content, "dxpgCustFields");
        for (var i = 0; i < custFields.length; i++) {
            if (!ASPx.ElementContainsCssClass(custFields[i], "dxpgCustFieldsDiv")) {
                var list = ASPx.GetNodesByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
                if (isIE11) {
                    list.style.maxHeight = "1px";
                } else {
                    list.style.display = "none";
                    if (isIE10) {
                        list.style.display = "block";
                        list.style.height = "1px";
                        list.style.overflow = "hidden";
                    }
                }
            }
        }
        var fullHeight = parseInt(content.clientHeight);
        if (fullHeight == 0)
            fullHeight = parseInt(content.offsetHeight);
        var height = fullHeight - parseInt(deferDiv.clientHeight) - parseInt(buttonDiv.clientHeight);
        if (height < 0) return;
        listsDiv.style.height = height + "px";
        for (var i = 0; i < custFields.length; i++) {
            if (!ASPx.ElementContainsCssClass(custFields[i], "dxpgCustFieldsDiv")) {
                var text = ASPx.GetNodesByPartialClassName(custFields[i], "dxpgFLTextDiv")[0];
                var list = ASPx.GetNodesByPartialClassName(custFields[i], "dxpgFLListDiv")[0];
                list.style.display = "block";
                list.style.height = "auto";
                list.style.overflow = "visible";
                list.style.maxHeight = "";
                var height2 = parseInt(custFields[i].clientHeight) - parseInt(text.clientHeight);
                if (content.className == "StackedSideBySide" && ASPx.ElementContainsCssClass(custFields[i], "DataArea")) {
                    height2 += pivotGrid_GetFieldList1By425percRound(height);
                }
                if (height2 >= 0) {
                    list.style.height = height2 + "px";
                }
            }
        }
    }
    function pivotGrid_GetFieldList1By425percRound(height) {
        if (ASPx.Browser.IE && ASPx.Browser.Version < 8) {
            if (height % 4 == 2 || height % 4 == 3)
                return -1;
            if (height % 4 == 1)
                return -2;
        }
        if (ASPx.Browser.WebKitFamily || ASPx.Browser.Opera) {
            if (height % 4 == 1 || height % 4 == 2)
                return 1;
            if (height % 4 == 3)
                return 2;
        }
        if (ASPx.Browser.Firefox && height % 4 == 2)
            return -1;
        return 0;
    }
    ASPx.pivotGrid_DoCustomizationFieldsVisibleChanged = function (sender) {
        var control = pivotGrid_GetGridByCustomizationFields(sender);
        if (control == null) return;
        if (ASPx.IsExists(control.RaiseCustomizationFieldsVisibleChanged)) {
            control.RaiseCustomizationFieldsVisibleChanged();
        }
    }
    ASPx.pivotGrid_DoUpdateContentSize = function (sender) {
        var control = pivotGrid_GetGridByCustomizationFields(sender);
        var content = control.GetCustomizationFieldsWindowContentDiv();
        var popup = control.GetCustomizationFieldsWindow();
        var contentCell = popup.GetWindowContentWrapperElement(-1);
        content.style.width = ASPx.GetClearClientWidth(contentCell) + "px";
        content.style.height = ASPx.GetClearClientHeight(contentCell) + "px";
        content.style.display = "block";
        control.RestoreContentDivScrollTop();
        control.UpdateExcelCustForm();
    }
    ASPx.pivotGrid_DoResetContentSize = function (sender) {
        var content = pivotGrid_GetGridByCustomizationFields(sender).GetCustomizationFieldsWindowContentDiv();
        content.style.width = "0px";
        content.style.height = "0px"
    }
    function pivotGrid_FieldValueContextMenuHandler(e) {
        var source = ASPx.Evt.GetEventSource(e);
        while (source != null && !ASPx.IsExists(source.contextMenuParams))
            source = source.parentNode;
        if (source == null)
            return;
        pivotGrid_ShowFieldValueMenu(source.pivotClientID, e, source.contextMenuParams[1], source.contextMenuParams[2],
            source.contextMenuParams[3], source.contextMenuParams[4], source.contextMenuParams[5], source.contextMenuParams[6],
            source.contextMenuParams[7], source.contextMenuParams[8], source.contextMenuParams[9]);
    }
    function pivotGrid_HeaderContextMenuHandler(e) {
        var source = ASPx.Evt.GetEventSource(e);
        while (source != null && !ASPx.IsExists(source.contextMenuParams))
            source = source.parentNode;
        if (source == null)
            return;
        pivotGrid_ShowHeaderMenu(source.pivotClientID, e, source.contextMenuParams[1]);
    }
    ASPx.pivotGrid_AfterCallBackInitialize = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.AfterCallBackInitialize();
    }
    ASPx.pivotGrid_SetRenderOptions = function (id, options) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.SetRenderOptions(options);
    }
    ASPx.pivotGrid_CellClick = function (id, htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null && ASPx.IsExists(pg.RaiseCellClick))
            pg.RaiseCellClick(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
    }
    ASPx.pivotGrid_CellDoubleClick = function (id, htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null && ASPx.IsExists(pg.RaiseCellDblClick))
            pg.RaiseCellDblClick(htmlEvent, value, columnIndex, rowIndex, columnValue, rowValue, columnFieldName, rowFieldName, columnValueType, rowValueType, dataIndex);
    }
    ASPx.pivotGrid_Sort508 = function (id, headerSuffix) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null) {
            pg.ResetFilterCache(pg.filterFieldIndex);
            pg.PerformCallbackInternal(null, 'S|' + id + "_" + headerSuffix);
        }
    }
    ASPx.pivotGrid_ApplyPrefilter = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.ApplyPrefilter();
    }
    ASPx.pivotGrid_HidePrefilter = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.HidePrefilter();
    }
    ASPx.pivotGrid_ShowPrefilter = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.ShowPrefilter();
    }
    ASPx.pivotGrid_ClearPrefilter = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.ClearPrefilter();
    }
    ASPx.pivotGrid_ChangePrefilterEnabled = function (id) {
        var pg = pivotGrid_GetGrid(id);
        if (pg != null)
            pg.ChangePrefilterEnabled();
    }
    ASPx.pivotGrid_FixIE8RowTreeLayout = function (maxCellID, pivotGrid) {
        var cell = ASPx.GetElementById(maxCellID);
        cell.style.width = cell.offsetWidth + 'px';
        var pivot = pivotGrid_GetGrid(pivotGrid);
        if (pivot == null) return;
        pivot.AdjustControl();
    }
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, function (evt) {
        var collection = ASPxClientPivotGridControlCollection.GetPivotGridControlCollection();
        collection.OnMouseMove(evt);
    });
    window.ASPxClientPivotGrid = ASPxClientPivotGrid;
    window.ASPxClientPivotGridGroup = ASPxClientPivotGridGroup;
    window.ASPxClientPivotGridControlCollection = ASPxClientPivotGridControlCollection;
    window.ASPxClientClickEventArgs = ASPxClientClickEventArgs;
    window.ASPxClientPivotMenuItemClickEventArgs = ASPxClientPivotMenuItemClickEventArgs;
    window.ASPxClientPivotCustomTargetsEventArgs = ASPxClientPivotCustomTargetsEventArgs;
    window.ASPxClientPivotCustomization = ASPxClientPivotCustomization;
})();
(function () {
    var MVCxClientPivotGrid = ASPx.CreateClass(ASPxClientPivotGrid, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.callbackUrl = "";
            this.customActionUrl = "";
            this.callbackCustomArgs = {};
            this.pivotCustomizationExtensionName = "";
            this.customActionCallBack = null;
        },
        PerformCallback: function (data, onSuccess) {
            ASPx.Data.MergeHashTables(this.callbackCustomArgs, data);
            ASPxClientPivotGrid.prototype.PerformCallback.call(this, data, onSuccess);
        },
        InlineInitialize: function () {
            if (this.callbackUrl != "")
                this.callBack = function (arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, this.GetCallbackParams(), this.callbackCustomArgs); };
            if (this.customActionUrl != "")
                this.customActionCallBack = function (arg) { MVCx.PerformControlCallback(this.name, this.customActionUrl, arg, this.GetCallbackParams(arg), this.callbackCustomArgs); };
            ASPxClientPivotGrid.prototype.InlineInitialize.call(this);
        },
        RaiseBeginCallbackInternal: function (command) {
            var args = new MVCxClientBeginCallbackEventArgs(command);
            if (!this.BeginCallback.IsEmpty())
                this.BeginCallback.FireEvent(this, args);
            ASPx.Data.MergeHashTables(this.callbackCustomArgs, args.customArgs);
        },
        CreateCallbackByInfo: function (arg, command, callbackInfo) {
            this.CreateCallbackInternal(arg, command, true, callbackInfo);
        },
        CreateCallbackCore: function (arg, command, callbackID) {
            if (this.callbackCustomArgs != {})
                window.setTimeout(function () { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
            ASPxClientPivotGrid.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
        },
        GetCallbackMethod: function (command) {
            return MVCx.IsCustomCallback(command) ? MVCx.GetCustomActionCallBackMethod(this) : this.callBack;
        },
        GetCallbackParams: function () {
            var params = {};
            this.FillCallbackParamsInternal(this.name, params, true);
            if (this.pivotCustomizationExtensionName)
                this.FillCallbackParamsInternal(this.pivotCustomizationExtensionName, params, false);
            return params;
        },
        FillCallbackParamsInternal: function (name, params, includeTreeView) {
            var control = ASPx.GetControlCollection().Get(name);
            MVCx.AddCallbackParam(params, control.GetStateHiddenField());
            MVCx.AddCallbackParamsInContainer(params, control.GetMainElement());
            if (includeTreeView) {
                var treeView = control.GetTreeView();
                if (treeView)
                    MVCx.AddCallbackParam(params, treeView.GetStateHiddenField());
            }
        },
        FillStateObject: function (obj) {
            if (!obj)
                obj = {};
            this.OnPost();
            var params = this.GetCallbackParams();
            for (var key in params)
                if (params.hasOwnProperty(key))
                    obj[key] = params[key];
        }
    });
    MVCxClientPivotGrid.Cast = ASPxClientControl.Cast;
    window.MVCxClientPivotGrid = MVCxClientPivotGrid;
})();

(function () {
    ASPx.StateItemsExist = false;
    ASPx.FocusedItemKind = "FocusedStateItem";
    ASPx.HoverItemKind = "HoverStateItem";
    ASPx.PressedItemKind = "PressedStateItem";
    ASPx.SelectedItemKind = "SelectedStateItem";
    ASPx.DisabledItemKind = "DisabledStateItem";
    ASPx.CachedStatePrefix = "cached";
    ASPxStateItem = ASPx.CreateClass(null, {
        constructor: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink) {
            this.name = name;
            this.classNames = classNames;
            this.customClassNames = [];
            this.resultClassNames = [];
            this.cssTexts = cssTexts;
            this.postfixes = postfixes;
            this.imageObjs = imageObjs;
            this.imagePostfixes = imagePostfixes;
            this.kind = kind;
            this.classNamePostfix = kind.substr(0, 1).toLowerCase();
            this.enabled = true;
            this.needRefreshBetweenElements = false;
            this.elements = null;
            this.images = null;
            this.links = [];
            this.linkColor = null;
            this.linkTextDecoration = null;
            this.disableApplyingStyleToLink = !!disableApplyingStyleToLink;
        },
        GetCssText: function (index) {
            if (ASPx.IsExists(this.cssTexts[index]))
                return this.cssTexts[index];
            return this.cssTexts[0];
        },
        CreateStyleRule: function (index) {
            if (this.GetCssText(index) == "") return "";
            var styleSheet = ASPx.GetCurrentStyleSheet();
            if (styleSheet)
                return ASPx.CreateImportantStyleRule(styleSheet, this.GetCssText(index), this.classNamePostfix);
            return "";
        },
        GetClassName: function (index) {
            if (ASPx.IsExists(this.classNames[index]))
                return this.classNames[index];
            return this.classNames[0];
        },
        GetResultClassName: function (index) {
            if (!ASPx.IsExists(this.resultClassNames[index])) {
                if (!ASPx.IsExists(this.customClassNames[index]))
                    this.customClassNames[index] = this.CreateStyleRule(index);
                if (this.GetClassName(index) != "" && this.customClassNames[index] != "")
                    this.resultClassNames[index] = this.GetClassName(index) + " " + this.customClassNames[index];
                else if (this.GetClassName(index) != "")
                    this.resultClassNames[index] = this.GetClassName(index);
                else if (this.customClassNames[index] != "")
                    this.resultClassNames[index] = this.customClassNames[index];
                else
                    this.resultClassNames[index] = "";
            }
            return this.resultClassNames[index];
        },
        GetElements: function (element) {
            if (!this.elements || !ASPx.IsValidElements(this.elements)) {
                if (this.postfixes && this.postfixes.length > 0) {
                    this.elements = [];
                    var parentNode = element.parentNode;
                    if (parentNode) {
                        for (var i = 0; i < this.postfixes.length; i++) {
                            var id = this.name + this.postfixes[i];
                            this.elements[i] = ASPx.GetChildById(parentNode, id);
                            if (!this.elements[i])
                                this.elements[i] = ASPx.GetElementById(id);
                        }
                    }
                }
                else
                    this.elements = [element];
            }
            return this.elements;
        },
        GetImages: function (element) {
            if (!this.images || !ASPx.IsValidElements(this.images)) {
                this.images = [];
                if (this.imagePostfixes && this.imagePostfixes.length > 0) {
                    var elements = this.GetElements(element);
                    for (var i = 0; i < this.imagePostfixes.length; i++) {
                        var id = this.name + this.imagePostfixes[i];
                        for (var j = 0; j < elements.length; j++) {
                            if (!elements[j]) continue;
                            if (elements[j].id == id)
                                this.images[i] = elements[j];
                            else
                                this.images[i] = ASPx.GetChildById(elements[j], id);
                            if (this.images[i])
                                break;
                        }
                    }
                }
            }
            return this.images;
        },
        Apply: function (element) {
            if (!this.enabled) return;
            try {
                this.ApplyStyle(element);
                if (this.imageObjs && this.imageObjs.length > 0)
                    this.ApplyImage(element);
                if (ASPx.Browser.IE && ASPx.Browser.MajorVersion >= 11)
                    this.ForceRedrawAppearance(element);
            }
            catch (e) {
            }
        },
        ApplyStyle: function (element) {
            var elements = this.GetElements(element);
            for (var i = 0; i < elements.length; i++) {
                if (!elements[i]) continue;
                if (this.GetResultClassName(i) != "") {
                    var className = elements[i].className.replace(this.GetResultClassName(i), "");
                    elements[i].className = ASPx.Str.Trim(className) + " " + this.GetResultClassName(i);
                }
                if (!ASPx.Browser.Opera || ASPx.Browser.Version >= 9)
                    this.ApplyStyleToLinks(elements, i);
            }
        },
        ApplyStyleToLinks: function (elements, index) {
            if (this.disableApplyingStyleToLink)
                return;
            if (!ASPx.IsValidElements(this.links[index]))
                this.links[index] = ASPx.GetNodesByTagName(elements[index], "A");
            for (var i = 0; i < this.links[index].length; i++)
                this.ApplyStyleToLinkElement(this.links[index][i], index);
        },
        ApplyStyleToLinkElement: function (link, index) {
            if (this.GetLinkColor(index) != "")
                ASPx.Attr.ChangeAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color", this.GetLinkColor(index));
            if (this.GetLinkTextDecoration(index) != "")
                ASPx.Attr.ChangeAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration", this.GetLinkTextDecoration(index));
        },
        ApplyImage: function (element) {
            var images = this.GetImages(element);
            for (var i = 0; i < images.length; i++) {
                if (!images[i] || !this.imageObjs[i]) continue;
                var useSpriteImage = typeof (this.imageObjs[i]) != "string";
                var newUrl = "", newCssClass = "", newBackground = "";
                if (useSpriteImage) {
                    newUrl = ASPx.EmptyImageUrl;
                    if (this.imageObjs[i].spriteCssClass)
                        newCssClass = this.imageObjs[i].spriteCssClass;
                    if (this.imageObjs[i].spriteBackground)
                        newBackground = this.imageObjs[i].spriteBackground;
                }
                else {
                    newUrl = this.imageObjs[i];
                    if (ASPx.Attr.IsExistsAttribute(images[i].style, "background"))
                        newBackground = " ";
                }
                if (newUrl != "")
                    ASPx.Attr.ChangeAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src", newUrl);
                if (newCssClass != "")
                    this.ApplyImageClassName(images[i], newCssClass);
                if (newBackground != "") {
                    if (ASPx.Browser.WebKitFamily) {
                        var savedBackground = ASPx.Attr.GetAttribute(images[i].style, "background");
                        if (!useSpriteImage)
                            savedBackground += " " + images[i].style["backgroundPosition"];
                        ASPx.Attr.SetAttribute(images[i], "saved" + this.kind + "Background", savedBackground);
                        ASPx.Attr.SetAttribute(images[i].style, "background", newBackground);
                    }
                    else
                        ASPx.Attr.ChangeAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background", newBackground);
                }
            }
        },
        ApplyImageClassName: function (element, newClassName) {
            if (ASPx.Attr.GetAttribute(element, "saved" + this.kind + "ClassName"))
                this.CancelImageClassName(element);
            var className = element.className;
            ASPx.Attr.SetAttribute(element, "saved" + this.kind + "ClassName", className);
            element.className = className + " " + newClassName;
        },
        Cancel: function (element) {
            if (!this.enabled) return;
            try {
                if (this.imageObjs && this.imageObjs.length > 0)
                    this.CancelImage(element);
                this.CancelStyle(element);
            }
            catch (e) {
            }
        },
        CancelStyle: function (element) {
            var elements = this.GetElements(element);
            for (var i = 0; i < elements.length; i++) {
                if (!elements[i]) continue;
                if (this.GetResultClassName(i) != "") {
                    var className = ASPx.Str.Trim(elements[i].className.replace(this.GetResultClassName(i), ""));
                    elements[i].className = className;
                }
                if (!ASPx.Browser.Opera || ASPx.Browser.Version >= 9)
                    this.CancelStyleFromLinks(elements, i);
            }
        },
        CancelStyleFromLinks: function (elements, index) {
            if (this.disableApplyingStyleToLink)
                return;
            if (!ASPx.IsValidElements(this.links[index]))
                this.links[index] = ASPx.GetNodesByTagName(elements[index], "A");
            for (var i = 0; i < this.links[index].length; i++)
                this.CancelStyleFromLinkElement(this.links[index][i], index);
        },
        CancelStyleFromLinkElement: function (link, index) {
            if (this.GetLinkColor(index) != "")
                ASPx.Attr.RestoreAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color");
            if (this.GetLinkTextDecoration(index) != "")
                ASPx.Attr.RestoreAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration");
        },
        CancelImage: function (element) {
            var images = this.GetImages(element);
            for (var i = 0; i < images.length; i++) {
                if (!images[i] || !this.imageObjs[i]) continue;
                ASPx.Attr.RestoreAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src");
                this.CancelImageClassName(images[i]);
                ASPx.Attr.RestoreAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background");
            }
        },
        CancelImageClassName: function (element) {
            var savedClassName = ASPx.Attr.GetAttribute(element, "saved" + this.kind + "ClassName");
            if (ASPx.IsExists(savedClassName)) {
                element.className = savedClassName;
                ASPx.Attr.RemoveAttribute(element, "saved" + this.kind + "ClassName");
            }
        },
        Clone: function () {
            return new ASPxStateItem(this.name, this.classNames, this.cssTexts, this.postfixes,
                this.imageObjs, this.imagePostfixes, this.kind, this.disableApplyingStyleToLink);
        },
        IsChildElement: function (element) {
            if (element != null) {
                var elements = this.GetElements(element);
                for (var i = 0; i < elements.length; i++) {
                    if (!elements[i]) continue;
                    if (ASPx.GetIsParent(elements[i], element))
                        return true;
                }
            }
            return false;
        },
        ForceRedrawAppearance: function (element) {
            if (!aspxGetStateController().IsForceRedrawAppearanceLocked()) {
                var value = element.style.opacity;
                element.style.opacity = "0.7777";
                var dummy = element.offsetWidth;
                element.style.opacity = value;
            }
        },
        GetLinkColor: function (index) {
            if (!ASPx.IsExists(this.linkColor)) {
                var rule = ASPx.GetStyleSheetRules(this.customClassNames[index]);
                this.linkColor = rule ? rule.style.color : null;
                if (!ASPx.IsExists(this.linkColor)) {
                    var rule = ASPx.GetStyleSheetRules(this.GetClassName(index));
                    this.linkColor = rule ? rule.style.color : null;
                }
                if (this.linkColor == null)
                    this.linkColor = "";
            }
            return this.linkColor;
        },
        GetLinkTextDecoration: function (index) {
            if (!ASPx.IsExists(this.linkTextDecoration)) {
                var rule = ASPx.GetStyleSheetRules(this.customClassNames[index]);
                this.linkTextDecoration = rule ? rule.style.textDecoration : null;
                if (!ASPx.IsExists(this.linkTextDecoration)) {
                    var rule = ASPx.GetStyleSheetRules(this.GetClassName(index));
                    this.linkTextDecoration = rule ? rule.style.textDecoration : null;
                }
                if (this.linkTextDecoration == null)
                    this.linkTextDecoration = "";
            }
            return this.linkTextDecoration;
        }
    });
    ASPxClientStateEventArgs = ASPx.CreateClass(null, {
        constructor: function (item, element) {
            this.item = item;
            this.element = element;
            this.toElement = null;
            this.fromElement = null;
            this.htmlEvent = null;
        }
    });
    ASPxStateController = ASPx.CreateClass(null, {
        constructor: function () {
            this.focusedItems = {};
            this.hoverItems = {};
            this.pressedItems = {};
            this.selectedItems = {};
            this.disabledItems = {};
            this.disabledScheme = {};
            this.currentFocusedElement = null;
            this.currentFocusedItemName = null;
            this.currentHoverElement = null;
            this.currentHoverItemName = null;
            this.currentPressedElement = null;
            this.currentPressedItemName = null;
            this.savedCurrentPressedElement = null;
            this.savedCurrentMouseMoveSrcElement = null;
            this.forceRedrawAppearanceLockCount = 0;
            this.AfterSetFocusedState = new ASPxClientEvent();
            this.AfterClearFocusedState = new ASPxClientEvent();
            this.AfterSetHoverState = new ASPxClientEvent();
            this.AfterClearHoverState = new ASPxClientEvent();
            this.AfterSetPressedState = new ASPxClientEvent();
            this.AfterClearPressedState = new ASPxClientEvent();
            this.AfterDisabled = new ASPxClientEvent();
            this.AfterEnabled = new ASPxClientEvent();
            this.BeforeSetFocusedState = new ASPxClientEvent();
            this.BeforeClearFocusedState = new ASPxClientEvent();
            this.BeforeSetHoverState = new ASPxClientEvent();
            this.BeforeClearHoverState = new ASPxClientEvent();
            this.BeforeSetPressedState = new ASPxClientEvent();
            this.BeforeClearPressedState = new ASPxClientEvent();
            this.BeforeDisabled = new ASPxClientEvent();
            this.BeforeEnabled = new ASPxClientEvent();
            this.FocusedItemKeyDown = new ASPxClientEvent();
        },
        AddHoverItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
            this.AddItem(this.hoverItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.HoverItemKind, disableApplyingStyleToLink);
            this.AddItem(this.focusedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.FocusedItemKind, disableApplyingStyleToLink);
        },
        AddPressedItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
            this.AddItem(this.pressedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.PressedItemKind, disableApplyingStyleToLink);
        },
        AddSelectedItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
            this.AddItem(this.selectedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, ASPx.SelectedItemKind, disableApplyingStyleToLink);
        },
        AddDisabledItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink, rootId) {
            this.AddItem(this.disabledItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes,
                ASPx.DisabledItemKind, disableApplyingStyleToLink, this.addIdToDisabledItemScheme, rootId);
        },
        addIdToDisabledItemScheme: function (rootId, childId) {
            if (!rootId)
                return;
            if (!this.disabledScheme[rootId])
                this.disabledScheme[rootId] = [rootId];
            if (childId && (rootId != childId) && ASPx.Data.ArrayIndexOf(this.disabledScheme[rootId], childId) == -1)
                this.disabledScheme[rootId].push(childId);
        },
        removeIdFromDisabledItemScheme: function (rootId, childId) {
            if (!rootId || !this.disabledScheme[rootId])
                return;
            ASPx.Data.ArrayRemove(this.disabledScheme[rootId], childId);
            if (this.disabledScheme[rootId].length == 0)
                delete this.disabledScheme[rootId];
        },
        AddItem: function (items, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink, onAdd, rootId) {
            var stateItem = new ASPxStateItem(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink);
            if (postfixes && postfixes.length > 0) {
                for (var i = 0; i < postfixes.length; i++) {
                    items[name + postfixes[i]] = stateItem;
                    if (onAdd)
                        onAdd.call(this, rootId, name + postfixes[i]);
                }
            }
            else {
                if (onAdd)
                    onAdd.call(this, rootId, name);
                items[name] = stateItem;
            }
            ASPx.StateItemsExist = true;
        },
        RemoveHoverItem: function (name, postfixes) {
            this.RemoveItem(this.hoverItems, name, postfixes);
            this.RemoveItem(this.focusedItems, name, postfixes);
        },
        RemovePressedItem: function (name, postfixes) {
            this.RemoveItem(this.pressedItems, name, postfixes);
        },
        RemoveSelectedItem: function (name, postfixes) {
            this.RemoveItem(this.selectedItems, name, postfixes);
        },
        RemoveDisabledItem: function (name, postfixes, rootId) {
            this.RemoveItem(this.disabledItems, name, postfixes, this.removeIdFromDisabledItemScheme, rootId);
        },
        RemoveItem: function (items, name, postfixes, onRemove, rootId) {
            if (postfixes && postfixes.length > 0) {
                for (var i = 0; i < postfixes.length; i++) {
                    delete items[name + postfixes[i]];
                    if (onRemove)
                        onRemove.call(this, rootId, name + postfixes[i]);
                }
            }
            else {
                delete items[name];
                if (onRemove)
                    onRemove.call(this, rootId, name);
            }
        },
        RemoveDisposedItems: function () {
            this.RemoveDisposedItemsByType(this.hoverItems);
            this.RemoveDisposedItemsByType(this.pressedItems);
            this.RemoveDisposedItemsByType(this.focusedItems);
            this.RemoveDisposedItemsByType(this.selectedItems);
            this.RemoveDisposedItemsByType(this.disabledItems);
            this.RemoveDisposedItemsByType(this.disabledScheme);
        },
        RemoveDisposedItemsByType: function (items) {
            for (var key in items) {
                if (items.hasOwnProperty(key)) {
                    var item = items[key];
                    var element = document.getElementById(key);
                    if (!element || !ASPx.IsValidElement(element))
                        delete items[key];
                    try {
                        if (item && item.elements) {
                            for (var i = 0; i < item.elements.length; i++) {
                                if (!ASPx.IsValidElements(item.links[i]))
                                    item.links[i] = null;
                            }
                        }
                    }
                    catch (e) {
                    }
                }
            }
        },
        GetFocusedElement: function (srcElement) {
            return this.GetItemElement(srcElement, this.focusedItems, ASPx.FocusedItemKind);
        },
        GetHoverElement: function (srcElement) {
            return this.GetItemElement(srcElement, this.hoverItems, ASPx.HoverItemKind);
        },
        GetPressedElement: function (srcElement) {
            return this.GetItemElement(srcElement, this.pressedItems, ASPx.PressedItemKind);
        },
        GetSelectedElement: function (srcElement) {
            return this.GetItemElement(srcElement, this.selectedItems, ASPx.SelectedItemKind);
        },
        GetDisabledElement: function (srcElement) {
            return this.GetItemElement(srcElement, this.disabledItems, ASPx.DisabledItemKind);
        },
        GetItemElement: function (srcElement, items, kind) {
            if (srcElement && srcElement[ASPx.CachedStatePrefix + kind]) {
                var cachedElement = srcElement[ASPx.CachedStatePrefix + kind];
                if (cachedElement != ASPx.EmptyObject)
                    return cachedElement;
                return null;
            }
            var element = srcElement;
            while (element != null) {
                var item = items[element.id];
                if (item) {
                    this.CacheItemElement(srcElement, kind, element);
                    element[kind] = item;
                    return element;
                }
                element = element.parentNode;
            }
            this.CacheItemElement(srcElement, kind, ASPx.EmptyObject);
            return null;
        },
        CacheItemElement: function (srcElement, kind, value) {
            if (srcElement && !srcElement[ASPx.CachedStatePrefix + kind])
                srcElement[ASPx.CachedStatePrefix + kind] = value;
        },
        DoSetFocusedState: function (element, fromElement) {
            var item = element[ASPx.FocusedItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                args.fromElement = fromElement;
                this.BeforeSetFocusedState.FireEvent(this, args);
                item.Apply(element);
                this.AfterSetFocusedState.FireEvent(this, args);
            }
        },
        DoClearFocusedState: function (element, toElement) {
            var item = element[ASPx.FocusedItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                args.toElement = toElement;
                this.BeforeClearFocusedState.FireEvent(this, args);
                item.Cancel(element);
                this.AfterClearFocusedState.FireEvent(this, args);
            }
        },
        DoSetHoverState: function (element, fromElement) {
            var item = element[ASPx.HoverItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                args.fromElement = fromElement;
                this.BeforeSetHoverState.FireEvent(this, args);
                item.Apply(element);
                this.AfterSetHoverState.FireEvent(this, args);
            }
        },
        DoClearHoverState: function (element, toElement) {
            var item = element[ASPx.HoverItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                args.toElement = toElement;
                this.BeforeClearHoverState.FireEvent(this, args);
                item.Cancel(element);
                this.AfterClearHoverState.FireEvent(this, args);
            }
        },
        DoSetPressedState: function (element) {
            var item = element[ASPx.PressedItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                this.BeforeSetPressedState.FireEvent(this, args);
                item.Apply(element);
                this.AfterSetPressedState.FireEvent(this, args);
            }
        },
        DoClearPressedState: function (element) {
            var item = element[ASPx.PressedItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                this.BeforeClearPressedState.FireEvent(this, args);
                item.Cancel(element);
                this.AfterClearPressedState.FireEvent(this, args);
            }
        },
        SetCurrentFocusedElement: function (element) {
            if (this.currentFocusedElement && !ASPx.IsValidElement(this.currentFocusedElement)) {
                this.currentFocusedElement = null;
                this.currentFocusedItemName = "";
            }
            if (this.currentFocusedElement != element) {
                var oldCurrentFocusedElement = this.currentFocusedElement;
                var item = (element != null) ? element[ASPx.FocusedItemKind] : null;
                var itemName = (item != null) ? item.name : "";
                if (this.currentFocusedItemName != itemName) {
                    if (this.currentHoverItemName != "")
                        this.SetCurrentHoverElement(null);
                    if (this.currentFocusedElement != null)
                        this.DoClearFocusedState(this.currentFocusedElement, element);
                    this.currentFocusedElement = element;
                    item = (element != null) ? element[ASPx.FocusedItemKind] : null;
                    this.currentFocusedItemName = (item != null) ? item.name : "";
                    if (this.currentFocusedElement != null)
                        this.DoSetFocusedState(this.currentFocusedElement, oldCurrentFocusedElement);
                }
            }
        },
        SetCurrentHoverElement: function (element) {
            if (this.currentHoverElement && !ASPx.IsValidElement(this.currentHoverElement)) {
                this.currentHoverElement = null;
                this.currentHoverItemName = "";
            }
            var item = (element != null) ? element[ASPx.HoverItemKind] : null;
            if (item && !item.enabled) {
                element = this.GetItemElement(element.parentNode, this.hoverItems, ASPx.HoverItemKind);
                item = (element != null) ? element[ASPx.HoverItemKind] : null;
            }
            if (this.currentHoverElement != element) {
                var oldCurrentHoverElement = this.currentHoverElement,
                    itemName = (item != null) ? item.name : "";
                if (this.currentHoverItemName != itemName || (item != null && item.needRefreshBetweenElements)) {
                    if (this.currentHoverElement != null)
                        this.DoClearHoverState(this.currentHoverElement, element);
                    item = (element != null) ? element[ASPx.HoverItemKind] : null;
                    if (item == null || item.enabled) {
                        this.currentHoverElement = element;
                        this.currentHoverItemName = (item != null) ? item.name : "";
                        if (this.currentHoverElement != null)
                            this.DoSetHoverState(this.currentHoverElement, oldCurrentHoverElement);
                    }
                }
            }
        },
        SetCurrentPressedElement: function (element) {
            if (this.currentPressedElement && !ASPx.IsValidElement(this.currentPressedElement)) {
                this.currentPressedElement = null;
                this.currentPressedItemName = "";
            }
            if (this.currentPressedElement != element) {
                if (this.currentPressedElement != null)
                    this.DoClearPressedState(this.currentPressedElement);
                var item = (element != null) ? element[ASPx.PressedItemKind] : null;
                if (item == null || item.enabled) {
                    this.currentPressedElement = element;
                    this.currentPressedItemName = (item != null) ? item.name : "";
                    if (this.currentPressedElement != null)
                        this.DoSetPressedState(this.currentPressedElement);
                }
            }
        },
        SetCurrentFocusedElementBySrcElement: function (srcElement) {
            var element = this.GetFocusedElement(srcElement);
            this.SetCurrentFocusedElement(element);
        },
        SetCurrentHoverElementBySrcElement: function (srcElement) {
            var element = this.GetHoverElement(srcElement);
            this.SetCurrentHoverElement(element);
        },
        SetCurrentPressedElementBySrcElement: function (srcElement) {
            var element = this.GetPressedElement(srcElement);
            this.SetCurrentPressedElement(element);
        },
        SetPressedElement: function (element) {
            this.SetCurrentHoverElement(null);
            this.SetCurrentPressedElementBySrcElement(element);
            this.savedCurrentPressedElement = this.currentPressedElement;
        },
        SelectElement: function (element) {
            var item = element[ASPx.SelectedItemKind];
            if (item)
                item.Apply(element);
        },
        SelectElementBySrcElement: function (srcElement) {
            var element = this.GetSelectedElement(srcElement);
            if (element != null) this.SelectElement(element);
        },
        DeselectElement: function (element) {
            var item = element[ASPx.SelectedItemKind];
            if (item)
                item.Cancel(element);
        },
        DeselectElementBySrcElement: function (srcElement) {
            var element = this.GetSelectedElement(srcElement);
            if (element != null) this.DeselectElement(element);
        },
        SetElementEnabled: function (element, enable) {
            if (enable)
                this.EnableElement(element);
            else
                this.DisableElement(element);
        },
        SetElementWithChildNodesEnabled: function (parentName, enabled) {
            var procFunct = (enabled ? this.EnableElement : this.DisableElement);
            var childItems = this.disabledScheme[parentName];
            if (childItems && childItems.length > 0)
                for (var i = 0; i < childItems.length; i++) {
                    procFunct.call(this, document.getElementById(childItems[i]));
                }
        },
        DisableElement: function (element) {
            var element = this.GetDisabledElement(element);
            if (element != null) {
                var item = element[ASPx.DisabledItemKind];
                if (item) {
                    var args = new ASPxClientStateEventArgs(item, element);
                    this.BeforeDisabled.FireEvent(this, args);
                    if (item.name == this.currentPressedItemName)
                        this.SetCurrentPressedElement(null);
                    if (item.name == this.currentHoverItemName)
                        this.SetCurrentHoverElement(null);
                    item.Apply(element);
                    this.SetMouseStateItemsEnabled(item.name, item.postfixes, false);
                    this.AfterDisabled.FireEvent(this, args);
                }
            }
        },
        EnableElement: function (element) {
            var element = this.GetDisabledElement(element);
            if (element != null) {
                var item = element[ASPx.DisabledItemKind];
                if (item) {
                    var args = new ASPxClientStateEventArgs(item, element);
                    this.BeforeEnabled.FireEvent(this, args);
                    item.Cancel(element);
                    this.SetMouseStateItemsEnabled(item.name, item.postfixes, true);
                    this.AfterEnabled.FireEvent(this, args);
                }
            }
        },
        SetMouseStateItemsEnabled: function (name, postfixes, enabled) {
            if (postfixes && postfixes.length > 0) {
                for (var i = 0; i < postfixes.length; i++) {
                    this.SetItemsEnabled(this.hoverItems, name + postfixes[i], enabled);
                    this.SetItemsEnabled(this.pressedItems, name + postfixes[i], enabled);
                    this.SetItemsEnabled(this.focusedItems, name + postfixes[i], enabled);
                }
            }
            else {
                this.SetItemsEnabled(this.hoverItems, name, enabled);
                this.SetItemsEnabled(this.pressedItems, name, enabled);
                this.SetItemsEnabled(this.focusedItems, name, enabled);
            }
        },
        SetItemsEnabled: function (items, name, enabled) {
            if (items[name])
                items[name].enabled = enabled;
        },
        OnFocusMove: function (evt) {
            var element = ASPx.Evt.GetEventSource(evt);
            aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
        },
        OnMouseMove: function (evt, checkElementChanged) {
            var srcElement = ASPx.Evt.GetEventSource(evt);
            if (checkElementChanged && srcElement == this.savedCurrentMouseMoveSrcElement) return;
            this.savedCurrentMouseMoveSrcElement = srcElement;
            if (ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(evt) && this.savedCurrentPressedElement != null)
                this.ClearSavedCurrentPressedElement();
            if (this.savedCurrentPressedElement == null)
                this.SetCurrentHoverElementBySrcElement(srcElement);
            else {
                var element = this.GetPressedElement(srcElement);
                if (element != this.currentPressedElement) {
                    if (element == this.savedCurrentPressedElement)
                        this.SetCurrentPressedElement(this.savedCurrentPressedElement);
                    else
                        this.SetCurrentPressedElement(null);
                }
            }
        },
        OnMouseDown: function (evt) {
            if (!ASPx.Evt.IsLeftButtonPressed(evt)) return;
            var srcElement = ASPx.Evt.GetEventSource(evt);
            this.OnMouseDownOnElement(srcElement);
        },
        OnMouseDownOnElement: function (element) {
            if (this.GetPressedElement(element) == null) return;
            this.SetPressedElement(element);
        },
        OnMouseUp: function (evt) {
            var srcElement = ASPx.Evt.GetEventSource(evt);
            this.OnMouseUpOnElement(srcElement);
        },
        OnMouseUpOnElement: function (element) {
            if (this.savedCurrentPressedElement == null) return;
            this.ClearSavedCurrentPressedElement();
            this.SetCurrentHoverElementBySrcElement(element);
        },
        OnMouseOver: function (evt) {
            var element = ASPx.Evt.GetEventSource(evt);
            if (element && element.tagName == "IFRAME")
                this.OnMouseMove(evt, true);
        },
        OnKeyDown: function (evt) {
            var element = this.GetFocusedElement(ASPx.Evt.GetEventSource(evt));
            if (element != null && element == this.currentFocusedElement) {
                var item = element[ASPx.FocusedItemKind];
                if (item) {
                    var args = new ASPxClientStateEventArgs(item, element);
                    args.htmlEvent = evt;
                    this.FocusedItemKeyDown.FireEvent(this, args);
                }
            }
        },
        OnKeyUpOnElement: function (evt) {
            if (this.savedCurrentPressedElement != null && ASPx.Evt.IsActionKeyPressed(evt))
                this.ClearSavedCurrentPressedElement();
        },
        OnSelectStart: function (evt) {
            if (this.savedCurrentPressedElement) {
                ASPx.Selection.Clear();
                return false;
            }
        },
        ClearSavedCurrentPressedElement: function () {
            this.savedCurrentPressedElement = null;
            this.SetCurrentPressedElement(null);
        },
        ClearCache: function (srcElement, kind) {
            if (srcElement[ASPx.CachedStatePrefix + kind])
                srcElement[ASPx.CachedStatePrefix + kind] = null;
        },
        ClearElementCache: function (srcElement) {
            this.ClearCache(srcElement, ASPx.FocusedItemKind);
            this.ClearCache(srcElement, ASPx.HoverItemKind);
            this.ClearCache(srcElement, ASPx.PressedItemKind);
            this.ClearCache(srcElement, ASPx.SelectedItemKind);
            this.ClearCache(srcElement, ASPx.DisabledItemKind);
        },
        LockForceRedrawAppearance: function () {
            this.forceRedrawAppearanceLockCount++;
        },
        UnlockForceRedrawAppearance: function () {
            this.forceRedrawAppearanceLockCount--;
        },
        IsForceRedrawAppearanceLocked: function () {
            return this.forceRedrawAppearanceLockCount > 0;
        }
    });
    var stateController = null;
    function aspxGetStateController() {
        if (stateController == null)
            stateController = new ASPxStateController();
        return stateController;
    }
    function aspxAddStateItems(method, namePrefix, classes, disableApplyingStyleToLink) {
        for (var i = 0; i < classes.length; i++) {
            for (var j = 0; j < classes[i][2].length; j++) {
                var name = namePrefix;
                if (classes[i][2][j])
                    name += "_" + classes[i][2][j];
                var postfixes = classes[i][3] || null;
                var imageObjs = (classes[i][4] && classes[i][4][j]) || null;
                var imagePostfixes = classes[i][5] || null;
                method.call(aspxGetStateController(), name, classes[i][0], classes[i][1], postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink, namePrefix);
            }
        }
    }
    ASPx.AddHoverItems = function (namePrefix, classes, disableApplyingStyleToLink) {
        aspxAddStateItems(aspxGetStateController().AddHoverItem, namePrefix, classes, disableApplyingStyleToLink);
    };
    ASPx.AddPressedItems = function (namePrefix, classes, disableApplyingStyleToLink) {
        aspxAddStateItems(aspxGetStateController().AddPressedItem, namePrefix, classes, disableApplyingStyleToLink);
    };
    ASPx.AddSelectedItems = function (namePrefix, classes, disableApplyingStyleToLink) {
        aspxAddStateItems(aspxGetStateController().AddSelectedItem, namePrefix, classes, disableApplyingStyleToLink);
    };
    ASPx.AddDisabledItems = function (namePrefix, classes, disableApplyingStyleToLink) {
        aspxAddStateItems(aspxGetStateController().AddDisabledItem, namePrefix, classes, disableApplyingStyleToLink);
    };
    function aspxRemoveStateItems(method, namePrefix, classes) {
        for (var i = 0; i < classes.length; i++) {
            for (var j = 0; j < classes[i][0].length; j++) {
                var name = namePrefix;
                if (classes[i][0][j])
                    name += "_" + classes[i][0][j];
                method.call(aspxGetStateController(), name, classes[i][1], namePrefix);
            }
        }
    }
    ASPx.RemoveHoverItems = function (namePrefix, classes) {
        aspxRemoveStateItems(aspxGetStateController().RemoveHoverItem, namePrefix, classes);
    };
    ASPx.RemovePressedItems = function (namePrefix, classes) {
        aspxRemoveStateItems(aspxGetStateController().RemovePressedItem, namePrefix, classes);
    };
    ASPx.RemoveSelectedItems = function (namePrefix, classes) {
        aspxRemoveStateItems(aspxGetStateController().RemoveSelectedItem, namePrefix, classes);
    };
    ASPx.RemoveDisabledItems = function (namePrefix, classes) {
        aspxRemoveStateItems(aspxGetStateController().RemoveDisabledItem, namePrefix, classes);
    };
    ASPx.AddAfterClearFocusedState = function (handler) {
        aspxGetStateController().AfterClearFocusedState.AddHandler(handler);
    };
    ASPx.AddAfterSetFocusedState = function (handler) {
        aspxGetStateController().AfterSetFocusedState.AddHandler(handler);
    };
    ASPx.AddAfterClearHoverState = function (handler) {
        aspxGetStateController().AfterClearHoverState.AddHandler(handler);
    };
    ASPx.AddAfterSetHoverState = function (handler) {
        aspxGetStateController().AfterSetHoverState.AddHandler(handler);
    };
    ASPx.AddAfterClearPressedState = function (handler) {
        aspxGetStateController().AfterClearPressedState.AddHandler(handler);
    };
    ASPx.AddAfterSetPressedState = function (handler) {
        aspxGetStateController().AfterSetPressedState.AddHandler(handler);
    };
    ASPx.AddAfterDisabled = function (handler) {
        aspxGetStateController().AfterDisabled.AddHandler(handler);
    };
    ASPx.AddAfterEnabled = function (handler) {
        aspxGetStateController().AfterEnabled.AddHandler(handler);
    };
    ASPx.AddBeforeClearFocusedState = function (handler) {
        aspxGetStateController().BeforeClearFocusedState.AddHandler(handler);
    };
    ASPx.AddBeforeSetFocusedState = function (handler) {
        aspxGetStateController().BeforeSetFocusedState.AddHandler(handler);
    };
    ASPx.AddBeforeClearHoverState = function (handler) {
        aspxGetStateController().BeforeClearHoverState.AddHandler(handler);
    };
    ASPx.AddBeforeSetHoverState = function (handler) {
        aspxGetStateController().BeforeSetHoverState.AddHandler(handler);
    };
    ASPx.AddBeforeClearPressedState = function (handler) {
        aspxGetStateController().BeforeClearPressedState.AddHandler(handler);
    };
    ASPx.AddBeforeSetPressedState = function (handler) {
        aspxGetStateController().BeforeSetPressedState.AddHandler(handler);
    };
    ASPx.AddBeforeDisabled = function (handler) {
        aspxGetStateController().BeforeDisabled.AddHandler(handler);
    };
    ASPx.AddBeforeEnabled = function (handler) {
        aspxGetStateController().BeforeEnabled.AddHandler(handler);
    };
    ASPx.AddFocusedItemKeyDown = function (handler) {
        aspxGetStateController().FocusedItemKeyDown.AddHandler(handler);
    };
    ASPx.SetHoverState = function (element) {
        aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
    };
    ASPx.ClearHoverState = function (evt) {
        aspxGetStateController().SetCurrentHoverElementBySrcElement(null);
    };
    ASPx.UpdateHoverState = function (evt) {
        aspxGetStateController().OnMouseMove(evt, false);
    };
    ASPx.SetFocusedState = function (element) {
        aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
    };
    ASPx.ClearFocusedState = function (evt) {
        aspxGetStateController().SetCurrentFocusedElementBySrcElement(null);
    };
    ASPx.UpdateFocusedState = function (evt) {
        aspxGetStateController().OnFocusMove(evt);
    };
    ASPx.AccessibilityMarkerClass = "dxalink";
    ASPx.AssignAccessibilityEventsToChildrenLinks = function (container, clearFocusedStateOnMouseOut) {
        var links = ASPx.GetNodesByPartialClassName(container, ASPx.AccessibilityMarkerClass);
        for (var i = 0; i < links.length; i++)
            ASPx.AssignAccessibilityEventsToLink(links[i], clearFocusedStateOnMouseOut);
    };
    ASPx.AssignAccessibilityEventsToLink = function (link, clearFocusedStateOnMouseOut) {
        if (!ASPx.ElementContainsCssClass(link, ASPx.AccessibilityMarkerClass))
            return;
        ASPx.AssignAccessibilityEventsToLinkCore(link, clearFocusedStateOnMouseOut);
    };
    ASPx.AssignAccessibilityEventsToLinkCore = function (link, clearFocusedStateOnMouseOut) {
        ASPx.Evt.AttachEventToElement(link, "focus", function (e) { ASPx.UpdateFocusedState(e); });
        var clearFocusedStateHandler = function (e) { ASPx.ClearFocusedState(e); };
        ASPx.Evt.AttachEventToElement(link, "blur", clearFocusedStateHandler);
        if (clearFocusedStateOnMouseOut)
            ASPx.Evt.AttachEventToElement(link, "mouseout", clearFocusedStateHandler);
    };
    ASPx.Evt.AttachEventToDocument("mousemove", function (evt) {
        if (ASPx.classesScriptParsed && ASPx.StateItemsExist)
            aspxGetStateController().OnMouseMove(evt, true);
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function (evt) {
        if (ASPx.classesScriptParsed && ASPx.StateItemsExist)
            aspxGetStateController().OnMouseDown(evt);
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function (evt) {
        if (ASPx.classesScriptParsed && ASPx.StateItemsExist)
            aspxGetStateController().OnMouseUp(evt);
    });
    ASPx.Evt.AttachEventToDocument("mouseover", function (evt) {
        if (ASPx.classesScriptParsed && ASPx.StateItemsExist)
            aspxGetStateController().OnMouseOver(evt);
    });
    ASPx.Evt.AttachEventToDocument("keydown", function (evt) {
        if (ASPx.classesScriptParsed && ASPx.StateItemsExist)
            aspxGetStateController().OnKeyDown(evt);
    });
    ASPx.Evt.AttachEventToDocument("selectstart", function (evt) {
        if (ASPx.classesScriptParsed && ASPx.StateItemsExist)
            return aspxGetStateController().OnSelectStart(evt);
    });
    ASPx.GetStateController = aspxGetStateController;
})();
(function () {
    var PopupUtils = {
        NotSetAlignIndicator: "NotSet",
        InnerAlignIndicator: "Sides",
        OutsideLeftAlignIndicator: "OutsideLeft",
        LeftSidesAlignIndicator: "LeftSides",
        RightSidesAlignIndicator: "RightSides",
        OutsideRightAlignIndicator: "OutsideRight",
        CenterAlignIndicator: "Center",
        AboveAlignIndicator: "Above",
        TopSidesAlignIndicator: "TopSides",
        MiddleAlignIndicator: "Middle",
        BottomSidesAlignIndicator: "BottomSides",
        BelowAlignIndicator: "Below",
        WindowCenterAlignIndicator: "WindowCenter",
        LeftAlignIndicator: "Left",
        RightAlignIndicator: "Right",
        TopAlignIndicator: "Top",
        BottomAlignIndicator: "Bottom",
        WindowLeftAlignIndicator: "WindowLeft",
        WindowRightAlignIndicator: "WindowRight",
        WindowTopAlignIndicator: "WindowTop",
        WindowBottomAlignIndicator: "WindowBottom",
        IsAlignNotSet: function (align) {
            return align == PopupUtils.NotSetAlignIndicator;
        },
        IsInnerAlign: function (align) {
            return align.indexOf(PopupUtils.InnerAlignIndicator) != -1;
        },
        IsRightSidesAlign: function (align) {
            return align == PopupUtils.RightSidesAlignIndicator;
        },
        IsOutsideRightAlign: function (align) {
            return align == PopupUtils.OutsideRightAlignIndicator;
        },
        IsCenterAlign: function (align) {
            return align == PopupUtils.CenterAlignIndicator;
        },
        FindPopupElementById: function (id) {
            if (id == "")
                return null;
            var popupElement = ASPx.GetElementById(id);
            if (!ASPx.IsExistsElement(popupElement)) {
                var idParts = id.split("_");
                var uniqueId = idParts.join("$");
                popupElement = ASPx.GetElementById(uniqueId);
            }
            return popupElement;
        },
        FindEventSourceParentByTestFunc: function (evt, testFunc) {
            return ASPx.GetParent(ASPx.Evt.GetEventSource(evt), testFunc);
        },
        PreventContextMenu: function (evt) {
            if (evt.stopPropagation)
                evt.stopPropagation();
            if (evt.preventDefault)
                evt.preventDefault();
            if (ASPx.Browser.WebKitFamily)
                evt.returnValue = false;
        },
        GetDocumentClientWidthForPopup: function () {
            return ASPx.Browser.WebKitTouchUI ? ASPx.GetDocumentWidth() : ASPx.GetDocumentClientWidth();
        },
        GetDocumentClientHeightForPopup: function () {
            return ASPx.Browser.WebKitTouchUI ? ASPx.GetDocumentHeight() : ASPx.GetDocumentClientHeight();
        },
        AdjustPositionToClientScreen: function (element, pos, rtl, isX) {
            var min = isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop(),
                viewPortWidth = ASPx.Browser.WebKitTouchUI ? window.innerWidth : ASPx.GetDocumentClientWidth(),
                max = min + (isX ? viewPortWidth : ASPx.GetDocumentClientHeight());
            max -= (isX ? element.offsetWidth : element.offsetHeight);
            if (rtl) {
                if (pos < min) pos = min;
                if (pos > max) pos = max;
            } else {
                if (pos > max) pos = max;
                if (pos < min) pos = min;
            }
            return pos;
        },
        GetPopupAbsoluteX: function (element, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn) {
            return PopupUtils.getPopupAbsolutePos(element, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn, false, true);
        },
        GetPopupAbsoluteY: function (element, popupElement, vAlign, vOffset, y, top, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve) {
            return PopupUtils.getPopupAbsolutePos(element, popupElement, vAlign, vOffset, y, top, false, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, false);
        },
        getPopupAbsolutePos: function (element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, isHorizontal) {
            var calculator = getPositionCalculator();
            calculator.applyParams(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, isHorizontal);
            var position = calculator.getPopupAbsolutePos();
            calculator.disposeState();
            return position;
        },
        RemoveFocus: function (parent) {
            var div = document.createElement('div');
            div.tabIndex = "-1";
            PopupUtils.ConcealDivElement(div);
            parent.appendChild(div);
            if (ASPx.IsFocusable(div))
                div.focus();
            ASPx.RemoveElement(div);
        },
        ConcealDivElement: function (div) {
            div.style.position = "absolute";
            div.style.left = 0;
            div.style.top = 0;
            if (ASPx.Browser.WebKitFamily) {
                div.style.opacity = 0;
                div.style.width = 1;
                div.style.height = 1;
            } else {
                div.style.border = 0;
                div.style.width = 0;
                div.style.height = 0;
            }
        },
        InitAnimationDiv: function (element, x, y, onAnimStopCallString, skipSizeInit) {
            PopupUtils.InitAnimationDivCore(element);
            element.popuping = true;
            element.onAnimStopCallString = onAnimStopCallString;
            if (!skipSizeInit)
                ASPx.SetStyles(element, { width: element.offsetWidth, height: element.offsetHeight });
            ASPx.SetStyles(element, { left: x, top: y });
        },
        InitAnimationDivCore: function (element) {
            ASPx.SetStyles(element, {
                overflow: "hidden",
                position: "absolute"
            });
        },
        StartSlideAnimation: function (animationDivElement, element, iframeElement, duration, preventChangingWidth, preventChangingHeight) {
            if (iframeElement) {
                var endLeft = ASPx.PxToInt(iframeElement.style.left);
                var endTop = ASPx.PxToInt(iframeElement.style.top);
                var startLeft = ASPx.PxToInt(element.style.left) < 0 ? endLeft : animationDivElement.offsetLeft + animationDivElement.offsetWidth;
                var startTop = ASPx.PxToInt(element.style.top) < 0 ? endTop : animationDivElement.offsetTop + animationDivElement.offsetHeight;
                var properties = {
                    left: { from: startLeft, to: endLeft, unit: "px" },
                    top: { from: startTop, to: endTop, unit: "px" }
                };
                if (!preventChangingWidth)
                    properties.width = { to: element.offsetWidth, unit: "px" };
                if (!preventChangingHeight)
                    properties.height = { to: element.offsetHeight, unit: "px" };
                ASPx.AnimationHelper.createMultipleAnimationTransition(iframeElement, {
                    duration: duration
                }).Start(properties);
            }
            ASPx.AnimationHelper.createMultipleAnimationTransition(element, {
                duration: duration,
                onComplete: function () { PopupUtils.AnimationFinished(animationDivElement, element); }
            }).Start({
                left: { to: 0, unit: "px" },
                top: { to: 0, unit: "px" }
            });
        },
        AnimationFinished: function (animationDivElement, element) {
            if (PopupUtils.StopAnimation(animationDivElement, element) && ASPx.IsExists(animationDivElement.onAnimStopCallString) &&
                animationDivElement.onAnimStopCallString !== "") {
                window.setTimeout(animationDivElement.onAnimStopCallString, 0);
            }
        },
        StopAnimation: function (animationDivElement, element) {
            if (animationDivElement.popuping) {
                ASPx.AnimationHelper.cancelAnimation(element);
                animationDivElement.popuping = false;
                animationDivElement.style.overflow = "visible";
                return true;
            }
            return false;
        },
        GetAnimationHorizontalDirection: function (popupPosition, horizontalAlign, verticalAlign, rtl) {
            if (PopupUtils.IsInnerAlign(horizontalAlign)
                && !PopupUtils.IsInnerAlign(verticalAlign)
                && !PopupUtils.IsAlignNotSet(verticalAlign))
                return 0;
            var toTheLeft = (horizontalAlign == PopupUtils.OutsideLeftAlignIndicator || horizontalAlign == PopupUtils.RightSidesAlignIndicator || (horizontalAlign == PopupUtils.NotSetAlignIndicator && rtl)) ^ popupPosition.isInverted;
            return toTheLeft ? 1 : -1;
        },
        GetAnimationVerticalDirection: function (popupPosition, horizontalAlign, verticalAlign) {
            if (PopupUtils.IsInnerAlign(verticalAlign)
                && !PopupUtils.IsInnerAlign(horizontalAlign)
                && !PopupUtils.IsAlignNotSet(horizontalAlign))
                return 0;
            var toTheTop = (verticalAlign == PopupUtils.AboveAlignIndicator || verticalAlign == PopupUtils.BottomSidesAlignIndicator) ^ popupPosition.isInverted;
            return toTheTop ? 1 : -1;
        },
        IsVerticalScrollExists: function () {
            var scrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowY !== "hidden" && ASPx.GetCurrentStyle(document.documentElement).overflowY !== "hidden";
            return (scrollIsNotHidden && ASPx.GetDocumentHeight() > ASPx.GetDocumentClientHeight());
        },
        CoordinatesInDocumentRect: function (x, y) {
            var docScrollLeft = ASPx.GetDocumentScrollLeft();
            var docScrollTop = ASPx.GetDocumentScrollTop();
            return (x > docScrollLeft && y > docScrollTop &&
                x < ASPx.GetDocumentClientWidth() + docScrollLeft &&
                y < ASPx.GetDocumentClientHeight() + docScrollTop);
        },
        GetElementZIndexArray: function (element) {
            var currentElement = element;
            var zIndexesArray = [0];
            while (currentElement && currentElement.tagName != "BODY") {
                if (currentElement.style) {
                    if (typeof (currentElement.style.zIndex) != "undefined" && currentElement.style.zIndex != "")
                        zIndexesArray.unshift(currentElement.style.zIndex);
                }
                currentElement = currentElement.parentNode;
            }
            return zIndexesArray;
        },
        IsHigher: function (higherZIndexArrat, zIndexArray) {
            if (zIndexArray == null) return true;
            var count = (higherZIndexArrat.length >= zIndexArray.length) ? higherZIndexArrat.length : zIndexArray.length;
            for (var i = 0; i < count; i++)
                if (typeof (higherZIndexArrat[i]) != "undefined" && typeof (zIndexArray[i]) != "undefined") {
                    var higherZIndexArrayCurrentElement = parseInt(higherZIndexArrat[i].toString());
                    var zIndexArrayCurrentElement = parseInt(zIndexArray[i].toString());
                    if (higherZIndexArrayCurrentElement != zIndexArrayCurrentElement)
                        return higherZIndexArrayCurrentElement > zIndexArrayCurrentElement;
                } else return typeof (zIndexArray[i]) == "undefined";
            return true;
        },
        TestIsPopupElement: function (element) {
            return !!element.DXPopupElementControl;
        },
        adjustViewportScrollWrapper: function (wrapper, wrapperScroll, windowElement) {
            var document = wrapper.ownerDocument;
            var window = document.defaultView || document.parentWindow;
            var isWindowElementDisplayed = ASPx.IsElementDisplayed(windowElement);
            if (!isWindowElementDisplayed) {
                wrapper.style.cssText = "";
                wrapperScroll.style.cssText = "";
                return;
            }
            var windowRect = windowElement.getBoundingClientRect();
            var yAxis = this.calculateViewPortScrollDataByAxis(wrapper.style.top, windowRect.top, windowElement.offsetHeight, window.innerHeight, wrapper.scrollTop);
            var xAxis = this.calculateViewPortScrollDataByAxis(wrapper.style.left, windowRect.left, windowElement.offsetWidth, window.innerWidth, wrapper.scrollLeft);
            this.prepareViewPortScrollData(xAxis, yAxis);
            ASPx.SetStyles(windowElement, {
                top: yAxis.windowOffset,
                left: xAxis.windowOffset
            });
            ASPx.SetStyles(wrapper, {
                width: xAxis.wrapperSize,
                height: yAxis.wrapperSize,
                position: "absolute",
                overflow: ASPx.Browser.MobileUI ? "scroll" : "auto",
                zIndex: windowElement.style.zIndex
            });
            ASPx.SetAbsoluteX(wrapper, ASPx.GetDocumentScrollLeft());
            ASPx.SetAbsoluteY(wrapper, ASPx.GetDocumentScrollTop());
            ASPx.SetStyles(wrapperScroll, {
                width: xAxis.wrapperScrollSize,
                height: yAxis.wrapperScrollSize,
                position: "absolute",
                overflow: "hidden"
            });
            wrapper.scrollLeft = xAxis.scrollSize;
            wrapper.scrollTop = yAxis.scrollSize;
        },
        calculateViewPortScrollDataByAxis: function (wrapperOffsetStyle, windowOffset, windowSize, viewPortSize, scrollSize) {
            var wrapperScrollSize = Math.max(viewPortSize + Math.abs(Math.min(0, windowOffset)), windowSize + Math.abs(windowOffset));
            var isWindowOffsetNegative = windowOffset < 0;
            return {
                windowOffset: isWindowOffsetNegative ? 0 : windowOffset,
                wrapperSize: viewPortSize,
                wrapperScrollSize: wrapperScrollSize,
                scrollSize: isWindowOffsetNegative ? scrollSize + Math.abs(windowOffset) : 0,
                hasScroll: wrapperScrollSize > viewPortSize
            };
        },
        prepareViewPortScrollData: function (xAxis, yAxis) {
            var scrollBarSize = ASPx.GetVerticalScrollBarWidth();
            if (yAxis.hasScroll && !xAxis.hasScroll) {
                xAxis.wrapperScrollSize = Math.min(xAxis.wrapperSize - scrollBarSize, xAxis.wrapperScrollSize);
            } else if (xAxis.hasScroll && !yAxis.hasScroll) {
                yAxis.wrapperScrollSize = Math.min(yAxis.wrapperSize - scrollBarSize, yAxis.wrapperScrollSize);
            } else if (yAxis.hasScroll && xAxis.hasScroll) {
                yAxis.wrapperScrollSize -= scrollBarSize;
                xAxis.wrapperScrollSize -= scrollBarSize;
            }
        }
    };
    PopupUtils.OverControl = {
        GetPopupElementByEvt: function (evt) {
            return PopupUtils.FindEventSourceParentByTestFunc(evt, PopupUtils.TestIsPopupElement);
        },
        OnMouseEvent: function (evt, mouseOver) {
            var popupElement = PopupUtils.OverControl.GetPopupElementByEvt(evt);
            if (mouseOver)
                popupElement.DXPopupElementControl.OnPopupElementMouseOver(evt, popupElement);
            else
                popupElement.DXPopupElementControl.OnPopupElementMouseOut(evt, popupElement);
        },
        OnMouseOut: function (evt) {
            PopupUtils.OverControl.OnMouseEvent(evt, false);
        },
        OnMouseOver: function (evt) {
            PopupUtils.OverControl.OnMouseEvent(evt, true);
        }
    };
    PopupUtils.BodyScrollHelper = (function () {
        var windowScrollLock = {},
            windowScroll = {},
            documentElementPadding = 0;
        function lockWindowScroll(windowId) {
            windowScrollLock[windowId] = true;
        }
        function unlockWindowScroll(windowId) {
            delete windowScrollLock[windowId];
        }
        function isAnyWindowScrollLocked() {
            for (var key in windowScrollLock)
                if (windowScrollLock.hasOwnProperty(key) && windowScrollLock[key] === true)
                    return true;
            return false;
        }
        function replaceVerticalScrollByMargin() {
            var currentBodyStyle = ASPx.GetCurrentStyle(document.body),
                marginWidth = ASPx.GetVerticalScrollBarWidth() + ASPx.PxToInt(currentBodyStyle.paddingRight);
            ASPx.Attr.ChangeStyleAttribute(document.body, "padding-right", marginWidth + "px");
        }
        function fixScrollsBug() {
            var scrollTop = document.body.scrollTop;
            var scrollLeft = document.body.scrollLeft;
            document.body.scrollTop++;
            document.body.scrollTop--;
            document.body.scrollLeft++;
            document.body.scrollLeft--;
            document.body.scrollLeft = scrollLeft;
            document.body.scrollTop = scrollTop;
        }
        return {
            HideBodyScroll: function (windowId) {
                if (isAnyWindowScrollLocked()) {
                    lockWindowScroll(windowId);
                    return;
                }
                lockWindowScroll(windowId);
                if (PopupUtils.IsVerticalScrollExists())
                    replaceVerticalScrollByMargin();
                if (ASPx.Browser.IE) {
                    ASPx.Attr.ChangeAttribute(document.body, "scroll", "no");
                    ASPx.Attr.ChangeStyleAttribute(document.documentElement, "overflow", "hidden");
                } else if (ASPx.Browser.Firefox && ASPx.Browser.Version < 3) {
                    var scrollTop = document.documentElement.scrollTop;
                    ASPx.Attr.ChangeStyleAttribute(document.body, "overflow", "hidden");
                    document.documentElement.scrollTop = scrollTop;
                } else if (ASPx.Browser.WebKitTouchUI) {
                    windowScroll[windowId] = {
                        x: window.scrollX,
                        y: window.scrollY
                    };
                    ASPx.Attr.ChangeStyleAttribute(document.documentElement, "overflow", "hidden");
                    ASPx.Attr.ChangeStyleAttribute(document.body, "overflow", "hidden");
                    ASPx.Attr.ChangeStyleAttribute(document.body, "position", "relative");
                    ASPx.Attr.ChangeStyleAttribute(document.body, "height", "100%");
                    ASPx.Attr.ChangeStyleAttribute(document.body, "margin", "0");
                    var docElementStyle = document.documentElement.style;
                    documentElementPadding = ASPx.Attr.GetAttribute(docElementStyle, "padding");
                    ASPx.Attr.SetAttribute(docElementStyle, "padding", 0);
                    ASPx.Attr.ChangeStyleAttribute(document.documentElement, "height", "100%");
                } else {
                    ASPx.Attr.ChangeStyleAttribute(document.documentElement, "overflow", "hidden");
                    var documentHeight = ASPx.GetDocumentHeight();
                    var documentWidth = ASPx.GetDocumentWidth();
                    if (window.pageYOffset > 0 && ASPx.PxToInt(window.getComputedStyle(document.body, null)) != documentHeight)
                        ASPx.Attr.ChangeStyleAttribute(document.body, "height", documentHeight + "px");
                    if (window.pageXOffset > 0 && ASPx.PxToInt(window.getComputedStyle(document.body, null)) != documentWidth)
                        ASPx.Attr.ChangeStyleAttribute(document.body, "width", documentWidth + "px");
                    if (ASPx.Browser.Chrome) {
                        fixScrollsBug();
                    }
                }
            },
            RestoreBodyScroll: function (windowId) {
                unlockWindowScroll(windowId);
                if (isAnyWindowScrollLocked())
                    return;
                if (ASPx.Browser.IE) {
                    ASPx.Attr.RestoreAttribute(document.body, "scroll");
                    ASPx.Attr.RestoreStyleAttribute(document.documentElement, "overflow");
                } else if (ASPx.Browser.WebKitTouchUI) {
                    ASPx.Attr.RestoreStyleAttribute(document.body, "position");
                    ASPx.Attr.RestoreStyleAttribute(document.body, "height");
                    ASPx.Attr.RestoreStyleAttribute(document.body, "margin");
                    ASPx.Attr.RestoreStyleAttribute(document.documentElement, "overflow");
                    ASPx.Attr.SetAttribute(document.documentElement.style, "padding", documentElementPadding);
                    ASPx.Attr.RestoreStyleAttribute(document.body, "overflow");
                    ASPx.Attr.RestoreStyleAttribute(document.documentElement, "height");
                    windowScroll = windowScroll[windowId];
                    window.scrollTo(windowScroll.x, windowScroll.y);
                } else
                    ASPx.Attr.RestoreStyleAttribute(document.documentElement, "overflow");
                ASPx.Attr.RestoreStyleAttribute(document.body, "padding-right");
                ASPx.Attr.RestoreStyleAttribute(document.body, "height");
                ASPx.Attr.RestoreStyleAttribute(document.body, "width");
                if (ASPx.Browser.WebKitFamily) {
                    fixScrollsBug();
                }
            }
        };
    })();
    var PositionAlignConsts = {
        NOT_SET: 0,
        OUTSIDE_START: 1,
        NEAR_BOUND_START: 2,
        INNER_START: 3,
        CENTER: 4,
        INNER_END: 5,
        NEAR_BOUND_END: 6,
        OUTSIDE_END: 7,
        WINDOW_CENTER: 8,
        WINDOW_START: 9,
        WINDOW_END: 10
    };
    var AlignIndicatorTable = {};
    var PositionCalculator = ASPx.CreateClass(null, {
        constructor: function () {
            this.element = null;
            this.popupElement = null;
            this.align = 0;
            this.offset = 0;
            this.startPos = 0;
            this.startPosInit = 0;
            this.rtl = false;
            this.isPopupFullCorrectionOn = false;
            this.isHorizontal = true;
            this.size = 0;
            this.bodySize = 0;
            this.actualBodySize = 0;
            this.elementStartPos = 0;
            this.scrollStartPos = 0;
            this.isInverted = false;
            this.popupElementSize = 0;
            this.boundStartPos = 0;
            this.boundEndPos = 0;
            this.innerBoundStartPos = 0;
            this.innerBoundEndPos = 0;
            this.isMoreFreeSpaceLeft = false;
            this.nearBoundOverlapRate = 0.25;
            this.functionsTable = {};
            this.initializeFunctionsTable();
        },
        applyParams: function (element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, isHorizontal) {
            this.isHorizontal = isHorizontal;
            this.element = element;
            this.popupElement = popupElement;
            this.align = this.getAlignValueFromIndicator(align);
            this.offset = offset;
            this.startPos = startPos;
            this.startPosInit = startPosInit;
            this.rtl = rtl;
            this.isPopupFullCorrectionOn = isPopupFullCorrectionOn;
            this.ignoreAlignWithoutScrollReserve = ignoreAlignWithoutScrollReserve;
            this.calculateParams();
        },
        disposeState: function () {
            this.element = null;
            this.popupElement = null;
        },
        getPopupAbsolutePos: function () {
            if (this.isWindowAlign()) {
                var showAtPos = this.startPos != ASPx.InvalidPosition && !this.popupElement;
                if (showAtPos)
                    this.align = PositionAlignConsts.NOT_SET;
                else
                    return this.getWindowAlignPos();
            }
            if (this.popupElement)
                this.calculatePopupElement();
            else
                this.align = PositionAlignConsts.NOT_SET;
            return this.getPopupAbsolutePosCore();
        },
        initializeFunctionsTable: function () {
            var table = this.functionsTable;
            table[PositionAlignConsts.NOT_SET] = this.calculateNotSet;
            table[PositionAlignConsts.OUTSIDE_START] = this.calculateOutsideStart;
            table[PositionAlignConsts.INNER_START] = this.calculateInnerStart;
            table[PositionAlignConsts.CENTER] = this.calculateCenter;
            table[PositionAlignConsts.INNER_END] = this.calculateInnerEnd;
            table[PositionAlignConsts.OUTSIDE_END] = this.calculateOutsideEnd;
            table[PositionAlignConsts.NEAR_BOUND_START] = this.calculateNearBoundStart;
            table[PositionAlignConsts.NEAR_BOUND_END] = this.calculateNearBoundEnd;
            table[PositionAlignConsts.WINDOW_CENTER] = this.calculateWindowCenter;
            table[PositionAlignConsts.WINDOW_START] = this.calculateWindowStart;
            table[PositionAlignConsts.WINDOW_END] = this.calculateWindowEnd;
        },
        calculateParams: function () {
            this.size = this.getElementSize();
            if (this.isHorizontal) {
                this.bodySize = ASPx.GetDocumentClientWidth();
                this.elementStartPos = ASPx.GetAbsoluteX(this.popupElement);
                this.scrollStartPos = ASPx.GetDocumentScrollLeft();
            }
            else {
                this.bodySize = ASPx.GetDocumentClientHeight();
                this.elementStartPos = ASPx.GetAbsoluteY(this.popupElement);
                this.scrollStartPos = ASPx.GetDocumentScrollTop();
            }
        },
        isWindowAlign: function () {
            return this.align == PositionAlignConsts.WINDOW_CENTER || this.align == PositionAlignConsts.WINDOW_START ||
                this.align == PositionAlignConsts.WINDOW_END;
        },
        getWindowAlignPos: function () {
            this.actualBodySize = ASPx.Browser.WebKitTouchUI ? this.getWindowInnerSize() : this.bodySize;
            return this.getPopupAbsolutePosCore();
        },
        getPopupAbsolutePosCore: function () {
            var calculationFunc = this.functionsTable[this.align];
            calculationFunc.call(this);
            return new ASPx.PopupPosition(this.startPos, this.isInverted);
        },
        calculateWindowCenter: function () {
            this.startPos = Math.max(Math.ceil(this.actualBodySize / 2 - this.size / 2), 0) + this.scrollStartPos + this.offset;
        },
        calculateWindowStart: function () {
            this.startPos = this.scrollStartPos + this.offset;
        },
        calculateWindowEnd: function () {
            this.startPos = this.scrollStartPos + this.actualBodySize - this.size + this.offset;
        },
        calculatePopupElement: function () {
            this.popupElementSize = this.getPopupElementSize();
            this.boundStartPos = this.elementStartPos - this.size;
            this.boundEndPos = this.elementStartPos + this.popupElementSize;
            this.innerBoundStartPos = this.elementStartPos;
            this.innerBoundEndPos = this.elementStartPos + this.popupElementSize - this.size;
            var hasLeftScrollReserve = this.boundStartPos >= 0;
            this.isMoreFreeSpaceLeft = (this.bodySize - (this.boundEndPos + this.size) < this.boundStartPos - 2 * this.scrollStartPos) && (!this.ignoreAlignWithoutScrollReserve || hasLeftScrollReserve);
        },
        calculateOutsideStart: function () {
            this.isInverted = this.isPopupFullCorrectionOn && (!(this.boundStartPos - this.scrollStartPos > 0 || this.isMoreFreeSpaceLeft));
            if (this.isInverted)
                this.startPos = this.boundEndPos - this.offset;
            else
                this.startPos = this.boundStartPos + this.offset;
        },
        calculateInnerStart: function () {
            this.startPos = this.innerBoundStartPos + this.offset;
            if (this.isPopupFullCorrectionOn)
                this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
        },
        calculateCenter: function () {
            this.startPos = this.elementStartPos + Math.round((this.popupElementSize - this.size) / 2) + this.offset;
        },
        calculateInnerEnd: function () {
            this.startPos = this.innerBoundEndPos + this.offset;
            if (this.isPopupFullCorrectionOn)
                this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
        },
        calculateOutsideEnd: function () {
            this.isInverted = this.isPopupFullCorrectionOn && (!(this.boundEndPos + this.size < this.bodySize + this.scrollStartPos || !this.isMoreFreeSpaceLeft));
            if (this.isInverted)
                this.startPos = this.boundStartPos - this.offset;
            else
                this.startPos = this.boundEndPos + this.offset;
        },
        calculateNotSet: function () {
            if (this.rtl)
                this.calculateNotSetRightToLeft();
            else
                this.calculateNotSetLeftToRight();
        },
        calculateNotSetLeftToRight: function () {
            if (!ASPx.IsValidPosition(this.startPos)) {
                if (this.popupElement)
                    this.startPos = this.elementStartPos;
                else if (this.offset)
                    this.startPos = 0;
                else
                    this.startPos = this.startPosInit;
            }
            this.isInverted = this.isPopupFullCorrectionOn && (this.startPos - this.scrollStartPos + this.size > this.bodySize && this.startPos - this.scrollStartPos > this.bodySize / 2);
            if (this.isInverted)
                this.startPos = this.startPos - this.size - this.offset;
            else
                this.startPos = this.startPos + this.offset;
        },
        calculateNotSetRightToLeft: function () {
            if (!ASPx.IsValidPosition(this.startPos)) {
                if (this.popupElement)
                    this.startPos = this.innerBoundEndPos;
                else if (this.offset)
                    this.startPos = 0;
                else
                    this.startPos = this.startPosInit;
            }
            else
                this.startPos -= this.size;
            this.isInverted = this.isPopupFullCorrectionOn && (this.startPos < this.scrollStartPos && this.startPos - this.scrollStartPos < this.bodySize / 2);
            if (this.isInverted)
                this.startPos = this.startPos + this.size + this.offset;
            else
                this.startPos = this.startPos - this.offset;
        },
        calculateNearBoundStart: function () {
            this.startPos = this.boundStartPos + this.offset + this.size * this.nearBoundOverlapRate;
            if (this.isPopupFullCorrectionOn)
                this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
        },
        calculateNearBoundEnd: function () {
            this.startPos = this.boundEndPos + this.offset - this.size * this.nearBoundOverlapRate;
            if (this.isPopupFullCorrectionOn)
                this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
        },
        getAlignValueFromIndicator: function (alignIndicator) {
            var alignValue = AlignIndicatorTable[alignIndicator];
            if (alignValue === undefined)
                throw "Incorrect align indicator.";
            return alignValue;
        },
        getElementSize: function () {
            return this.getCustomElementSize(this.element);
        },
        getPopupElementSize: function () {
            return this.getCustomElementSize(this.popupElement);
        },
        getCustomElementSize: function (customElement) {
            return this.isHorizontal ? customElement.offsetWidth : customElement.offsetHeight;
        },
        getWindowInnerSize: function () {
            return this.isHorizontal ? window.innerWidth : window.innerHeight;
        }
    });
    var positionCalculator = null;
    function getPositionCalculator() {
        if (positionCalculator == null)
            positionCalculator = new PositionCalculator();
        return positionCalculator;
    }
    function initializeAlignIndicatorTable() {
        AlignIndicatorTable[PopupUtils.NotSetAlignIndicator] = PositionAlignConsts.NOT_SET;
        AlignIndicatorTable[PopupUtils.OutsideLeftAlignIndicator] = PositionAlignConsts.OUTSIDE_START;
        AlignIndicatorTable[PopupUtils.AboveAlignIndicator] = PositionAlignConsts.OUTSIDE_START;
        AlignIndicatorTable[PopupUtils.LeftAlignIndicator] = PositionAlignConsts.NEAR_BOUND_START;
        AlignIndicatorTable[PopupUtils.TopAlignIndicator] = PositionAlignConsts.NEAR_BOUND_START;
        AlignIndicatorTable[PopupUtils.LeftSidesAlignIndicator] = PositionAlignConsts.INNER_START;
        AlignIndicatorTable[PopupUtils.TopSidesAlignIndicator] = PositionAlignConsts.INNER_START;
        AlignIndicatorTable[PopupUtils.CenterAlignIndicator] = PositionAlignConsts.CENTER;
        AlignIndicatorTable[PopupUtils.MiddleAlignIndicator] = PositionAlignConsts.CENTER;
        AlignIndicatorTable[PopupUtils.RightSidesAlignIndicator] = PositionAlignConsts.INNER_END;
        AlignIndicatorTable[PopupUtils.BottomSidesAlignIndicator] = PositionAlignConsts.INNER_END;
        AlignIndicatorTable[PopupUtils.RightAlignIndicator] = PositionAlignConsts.NEAR_BOUND_END;
        AlignIndicatorTable[PopupUtils.BottomAlignIndicator] = PositionAlignConsts.NEAR_BOUND_END;
        AlignIndicatorTable[PopupUtils.OutsideRightAlignIndicator] = PositionAlignConsts.OUTSIDE_END;
        AlignIndicatorTable[PopupUtils.BelowAlignIndicator] = PositionAlignConsts.OUTSIDE_END;
        AlignIndicatorTable[PopupUtils.WindowCenterAlignIndicator] = PositionAlignConsts.WINDOW_CENTER;
        AlignIndicatorTable[PopupUtils.WindowLeftAlignIndicator] = PositionAlignConsts.WINDOW_START;
        AlignIndicatorTable[PopupUtils.WindowTopAlignIndicator] = PositionAlignConsts.WINDOW_START;
        AlignIndicatorTable[PopupUtils.WindowRightAlignIndicator] = PositionAlignConsts.WINDOW_END;
        AlignIndicatorTable[PopupUtils.WindowBottomAlignIndicator] = PositionAlignConsts.WINDOW_END;
    }
    initializeAlignIndicatorTable();
    ASPx.PopupPosition = function (position, isInverted) {
        this.position = position;
        this.isInverted = isInverted;
    };
    ASPx.PopupSize = function (width, height) {
        this.width = width;
        this.height = height;
    };
    ASPx.PopupUtils = PopupUtils;
})();
(function () {
    ASPx.PCWIdSuffix = "_PW";
    var popupControlZIndex = 11998;
    var defaultZIndexFromServer = "10000";
    function PCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset) {
        this.horizontalDirection = horizontalDirection;
        this.verticalDirection = verticalDirection;
        this.horizontalOffset = horizontalOffset;
        this.verticalOffset = verticalOffset;
        this.course = verticalDirection + horizontalDirection;
    }
    var PopupControlCssClasses = {};
    PopupControlCssClasses.Prefix = "dxpc-";
    PopupControlCssClasses.SizeGripLiteCssClassName = PopupControlCssClasses.Prefix + "sizeGrip";
    PopupControlCssClasses.LinkCssClassName = PopupControlCssClasses.Prefix + "link";
    PopupControlCssClasses.ShadowLiteCssClassName = PopupControlCssClasses.Prefix + "shadow";
    PopupControlCssClasses.MainDivLiteCssClass = PopupControlCssClasses.Prefix + "mainDiv";
    PopupControlCssClasses.ContentWrapperCssClassName = PopupControlCssClasses.Prefix + "contentWrapper";
    PopupControlCssClasses.ContentCssClassName = PopupControlCssClasses.Prefix + "content";
    PopupControlCssClasses.HeaderContentCssClassName = PopupControlCssClasses.Prefix + "headerContent";
    PopupControlCssClasses.WindowWrapperCssClassName = PopupControlCssClasses.Prefix + "win-wrapper";
    PopupControlCssClasses.WindowWrapperScrollCssClassName = PopupControlCssClasses.WindowWrapperCssClassName + "-scroll";
    var constants = {
        DEFAULT_WINDOW_WIDTH: 200,
        DEFAULT_WINDOW_HEIGHT: 0
    };
    var ASPxClientPopupControl = ASPx.CreateClass(ASPxClientControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.leadingAfterInitCall = ASPxClientControl.LeadingAfterInitCallConsts.Direct;
            this.adjustInnerControlsSizeOnShow = true;
            this.slideAnimationDuration = 80;
            this.fadeAnimationDuration = 400;
            this.appearAfter = 300;
            this.disappearAfter = 500;
            this.allowResize = false;
            this.popupAnimationType = "none";
            this.closeAnimationType = "none";
            this.enableAnimation = true;
            this.animationLockCount = 0;
            this.shadowVisible = true;
            this.usedInDropDown = false;
            this.contentUrl = "";
            this.contentUrlArray = [];
            this.contentUrlIFrameTitle = "";
            this.contentUrlIFrameTitleArray = [];
            this.contentLoadingMode = "Default";
            this.loadingPanels = [];
            this.loadingDivs = [];
            this.lpTimers = [];
            this.windowRequestCount = [];
            this.callbackAnimationProcessings = [];
            this.savedCallbackResults = [];
            this.isCallbackFinishedStates = [];
            this.savedCallbackWindowIndex = null;
            this.cookieName = "";
            this.closeOnEscape = false;
            this.closeAction = "OuterMouseClick";
            this.popupAction = "LeftMouseClick";
            this.closeOnEscapeArray = [];
            this.closeActionArray = [];
            this.popupActionArray = [];
            this.windowsPopupElementIDList = [];
            this.windowsPopupElementList = [];
            this.windowsLastUsedPopupElementInfoList = [];
            this.windowsIsPopupedList = [];
            this.windowsPopupReasonMouseEventList = [];
            this.defaultWindowPopupElementIDList = [];
            this.defaultWindowPopupElementList = [];
            this.defaultLastUsedPopupElementInfo = {};
            this.defaultIsPopuped = false;
            this.defaultPopupReasonMouseEvent = null;
            this.showOnPageLoad = false;
            this.showOnPageLoadArray = [];
            this.popupHorizontalAlign = ASPx.PopupUtils.NotSetAlignIndicator;
            this.popupVerticalAlign = ASPx.PopupUtils.NotSetAlignIndicator;
            this.popupHorizontalOffset = 0;
            this.popupVerticalOffset = 0;
            this.windows = [];
            this.windowCount = 0;
            this.isDragged = false;
            this.isResized = false;
            this.zIndex = -1;
            this.left = 0;
            this.top = 0;
            this.iframeLoading = false;
            this.isDraggedArray = [];
            this.isResizedArray = [];
            this.zIndexArray = [];
            this.leftArray = [];
            this.topArray = [];
            this.height = constants.DEFAULT_WINDOW_HEIGHT;
            this.width = constants.DEFAULT_WINDOW_WIDTH;
            this.widthFromServer = false;
            this.minHeight = null;
            this.minWidth = null;
            this.maxHeight = null;
            this.maxWidth = null;
            this.shownArray = [];
            this.heightArray = [];
            this.widthArray = [];
            this.widthFromServerArray = [];
            this.minHeightArray = [];
            this.minWidthArray = [];
            this.maxHeightArray = [];
            this.maxWidthArray = [];
            this.iframeLoadingArray = [];
            this.isLiveResizingMode = true;
            this.isPopupPositionCorrectionOn = true;
            this.isPopupFullCorrectionOn = true;
            this.windowElements = {};
            this.windowContentElements = {};
            this.resizeSessionCache = {};
            this.hideBodyScrollWhenModal = true;
            this.hideBodyScrollWhenModalArray = [];
            this.hideBodyScrollWhenMaximized = true;
            this.canScrollViewPort = false;
            this.canScrollViewPortArray = [];
            this.autoUpdatePosition = false;
            this.autoUpdatePositionArray = [];
            this.cachedSize = null;
            this.cachedSizeArray = [];
            this.headerHeight = 0;
            this.headerHeightArray = [];
            this.footerHeight = 0;
            this.footerHeightArray = [];
            this.ResizeBorderSize = ASPx.Browser.TouchUI ? 10 : 6;
            this.ResizeCornerBorderSize = 20;
            this.allowDragging = false;
            this.isWindowDragging = false;
            this.enableContentScrolling = false;
            this.enableContentScrollingArray = [];
            this.contentOverflowX = "None";
            this.contentOverflowY = "None";
            this.contentOverflowXArray = [];
            this.contentOverflowYArray = [];
            this.isPinned = false;
            this.isPinnedArray = [];
            this.pinX = 0;
            this.pinXArray = [];
            this.pinY = 0;
            this.pinYArray = [];
            this.lockScroll = 0;
            this.isCollapsed = false;
            this.isCollapsedArray = [];
            this.isCollapsedInit = false;
            this.isCollapsedInitArray = [];
            this.collapseExecutingLockCount = 0;
            this.isMaximized = false;
            this.isMaximizedArray = [];
            this.isMaximizedInit = false;
            this.isMaximizedInitArray = [];
            this.maximizationExecutingLockCount = 0;
            this.restoredWindowValues = {};
            this.restoredWindowValuesArray = [];
            this.browserResizingForMaxWindowLockCount = 0;
            this.updateRestoredWindowSizeLockCount = 0;
            this.iframeAdjustingPostponedArray = [];
            this.iframeAdjustingPostponed = false;
            this.touchUIScrollers = {};
            this.prohibitClearSelectionOnMouseDown = false;
            this.firstFocusableElement = null;
            this.lastFocusableElement = null;
            this.focusLastElementHandler = function (e) { this.loopFocusHandler(e, false); }.aspxBind(this);
            this.focusFirstElementHandler = function (e) { this.loopFocusHandler(e, true); }.aspxBind(this);
            this.setFocusOnCallback = true;
            this.accessibleFocusElement = null;
            this.CloseButtonClick = new ASPxClientEvent();
            this.CloseUp = new ASPxClientEvent();
            this.Closing = new ASPxClientEvent();
            this.PopUp = new ASPxClientEvent();
            this.Resize = new ASPxClientEvent();
            this.Shown = new ASPxClientEvent();
            this.BeforeResizing = new ASPxClientEvent();
            this.AfterResizing = new ASPxClientEvent();
            this.PinnedChanged = new ASPxClientEvent();
            aspxGetPopupControlCollection().Add(this);
        },
        SetData: function (data) {
            if (data.windows)
                this.CreateWindows(data.windows);
        },
        InlineInitialize: function () {
            ASPxClientControl.prototype.InlineInitialize.call(this);
            this.InitializeArrayCores();
        },
        Initialize: function () {
            aspxGetPopupControlCollection().EnsureSaveScrollState();
            this.InitializeBeforeAnyShow();
            if (this.HasDefaultWindow())
                this.InitializeWindow(-1);
            for (var i = 0; i < this.GetWindowCount(); i++)
                this.InitializeWindow(i);
            this.InitializeScrollbars();
            if (this.accessibilityCompliant)
                this.InitializeAccessibleNavigation();
            ASPxClientControl.prototype.Initialize.call(this);
        },
        InitializeBeforeAnyShow: function () {
            this.InitializeEnableContentScrolling();
        },
        InitializeEnableContentScrolling: function () {
            for (var windowIndex = 0; windowIndex < this.GetWindowCount(); windowIndex++) {
                var contentOverflowX = this.GetWindowOverflowX(windowIndex);
                var contentOverflowY = this.GetWindowOverflowY(windowIndex);
                this.enableContentScrollingArray.push(contentOverflowX != "None" || contentOverflowY != "None");
            }
            this.enableContentScrolling = this.contentOverflowX != "None" || this.contentOverflowY != "None";
        },
        InitializeScrollbars: function () {
            if (!ASPx.Browser.WebKitTouchUI && !ASPx.Browser.MSTouchUI && (!ASPx.Browser.WindowsPhonePlatform || !ASPx.Browser.IE))
                return;
            this.ForEachWindow(function (windowIndex) {
                if (this.GetEnableContentScrolling(windowIndex)) {
                    var scrollElement = this.getTouchScrollerElement(windowIndex);
                    if (scrollElement) {
                        if (ASPx.Browser.MSTouchUI)
                            scrollElement.style.touchAction = "auto";
                        else {
                            var contentOverflowX = this.GetWindowOverflowX(windowIndex);
                            var contentOverflowY = this.GetWindowOverflowY(windowIndex);
                            var options = {
                                showHorizontalScrollbar: contentOverflowX === "Auto" || contentOverflowX === "Scroll",
                                showVerticalScrollbar: contentOverflowY === "Auto" || contentOverflowY === "Scroll"
                            };
                            if (this.HasIframeOnIos(windowIndex))
                                ASPx.TouchUIHelper.InitNativeScrolling(scrollElement, options);
                            else
                                this.touchUIScrollers[windowIndex] = ASPx.TouchUIHelper.MakeScrollable(scrollElement, options);
                        }
                    }
                }
            }.aspxBind(this));
        },
        ForEachWindow: function (callback) {
            var indices = [];
            if (this.HasDefaultWindow())
                indices.push(-1);
            else {
                for (var i = 0; i < this.GetWindowCount(); i++)
                    indices.push(i);
            }
            ASPx.Data.ForEach(indices, callback);
        },
        InitializeAccessibleNavigation: function () {
            this.Shown.AddHandler(this.InitializeAccessibleNavigationCore.aspxBind(this));
        },
        InitializeAccessibleNavigationCore: function () {
            if (!this.GetCurrentPopupElement())
                return;
            this.resetFocusableElements();
            var focusableElement = this.getFirstFocusableElement();
            if (focusableElement) {
                var currentWindowContentCell = this.GetPopupWindowContentCell(-1);
                var contentFirstActionElement = ASPx.FindFirstChildActionElement(currentWindowContentCell);
                if (contentFirstActionElement && contentFirstActionElement !== focusableElement)
                    focusableElement = contentFirstActionElement;
                ASPx.AccessibilityUtils.SetFocusAccessible(focusableElement);
                this.SetLoopingFocusHandlers();
            }
        },
        resetFocusableElements: function () {
            if (this.firstFocusableElement)
                ASPx.Evt.DetachEventFromElement(this.firstFocusableElement, "keydown", this.focusLastElementHandler);
            if (this.lastFocusableElement)
                ASPx.Evt.DetachEventFromElement(this.lastFocusableElement, "keydown", this.focusFirstElementHandler);
            this.firstFocusableElement = null;
            this.lastFocusableElement = null;
        },
        getFirstFocusableElement: function () {
            if (!this.firstFocusableElement)
                this.firstFocusableElement = ASPx.FindFirstChildActionElement(this.GetCurrentWindowElement());
            return this.firstFocusableElement;
        },
        getLastFocusableElement: function () {
            if (!this.lastFocusableElement)
                this.lastFocusableElement = ASPx.FindLastChildActionElement(this.GetCurrentWindowElement());
            return this.lastFocusableElement;
        },
        SetLoopingFocusHandlers: function () {
            ASPx.Evt.AttachEventToElement(this.getFirstFocusableElement(), "keydown", this.focusLastElementHandler);
            ASPx.Evt.AttachEventToElement(this.getLastFocusableElement(), "keydown", this.focusFirstElementHandler);
        },
        loopFocusHandler: function (evt, isLastFocusableElement) {
            var keyCode = ASPx.Evt.GetKeyCode(evt);
            if (keyCode !== ASPx.Key.Tab)
                return;
            var elementToFocus = null;
            if (!isLastFocusableElement && evt.shiftKey)
                elementToFocus = this.getLastFocusableElement();
            else if (isLastFocusableElement && !evt.shiftKey)
                elementToFocus = this.getFirstFocusableElement();
            if (elementToFocus) {
                ASPx.AccessibilityUtils.SetFocusAccessible(elementToFocus);
                ASPx.Evt.PreventEventAndBubble(evt);
            }
        },
        HasIframeOnIos: function (index) {
            return ASPx.Browser.MacOSMobilePlatform && !!this.GetWindowContentIFrameElement(index);
        },
        OnDispose: function () {
            ASPxClientControl.prototype.OnDispose.call(this);
            this.ClearPopupElementConnection();
        },
        preventParentOverlowOnIos: function (index) {
            if (!ASPx.Browser.MacOSMobilePlatform) return;
            var parent = this.getParentPopupControl(index);
            if (parent)
                parent.popupControl.changeContentOverflow(parent.windowIndex);
        },
        restoreParentOverflowOnIos: function (index) {
            if (!ASPx.Browser.MacOSMobilePlatform) return;
            var parent = this.getParentPopupControl(index);
            if (parent)
                parent.popupControl.restoreContentOverflow(parent.windowIndex);
        },
        getTouchScrollerElement: function (index) {
            return this.GetContentContainer(index);
        },
        changeContentOverflow: function (index) {
            var scrollerElement = this.getTouchScrollerElement(index);
            if (!scrollerElement) return;
            ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflow", "visible");
            ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflowX", "visible");
            ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflowY", "visible");
        },
        restoreContentOverflow: function (index) {
            var scrollerElement = this.getTouchScrollerElement(index);
            if (!scrollerElement) return;
            ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflow");
            ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflowX");
            ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflowY");
        },
        UpdateScrollbar: function (index) {
            var touchUIScroller = this.touchUIScrollers[index];
            if (!touchUIScroller)
                return;
            var scrollElement = this.GetContentContainer(index);
            if (scrollElement)
                touchUIScroller.ChangeElement(scrollElement);
        },
        AfterInitialize: function () {
            if (this.HasDefaultWindow())
                this.AfterInitializeWindow(-1);
            for (var i = 0; i < this.GetWindowCount(); i++)
                this.AfterInitializeWindow(i);
            ASPxClientControl.prototype.AfterInitialize.call(this);
        },
        InitializeArrayCores: function () {
            if (this.GetWindowCountCore() > 0) {
                this.InitializeWindowPopupElementList();
                this.InitializeWindowPopupElementIDList();
                this.InitializeWindowLastUsedPopupElementInfoList();
                this.InitializeArray(this.shownArray);
                this.InitializeArray(this.windowsPopupReasonMouseEventList, null);
                this.InitializeArray(this.windowsIsPopupedList, false);
                this.InitializeArray(this.contentUrlArray, "");
                this.InitializeArray(this.contentUrlIFrameTitleArray, "");
                this.InitializeArray(this.popupActionArray, this.popupAction);
                this.InitializeArray(this.closeActionArray, this.closeAction);
                this.InitializeArray(this.showOnPageLoadArray, false);
                this.InitializeArray(this.isDraggedArray, false);
                this.InitializeArray(this.isPinnedArray, false);
                this.InitializeArray(this.isCollapsedArray, false);
                this.InitializeArray(this.isCollapsedInitArray, false);
                this.InitializeArray(this.isMaximizedArray, false);
                this.InitializeArray(this.isMaximizedInitArray, false);
                this.InitializeArray(this.restoredWindowValuesArray, {});
                this.InitializeArray(this.iframeAdjustingPostponedArray, {});
                this.InitializeArray(this.isResizedArray, false);
                this.InitializeArray(this.zIndexArray, -1);
                this.InitializeArray(this.leftArray, 0);
                this.InitializeArray(this.topArray, 0);
                this.InitializeArray(this.widthArray, constants.DEFAULT_WINDOW_WIDTH);
                this.InitializeArray(this.heightArray, constants.DEFAULT_WINDOW_HEIGHT);
                this.InitializeArray(this.widthFromServerArray, false);
                this.InitializeArray(this.pinXArray, 0);
                this.InitializeArray(this.pinYArray, 0);
                this.InitializeArray(this.minWidthArray, null);
                this.InitializeArray(this.minHeightArray, null);
                this.InitializeArray(this.maxWidthArray, null);
                this.InitializeArray(this.maxHeightArray, null);
                this.InitializeArray(this.cachedSizeArray, null);
                this.InitializeArray(this.iframeLoadingArray, false);
                this.InitializeArray(this.autoUpdatePositionArray, false);
                this.InitializeArray(this.hideBodyScrollWhenModalArray, true);
                this.InitializeArray(this.canScrollViewPortArray, false);
                this.InitializeArray(this.closeOnEscapeArray, this.closeOnEscape);
                if (ASPx.Browser.IE) {
                    this.InitializeArray(this.headerHeightArray, -1);
                    this.InitializeArray(this.footerHeightArray, -1);
                }
            }
        },
        InitializeArray: function (array, defaultValue) {
            if (array.length == 0) {
                for (var i = 0; i < this.GetWindowCountCore(); i++)
                    array[i] = defaultValue;
            }
        },
        InitializeWindowPopupElementIDList: function () {
            for (var i = 0; i < this.GetWindowCountCore(); i++) {
                if (!this.windowsPopupElementIDList[i])
                    this.windowsPopupElementIDList[i] = [];
            }
        },
        InitializeWindowPopupElementList: function () {
            for (var i = 0; i < this.GetWindowCountCore(); i++) {
                if (!this.windowsPopupElementList[i])
                    this.windowsPopupElementList[i] = [];
            }
        },
        InitializeWindowLastUsedPopupElementInfoList: function () {
            for (var i = 0; i < this.GetWindowCountCore(); i++) {
                if (!this.windowsLastUsedPopupElementInfoList[i])
                    this.windowsLastUsedPopupElementInfoList[i] = {};
            }
        },
        WindowElementIDAssignmentMap: [
            { cssClass: "dxpc-header", prefix: "_PWH" },
            { cssClass: "dxpc-headerText", prefix: "_PWH", postfix: "T" },
            { cssClass: "dxpc-headerImg", prefix: "_PWH", postfix: "I" },
            { cssClass: "dxpc-closeBtn", prefix: "_HCB" },
            { cssClass: "dxpc-pinBtn", prefix: "_HPB" },
            { cssClass: "dxpc-refreshBtn", prefix: "_HRB" },
            { cssClass: "dxpc-collapseBtn", prefix: "_HMNB" },
            { cssClass: "dxpc-maximizeBtn", prefix: "_HMXB" },
            { cssClass: "dxpc-content", prefix: "_PWC" },
            { cssClass: "dxpc-iFrame", prefix: "_CIF" },
            { cssClass: "dxpc-footer", prefix: "_PWF" },
            { cssClass: "dxpc-footerText", prefix: "_PWF", postfix: "T" },
            { cssClass: "dxpc-footerImg", prefix: "_PWF", postfix: "I" }
        ],
        AssignElementID: function (element, index, prefix, postfix) {
            element.id = this.name + prefix + index + (postfix ? postfix : "");
        },
        AssignWindowElementsID: function (index, windowElement) {
            for (var i = 0; i < this.WindowElementIDAssignmentMap.length; i++) {
                var elementClass = this.WindowElementIDAssignmentMap[i].cssClass;
                var elements = ASPx.GetNodesByClassName(windowElement, elementClass);
                for (var j = 0; j < elements.length; j++) {
                    var element = elements[j];
                    if (this.GetFirstParentWindow(element) === windowElement)
                        this.AssignElementID(element, index, this.WindowElementIDAssignmentMap[i].prefix, this.WindowElementIDAssignmentMap[i].postfix);
                }
            }
        },
        AddKeyDownHandler: function (shortcutString, handler) {
            if (typeof (this.keyDownHandlers) === "undefined")
                this.keyDownHandlers = [];
            this.keyDownHandlers[ASPx.ParseShortcutString(shortcutString)] = handler;
        },
        GetFirstParentWindow: function (el) {
            while (el && el.tagName != "BODY") {
                if (el.nodeType == 1 && el.className.indexOf("dxpclW") > -1 && !isNaN(this.GetWindowIndex(el)))
                    return el;
                el = el.parentNode;
            }
        },
        getParentPopupControl: function (index) {
            var parentPopupWindowElement = this.GetFirstParentWindow(this.GetWindowElement(index).parentNode);
            if (parentPopupWindowElement)
                return aspxGetPopupControlCollection().GetPopupWindowFromID(parentPopupWindowElement.id);
        },
        PreventHeaderButtonMouseDownBubbling: function (evt, hdrButton) {
            if (hdrButton) {
                var source = ASPx.Evt.GetEventSource(evt);
                if (ASPx.GetIsParent(hdrButton, source)) {
                    ASPx.PWHMDown(evt);
                    return true;
                }
            }
            return false;
        },
        GetWindowElementMouseDownEventHandler: function (index) {
            var instance = this;
            return function (evt) {
                if (!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
                    ASPx.PWMDown(evt, instance.name, index, instance.isWindowDragging);
            };
        },
        GetWindowElementMouseMoveEventHandler: function (index) {
            var instance = this;
            return function (evt) { ASPx.PWMMove(evt, instance.name, index); };
        },
        GetWindowHeaderElementMouseDownEventHandler: function (index) {
            var instance = this;
            return function (evt) {
                if (!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
                    !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
                    ASPx.PWDGMDown(evt, instance.name, index);
            };
        },
        AssignWindowElementsEvents: function (index, element) {
            var instance = this;
            var mdEventName = ASPx.TouchUIHelper.touchMouseDownEventName;
            ASPx.Evt.AttachEventToElement(element, mdEventName, this.GetWindowElementMouseDownEventHandler(index));
            if (this.allowResize) {
                var mmEventName = ASPx.TouchUIHelper.touchMouseMoveEventName;
                ASPx.Evt.AttachEventToElement(element, mmEventName, this.GetWindowElementMouseMoveEventHandler(index));
            }
            var header = this.GetWindowHeaderElement(index);
            if (header && this.allowDragging && !this.isWindowDragging) {
                ASPx.Evt.AttachEventToElement(header, mdEventName, this.GetWindowHeaderElementMouseDownEventHandler(index), true);
            }
            var sizeGrip = this.GetWindowSizeGripElement(index);
            if (sizeGrip) {
                ASPx.Evt.AttachEventToElement(sizeGrip, mdEventName, function (evt) {
                    ASPx.PWGripMDown(evt, instance.name, index);
                    ASPx.Evt.PreventEvent(evt);
                });
            }
            this.AttachClickToHeaderButton(index, this.GetWindowCloseButton(index), "ASPx.PWCBClick");
            this.AttachClickToHeaderButton(index, this.GetWindowPinButton(index), "ASPx.PWPBClick");
            this.AttachClickToHeaderButton(index, this.GetWindowRefreshButton(index), "ASPx.PWRBClick");
            this.AttachClickToHeaderButton(index, this.GetWindowCollapseButton(index), "ASPx.PWMNBClick");
            this.AttachClickToHeaderButton(index, this.GetWindowMaximizeButton(index), "ASPx.PWMXBClick");
        },
        AttachClickToHeaderButton: function (index, headerButton, eventFuncName) {
            var instance = this;
            if (headerButton) {
                ASPx.Evt.AttachEventToElement(headerButton, "click", function (evt) {
                    eval(eventFuncName)(evt, instance.name, index);
                });
            }
        },
        InitializeWindow: function (index) {
            var modalElement = this.GetWindowModalElement(index);
            if (modalElement)
                ASPx.Evt.AttachEventToElement(modalElement, "mousedown", aspxPWMEMDown);
            this.RemoveWindowAllPopupElements(index);
            this.PopulatePopupElements(index);
            var element = this.GetWindowElement(index);
            if (element != null) {
                this.AssignWindowElementsID(index, element);
                this.AssignWindowElementsEvents(index, element);
                element.DXPopupWindowElement = true;
                ASPx.Evt.AttachEventToElement(element, "resize", this.CreateWindowResizeHandler(this.name, index));
                if (ASPx.Browser.IE)
                    this.AttachOnDragStartEventToWindowImages(index);
                var contentUrl = this.GetWindowContentIFrameUrl(index);
                if (contentUrl != "")
                    this.SetWindowContentUrlInternal(index, contentUrl);
                element.isHiding = false;
                element.isContentHeightInit = false;
                element.isPopupPositionCorrectionOn = this.isPopupPositionCorrectionOn || !this.GetShowOnPageLoad(index);
                if (this.GetShowOnPageLoad(index) && this.GetZIndex(index) > 0) {
                    this.FirstShowWindow(index, false);
                    this.SetWindowElementZIndex(element, this.GetZIndex(index));
                    element.isPopupPositionCorrectionOn = true;
                }
                this.InitializeWindowEscKeyHandler(element, index);
            }
        },
        InitializeWindowEscKeyHandler: function (element, index) {
            if (!this.GetEnableCloseByEsc(index)) return;
            this.AddKeyDownHandler("ESC", this.OnEscKeyDown.aspxBind(this));
        },
        OnEscKeyDown: function (index) {
            if (this.GetEnableCloseByEsc(index))
                this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.Escape);
        },
        OnDocumentKeyDown: function (evt, popupWindow) {
            var handler = this.keyDownHandlers && this.keyDownHandlers[ASPx.GetShortcutCode(evt.keyCode, evt.ctrlKey, evt.shiftKey, evt.altKey)];
            if (handler)
                handler(this.GetWindowIndex(popupWindow));
        },
        CreateWindowResizeHandler: function (name, index) {
            return function () {
                var pc = aspxGetPopupControlCollection().Get(name);
                if (pc)
                    pc.ResizeWindowIFrame(index);
            };
        },
        BrowserWindowResizeSubscriber: function () {
            return true;
        },
        OnBrowserWindowResize: function (e) {
            window.setTimeout(this.SetPopupMaximizedPositionOnBrowserResize.aspxBind(this), 0);
            this.ForEachWindow(this.updateContentScrollIfNeeded.aspxBind(this));
        },
        SetPopupMaximizedPositionOnBrowserResize: function () {
            if (this.HasDefaultWindow())
                this.SetMaximizedPositionOnBrowserResize(-1);
            for (var i = 0; i < this.GetWindowCount(); i++)
                this.SetMaximizedPositionOnBrowserResize(i);
        },
        SetMaximizedPositionOnBrowserResize: function (index) {
            var element = this.GetWindowElement(index);
            if (element && this.GetIsMaximized(index) && this.InternalIsWindowVisible(index)) {
                var left = this.GetMaximizedPosition(element, true);
                var top = this.GetMaximizedPosition(element, false);
                this.SetWindowPos(index, element, left, top);
            }
        },
        InitIFrame: function (index) {
            var contentIFrameElement = this.GetWindowContentIFrameElement(index);
            if (contentIFrameElement) {
                contentIFrameElement.popupControlName = this.name;
                contentIFrameElement.pcWndIndex = index;
                ASPx.Evt.AttachEventToElement(contentIFrameElement, "load", ASPx.PCIframeLoad);
            }
        },
        InitCollapsedWindows: function (index) {
            if ((this.isCollapsedInit && index == -1) || (index >= 0 && index < this.isCollapsedInitArray.length && this.isCollapsedInitArray[index])) {
                if (this.InternalIsWindowVisible(index)) {
                    this.DoCollapse(index, true);
                    if (index == -1)
                        this.isCollapsedInit = false;
                    else
                        this.isCollapsedInitArray[index] = false;
                }
            }
        },
        InitMaximizedWindows: function (index) {
            if (this.GetIsMaximizedInit(index) && this.InternalIsWindowVisible(index)) {
                this.DoMaximize(index, true);
                this.SetIsMaximizedInit(index, false);
            }
        },
        InitPinnedWindows: function (index) {
            if ((this.isPinned && index == -1) || (index >= 0 && index < this.isPinnedArray.length && this.isPinnedArray[index]))
                this.HoldPosition(index, true);
        },
        AfterInitializeWindow: function (index) {
            if (this.contentOverflowX !== "None" && !this.GetWindowWidthFromServer(index))
                this.SetWindowWidth(index, 0);
            if (this.GetShowOnPageLoad(index) && this.GetZIndex(index) < 0) {
                this.FirstShowWindow(index, true);
                var element = this.GetWindowElement(index);
                if (element != null)
                    element.isPopupPositionCorrectionOn = true;
            }
            this.EnsureContent(index, true);
            this.InitPinnedWindows(index);
            this.InitMaximizedWindows(index);
            this.InitCollapsedWindows(index);
        },
        AttachOnDragStartEventToWindowImages: function (index) {
            this.AttachChildImagesPreventDragStartEvent(this.GetWindowHeaderElement(index));
            this.AttachChildImagesPreventDragStartEvent(this.GetWindowFooterElement(index));
        },
        AttachChildImagesPreventDragStartEvent: function (parentElem) {
            var images = parentElem == null ? null : ASPx.GetNodesByTagName(parentElem, "img");
            if (images != null) {
                for (var i = 0; i < images.length; i++)
                    ASPx.Evt.AttachEventToElement(images[i], "dragstart", ASPx.Evt.PreventDragStart);
            }
        },
        FirstShowWindow: function (index, allowChangeZIndex) {
            var popupHorizontalOffsetBackup = -1;
            var popupVerticalOffsetBackup = -1;
            var isFreeWindow = this.GetIsDragged(index);
            var x = ASPx.InvalidPosition;
            var y = ASPx.InvalidPosition;
            if (isFreeWindow) {
                x = this.GetWindowLeft(index);
                y = this.GetWindowTop(index);
                popupHorizontalOffsetBackup = this.popupHorizontalOffset;
                popupVerticalOffsetBackup = this.popupVerticalOffset;
                this.popupHorizontalOffset = 0;
                this.popupVerticalOffset = 0;
            }
            this.LockAnimation();
            this.DoShowWindowAtPos(index, x, y, isFreeWindow ? -1 : 0, false, allowChangeZIndex);
            this.UnlockAnimation();
            if (isFreeWindow) {
                this.popupHorizontalOffset = popupHorizontalOffsetBackup;
                this.popupVerticalOffset = popupVerticalOffsetBackup;
            }
            this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
        },
        GetIsDragged: function (index) {
            if (0 <= index && index < this.isDraggedArray.length)
                return this.isDraggedArray[index];
            return this.isDragged;
        },
        SetIsDragged: function (index, value) {
            if (0 <= index && index < this.isDraggedArray.length)
                this.isDraggedArray[index] = value;
            else
                this.isDragged = value;
        },
        GetIsPinned: function (index) {
            if (0 <= index && index < this.isPinnedArray.length)
                return this.isPinnedArray[index];
            return this.isPinned;
        },
        SetIsPinned: function (index, value) {
            if (0 <= index && index < this.isPinnedArray.length)
                this.isPinnedArray[index] = value;
            else
                this.isPinned = value;
        },
        GetPinPosX: function (index) {
            if (0 <= index && index < this.pinXArray.length)
                return this.pinXArray[index];
            return this.pinX;
        },
        SetPinPosX: function (index, pinX) {
            if (0 <= index && index < this.pinXArray.length)
                this.pinXArray[index] = pinX;
            else
                this.pinX = pinX;
        },
        GetPinPosY: function (index) {
            if (0 <= index && index < this.pinYArray.length)
                return this.pinYArray[index];
            return this.pinY;
        },
        SetPinPosY: function (index, pinY) {
            if (0 <= index && index < this.pinYArray.length)
                this.pinYArray[index] = pinY;
            else
                this.pinY = pinY;
        },
        GetIsCollapsed: function (index) {
            if (0 <= index && index < this.isCollapsedArray.length)
                return this.isCollapsedArray[index];
            return this.isCollapsed;
        },
        SetIsCollapsed: function (index, value) {
            if (0 <= index && index < this.isCollapsedArray.length)
                this.isCollapsedArray[index] = value;
            else
                this.isCollapsed = value;
        },
        GetIsMaximized: function (index) {
            if (0 <= index && index < this.isMaximizedArray.length)
                return this.isMaximizedArray[index];
            return this.isMaximized;
        },
        GetIsMaximizedOnWebKitTouch: function (index) {
            return this.GetIsMaximized(index) && ASPx.Browser.WebKitTouchUI;
        },
        SetIsMaximized: function (index, value) {
            if (0 <= index && index < this.isMaximizedArray.length)
                this.isMaximizedArray[index] = value;
            else
                this.isMaximized = value;
        },
        GetIsMaximizedInit: function (index) {
            if (0 <= index && index < this.isMaximizedInitArray.length)
                return this.isMaximizedInitArray[index];
            return this.isMaximizedInit;
        },
        SetIsMaximizedInit: function (index, value) {
            if (0 <= index && index < this.isMaximizedInitArray.length)
                this.isMaximizedInitArray[index] = value;
            else
                this.isMaximizedInit = value;
        },
        GetRestoredWindowData: function (index) {
            if (0 <= index && index < this.restoredWindowValuesArray.length)
                return this.restoredWindowValuesArray[index];
            return ASPx.CloneObject(this.restoredWindowValues);
        },
        SetRestoredWindowData: function (index, value) {
            if (0 <= index && index < this.restoredWindowValuesArray.length)
                this.restoredWindowValuesArray[index] = value;
            else
                this.restoredWindowValues = value;
        },
        GetIsResized: function (index) {
            if (0 <= index && index < this.isResizedArray.length)
                return this.isResizedArray[index];
            return this.isResized;
        },
        SetIsResized: function (index, value) {
            if (0 <= index && index < this.isResizedArray.length)
                this.isResizedArray[index] = value;
            else
                this.isResized = value;
        },
        GetHorizontalAlign: function () {
            return this.popupHorizontalAlign;
        },
        GetVerticalAlign: function () {
            return this.popupVerticalAlign;
        },
        GetPopupHorizontalOffset: function () {
            return this.popupHorizontalOffset;
        },
        SetPopupHorizontalOffset: function (offset) {
            this.popupHorizontalOffset = offset;
        },
        SetPopupVerticalOffset: function (offset) {
            this.popupVerticalOffset = offset;
        },
        GetPopupVerticalOffset: function () {
            return this.popupVerticalOffset;
        },
        HasDefaultWindow: function () {
            return this.GetWindowCountCore() == 0;
        },
        GetCurrentLeft: function (index) {
            return this.GetPosition(index, true);
        },
        GetCurrentTop: function (index) {
            return this.GetPosition(index, false);
        },
        GetHeaderHeight: function (index) {
            if (0 <= index && index < this.headerHeightArray.length)
                return this.headerHeightArray[index];
            return this.headerHeight;
        },
        GetFooterHeight: function (index) {
            if (0 <= index && index < this.footerHeightArray.length)
                return this.footerHeightArray[index];
            return this.footerHeight;
        },
        GetWindowFooterHeightLite: function (index) {
            var footer = this.GetWindowFooterElement(index);
            if (footer)
                return footer.offsetHeight;
            return null;
        },
        SetHeaderHeight: function (index, height) {
            if (0 <= index && index < this.headerHeightArray.length)
                this.headerHeightArray[index] = height;
            else
                this.headerHeight = height;
        },
        SetFooterHeight: function (index, height) {
            if (0 <= index && index < this.footerHeightArray.length)
                return this.footerHeightArray[index] = height;
            else
                this.footerHeight = height;
        },
        GetPosition: function (index, isLeft) {
            if (0 <= index && index < this.GetWindowCountCore())
                return isLeft ? this.leftArray[index] : this.topArray[index];
            return isLeft ? this.left : this.top;
        },
        GetEnableCloseByEsc: function (index) {
            if (0 <= index && index < this.closeOnEscapeArray.length)
                return this.closeOnEscapeArray[index];
            return this.closeOnEscape;
        },
        SetPopupElementReference: function (index, popupElement, popupElementIndex, attach) {
            if (!ASPx.IsExistsElement(popupElement)) return;
            var setReferenceFunction = attach ? ASPx.Evt.AttachEventToElement : ASPx.Evt.DetachEventFromElement;
            var windowPopupAction = this.GetWindowPopupAction(index);
            if (windowPopupAction == "LeftMouseClick")
                setReferenceFunction(popupElement, "mouseup", aspxPEMEvent);
            else if (windowPopupAction == "RightMouseClick")
                setReferenceFunction(popupElement, "contextmenu", aspxPEMEvent);
            else if (windowPopupAction == "MouseOver") {
                var windowElement = this.GetWindowElement(index);
                setReferenceFunction(popupElement, "mouseover", ASPx.PopupUtils.OverControl.OnMouseOver);
                setReferenceFunction(windowElement, "mouseover", aspxPWEMOver);
                if (attach)
                    this.SetMSTouchMouseOverReference(popupElement, windowElement, this.name, index, this.appearAfter);
            }
            if (windowPopupAction == "LeftMouseClick" || windowPopupAction == "RightMouseClick") {
                setReferenceFunction(popupElement, "mousedown", aspxPEMEvent);
            }
            if (attach) {
                popupElement.DXPopupElementControl = this;
                popupElement.DXPopupWindowIndex = index;
                popupElement.DXPopupElementIndex = popupElementIndex;
            } else
                popupElement.DXPopupElementControl = popupElement.DXPopupWindowIndex = popupElement.DXPopupElementIndex = undefined;
        },
        SetMSTouchMouseOverReference: function (popupElement, windowElement, popupName, index, appearAfter) {
            if (!ASPx.TouchUIHelper.pointerEnabled) return;
            popupElement.dxMsTouchGesture = popupElement.dxMsTouchGesture ||
                ASPx.TouchUIHelper.msTouchCreateGesturesWrapper(popupElement, function (evt) {
                    window.setTimeout(function () {
                        aspxGetPopupControlCollection().SetAppearTimer(popupName, index, popupElement.DXPopupElementIndex, appearAfter, evt);
                    }, 0);
                });
            windowElement.dxMsTouchGesture = windowElement.dxMsTouchGesture || ASPx.TouchUIHelper.msTouchCreateGesturesWrapper(windowElement, function (evt) {
                window.setTimeout(function () {
                    aspxGetPopupControlCollection().ClearDisappearTimer();
                }, 0);
            });
        },
        PopulatePopupElementsByIds: function (index) {
            var ids = this.GetPopupElementIDList(index);
            for (var i = 0; i < ids.length; i++) {
                var popupElement = ASPx.PopupUtils.FindPopupElementById(ids[i]);
                if (popupElement)
                    this.AddWindowPopupElement(index, popupElement);
            }
        },
        PopulatePopupElements: function (index) {
            this.PopulatePopupElementsByIds(index);
        },
        GetPopupElement: function (index, popupElementIndex) {
            var popupElement = this.GetPopupElementList(index)[popupElementIndex];
            return popupElement ? popupElement : null;
        },
        GetPopupElementIDList: function (index) {
            if (0 <= index && index < this.GetWindowCountCore())
                return this.windowsPopupElementIDList[index];
            return this.defaultWindowPopupElementIDList;
        },
        GetPopupElementList: function (index) {
            if (0 <= index && index < this.GetWindowCountCore())
                return this.windowsPopupElementList[index];
            return this.defaultWindowPopupElementList;
        },
        SetPopupElementIDs: function (index, ids) {
            if (0 <= index && index < this.GetWindowCountCore())
                this.windowsPopupElementIDList[index] = ids;
            this.defaultWindowPopupElementIDList = ids;
        },
        AddPopupElementInternal: function (index, element) {
            var popupElements = this.GetPopupElementList(index);
            for (var i = 0; i < popupElements.length; i++) {
                if (!popupElements[i]) {
                    popupElements[i] = element;
                    return i;
                }
            }
            popupElements.push(element);
            return popupElements.length - 1;
        },
        RemovePopupElementInternal: function (index, element) {
            var popupElements = this.GetPopupElementList(index);
            for (var i = 0; i < popupElements.length; i++) {
                if (popupElements[i] == element) {
                    popupElements[i] = null;
                    return;
                }
            }
        },
        AddPopupElement: function (popupElement) {
            this.AddWindowPopupElement(-1, popupElement);
        },
        AddWindowPopupElement: function (index, popupElement) {
            var popupElementIndex = this.AddPopupElementInternal(index, popupElement);
            this.SetPopupElementReference(index, popupElement, popupElementIndex, true);
        },
        RemovePopupElement: function (popupElement) {
            this.RemoveWindowPopupElement(-1, popupElement);
        },
        RemoveWindowPopupElement: function (index, popupElement) {
            this.RemovePopupElementInternal(index, popupElement);
            this.SetPopupElementReference(index, popupElement, null, false);
        },
        RemoveAllPopupElements: function () {
            this.RemoveWindowAllPopupElements(-1);
        },
        RemoveWindowAllPopupElements: function (index) {
            var popupElements = this.GetPopupElementList(index);
            for (var i = 0; i < popupElements.length; i++)
                this.RemoveWindowPopupElement(index, popupElements[i]);
        },
        GetIsPopuped: function (index) {
            if (0 <= index && index < this.GetWindowCountCore())
                return this.windowsIsPopupedList[index];
            return this.defaultIsPopuped;
        },
        SetIsPopuped: function (index, isPopuped) {
            if (0 <= index && index < this.GetWindowCountCore())
                this.windowsIsPopupedList[index] = isPopuped;
            this.defaultIsPopuped = isPopuped;
        },
        GetLastShownPopupElementIndex: function (windowIndex) {
            var info = this.GetLastUsedPopupElementInfo(windowIndex);
            return ASPx.GetDefinedValue(info.shownPEIndex, 0);
        },
        SetLastShownPopupElementIndex: function (windowIndex, popupElementIndex) {
            var info = this.GetLastUsedPopupElementInfo(windowIndex);
            info.shownPEIndex = popupElementIndex;
        },
        GetLastOverPopupElementIndex: function (windowIndex) {
            var info = this.GetLastUsedPopupElementInfo(windowIndex);
            return ASPx.GetDefinedValue(info.overPEIndex, -1);
        },
        SetLastOverPopupElementIndex: function (windowIndex, popupElementIndex) {
            var info = this.GetLastUsedPopupElementInfo(windowIndex);
            info.overPEIndex = popupElementIndex;
        },
        GetLastUsedPopupElementInfo: function (index) {
            if (0 <= index && index < this.GetWindowCountCore())
                return this.windowsLastUsedPopupElementInfoList[index];
            return this.defaultLastUsedPopupElementInfo;
        },
        SetWindowPopUpReasonMouseEvent: function (index, evt) {
            evt = ASPx.CloneObject(evt);
            if (evt === undefined)
                evt = null;
            if (0 <= index && index < this.GetWindowCountCore())
                this.windowsPopupReasonMouseEventList[index] = evt;
            this.defaultPopupReasonMouseEvent = evt;
        },
        GetPopUpReasonMouseEvent: function () {
            return this.GetWindowPopUpReasonMouseEvent(null);
        },
        GetWindowPopUpReasonMouseEvent: function (window) {
            var index = (window != null) ? window.index : -1;
            if (0 <= index && index < this.GetWindowCountCore())
                return this.windowsPopupReasonMouseEventList[index];
            return this.defaultPopupReasonMouseEvent;
        },
        GetShowOnPageLoad: function (index) {
            if (0 <= index && index < this.showOnPageLoadArray.length)
                return this.showOnPageLoadArray[index];
            return this.showOnPageLoad;
        },
        GetWindowCountCore: function () {
            return (this.windows.length > 0) ? this.windows.length : this.windowCount;
        },
        GetWindowIFrame: function (index) {
            var element = this.GetWindowElement(index);
            var iFrame = element.overflowElement;
            if (!iFrame) {
                iFrame = this.FindWindowIFrame(index);
                element.overflowElement = iFrame;
            }
            return iFrame;
        },
        FindWindowIFrame: function (index) {
            return ASPx.GetElementById(this.name + "_DXPWIF" + index);
        },
        GetWindowModalElement: function (index) {
            var element = this.GetWindowElement(index);
            if (!element) return;
            var modalElement = element.modalElement;
            if (!modalElement) {
                modalElement = this.FindWindowModalElement(index);
                element.modalElement = modalElement;
                if (modalElement) {
                    modalElement.DXModalPopupControl = this;
                    modalElement.DXModalPopupWindowIndex = index;
                }
            }
            return modalElement;
        },
        GetModalElementEndAnimationOpacity: function (index) {
            if (typeof (this.modalElementOpacity) == "undefined")
                this.modalElementOpacity = [];
            if (typeof (this.modalElementOpacity[index]) == "undefined")
                this.modalElementOpacity[index] = ASPx.GetElementOpacity(this.GetWindowModalElement(index));
            return this.modalElementOpacity[index];
        },
        FindWindowModalElement: function (index) {
            return ASPx.GetElementById(this.name + "_DXPWMB" + index);
        },
        GetWindowElementId: function (index) {
            return this.name + ASPx.PCWIdSuffix + index;
        },
        WindowIsModal: function (index) {
            return !!this.GetWindowModalElement(index);
        },
        SetClientModality: function (isModal) {
            this.SetWindowClientModality(-1, isModal);
        },
        SetWindowClientModality: function (index, isModal) {
            var modalElement = this.GetWindowModalElement(index);
            if (isModal && !ASPx.IsElementVisible(modalElement))
                this.DoShowWindowModalElement(index);
            if (!isModal && ASPx.IsElementVisible(modalElement)) {
                var element = this.GetWindowElement(index);
                this.DoHideWindowModalElement(element);
            }
        },
        GetWindowElement: function (index) {
            if (!ASPx.IsExistsElement(this.windowElements[index]))
                this.windowElements[index] = ASPx.GetElementById(this.GetWindowElementId(index));
            return this.windowElements[index];
        },
        GetCurrentWindowElement: function () {
            return this.GetWindowElement(-1);
        },
        GetPopupWindowContentCell: function (index) {
            return ASPx.GetElementById(this.name + "_PWC" + index);
        },
        GetWindowCloseButton: function (index) {
            return ASPx.GetElementById(this.name + "_HCB" + index);
        },
        GetWindowPinButton: function (index) {
            return ASPx.GetElementById(this.name + "_HPB" + index);
        },
        GetWindowRefreshButton: function (index) {
            return ASPx.GetElementById(this.name + "_HRB" + index);
        },
        GetWindowCollapseButton: function (index) {
            return ASPx.GetElementById(this.name + "_HMNB" + index);
        },
        GetWindowMaximizeButton: function (index) {
            return ASPx.GetElementById(this.name + "_HMXB" + index);
        },
        GetWindowChild: function (index, idPostfix) {
            var elem = this.GetWindowElement(index);
            if (elem)
                return ASPx.GetChildById(elem, this.name + idPostfix);
            return null;
        },
        GetWindowBorderOwnerElement: function (windowElement) {
            if (ASPx.ElementHasCssClass(windowElement, PopupControlCssClasses.MainDivLiteCssClass))
                return windowElement;
            else
                return ASPx.GetNodeByClassName(windowElement, PopupControlCssClasses.MainDivLiteCssClass);
        },
        GetWindowContentIFrameDivElementID: function (index) {
            return this.name + "_CIFD" + index;
        },
        GetWindowContentIFrameDivElement: function (index) {
            return this.GetWindowChild(index, "_CIFD" + index);
        },
        GetWindowScrollDiv: function (index) {
            return this.GetWindowChild(index, "_CSD" + index);
        },
        GetWindowContentIFrameElementId: function (index) {
            return this.name + "_CIF" + index;
        },
        GetWindowContentIFrameElement: function (index) {
            return this.GetWindowChild(index, "_CIF" + index);
        },
        GetWindowContentIFrameUrl: function (index) {
            if (0 <= index && index < this.contentUrlArray.length)
                return this.contentUrlArray[index];
            return this.contentUrl;
        },
        GetWindowContentIFrameTitle: function (index) {
            if (0 <= index && index < this.contentUrlIFrameTitleArray.length)
                return this.contentUrlIFrameTitleArray[index];
            return this.contentUrlIFrameTitle;
        },
        GetWindowPopupAction: function (index) {
            if (0 <= index && index < this.popupActionArray.length)
                return this.popupActionArray[index];
            return this.popupAction;
        },
        GetWindowCloseAction: function (index) {
            if (0 <= index && index < this.closeActionArray.length)
                return this.closeActionArray[index];
            return this.closeAction;
        },
        SetWindowContentIFrameUrl: function (index, url) {
            if (0 <= index && index < this.contentUrlArray.length)
                this.contentUrlArray[index] = url;
            else
                this.contentUrl = url;
        },
        ShowWindowContentUrl: function (index) {
            var contentIFrame = this.GetWindowContentIFrameElement(index);
            this.LoadWindowContentUrl(index);
            if (contentIFrame && contentIFrame.DXReloadAfterShowRequired) {
                this.RefreshWindowContentUrl(this.GetWindow(index));
                contentIFrame.DXReloadAfterShowRequired = false;
            }
        },
        LoadWindowContentUrl: function (index) {
            var url = this.GetWindowContentIFrameUrl(index);
            this.LoadWindowContentFromUrl(index, url);
        },
        LoadWindowContentFromUrl: function (index, url) {
            var element = this.GetWindowContentIFrameElement(index);
            if (element && element.src != url && element.DXSrcRaw != url) {
                this.SetSrcToIframeElement(index, element, url);
                this.SetWindowContentIFrameUrl(index, element.src);
            }
        },
        SetSrcToIframeElement: function (index, iframeElement, src) {
            this.SetIframeLoading(index, true);
            iframeElement.src = src;
            if (ASPx.Browser.Chrome && src.indexOf("#"))
                this.PreventScrollingAfterIframeLoaded(iframeElement);
            iframeElement.DXSrcRaw = src;
        },
        PreventScrollingAfterIframeLoaded: function (iframeElement) {
            var docScrollTop = ASPx.GetDocumentScrollTop();
            var onIframeLoadedHandler = function () {
                window.setTimeout(function () {
                    ASPx.SetDocumentScrollTop(docScrollTop);
                    ASPx.Evt.DetachEventFromElement(iframeElement, "load", onIframeLoadedHandler);
                }, 0);
            };
            ASPx.Evt.AttachEventToElement(iframeElement, "load", onIframeLoadedHandler);
        },
        GetWindowContentElement: function (index) {
            return this.GetWindowChild(index, "_PWC" + index);
        },
        GetWindowHeaderElement: function (index) {
            return this.GetWindowChild(index, "_PWH" + index);
        },
        GetWindowHeaders: function () {
            var elements = [];
            if (this.HasDefaultWindow())
                elements = elements.concat(ASPx.GetNodesByClassName(this.GetWindowElement(-1), "dxpc-header"));
            for (var i = 0; i < this.GetWindowCount(); i++)
                elements = elements.concat(ASPx.GetNodesByClassName(this.GetWindowElement(i), "dxpc-header"));
            return elements;
        },
        GetEnableContentScrolling: function (index) {
            if (0 <= index && index < this.enableContentScrollingArray.length)
                return this.enableContentScrollingArray[index];
            else
                return this.enableContentScrolling;
        },
        GetWindowOverflowX: function (index) {
            if (0 <= index && index < this.contentOverflowXArray.length)
                return this.contentOverflowXArray[index];
            else
                return this.contentOverflowX;
        },
        GetWindowOverflowY: function (index) {
            if (0 <= index && index < this.contentOverflowYArray.length)
                return this.contentOverflowYArray[index];
            else
                return this.contentOverflowY;
        },
        GetWindowSizeGripElement: function (index) {
            return this.GetWindowSizeGripLite(index);
        },
        GetWindowSizeGripLite: function (index) {
            var footer = this.GetWindowFooterElement(index);
            if (!footer)
                return null;
            var descendants = ASPx.GetNodesByClassName(footer, PopupControlCssClasses.SizeGripLiteCssClassName);
            return descendants.length > 0 ? descendants[0] : null;
        },
        GetWindowFooterElement: function (index) {
            return this.GetWindowChild(index, "_PWF" + index);
        },
        GetContentContainer: function (index) {
            return this.GetWindowContentElement(index);
        },
        GetWindowIndex: function (element) {
            var id = element.id;
            var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
            return parseInt(id.substr(pos + ASPx.PCWIdSuffix.length));
        },
        GetWindowElementDisplayValue: function (windowHasAnyScrollbars, windowHeight) {
            return windowHasAnyScrollbars && windowHeight ? "block" : "table";
        },
        HaveSpecialDivForAnimation: function () {
            return this.enableAnimation;
        },
        GetWindowMainCell: function (element) {
            return this.HaveSpecialDivForAnimation() ? ASPx.GetNodeByTagName(element, "DIV", 0) : element;
        },
        GetWindowMainTable: function (element) {
            return this.GetWindowMainCell(element);
        },
        GetWindowShadowTable: function (index) {
            var shadowTable = this.HaveSpecialDivForAnimation() ? this.GetWindowShadowTableCore(index) : this.GetWindowElement(index);
            if (!shadowTable) return null;
            if (shadowTable.tagName != "TABLE")
                shadowTable = this.GetWindowShadowTableCore(index);
            return (shadowTable && shadowTable.tagName == "TABLE") ? shadowTable : null;
        },
        GetWindowShadowTableCore: function (index) {
            return this.GetWindowChild(index, "_PWST" + index);
        },
        GetWindowClientTable: function (index) {
            return this.GetWindowElement(index);
        },
        GetWindowIsShown: function (index) {
            if (0 <= index && index < this.shownArray.length)
                return this.shownArray[index];
            return this.shown;
        },
        SetWindowIsShown: function (index, shown) {
            if (0 <= index && index < this.shownArray.length)
                this.shownArray[index] = shown;
            else
                this.shown = shown;
        },
        GetWindowLeft: function (index) {
            if (0 <= index && index < this.leftArray.length)
                return this.leftArray[index];
            return this.left;
        },
        SetWindowLeft: function (index, left) {
            if (0 <= index && index < this.leftArray.length)
                this.leftArray[index] = left;
            else
                this.left = left;
        },
        GetWindowHeightInternal: function (index) {
            if (0 <= index && index < this.heightArray.length)
                return this.heightArray[index];
            return this.height;
        },
        GetWindowMinHeight: function (index) {
            if (0 <= index && index < this.minHeightArray.length)
                return this.minHeightArray[index];
            return this.minHeight;
        },
        GetWindowMaxHeight: function (index) {
            if (0 <= index && index < this.maxHeightArray.length)
                return this.maxHeightArray[index];
            return this.maxHeight;
        },
        SetWindowHeight: function (index, height) {
            if (0 <= index && index < this.heightArray.length)
                this.heightArray[index] = height;
            else
                this.height = height;
        },
        GetWindowWidthInternal: function (index) {
            if (0 <= index && index < this.widthArray.length)
                return this.widthArray[index];
            return this.width;
        },
        GetWindowWidthFromServer: function (index) {
            if (0 <= index && index < this.widthFromServerArray.length)
                return this.widthFromServerArray[index];
            return this.widthFromServer;
        },
        GetWindowMinWidth: function (index) {
            if (0 <= index && index < this.minWidthArray.length)
                return this.minWidthArray[index];
            return this.minWidth;
        },
        GetWindowMaxWidth: function (index) {
            if (0 <= index && index < this.maxWidthArray.length)
                return this.maxWidthArray[index];
            return this.maxWidth;
        },
        SetWindowWidth: function (index, width) {
            if (0 <= index && index < this.widthArray.length)
                this.widthArray[index] = width;
            else
                this.width = width;
        },
        GetWindowTop: function (index) {
            if (0 <= index && index < this.topArray.length)
                return this.topArray[index];
            return this.top;
        },
        SetWindowTop: function (index, top) {
            if (0 <= index && index < this.topArray.length)
                return this.topArray[index] = top;
            else
                return this.top = top;
        },
        GetStateHiddenFieldName: function () {
            return this.uniqueID + "State";
        },
        GetZIndex: function (index) {
            if (0 <= index && index < this.zIndexArray.length)
                return this.zIndexArray[index];
            return this.zIndex;
        },
        GetCurrentZIndex: function (index) {
            var element = this.GetWindowElement(index);
            if (element != null) {
                if (element.style.zIndex != "" && element.style.zIndex != this.GetDefaultZIndexFromServer())
                    return element.style.zIndex;
                if (0 <= index && index < this.GetWindowCountCore())
                    return this.zIndexArray[index];
                return this.zIndex;
            }
        },
        GetDefaultZIndexFromServer: function () {
            return defaultZIndexFromServer;
        },
        GetPopupControlZIndex: function () {
            return popupControlZIndex;
        },
        GetPopupType: function () {
            return "aspxpopup";
        },
        GetMainWindowWidth: function (index, noCache) {
            return this.GetClientWindowWidth(index, true, noCache);
        },
        GetClientWindowWidth: function (index, outerSize, noCache) {
            if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
                var cachedSize = this.GetWindowCachedSize(index);
                if (cachedSize != null)
                    return cachedSize.width;
            }
            var element = this.GetWindowElement(index);
            if (element != null)
                return element.offsetWidth;
        },
        GetMainWindowHeight: function (index, noCache) {
            return this.GetClientWindowHeight(index, true, noCache);
        },
        GetClientWindowHeight: function (index, outerSize, noCache) {
            if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
                var cachedSize = this.GetWindowCachedSize(index);
                if (cachedSize != null)
                    return cachedSize.height;
            }
            var element = this.GetWindowElement(index);
            if (element != null)
                return element.offsetHeight;
        },
        GetIframeLoading: function (index) {
            if (0 <= index && index < this.iframeLoadingArray.length)
                return this.iframeLoadingArray[index];
            return this.iframeLoading;
        },
        SetIframeLoading: function (index, value) {
            if (0 <= index && index < this.iframeLoadingArray.length)
                this.iframeLoadingArray[index] = value;
            else
                this.iframeLoading = value;
        },
        GetAutoUpdatePosition: function (index) {
            if (0 <= index && index < this.autoUpdatePositionArray.length)
                return this.autoUpdatePositionArray[index];
            return this.autoUpdatePosition;
        },
        GetHideBodyScrollWhenModal: function (index) {
            if (0 <= index && index < this.hideBodyScrollWhenModalArray.length)
                return this.hideBodyScrollWhenModalArray[index];
            return this.hideBodyScrollWhenModal;
        },
        SetHideBodyScrollWhenModal: function (index, value) {
            if (0 <= index && index < this.hideBodyScrollWhenModalArray.length)
                this.hideBodyScrollWhenModalArray[index] = value;
            else
                this.hideBodyScrollWhenModal = value;
        },
        GetCanScrollViewPort: function (index) {
            if (0 <= index && index < this.canScrollViewPortArray.length)
                return this.canScrollViewPortArray[index];
            return this.canScrollViewPort;
        },
        GetClientPopupPos: function (element, popupElement, pos, isX, isDragged) {
            var index = this.GetWindowIndex(element);
            var popupPosition = null;
            if (this.GetIsMaximizedOnWebKitTouch(index))
                return new ASPx.PopupPosition(ASPx.PrepareClientPosForElement(0, element, isX), false);
            if (isDragged)
                popupPosition = new ASPx.PopupPosition(pos == ASPx.InvalidPosition ? this.GetPosition(index, isX) : pos, false);
            else
                popupPosition = isX ? this.GetClientPopupPosX(element, popupElement, pos) : this.GetClientPopupPosY(element, popupElement, pos);
            popupPosition.position = ASPx.PrepareClientPosForElement(popupPosition.position, element, isX);
            if (ASPx.Browser.Firefox && ASPx.Browser.Version < 3 && this.GetWindowModalElement(index))
                popupPosition.position -= isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop();
            return popupPosition;
        },
        GetClientPopupPosX: function (element, popupElement, x) {
            var mainElement = this.GetWindowMainCell(element);
            var popupPosition = ASPx.PopupUtils.GetPopupAbsoluteX(mainElement, popupElement, this.getWindowHorizontalAlign(element), this.getWindowHorizontalOffset(element),
                x, this.GetWindowLeft(this.GetWindowIndex(element)), this.rtl, this.isPopupFullCorrectionOn);
            return this.CorrectPopupPositionForClientWindow(element, popupPosition, true);
        },
        getWindowHorizontalOffset: function (element) {
            return this.popupHorizontalOffset;
        },
        getWindowHorizontalAlign: function (element) {
            return this.popupHorizontalAlign;
        },
        GetClientPopupPosY: function (element, popupElement, y) {
            var mainElement = this.GetWindowMainCell(element);
            var popupPosition = ASPx.PopupUtils.GetPopupAbsoluteY(mainElement, popupElement, this.getWindowVerticalAlign(element), this.getWindowVerticalOffset(element),
                y, this.GetWindowTop(this.GetWindowIndex(element)), this.isPopupFullCorrectionOn, this.usedInDropDown);
            return this.usedInDropDown ? popupPosition : this.CorrectPopupPositionForClientWindow(element, popupPosition, false);
        },
        getWindowVerticalAlign: function (element) {
            return this.popupVerticalAlign;
        },
        getWindowVerticalOffset: function (element) {
            return this.popupVerticalOffset;
        },
        CorrectPopupPositionForClientWindow: function (element, popupPosition, isX) {
            if (element.isPopupPositionCorrectionOn && this.isPopupFullCorrectionOn) {
                popupPosition.position = ASPx.PopupUtils.AdjustPositionToClientScreen(element, popupPosition.position, this.rtl, isX);
            }
            return popupPosition;
        },
        DoShowWindow: function (index, popupElementIndex, evt) {
            if (!this.InternalIsWindowVisible(index)) {
                var x = ASPx.Evt.GetEventX(evt);
                var y = ASPx.Evt.GetEventY(evt);
                this.DoShowWindowAtPos(index, x, y, popupElementIndex, true, true, evt, ASPxClientPopupControlCloseReason.OuterMouseClick);
            }
        },
        AdjustContentOnShow: function (index) {
            var windowElement = this.GetWindowElement(index);
            if (this.adjustInnerControlsSizeOnShow)
                ASPx.GetControlCollection().AdjustControls(windowElement);
        },
        DoShowWindowAtPos: function (index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
            if (!this.isInitialized)
                this.PopulatePopupElements(index);
            var element = this.GetWindowElement(index);
            if (element != null) {
                this.StopCloseAnimation(index);
                if (this.adjustInnerControlsSizeOnShow) {
                    var windowContent = this.GetContentContainer(index);
                    var collection = ASPx.GetControlCollection();
                    collection.CollapseControls(windowContent);
                }
                this.FFTextCurFixShow(index, true);
                if (closeOtherWindows)
                    aspxGetPopupControlCollection().DoHideAllWindows(element, this.GetWindowElementId(index), false, closeOtherReason);
                var isMoving = this.InternalIsWindowVisible(index);
                ASPx.SetElementDisplay(element, true);
                element.style.display = this.GetWindowElementDisplayValue(this.HasAnyScrollBars(index), this.GetPopupWindowDimensionFromCache(index, false));
                element.style.position = "absolute";
                var scrollDiv = this.GetWindowScrollDiv(index),
                    shouldResetScrollSize = scrollDiv && this.GetEnableContentScrolling(index) && ASPx.GetDocumentMaxClientHeight() <= element.offsetHeight,
                    savedScrollDivHeight = shouldResetScrollSize && scrollDiv.style.height;
                if (shouldResetScrollSize)
                    scrollDiv.style.height = 0;
                var cachedSize = this.GetWindowCachedSize(index);
                if (cachedSize != null) {
                    this.SetWindowSize(this.GetWindow(index), cachedSize.width, cachedSize.height);
                    this.ResetWindowCachedSize(index);
                }
                if (!this.GetWindowIsShown(index)) {
                    var width = this.GetPopupWindowDimensionFromCache(index, true),
                        height = this.GetPopupWindowDimensionFromCache(index, false);
                    this.SetClientWindowSizeCoreLite(index, width, height);
                    this.SetWindowIsShown(index, true);
                }
                var popupElement = this.GetPopupElement(index, popupElementIndex);
                if (popupElement)
                    this.SetLastShownPopupElementIndex(index, popupElementIndex);
                var isDragged = this.GetIsDragged(index),
                    isMaximized = this.GetIsMaximized(index);
                if (isMaximized)
                    this.NormalizeMaximizedWindowSize(index);
                var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, isDragged);
                var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, isDragged);
                var clientX = horizontalPopupPosition.position;
                var clientY = verticalPopupPosition.position;
                this.SetWindowPos(index, element, clientX, clientY);
                if (shouldResetScrollSize)
                    scrollDiv.style.height = savedScrollDivHeight;
                if (this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
                    ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
                this.DoShowWindowModalElement(index);
                var isAnimationNeed = this.IsAnimationAllowed() && !isMoving;
                if (isAnimationNeed && this.popupAnimationType !== "none") {
                    if (this.popupAnimationType === 'slide')
                        this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
                    else
                        this.StartFadeAnimation(element, index);
                } else
                    ASPx.SetElementVisibility(element, true);
                this.SetWindowPopUpReasonMouseEvent(index, evt);
                this.ShowWindowContentUrl(index);
                this.AdjustContentOnShow(index);
                scrollDiv = this.GetWindowScrollDiv(index);
                if (scrollDiv && this.GetEnableContentScrolling(index)) {
                    var dimension = null;
                    var windowMainCell = this.GetWindowMainCell(element);
                    if (windowMainCell.style.width && windowMainCell.style.height)
                        dimension = 'both';
                    else if (windowMainCell.style.width)
                        dimension = 'width';
                    else if (windowMainCell.style.height)
                        dimension = 'height';
                    if (!dimension)
                        return;
                    ASPx.SetElementDisplay(scrollDiv, false);
                    this.SetWindowScrollDivSize(scrollDiv, index, dimension);
                    ASPx.SetElementDisplay(scrollDiv, true);
                }
                this.registerAndActivateWindow(element, index, allowChangeZIndex);
                if (!isMoving) {
                    this.RaisePopUp(index);
                    if (!this.IsAnimationAllowed())
                        this.OnWindowShown(index);
                }
                this.CorrectWindowSizeGripPositionLite(index);
                this.CorrectWindowHeaderText(index);
                this.InitMaximizedWindows(index);
                this.InitCollapsedWindows(index);
                if (this.GetIsPinned(index)) window.setTimeout(function () { this.HoldPosition(index, true); }.aspxBind(this), 0);
                if (!this.GetShowOnPageLoad(index))
                    this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
                if (element.style.width.indexOf("px") > -1) {
                    element.style.width = ASPx.GetCurrentStyle(element).width;
                }
                this.updateContentScrollIfNeeded(index);
            }
        },
        updateContentScrollIfNeeded: function (index) {
            var windowElement = this.GetWindowElement(index);
            var wrapper = this.getWindowWrapper(windowElement);
            var wrapperScroll = this.getWindowWrapperScroll(windowElement);
            if (!wrapper || !this.WindowIsModal(index) || !this.GetHideBodyScrollWhenModal(index))
                return;
            ASPx.PopupUtils.adjustViewportScrollWrapper(wrapper, wrapperScroll, windowElement);
        },
        getWindowWrapper: function (windowElement) {
            return ASPx.GetParentByClassName(windowElement, PopupControlCssClasses.WindowWrapperCssClassName);
        },
        getWindowWrapperScroll: function (windowElement) {
            return ASPx.GetParentByClassName(windowElement, PopupControlCssClasses.WindowWrapperScrollCssClassName);
        },
        registerAndActivateWindow: function (windowElement, index, allowChangeZIndex) {
            aspxGetPopupControlCollection().RegisterVisibleWindow(windowElement, this, index);
            if (allowChangeZIndex)
                aspxGetPopupControlCollection().ActivateWindowElement(windowElement, undefined, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
        },
        GetPopupWindowDimensionFromCache: function (index, isWidth) {
            var dimension;
            if (isWidth) {
                dimension = this.GetWindowWidthInternal(index);
                if (ASPx.IsExists(dimension)) {
                    dimension = Math.max(dimension, this.GetWindowMinWidth(index));
                    var maxWidth = this.GetWindowMaxWidth(index);
                    if (maxWidth)
                        dimension = Math.min(dimension, maxWidth);
                }
            }
            else {
                dimension = this.GetWindowHeightInternal(index);
                if (ASPx.IsExists(dimension)) {
                    if (dimension != constants.DEFAULT_WINDOW_HEIGHT || !this.HasAnyScrollBars(index))
                        dimension = Math.max(dimension, this.GetWindowMinHeight(index));
                    var maxHeight = this.GetWindowMaxHeight(index);
                    if (maxHeight)
                        dimension = Math.min(dimension, maxHeight);
                }
            }
            return dimension;
        },
        NormalizeMaximizedWindowSize: function (index) {
            var width = this.GetPopupWindowDimensionFromCache(index, true),
                height = this.GetPopupWindowDimensionFromCache(index, false),
                dimensions = this.getDocumentDimensions(index),
                sizeNormalizationIsNeeded = width < dimensions.width || height < dimensions.height;
            if (sizeNormalizationIsNeeded)
                this.NormalizeWindowSize(index, true);
        },
        NormalizeWindowSize: function (index, isMaximized) {
            var width = this.GetClientWindowWidth(index),
                height = this.GetClientWindowHeight(index),
                normWidth = width,
                normHeight = height,
                maxWidth = this.GetWindowMaxWidth(index),
                minWidth = this.GetWindowMinWidth(index),
                maxHeight = this.GetWindowMaxHeight(index),
                minHeight = this.GetWindowMinHeight(index);
            if (maxWidth)
                normWidth = Math.min(normWidth, maxWidth);
            if (minWidth)
                normWidth = Math.max(normWidth, minWidth);
            if (maxHeight)
                normHeight = Math.min(normHeight, maxHeight);
            if (minHeight)
                normHeight = Math.max(normHeight, minHeight);
            if (normWidth !== width || normHeight !== height)
                this.SetWindowSize(this.GetWindow(index), normWidth, normHeight);
            if (isMaximized) {
                var dimensions = this.getDocumentDimensions(index);
                if (this.GetIsCollapsed(index)) {
                    if (normWidth != dimensions.width) {
                        this.SetWindowSizeByIndexCore(index, dimensions.width, normHeight, true);
                    }
                } else {
                    if (normWidth != dimensions.width || normHeight != dimensions.height) {
                        this.SetWindowSizeByIndexCore(index, dimensions.width, dimensions.height, false);
                    }
                }
            }
        },
        DoShowWindowIFrame: function (index, x, y, width, height) {
            if (!this.renderIFrameForPopupElements) return;
            var element = this.GetWindowElement(index);
            var iFrame = this.GetWindowIFrame(index);
            if (element && iFrame) {
                var cell = this.GetWindowMainCell(element);
                if (width < 0)
                    width = cell.offsetWidth;
                if (height < 0)
                    height = cell.offsetHeight;
                ASPx.SetStyles(iFrame, { width: width, height: height });
                if (x != ASPx.InvalidPosition && y != ASPx.InvalidPosition)
                    ASPx.SetStyles(iFrame, { left: x, top: y });
                if (ASPx.Browser.IE || ASPx.Browser.Firefox)
                    this.ClearWindowIframeBodyInnerHtml(iFrame);
                ASPx.SetElementDisplay(iFrame, true);
            }
        },
        GetIframeBody: function (iFrame) {
            var document = iFrame.contentDocument || iFrame.contentWindow.document;
            if (document)
                return document.getElementsByTagName('body')[0];
        },
        ClearWindowIframeBodyInnerHtml: function (iFrame) {
            var iFrameBody = this.GetIframeBody(iFrame);
            if (iFrameBody)
                iFrameBody.innerHTML = "";
        },
        DoShowWindowModalElement: function (index) {
            var modalElement = this.GetWindowModalElement(index);
            if (modalElement) {
                var bodyScrollHasJustBeingHidden = false;
                if (this.GetHideBodyScrollWhenModal(index) && (!this.IsWindowVisible(this.GetWindow(index)) || !ASPx.IsElementVisible(modalElement))) {
                    bodyScrollHasJustBeingHidden = true;
                    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
                    if (!ASPx.Browser.WebKitTouchUI)
                        ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(this.GetWindowElementId(index));
                }
                if (ASPx.Browser.IE && this.GetHideBodyScrollWhenModal(index))
                    ASPx.Evt.AttachEventToElement(modalElement, ASPx.Evt.GetMouseWheelEventName(), function (evt) { return ASPx.Evt.PreventEventAndBubble(evt); });
                ASPx.SetElementDisplay(modalElement, true);
                aspxGetPopupControlCollection().AdjustModalElementBounds(modalElement);
                if (this.popupAnimationType == "fade") {
                    var endOpacity = this.GetModalElementEndAnimationOpacity(index);
                    if (ASPx.Browser.IE && ASPx.Browser.MajorVersion < 9) {
                        ASPx.SetElementVisibility(modalElement, true);
                        ASPx.AnimationHelper.setOpacity(modalElement, 0);
                    } else {
                        ASPx.AnimationHelper.setOpacity(modalElement, 0);
                        ASPx.SetElementVisibility(modalElement, true);
                    }
                    ASPx.AnimationHelper.fadeTo(modalElement, { to: endOpacity });
                } else {
                    ASPx.SetElementVisibility(modalElement, true);
                }
                aspxGetPopupControlCollection().RegisterVisibleModalElement(modalElement);
                if (bodyScrollHasJustBeingHidden)
                    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
            }
        },
        DoHideWindowCore: function (index, closeReason) {
            this.FFTextCurFixHide(index, true);
            var element = this.GetWindowElement(index);
            if (element != null) {
                if (this.HasCloseAnimation())
                    this.PrepareElementAfterCloseAnimation(element);
                element.isHiding = true;
                element.style.zIndex = this.GetDefaultZIndexFromServer();
                this.SetIsDragged(index, false);
                this.UpdateWindowsStateCookie();
                element.isHiding = false;
                this.StopShowAnimation(index);
                ASPx.SetElementDisplay(element, false);
                ASPx.SetElementVisibility(element, false);
                if (this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
                    ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
                this.DoHideWindowModalElement(element, closeReason);
                this.DoHideWindowIFrame(element);
                aspxGetPopupControlCollection().UnregisterVisibleWindow(element);
                this.HideWindowLoadingPanel(index);
            }
        },
        PrepareElementAfterCloseAnimation: function (element) {
            element.closeAnimationCompleted = true;
            if (this.closeAnimationType == "fade")
                ASPx.SetStyles(element, { opacity: 1 });
            else
                ASPx.SetStyles(this.GetWindowMainTable(element), {
                    left: 0,
                    top: 0
                });
        },
        HasCloseAnimation: function () {
            return this.closeAnimationType != "none";
        },
        StopCloseAnimation: function (index) {
            var element = this.GetWindowElement(index);
            if (this.HasCloseAnimation() && !element.closeAnimationCompleted) {
                ASPx.AnimationHelper.cancelAnimation(element);
                this.DoHideWindowCore(index);
            }
        },
        StopShowAnimation: function (index) {
            if (this.popupAnimationType != "none") {
                var windowElement = this.GetWindowElement(index);
                if (this.popupAnimationType === 'slide')
                    ASPx.PopupUtils.StopAnimation(windowElement, this.GetWindowMainCell(windowElement));
                else
                    ASPx.AnimationHelper.cancelAnimation(windowElement);
            }
        },
        DoHideWindowCoreWithAnimation: function (index, closeReason) {
            this.StopShowAnimation(index);
            var element = this.GetWindowElement(index);
            element.closeAnimationCompleted = false;
            if (this.closeAnimationType == "fade") {
                if (element.modalElement)
                    ASPx.AnimationHelper.fadeOut(element.modalElement, null, this.fadeAnimationDuration);
                ASPx.AnimationHelper.fadeOut(element, function () {
                    this.DoHideWindowCore(index);
                    this.RaiseCloseUp(index, closeReason);
                }.aspxBind(this), this.fadeAnimationDuration);
            }
            else
                this.DoHideWindowWithSlideAnimation(index, closeReason);
        },
        DoHideWindowWithSlideAnimation: function (index, closeReason) {
            var element = this.GetWindowElement(index);
            var horizontalPopupPosition = this.GetClientPopupPos(element, null, ASPx.InvalidPosition, true, true);
            var verticalPopupPosition = this.GetClientPopupPos(element, null, ASPx.InvalidPosition, false, true);
            var horizontalDirection = ASPx.PopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
            var verticalDirection = ASPx.PopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
            ASPx.PopupUtils.InitAnimationDivCore(element);
            ASPx.AnimationHelper.createMultipleAnimationTransition(this.GetWindowMainTable(element), {
                duration: this.slideAnimationDuration,
                onComplete: function (element) {
                    this.DoHideWindowCore(index);
                    this.RaiseCloseUp(index, closeReason);
                }.aspxBind(this)
            }).Start({
                left: { to: horizontalDirection * element.offsetWidth, unit: "px" },
                top: { to: verticalDirection * element.offsetHeight, unit: "px" }
            });
        },
        DoHideWindow: function (index, dontRaiseClosing, closeReason) {
            if (!this.InternalIsWindowVisible(index)) return;
            var cancel = !dontRaiseClosing && this.RaiseClosing(index, closeReason);
            if (!cancel) {
                if (this.accessibilityCompliant) {
                    var focusElement = this.accessibleFocusElement ? this.accessibleFocusElement : this.GetCurrentPopupElement();
                    ASPx.AccessibilityUtils.SetFocusAccessibleCore(focusElement);
                    this.accessibleFocusElement = null;
                }
                if (this.HasCloseAnimation())
                    this.DoHideWindowCoreWithAnimation(index, closeReason);
                else {
                    this.DoHideWindowCore(index, closeReason);
                    this.RaiseCloseUp(index, closeReason);
                }
            }
            this.updateContentScrollIfNeeded(index);
            return cancel;
        },
        DoHideWindowIFrame: function (element) {
            if (!this.renderIFrameForPopupElements) return;
            var iFrame = element.overflowElement;
            if (iFrame)
                ASPx.SetElementDisplay(iFrame, false);
        },
        DoHideWindowModalElement: function (element, closeReason) {
            var modalElement = element.modalElement;
            if (modalElement) {
                if (!ASPx.GetElementVisibility(modalElement))
                    return;
                var closeModalElement = function () {
                    ASPx.SetStyles(modalElement, { width: 1, height: 1, zIndex: defaultZIndexFromServer - 1 });
                    ASPx.SetElementVisibility(modalElement, false);
                    ASPx.SetElementDisplay(modalElement, false);
                };
                aspxGetPopupControlCollection().UnregisterVisibleModalElement(modalElement);
                if (this.GetHideBodyScrollWhenModal(this.GetWindowIndex(element))) {
                    if (ASPx.Browser.WebKitFamily)
                        aspxGetPopupControlCollection().LockScrollEvent();
                    if (!ASPx.Browser.WebKitTouchUI)
                        ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
                    if (ASPx.Browser.WebKitFamily)
                        aspxGetPopupControlCollection().UnlockScrollEvent();
                }
                if (closeReason == ASPxClientPopupControlCloseReason.OuterMouseClick) {
                    ASPx.SetStyles(modalElement, { opacity: 0 });
                    if (!modalElement.mouseHandler) {
                        modalElement.mouseHandler = function () {
                            ASPx.SetStyles(modalElement, { opacity: "" });
                            closeModalElement();
                            ASPx.Evt.DetachEventFromElement(modalElement, "mouseup", modalElement.mouseHandler);
                            ASPx.Evt.DetachEventFromElement(modalElement, "mouseout", modalElement.mouseHandler);
                        };
                    }
                    ASPx.Evt.AttachEventToElement(modalElement, "mouseup", modalElement.mouseHandler);
                    ASPx.Evt.AttachEventToElement(modalElement, "mouseout", modalElement.mouseHandler);
                } else
                    closeModalElement();
            }
        },
        SetWindowDisplay: function (index, value) {
            var pcwElement = this.GetWindowElement(index);
            this.SetFFTextCurFixShowing(index, value, false);
            ASPx.SetElementDisplay(pcwElement, value);
        },
        GetTextCurFixDiv: function (index) {
            return ASPx.GetElementById(this.name + "_" + "TCFix" + index);
        },
        FFTextCurFixShow: function (index, isSetVisibility) {
            this.SetFFTextCurFixShowing(index, true, isSetVisibility);
        },
        FFTextCurFixHide: function (index, isSetVisibility) {
            this.SetFFTextCurFixShowing(index, false, isSetVisibility);
        },
        IsFFTextCurFixRequired: function (index) {
            return ASPx.Browser.Firefox && ASPx.Browser.Version < 3 && this.GetWindowModalElement(index);
        },
        SetFFTextCurFixShowing: function (index, value, isSetVisibility) {
            if (this.IsFFTextCurFixRequired(index)) {
                var fixDiv = this.GetTextCurFixDiv(index);
                if (fixDiv) {
                    if (isSetVisibility)
                        ASPx.SetElementVisibility(fixDiv, value);
                    ASPx.SetElementDisplay(fixDiv, value);
                }
            }
        },
        SetWindowPos: function (index, element, x, y) {
            ASPx.SetStyles(element, { left: x, top: y });
            this.DoShowWindowIFrame(index, x, y, ASPx.InvalidDimension, ASPx.InvalidDimension);
            this.SetIsDragged(index, true);
            this.SetWindowLeft(index, ASPx.GetAbsoluteX(element));
            this.SetWindowTop(index, ASPx.GetAbsoluteY(element));
            this.UpdateWindowsStateCookie();
        },
        OnWindowShown: function (windowIndex) {
            this.EnsureContent(windowIndex, false);
            this.EnsureIFrameHeightAdjusted(windowIndex);
            var isMaximized = this.GetIsMaximized(windowIndex);
            if (isMaximized || this.HasAnyScrollBars(windowIndex))
                this.NormalizeWindowSize(windowIndex, isMaximized);
            this.RaiseShown(windowIndex);
            var loadingElementsWillNotBeShown = !this.lpTimers[windowIndex] || this.lpTimers[windowIndex] < 0;
            if (this.InWindowCallback(windowIndex) && loadingElementsWillNotBeShown) {
                this.ShowWindowLoadingElementsInternal(windowIndex);
            }
        },
        EnsureContent: function (windowIndex, isInit) {
            var element = this.GetWindowElement(windowIndex);
            if (element && !element.loaded && !element.loading) {
                var shouldLoad = this.contentLoadingMode == "OnPageLoad" || this.contentLoadingMode == "OnFirstShow" && !isInit;
                if (shouldLoad) {
                    element.loading = true;
                    this.CreateWindowCallback(windowIndex, windowIndex);
                } else if (this.contentLoadingMode == "Default")
                    element.loaded = true;
            }
        },
        CreateWindowCallback: function (windowIndex, argument, handler) {
            this.IncreaseWindowRequestCount(windowIndex);
            var element = this.GetWindowElement(windowIndex);
            if (this.contentLoadingMode != "OnPageLoad" || !element.loading || this.GetShowOnPageLoad(windowIndex))
                this.ShowWindowLoadingElements(windowIndex);
            this.CreateCallback(argument, null, handler);
        },
        OnCallback: function (result) {
            this.OnCallbackInternal(result.html, result.index, false);
        },
        OnCallbackError: function (result, data) {
            this.OnCallbackInternal(result, ASPx.IsExists(data) ? data : -1, true);
        },
        OnCallbackErrorAfterUserHandle: function (result, data) {
            this.DecreaseWindowRequestCount(data);
        },
        RaiseCallbackError: function (message) {
            var result = ASPxClientControl.prototype.RaiseCallbackError.call(this, message);
            if (result.isHandled)
                this.HideAllLoadingPanels();
            return result;
        },
        OnCallbackInternal: function (html, windowIndex, isError) {
            var element = this.GetWindowElement(windowIndex);
            element.loaded = !isError;
            element.loading = false;
            this.DecreaseWindowRequestCount(windowIndex);
            this.HideWindowLoadingPanel(windowIndex);
            this.SetWindowContentHtmlCore(windowIndex, html);
            if (this.contentLoadingMode === "OnFirstShow" && this.InternalIsWindowVisible(windowIndex))
                this.UpdateWindowPositionInternal(windowIndex, this.GetPopupElement(windowIndex, this.GetLastShownPopupElementIndex(windowIndex)));
            this.savedCallbackWindowIndex = windowIndex;
            this.UpdateWindowsStateCookie();
        },
        IncreaseWindowRequestCount: function (index) {
            if (!this.windowRequestCount[index])
                this.windowRequestCount[index] = 1;
            else
                this.windowRequestCount[index]++;
        },
        DecreaseWindowRequestCount: function (index) {
            this.windowRequestCount[index]--;
        },
        InWindowCallback: function (windowIndex) {
            return this.windowRequestCount[windowIndex] > 0;
        },
        ShowWindowLoadingElements: function (windowIndex) {
            if (this.lpTimers[windowIndex] && this.lpTimers[windowIndex] > -1) return;
            if (this.enableCallbackAnimation)
                this.StartWindowBeginCallbackAnimation(windowIndex);
            else
                this.ShowWindowLoadingElementsInternal(windowIndex);
        },
        ShowWindowLoadingElementsInternal: function (windowIndex) {
            if (this.lpDelay > 1 && !this.enableCallbackAnimation) {
                var _this = this;
                this.lpTimers[windowIndex] = window.setTimeout(function () { _this.ShowWindowLoadingPanelOnTimer(windowIndex); }, this.lpDelay);
            }
            else
                this.ShowWindowLoadingPanel(windowIndex);
        },
        StartWindowBeginCallbackAnimation: function (windowIndex) {
            this.callbackAnimationProcessings[windowIndex] = true;
            this.isCallbackFinishedStates[windowIndex] = false;
            ASPx.AnimationHelper.fadeOut(this.GetWindowContentElement(windowIndex), function () { this.FinishWindowBeginCallbackAnimation(windowIndex); }.aspxBind(this));
        },
        FinishWindowBeginCallbackAnimation: function (windowIndex) {
            this.callbackAnimationProcessings[windowIndex] = false;
            if (!this.isCallbackFinishedStates[windowIndex])
                this.ShowWindowLoadingElementsInternal(windowIndex);
            else
                this.DoCallback(this.savedCallbackResults[windowIndex]);
        },
        CheckBeginCallbackAnimationInProgress: function (callbackResult) {
            var result;
            try {
                result = this.EvalCallbackResult(callbackResult).result;
            } catch (e) {
                return false;
            }
            var windowIndex = result.index;
            if (this.enableCallbackAnimation && this.callbackAnimationProcessings[windowIndex]) {
                this.savedCallbackResults[windowIndex] = callbackResult;
                this.isCallbackFinishedStates[windowIndex] = true;
                return true;
            }
            return false;
        },
        StartWindowEndCallbackAnimation: function (windowIndex) {
            this.callbackAnimationProcessings[windowIndex] = true;
            ASPx.AnimationHelper.fadeIn(this.GetWindowContentElement(windowIndex), function () { this.FinishWindowEndCallbackAnimation(windowIndex); }.aspxBind(this));
        },
        FinishWindowEndCallbackAnimation: function (windowIndex) {
            this.DoEndCallback();
            this.callbackAnimationProcessings[windowIndex] = false;
        },
        CheckEndCallbackAnimationNeeded: function () {
            var windowIndex = this.savedCallbackWindowIndex;
            this.savedCallbackWindowIndex = null;
            if (windowIndex !== null && !this.callbackAnimationProcessings[windowIndex]) {
                this.StartWindowEndCallbackAnimation(windowIndex);
                return true;
            }
            return false;
        },
        CreateLoadingDiv: function (parentElement, offsetElement, windowIndex) {
            if (typeof (windowIndex) != "undefined") {
                var loadingDiv = ASPxClientControl.prototype.CreateLoadingDiv.call(this, parentElement, offsetElement);
                loadingDiv.id += windowIndex;
                return loadingDiv;
            }
        },
        CreateLoadingPanelWithAbsolutePosition: function (parentElement, offsetElement, windowIndex) {
            if (typeof (windowIndex) != "undefined") {
                var loadingPanel = ASPxClientControl.prototype.CreateLoadingPanelWithAbsolutePosition.call(this, parentElement, offsetElement);
                loadingPanel.id += windowIndex;
                return loadingPanel;
            }
        },
        ShowWindowLoadingPanelOnTimer: function (windowIndex) {
            this.ClearWindowLoadingPanelTimer(windowIndex);
            this.ShowWindowLoadingPanel(windowIndex);
        },
        ClearWindowLoadingPanelTimer: function (windowIndex) {
            this.lpTimers[windowIndex] = ASPx.Timer.ClearTimer(this.lpTimers[windowIndex]);
        },
        GetLoadingPanelOffsetElement: function (windowIndex) {
            return this.GetWindowContentWrapperElement(windowIndex);
        },
        ShowWindowLoadingPanel: function (windowIndex) {
            if (!this.IsExistLoadingPanel())
                return;
            if (!this.loadingPanels[windowIndex] && this.InternalIsWindowVisible(windowIndex)) {
                var parentElement = this.GetWindowElement(windowIndex).parentNode;
                var offsetElement = this.GetLoadingPanelOffsetElement(windowIndex);
                this.loadingDivs[windowIndex] = this.CreateLoadingDiv(parentElement, offsetElement, windowIndex);
                this.loadingPanels[windowIndex] = this.CreateLoadingPanelWithAbsolutePosition(parentElement, offsetElement, windowIndex);
            }
        },
        HideAllLoadingPanels: function () {
            if (this.HasDefaultWindow())
                this.HideWindowLoadingPanel(-1);
            for (var i = 0; i < this.GetWindowCount(); i++)
                this.HideWindowLoadingPanel(i);
        },
        HideWindowLoadingPanel: function (windowIndex) {
            this.ClearWindowLoadingPanelTimer(windowIndex);
            if (this.loadingDivs[windowIndex]) {
                ASPx.RemoveElement(this.loadingDivs[windowIndex]);
                this.loadingDivs[windowIndex] = null;
            }
            if (this.loadingPanels[windowIndex]) {
                ASPx.RemoveElement(this.loadingPanels[windowIndex]);
                this.loadingPanels[windowIndex] = null;
            }
        },
        ShouldHideExistingLoadingElements: function () {
            return false;
        },
        IsLoadingContainerVisible: function () {
            return true;
        },
        IsExistLoadingPanel: function () {
            return !!this.GetLoadingDiv();
        },
        InitializeDOM: function () {
            var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
            if (windowElement)
                windowElement.dxinit = true;
        },
        IsDOMInitialized: function () {
            var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
            return windowElement && windowElement.dxinit;
        },
        IsDOMDisposed: function () {
            var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
            return !ASPx.IsExistsElement(windowElement);
        },
        PerformCallback: function (parameter, onSuccess) {
            this.PerformWindowCallback(null, parameter, onSuccess);
        },
        PerformWindowCallback: function (window, parameter, onSuccess) {
            parameter = ASPx.IsExists(parameter) ? parameter.toString() : "";
            var index = (window != null) ? window.index : -1;
            if (!this.InWindowCallback(index)) {
                var windowCallbackArguments = index + ";" + parameter;
                this.CreateWindowCallback(index, windowCallbackArguments, onSuccess);
            }
        },
        RegisterInControlTree: function (tree) {
            var mainNode = tree.createNode(null, this);
            if (this.HasDefaultWindow())
                this.RegisterRelatedNodeForWindowElement(tree, -1, mainNode);
            for (var i = 0; i < this.GetWindowCount(); i++)
                this.RegisterRelatedNodeForWindowElement(tree, i, mainNode);
        },
        RegisterRelatedNodeForWindowElement: function (tree, windowElementIndex, mainNode) {
            var windowElement = this.GetWindowElement(windowElementIndex);
            if (windowElement) {
                var childNode = tree.createNode(windowElement.id, null);
                tree.addRelatedNode(mainNode, childNode);
            }
        },
        GetTwoVerticalPaddingSize: function (element) {
            var heightWithBorders = element.clientHeight;
            var paddingTopBackup = element.style.paddingTop;
            var paddingBottomBackup = element.style.paddingBottom;
            element.style.paddingTop = "0px";
            element.style.paddingBottom = "0px";
            var heightWithoutBorders = element.clientHeight;
            element.style.paddingTop = paddingTopBackup;
            element.style.paddingBottom = paddingBottomBackup;
            return (heightWithBorders - heightWithoutBorders);
        },
        InternalIsWindowVisible: function (index) {
            var element = this.GetWindowElement(index);
            if (!element)
                return false;
            if (this.HasCloseAnimation() && !element.closeAnimationCompleted)
                return false;
            var currentStyle = ASPx.GetCurrentStyle(element);
            return ((currentStyle && currentStyle.visibility != "hidden") && ASPx.GetElementDisplay(element) ? true : false);
        },
        InternalIsWindowDisplayed: function (index) {
            var element = this.GetWindowElement(index);
            return (element != null) ? ASPx.GetElementDisplay(element) : false;
        },
        OnActivate: function (index, evt) {
            var element = this.GetWindowElement(index);
            if (element != null)
                aspxGetPopupControlCollection().ActivateWindowElement(element, evt, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
        },
        OnAnimationStop: function (index) {
            this.OnWindowShown(index);
            if (ASPx.Browser.Firefox)
                this.GetWindowElement(index).style.display = "table";
        },
        OnDragStart: function (evt, index) {
            this.SetIsDragged(index, true);
            this.ShowDragCursor(index);
            if (this.GetWindowContentIFrameElement(index))
                this.SetIframeVisibleForDragging(index, false);
            this.InitDragInfo(index, evt);
        },
        InitDragInfo: function (index, evt) {
            var element = this.GetWindowElement(index);
            var gragXOffset = ASPx.GetAbsoluteX(element) - ASPx.Evt.GetEventX(evt);
            var gragYOffset = ASPx.GetAbsoluteY(element) - ASPx.Evt.GetEventY(evt);
            var xClientCorrection = ASPx.GetPositionElementOffset(element, true);
            var yClientCorrection = ASPx.GetPositionElementOffset(element, false);
            gragXOffset -= xClientCorrection;
            gragYOffset -= yClientCorrection;
            aspxGetPopupControlCollection().InitDragObject(this, index, gragXOffset, gragYOffset, xClientCorrection, yClientCorrection);
        },
        OnDrag: function (index, x, y, xClientCorrection, yClientCorrection) {
            var element = this.GetWindowElement(index);
            if (element != null) {
                ASPx.SetStyles(element, { left: x, top: y });
                xClientCorrection = typeof (xClientCorrection) != "undefined" ? xClientCorrection : 0;
                yClientCorrection = typeof (yClientCorrection) != "undefined" ? yClientCorrection : 0;
                this.SetWindowLeft(index, x + xClientCorrection);
                this.SetWindowTop(index, y + yClientCorrection);
                var iFrame = element.overflowElement;
                if (iFrame)
                    ASPx.SetStyles(iFrame, { left: x, top: y });
                if (ASPx.Browser.Opera)
                    ASPx.Selection.Clear();
            }
        },
        OnDragStop: function (index) {
            var element = this.GetWindowElement(index);
            this.HideDragCursor(index);
            this.UpdateWindowsStateCookie();
            if (this.GetWindowContentIFrameElement(index))
                this.SetIframeVisibleForDragging(index, true);
            this.updateContentScrollIfNeeded(index);
        },
        OnPopupElementMouseOver: function (evt, popupElement) {
            if (popupElement != null) {
                var index = popupElement.DXPopupWindowIndex;
                var isVisible = this.InternalIsWindowVisible(index);
                var popupElementIndex = popupElement.DXPopupElementIndex;
                if (this.GetLastOverPopupElementIndex(index) != popupElementIndex) {
                    if (aspxGetPopupControlCollection().IsAppearTimerActive())
                        aspxGetPopupControlCollection().ClearAppearTimer();
                    if (aspxGetPopupControlCollection().IsDisappearTimerActive())
                        aspxGetPopupControlCollection().ClearDisappearTimer();
                    if (isVisible) {
                        this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.MouseOut);
                        isVisible = false;
                    }
                }
                if (!isVisible) {
                    aspxGetPopupControlCollection().SetAppearTimer(this.name, index, popupElement.DXPopupElementIndex, this.appearAfter, evt);
                    aspxGetPopupControlCollection().InitOverObject(this, index, evt);
                }
                this.SetLastOverPopupElementIndex(index, popupElementIndex);
            }
        },
        OnPopupElementMouseOut: function (evt, popupElement) {
        },
        SetIframeVisibleForDragging: function (index, visible) {
            var iframeElement = this.GetWindowContentIFrameElement(index);
            if (ASPx.Browser.IE || ASPx.Browser.Edge) {
                if (ASPx.Browser.Edge || ASPx.Browser.Version >= 11)
                    iframeElement.style.pointerEvents = visible ? "" : "none";
                else {
                    if (visible)
                        this.RemoveIframeCoverDiv(iframeElement, index);
                    else
                        this.CreateIframeCoverDiv(iframeElement, index);
                }
            }
            ASPx.SetElementVisibility(iframeElement, visible);
        },
        CreateFakeDivForIframe: function (iframe) {
            var fakeDiv = document.createElement("div");
            ASPx.SetStyles(fakeDiv, { width: iframe.offsetWidth, height: iframe.offsetHeight });
            return fakeDiv;
        },
        CreateIframeCoverDiv: function (iframe, index) {
            if (!this.iframeCoverDiv)
                this.iframeCoverDiv = [];
            if (!this.iframeCoverDiv[index])
                this.iframeCoverDiv[index] = this.CreateFakeDivForIframe(iframe);
            this.iframeCoverDiv[index].style.position = "absolute";
            iframe.parentElement.appendChild(this.iframeCoverDiv[index]);
            ASPx.SetAbsoluteX(this.iframeCoverDiv[index], ASPx.GetAbsoluteX(iframe));
            ASPx.SetAbsoluteY(this.iframeCoverDiv[index], ASPx.GetAbsoluteY(iframe));
        },
        CreateCoverDiv: function (index) {
            var coverDiv = document.createElement("DIV");
            ASPx.SetStyles(coverDiv, {
                position: "fixed",
                left: 0,
                top: 0,
                width: "100%",
                height: "100%"
            });
            return coverDiv;
        },
        EnsureWindowCoverDiv: function (index) {
            this.windowCoverDiv = this.CreateCoverDiv(index);
            var windowElement = this.GetWindowElement(index);
            windowElement.parentNode.appendChild(this.windowCoverDiv);
        },
        RemoveWindowCoverDiv: function () {
            if (!!this.windowCoverDiv) {
                this.windowCoverDiv.parentNode.removeChild(this.windowCoverDiv);
                this.windowCoverDiv = null;
            }
        },
        RemoveIframeCoverDiv: function (iframe, index) {
            iframe.parentElement.removeChild(this.iframeCoverDiv[index]);
            this.iframeCoverDiv[index] = null;
        },
        CreateResizePanel: function (index) {
            var element = this.GetWindowElement(index);
            var resizePanel = document.createElement("DIV");
            element.parentNode.appendChild(resizePanel);
            resizePanel.style.overflow = "hidden";
            resizePanel.style.position = "absolute";
            resizePanel.style.zIndex = this.GetPopupControlZIndex() + aspxGetPopupControlCollection().visiblePopupWindowIds.length * 2 + 2;
            if (!this.isLiveResizingMode)
                resizePanel.style.border = "black 1px dotted";
            return resizePanel;
        },
        OnResizeStart: function (evt, index) {
            if (!aspxGetPopupControlCollection().IsResizeInint()) {
                var cursor = this.CreateResizeCursorInfo(evt, index);
                if (cursor.course != "") {
                    aspxGetPopupControlCollection().setIframesMouseMoveEnabled(false);
                    this.EnsureWindowCoverDiv(index);
                    this.SetIsResized(index, true);
                    var resizePanel = this.CreateResizePanel(index);
                    this.UpdateResizeCursor(resizePanel, cursor.verticalDirection, cursor.horizontalDirection);
                    aspxGetPopupControlCollection().InitResizeObject(this, index, cursor, resizePanel);
                    this.OnResize(evt, index, cursor, resizePanel);
                }
            }
            return aspxGetPopupControlCollection().IsResizeInint();
        },
        OnResize: function (evt, index, cursor, resizePanel) {
            this.OnResizePanelLite(evt, index, cursor, resizePanel);
            if (this.isLiveResizingMode)
                this.OnResizeWindow(index, cursor, resizePanel);
            ASPx.Selection.Clear();
            if (ASPx.Browser.WebKitTouchUI)
                evt.preventDefault();
            if (this.GetIsPinned(index))
                this.HoldPosition(index, true, resizePanel);
        },
        OnResizePanelLite: function (evt, index, cursor, resizePanel) {
            var x = ASPx.Evt.GetEventX(evt);
            var y = ASPx.Evt.GetEventY(evt);
            var element = this.GetWindowElement(index);
            if (ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
                x = Math.round(x);
                y = Math.round(y);
            }
            var elementTop = ASPx.GetAbsoluteY(element);
            var elementLeft = ASPx.GetAbsoluteX(element);
            var newLeft = ASPx.PxToInt(element.style.left);
            var newTop = ASPx.PxToInt(element.style.top);
            var newWidth = element.offsetWidth;
            var newHeight = element.offsetHeight;
            if (cursor.verticalDirection == "n") {
                if (!this.fixedBottom)
                    this.fixedBottom = newTop + newHeight;
                newHeight += elementTop - y + cursor.verticalOffset;
                newTop = ASPx.PrepareClientPosForElement(y - cursor.verticalOffset, element, false);
            }
            if (cursor.verticalDirection == "s") {
                newHeight = y - elementTop + cursor.verticalOffset;
                this.fixedBottom = null;
            }
            if (cursor.horizontalDirection == "w") {
                if (!this.fixedRight)
                    this.fixedRight = newLeft + newWidth;
                newWidth += elementLeft - x + cursor.horizontalOffset;
                newLeft = ASPx.PrepareClientPosForElement(x - cursor.horizontalOffset, element, true);
            }
            if (cursor.horizontalDirection == "e") {
                newWidth = x - elementLeft + cursor.horizontalOffset;
                this.fixedRight = null;
            }
            if (newWidth > 0 && newHeight > 0) {
                var minWidth = this.GetWindowMinWidth(index);
                var maxWidth = this.GetWindowMaxWidth(index);
                if (minWidth && newWidth < minWidth)
                    newWidth = minWidth;
                if (maxWidth && newWidth > maxWidth)
                    newWidth = maxWidth;
                var minHeight = this.GetWindowMinHeight(index);
                var maxHeight = this.GetWindowMaxHeight(index);
                if (minHeight && newHeight < minHeight)
                    newHeight = minHeight;
                if (maxHeight && newHeight > maxHeight)
                    newHeight = maxHeight;
                if (ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
                    newLeft = Math.round(newLeft);
                    newTop = Math.round(newTop);
                    newHeight = Math.round(newHeight);
                    newWidth = Math.round(newWidth);
                }
                this.SetResizePanelDimensions(newLeft, newTop, newWidth, newHeight);
                var widthWithoutBorders = newWidth - this.getLeftRightBordersAndPaddingsSummaryValue(resizePanel);
                var heightWithoutBorders = newHeight - this.getTopBottomBordersAndPaddingsSummaryValue(resizePanel);
                ASPx.SetStyles(resizePanel, {
                    left: newLeft, top: newTop,
                    width: widthWithoutBorders, height: heightWithoutBorders
                });
                this.SetWindowLeft(index, elementLeft);
                this.SetWindowTop(index, elementTop);
            }
        },
        OnResizeWindow: function (index, cursor, resizePanel) {
            var windowElement = this.GetWindowElement(index);
            var resizePanelDimensions = this.GetResizePanelDimensions();
            var left = resizePanelDimensions.left;
            var top = resizePanelDimensions.top;
            this.SetClientWindowSizeLite(index, resizePanelDimensions.offsetWidth, resizePanelDimensions.offsetHeight);
            if (this.fixedBottom)
                top = this.fixedBottom - windowElement.offsetHeight;
            if (this.fixedRight)
                left = this.fixedRight - windowElement.offsetWidth;
            this.fixedBottom = null;
            this.fixedRight = null;
            if (cursor.verticalDirection === "n")
                this.ChangePosOnResizeWindow(top, windowElement, false);
            if (cursor.horizontalDirection === "w")
                this.ChangePosOnResizeWindow(left, windowElement, true);
            if (this.InternalIsWindowVisible(index))
                this.DoShowWindowIFrame(index, left, top, ASPx.InvalidDimension, ASPx.InvalidDimension);
        },
        ChangePosOnResizeWindow: function (pos, windowElement, isX) {
            if (ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
                pos = Math.round(pos);
            }
            windowElement.style[isX ? "left" : "top"] = pos + "px";
        },
        OnResizeStop: function (evt, index, cursor, resizePanel) {
            if (this.allowResize) {
                aspxGetPopupControlCollection().setIframesMouseMoveEnabled(true);
                this.RemoveWindowCoverDiv();
                var windowElement;
                if (!this.isLiveResizingMode) {
                    windowElement = this.GetWindowElement(index);
                    ASPx.GetControlCollection().CollapseControls(windowElement);
                    this.OnResizeWindow(index, cursor, resizePanel);
                }
                this.CreateResizeCursorInfo(evt, index);
                this.UpdateWindowsStateCookie();
                this.RaiseResize(index);
                if (!this.isLiveResizingMode)
                    ASPx.GetControlCollection().AdjustControls(windowElement, true);
                this.SetWindowCachedSize(index, this.GetClientWindowWidth(index), this.GetClientWindowHeight(index));
            }
            this.ResetResizeSessionCache();
            this.updateContentScrollIfNeeded(index);
        },
        OnMouseDownModalElement: function (evt, index) {
            aspxGetPopupControlCollection().DoHideAllWindows(ASPx.Evt.GetEventSource(evt), "", false, ASPxClientPopupControlCloseReason.OuterMouseClick);
            this.SetIsPopuped(index, true);
        },
        IsRaiseAfterResizingLocked: function () {
            return this.CollapseExecuting() || this.MaximizationExecuting();
        },
        SetClientWindowSizeLite: function (index, width, height, isWindowCollapsed) {
            this.RaiseBeforeResizing(index);
            this.SetClientWindowSizeCoreLite(index, width, height, isWindowCollapsed);
            if (!this.IsRaiseAfterResizingLocked())
                this.RaiseAfterResizing(index);
        },
        HasAnyScrollBars: function (index) {
            var contentElement = this.GetWindowContentElement(index);
            var hasBothScrollBars = contentElement.style.overflow == "scroll" || contentElement.style.overflow == "auto";
            return hasBothScrollBars || contentElement.style.overflowX == "scroll" ||
                contentElement.style.overflowY == "scroll" || contentElement.style.overflowX == "auto" ||
                contentElement.style.overflowY == "auto";
        },
        GetContentElementChildren: function (index, contentElement) {
            var cache = this.GetResizeSessionCache();
            if (!cache.contentElementChildren || !cache.contentElementChildren[index]) {
                cache.contentElementChildren = [];
                cache.contentElementChildren[index] = contentElement.getElementsByTagName("*");
            }
            return cache.contentElementChildren[index];
        },
        GetContentElementChildrenScroll: function (index, contentElementChildren) {
            var cache = this.GetResizeSessionCache();
            if (!cache.contentElementChildrenScroll || !cache.contentElementChildrenScroll[index]) {
                cache.contentElementChildrenScroll = [];
                cache.contentElementChildrenScroll[index] = [];
                for (var i = 0, len = contentElementChildren.length; i < len; i++) {
                    var child = contentElementChildren[i];
                    if (!!child.scrollLeft || !!child.scrollTop)
                        cache.contentElementChildrenScroll[index].push([i, child.scrollLeft, child.scrollTop]);
                }
            }
            return cache.contentElementChildrenScroll[index];
        },
        GetElementBordersAndPaddings: function (index, element, leftRight) {
            var cache = this.GetResizeSessionCache();
            if (!cache.elementBordersAndPaddings || !cache.elementBordersAndPaddings[index]) {
                cache.elementBordersAndPaddings = [];
                var style = ASPx.GetCurrentStyle(element);
                cache.elementBordersAndPaddings[index] = {
                    leftRight: this.getLeftRightBordersAndPaddingsSummaryValue(element, style),
                    topBottom: this.getLeftRightBordersAndPaddingsSummaryValue(element, style)
                };
            }
            return leftRight ? cache.elementBordersAndPaddings[index].leftRight : cache.elementBordersAndPaddings[index].topBottom;
        },
        GetHeaderFooterHeight: function (index) {
            var cache = this.GetResizeSessionCache();
            if (!cache.headerFooterHeight || !cache.headerFooterHeight[index]) {
                cache.headerFooterHeight = [];
                cache.headerFooterHeight[index] = 0;
                var extenders = [
                    this.GetWindowHeaderElement(index),
                    this.GetWindowFooterElement(index)
                ];
                for (var i = 0; i < extenders.length; i++) {
                    if (extenders[i])
                        cache.headerFooterHeight[index] += extenders[i].offsetHeight;
                }
            }
            return cache.headerFooterHeight[index];
        },
        GetResizePanelDimensions: function () {
            var cache = this.GetResizeSessionCache();
            return cache.resizePanelDimensions;
        },
        SetResizePanelDimensions: function (left, top, offsetWidth, offsetHeight) {
            var cache = this.GetResizeSessionCache();
            cache.resizePanelDimensions = {
                left: left,
                top: top,
                offsetWidth: offsetWidth,
                offsetHeight: offsetHeight
            };
        },
        ResetResizeSessionCache: function () {
            this.resizeSessionCache = {};
        },
        GetResizeSessionCache: function () {
            return aspxGetPopupControlCollection().IsResizeInint() ? this.resizeSessionCache : {};
        },
        SetClientWindowSizeCoreLite: function (index, width, height, isWindowCollapsed) {
            var contentUrl = this.GetWindowContentIFrameUrl(index);
            var needToHideContent = !contentUrl;
            var element = this.GetWindowElement(index);
            var contentWrapper = this.GetWindowContentWrapperElement(index);
            var contentElement = this.GetWindowContentElement(index);
            var scrollTop = null,
                scrollLeft = null;
            if (ASPx.Browser.IE && this.GetEnableContentScrolling(index)) {
                scrollTop = contentElement.scrollTop;
                scrollLeft = contentElement.scrollLeft;
            }
            var contentIframeElement = this.GetWindowContentIFrameElement(index);
            var iframeHeightCorrectionOnFirstShow = height > 0;
            if (contentIframeElement && (this.GetWindowIsShown(index) || iframeHeightCorrectionOnFirstShow))
                contentIframeElement.style.height = "0px";
            contentWrapper.style.height = "";
            contentWrapper.style.width = "";
            contentElement.style.height = "";
            contentElement.style.width = "";
            var contentElementChildrenScroll = null,
                contentElementChildren = null;
            if (needToHideContent) {
                if (ASPx.Browser.IE) {
                    var contentElementChildren = this.GetContentElementChildren(index, contentElement),
                        contentElementChildrenScroll = this.GetContentElementChildrenScroll(index, contentElementChildren);
                }
                contentElement.style.display = "none";
            }
            var hasAnyScrollBars = this.HasAnyScrollBars(index);
            var elementsDisplayValue = this.GetWindowElementDisplayValue(hasAnyScrollBars, height);
            element.style.display = elementsDisplayValue;
            if (!this.GetIsCollapsed(index))
                contentWrapper.style.display = elementsDisplayValue;
            if (ASPx.IsExists(width)) {
                var actualWidth = width - this.GetElementBordersAndPaddings(index, element, true);
                if (actualWidth <= 0)
                    actualWidth = ASPx.Browser.WebKitFamily ? 1 : 0;
                element.style.width = actualWidth + "px";
                if (ASPx.Browser.WebKitFamily && hasAnyScrollBars) {
                    this.setContentWrapperWidth(element, contentWrapper, width);
                }
            }
            var actualHeight;
            if (ASPx.IsExists(height)) {
                actualHeight = height - this.GetElementBordersAndPaddings(index, element, false);
                if (actualHeight < 0)
                    actualHeight = 0;
                element.style.height = actualHeight + "px";
            }
            this.CorrectWindowSizeGripPositionLite(index);
            this.CorrectWindowHeaderText(index);
            this.SetContentWrapperHeightLite(index, actualHeight, element, contentWrapper);
            var correctContentElementSize = hasAnyScrollBars || contentElement.style.overflow == "hidden" || contentElement.style.overflowX == "hidden" || contentElement.style.overflowY == "hidden";
            if ((correctContentElementSize || contentUrl) && height) {
                if (contentElement !== contentWrapper) {
                    var contentHeight = ASPx.GetClearClientHeight(contentWrapper) -
                        this.getTopBottomBordersAndPaddingsSummaryValue(contentElement);
                    if (contentHeight < 0)
                        contentHeight = 0;
                    contentElement.style.height = contentHeight + "px";
                }
            }
            if (correctContentElementSize && width && contentElement !== contentWrapper)
                ASPx.SetOffsetWidth(contentElement, ASPx.GetClearClientWidth(contentWrapper));
            contentElement.style.display = this.getContentElementDisplay(correctContentElementSize, contentUrl);
            if (ASPx.IsExists(contentElementChildrenScroll) && contentElementChildrenScroll.length > 0) {
                for (var i = 0; i < contentElementChildrenScroll.length; i++) {
                    var childScroll = contentElementChildrenScroll[i],
                        childIndex = childScroll[0],
                        childScrollLeft = childScroll[1],
                        childScrollTop = childScroll[2];
                    if (!!childScrollLeft)
                        contentElementChildren[childIndex].scrollLeft = childScrollLeft;
                    if (!!childScrollTop)
                        contentElementChildren[childIndex].scrollTop = childScrollTop;
                }
            }
            if (ASPx.Browser.IE && this.GetEnableContentScrolling(index)) {
                contentElement.scrollTop = scrollTop;
                contentElement.scrollLeft = scrollLeft;
            }
            if (contentIframeElement)
                contentIframeElement.style.height = "100%";
            this.SetWindowWidth(index, width);
            this.SetWindowHeight(index, height);
            if (isWindowCollapsed)
                this.ResetWindowHeight(index);
        },
        getContentElementDisplay: function (correctContentElementSize, contentUrl) {
            return correctContentElementSize || contentUrl ? "block" : "table-cell";
        },
        setContentWrapperWidth: function (element, contentWrapper, width) {
            var mainDiv = this.GetWindowMainCell(element);
            var dxpcMainDiv = ASPx.GetNodeByClassName(mainDiv, "dxpc-mainDiv");
            var dxpcMainDivBordersAndPaddings = dxpcMainDiv ? this.getLeftRightBordersAndPaddingsSummaryValue(dxpcMainDiv) : 0;
            contentWrapper.style.width = width - this.getLeftRightBordersAndPaddingsSummaryValue(mainDiv) - dxpcMainDivBordersAndPaddings + "px";
        },
        SetContentWrapperHeightLite: function (index, actualHeight, windowElem, contentWrapper) {
            if (!windowElem.style.height || ASPx.IsPercentageSize(windowElem.style.height))
                return;
            var borderOwner = this.GetWindowBorderOwnerElement(windowElem);
            var height = borderOwner == windowElem ? actualHeight : actualHeight - (borderOwner ? ASPx.GetTopBottomBordersAndPaddingsSummaryValue(borderOwner) : 0);
            height -= this.GetHeaderFooterHeight(index);
            if (height > 0)
                contentWrapper.style.height = height + "px";
        },
        GetWindowContentWrapperElement: function (index) {
            if (!ASPx.IsExistsElement(this.windowContentElements[index])) {
                var windowElem = this.GetWindowElement(index);
                var contentWrapperParent = this.GetWindowMainCell(windowElem);
                this.windowContentElements[index] = ASPx.GetChildByClassName(contentWrapperParent, PopupControlCssClasses.ContentWrapperCssClassName);
            }
            return this.windowContentElements[index];
        },
        SetWindowScrollDivSize: function (scrollDiv, index, dimension) {
            var windowClientTable = this.GetWindowClientTable(index);
            var headerElement = this.GetWindowHeaderElement(index);
            var height = windowClientTable.offsetHeight;
            if (headerElement)
                height -= headerElement.offsetHeight;
            height -= this.GetWindowFooterHeightLite(index);
            if (dimension == 'height' || dimension == 'both')
                ASPx.SetOffsetHeight(scrollDiv, height);
            if (dimension == 'width' || dimension == 'both') {
                var width = windowClientTable.offsetWidth;
                var contentElement = this.GetWindowContentElement(index);
                width -= this.getLeftRightBordersAndPaddingsSummaryValue(scrollDiv) + ASPx.GetHorizontalBordersWidth(contentElement);
                if (width > -1)
                    scrollDiv.style.width = width + "px";
            }
            scrollDiv.style.marginRight = "0px";
        },
        CorrectWindowSizeGripPositionLite: function (index) {
            var sizeGrip = this.GetWindowSizeGripElement(index);
            if (!sizeGrip || sizeGrip.corrected) return;
            if (this.rtl)
                sizeGrip.style.marginRight = "-" + sizeGrip.offsetWidth + "px";
            else
                sizeGrip.style.marginLeft = "-" + sizeGrip.offsetWidth + "px";
            sizeGrip.style.marginTop = "-" + sizeGrip.offsetHeight + "px";
            sizeGrip.corrected = true;
        },
        CorrectWindowHeaderText: function (index) {
            var headerElement = this.GetWindowHeaderElement(index);
            if (!headerElement || headerElement.corrected) return;
            var leftChildrenWidth = 0, rightChildrenWidth = 0, headerContentElement;
            for (var i = 0; i < headerElement.childNodes.length; i++) {
                var child = headerElement.childNodes[i];
                if (!child.offsetWidth) continue;
                if (ASPx.GetElementFloat(child) === "right")
                    rightChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
                else if (ASPx.GetElementFloat(child) === "left")
                    leftChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
                else if (!headerContentElement)
                    headerContentElement = child;
            }
            if (headerContentElement && (leftChildrenWidth > 0 || rightChildrenWidth > 0)) {
                var headerContentElementStyle = ASPx.GetCurrentStyle(headerContentElement);
                var originalPaddingLeft = parseInt(headerContentElementStyle.paddingLeft);
                var originalPaddingRight = parseInt(headerContentElementStyle.paddingRight);
                ASPx.SetStyles(headerContentElement, {
                    paddingLeft: leftChildrenWidth + originalPaddingLeft,
                    paddingRight: rightChildrenWidth + originalPaddingRight
                }, true);
                this.CorrectHeaderContentElementHeight(index);
            }
            headerElement.corrected = true;
        },
        CorrectHeaderContentElementHeight: function (index) {
            var headerElement = this.GetWindowHeaderElement(index),
                headerContentElement = ASPx.GetChildByClassName(headerElement, PopupControlCssClasses.HeaderContentCssClassName);
            if (!headerElement || !headerContentElement) return;
            if (headerContentElement.style.height)
                headerContentElement.style.height = "";
            var contentElementHeight = ASPx.GetClearClientHeight(headerElement) - this.getTopBottomBordersAndPaddingsSummaryValue(headerContentElement),
                lineHeightForTextVerticalAlign = contentElementHeight,
                windowHeaderTextCell = this.GetWindowHeaderTextCell(index);
            if (windowHeaderTextCell)
                lineHeightForTextVerticalAlign -= this.getTopBottomBordersAndPaddingsSummaryValue(windowHeaderTextCell);
            ASPx.SetStyles(headerContentElement, { lineHeight: lineHeightForTextVerticalAlign, height: contentElementHeight }, false);
        },
        SetWindowCachedSize: function (index, width, height) {
            if (0 <= index && index < this.heightArray.length)
                this.cachedSizeArray[index] = new ASPx.PopupSize(width, height);
            else
                this.cachedSize = new ASPx.PopupSize(width, height);
        },
        GetWindowCachedSize: function (index) {
            if (0 <= index && index < this.heightArray.length)
                return this.cachedSizeArray[index];
            else
                return this.cachedSize;
        },
        ResetWindowCachedSize: function (index) {
            if (0 <= index && index < this.heightArray.length)
                this.cachedSizeArray[index] = null;
            else
                this.cachedSize = null;
        },
        SetWindowSizeByIndex: function (index, width, height) {
            var minWidth = this.GetWindowMinWidth(index);
            var minHeight = this.GetWindowMinHeight(index);
            var maxWidth = this.GetWindowMaxWidth(index);
            var maxHeight = this.GetWindowMaxHeight(index);
            if (minWidth)
                width = Math.max(width, minWidth);
            if (minHeight)
                height = Math.max(height, minHeight);
            if (maxWidth)
                width = Math.min(width, maxWidth);
            if (maxHeight)
                height = Math.min(height, maxHeight);
            var isWindowMaximized = this.GetIsMaximized(index);
            var isWindowCollapsed = this.GetIsCollapsed(index);
            var isWindowMaximizedAndCollapsed = (isWindowMaximized && isWindowCollapsed);
            if (this.InternalIsWindowDisplayed(index) && (!isWindowMaximizedAndCollapsed || this.ResizingForMaxWindowLocked())) {
                if (!this.CollapseExecuting() && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
                    this.SetWindowCachedSize(index, width, height);
                    this.SetIsResized(index, true);
                }
                if (isWindowCollapsed && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
                    this.SetWindowCachedSize(index, width, height);
                    this.UpdateRestoredWindowSize(index, width, height);
                    height = 0;
                }
                if (isWindowMaximized && !this.CollapseExecuting() && !this.ResizingForMaxWindowLocked()) {
                    this.SetWindowCachedSize(index, width, height);
                    this.UpdateRestoredWindowSize(index, width, height);
                } else {
                    this.SetWindowSizeByIndexCore(index, width, height, isWindowCollapsed);
                }
            } else
                this.SetWindowCachedSize(index, width, height);
        },
        SetWindowSizeByIndexCore: function (index, width, height, isWindowCollapsed) {
            this.SetClientWindowSizeLite(index, width, height, isWindowCollapsed);
            var iFrame = this.GetWindowIFrame(index);
            if (iFrame && !isWindowCollapsed) {
                var winElememnt = this.GetWindowElement(index);
                var realWidth = winElememnt.offsetWidth;
                var realHeight = winElememnt.offsetHeight;
                ASPx.SetStyles(iFrame, { width: realWidth, height: realHeight });
            }
            this.UpdateWindowsStateCookie();
        },
        CreateResizeCursorInfo: function (evt, index) {
            var element = this.GetWindowElement(index);
            var mainCell = this.GetWindowMainCell(element);
            var clientWindow = this.GetWindowClientTable(index);
            var headerElement = this.GetWindowHeaderElement(index);
            var left = ASPx.GetAbsoluteX(mainCell);
            var top = ASPx.GetAbsoluteY(mainCell);
            var x = ASPx.Evt.GetEventX(evt);
            var y = ASPx.Evt.GetEventY(evt);
            var mainCellWidth = mainCell.offsetWidth;
            var mainCellHeight = mainCell.offsetHeight;
            var leftOffset = Math.abs(x - left);
            var rightOffset = Math.abs(x - left - mainCellWidth);
            var topOffset = Math.abs(y - top);
            var bottomOffset = Math.abs(y - top - mainCellHeight);
            var cursorInfo = this.CreateResizeBorderCursorInfo(index, leftOffset, rightOffset, topOffset, bottomOffset);
            var grip = this.GetWindowSizeGripElement(index);
            if (grip) {
                var gripCursorInfo = this.CreateGripCursorInfo(index, mainCell, grip, leftOffset, rightOffset, bottomOffset);
                if (gripCursorInfo)
                    cursorInfo = gripCursorInfo;
            }
            this.UpdateResizeCursor(clientWindow, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
            this.UpdateResizeCursor(mainCell, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
            if (headerElement)
                this.UpdateResizeCursor(headerElement, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
            return cursorInfo;
        },
        CreateGripCursorInfo: function (index, mainCell, grip, leftOffset, rightOffset, bottomOffset) {
            var gripWidth = this.rtl
                ? ASPx.GetAbsoluteX(grip) - ASPx.GetAbsoluteX(mainCell) + grip.offsetWidth
                : mainCell.offsetWidth - (ASPx.GetAbsoluteX(grip) - ASPx.GetAbsoluteX(mainCell));
            var gripHeight = mainCell.offsetHeight - (ASPx.GetAbsoluteY(grip) - ASPx.GetAbsoluteY(mainCell));
            if (gripHeight > bottomOffset) {
                if (this.rtl && gripWidth > leftOffset)
                    return new PCResizeCursorInfo("w", "s", leftOffset, bottomOffset);
                if (gripWidth > rightOffset)
                    return new PCResizeCursorInfo("e", "s", rightOffset, bottomOffset);
            }
            return null;
        },
        CreateResizeBorderCursorInfo: function (index, leftOffset, rightOffset, topOffset, bottomOffset) {
            var ResizeBorderSize = this.ResizeBorderSize;
            var verticalDirection = this.GetResizeVerticalCourse(ResizeBorderSize, topOffset, bottomOffset);
            ResizeBorderSize = verticalDirection != "" ? this.ResizeCornerBorderSize : this.ResizeBorderSize;
            var horizontalDirection = this.GetResizeHorizontalCourse(ResizeBorderSize, leftOffset, rightOffset);
            if (verticalDirection == "" && horizontalDirection != "")
                verticalDirection = this.GetResizeVerticalCourse(this.ResizeCornerBorderSize, topOffset, bottomOffset);
            var horizontalOffset = leftOffset < rightOffset ? leftOffset : rightOffset;
            var verticalOffset = topOffset < bottomOffset ? topOffset : bottomOffset;
            return new PCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset);
        },
        GetResizeVerticalCourse: function (ResizeBorderSize, topOffset, bottomOffset) {
            if (ResizeBorderSize > topOffset) return "n";
            if (ResizeBorderSize > bottomOffset) return "s";
            return "";
        },
        GetResizeHorizontalCourse: function (ResizeBorderSize, leftOffset, rightOffset) {
            if (ResizeBorderSize > leftOffset) return "w";
            if (ResizeBorderSize > rightOffset) return "e";
            return "";
        },
        UpdateResizeCursor: function (element, verticalDirection, horizontalDirection) {
            var cursor = verticalDirection + horizontalDirection;
            if (cursor != "") {
                cursor += "-resize";
                this.ShowTemporaryCursor(element, cursor);
            }
            else
                this.HideTemporaryCursor(element);
        },
        ShowTemporaryCursor: function (element, cursor) {
            ASPx.Attr.ChangeStyleAttribute(element, "cursor", cursor);
        },
        HideTemporaryCursor: function (element) {
            ASPx.Attr.RestoreStyleAttribute(element, "cursor");
        },
        ResizeWindowIFrame: function (index) {
            if (!this.renderIFrameForPopupElements) return;
            if (!this.InternalIsWindowVisible(index)) return;
            var iFrame = this.GetWindowIFrame(index);
            if (iFrame) {
                var cell = this.GetWindowMainCell(this.GetWindowElement(index));
                ASPx.SetStyles(iFrame, { width: cell.offsetWidth, height: cell.offsetHeight });
            }
        },
        GetContentIFrameWindow: function () {
            var iframeElement = this.GetContentIFrame();
            return iframeElement.contentWindow;
        },
        ShowDragCursor: function (index) {
            var dragElement = this.GetDragElement(index);
            if (dragElement)
                this.ShowTemporaryCursor(dragElement, "move");
        },
        HideDragCursor: function (index) {
            var dragElement = this.GetDragElement(index);
            if (dragElement != null)
                this.HideTemporaryCursor(dragElement);
        },
        GetDragElement: function (index) {
            var headerElement = this.GetWindowHeaderElement(index);
            var element = this.GetWindowElement(index);
            if (element != null)
                return (headerElement != null ? headerElement : this.GetWindowMainCell(element));
            return null;
        },
        OnActivateMouseDown: function (evt, index) {
            this.OnActivate(index, evt);
        },
        OnCloseButtonClick: function (index) {
            this.RaiseCloseButtonClick(index);
            if (this.GetWindowCloseAction(index) != "None")
                this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.CloseButton);
        },
        OnRefreshButtonClick: function (index) {
            var contentIFrame = this.GetWindowContentIFrameElement(index);
            if (contentIFrame)
                this.RefreshWindowContentUrl(this.GetWindow(index));
            else
                this.PerformWindowCallback(this.GetWindow(index));
        },
        OnPinButtonClick: function (index) {
            var value = this.GetIsPinned(index);
            this.SetPinCore(index, !value);
        },
        SetPinCore: function (index, value) {
            if (this.GetIsPinned(index) != value) {
                this.SetIsPinned(index, value);
                this.HoldPosition(index, value);
                this.UpdateWindowsStateCookie();
                this.OnPinned(index, value);
            }
        },
        OnPinned: function (index, pinned) {
            this.RaisePinnedChanged(index, pinned);
        },
        HoldPosition: function (index, hold, element) {
            if (hold) {
                element = element || this.GetWindowElement(index);
                if (!element) return;
                var x = ASPx.GetAbsoluteX(element);
                var y = ASPx.GetAbsoluteY(element);
                scrollX = ASPx.GetDocumentScrollLeft();
                scrollY = ASPx.GetDocumentScrollTop();
                this.SetPinPosX(index, x - scrollX);
                this.SetPinPosY(index, y - scrollY);
            }
            this.UpdateHeaderButtonSelected(index, "GetWindowPinButton", hold);
            this.CheckHeaderCursor(index);
        },
        GetBodyWidth: function () {
            return aspxGetPopupControlCollection().GetSavedBodyWidth();
        },
        GetBodyHeight: function () {
            return aspxGetPopupControlCollection().GetSavedBodyHeight();
        },
        GetIsOutFromViewPort: function (index) {
            var element = this.GetWindowElement(index);
            if (!element) return false;
            var pinXTarget = this.GetPinPosX(index);
            var pinYTarget = this.GetPinPosY(index);
            var popupWindowWidth = this.GetClientWindowWidth(index);
            var docClientWidth = ASPx.GetDocumentClientWidth();
            var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
            var popupWindowHeight = this.GetClientWindowHeight(index);
            var docClientHeight = ASPx.GetDocumentClientHeight();
            var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
            return (rightOutOffset > 0 || bottomOutOffset > 0);
        },
        needToHidePinnedOutFromViewPort: function (index) {
            return this.GetIsPinned(index) && this.GetIsOutFromViewPort(index);
        },
        AdjustPinPositionWhileScroll: function (index) {
            var element = this.GetWindowElement(index);
            if (!element) return;
            var x = ASPx.GetAbsoluteX(element);
            var y = ASPx.GetAbsoluteY(element);
            var scrollX = ASPx.GetDocumentScrollLeft();
            var scrollY = ASPx.GetDocumentScrollTop();
            var pinX = x - scrollX;
            var pinY = y - scrollY;
            var pinXTarget = this.GetPinPosX(index);
            var pinYTarget = this.GetPinPosY(index);
            if ((pinX != pinXTarget) || (pinY != pinYTarget)) {
                this.lockScroll++;
                var xNew = pinXTarget + scrollX;
                var yNew = pinYTarget + scrollY;
                var bodyWidth = this.GetBodyWidth();
                var bodyHeight = this.GetBodyHeight();
                var popupWindowWidth = this.GetClientWindowWidth(index);
                var docClientWidth = ASPx.GetDocumentClientWidth();
                var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
                var popupWindowHeight = this.GetClientWindowHeight(index);
                var docClientHeight = ASPx.GetDocumentClientHeight();
                var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
                var cancelScrollX = false;
                if (xNew + (popupWindowWidth - rightOutOffset) > bodyWidth) {
                    xNew -= (xNew + (popupWindowWidth - rightOutOffset) - bodyWidth);
                    cancelScrollX = true;
                }
                var cancelScrollY = false;
                if (yNew + (popupWindowHeight - bottomOutOffset) > bodyHeight) {
                    yNew -= (yNew + (popupWindowHeight - bottomOutOffset) - bodyHeight);
                    cancelScrollY = true;
                }
                xNew = ASPx.PrepareClientPosForElement(xNew, element, true);
                yNew = ASPx.PrepareClientPosForElement(yNew, element, false);
                this.SetWindowPos(index, element, xNew, yNew);
                if (cancelScrollX) {
                    var scrollLeftMax = bodyWidth - ASPx.GetDocumentClientWidth();
                    if ((rightOutOffset > 0) && (scrollX > scrollLeftMax)) {
                        this.lockScroll++;
                        ASPx.SetDocumentScrollLeft(scrollLeftMax);
                        this.lockScroll--;
                    }
                }
                if (cancelScrollY) {
                    var scrollTopMax = bodyHeight - ASPx.GetDocumentClientHeight();
                    if ((bottomOutOffset > 0) && (scrollY > scrollTopMax)) {
                        this.lockScroll++;
                        ASPx.SetDocumentScrollTop(scrollTopMax);
                        this.lockScroll--;
                    }
                }
                this.lockScroll--;
            }
        },
        OnScroll: function (evt, index) {
            if (this.HasIframeOnIos(index)) {
                var scrollElement = this.getTouchScrollerElement(index);
                if (scrollElement.scrollTop === 0) {
                    scrollElement.style["-webkit-overflow-scrolling"] = "auto";
                    window.setTimeout(function () {
                        scrollElement.style["-webkit-overflow-scrolling"] = "touch";
                    }.aspxBind(this), 0);
                }
            }
            if (!this.GetIsPinned(index) || (this.lockScroll > 0)) return;
            this.AdjustPinPositionWhileScroll(index);
        },
        OnCollapseButtonClick: function (index) {
            this.SetCollapsedCore(index, !this.GetIsCollapsed(index));
        },
        SetCollapsedCore: function (index, minimization) {
            if (this.GetIsCollapsed(index) == minimization) return;
            this.DoCollapse(index, minimization);
            this.OnCollapsed(index, minimization);
        },
        DoCollapse: function (index, minimization) {
            if (this.GetIsCollapsed(index) == minimization) return;
            this.StartCollapse();
            if (minimization) {
                var cachedWidth = this.GetClientWindowWidth(index);
                var cachedHeight = this.GetClientWindowHeight(index);
                var shouldUpdateRestoredSize = this.ShoulUpdatedRestoredWindowSizeOnCollapse(index);
                var width = this.GetMainWindowWidth(index, !shouldUpdateRestoredSize);
                var height = this.GetMainWindowHeight(index, !shouldUpdateRestoredSize);
                this.SetWindowSizeByIndex(index, width, 0);
                this.SetWindowContentVisible(index, false);
                this.SetWindowFooterVisible(index, false);
                this.ResetWindowHeight(index);
                this.SetIsCollapsed(index, minimization);
                this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
                if (shouldUpdateRestoredSize)
                    this.UpdateRestoredWindowSize(index, width, height);
            }
            else {
                if (this.MaximizationExecuting()) {
                    var element = this.GetWindowElement(index);
                    if (element) {
                        element.style.left = ASPx.GetDocumentScrollLeft();
                        element.style.top = ASPx.GetDocumentScrollTop();
                    }
                }
                this.SetWindowContentVisible(index, true);
                this.SetWindowFooterVisible(index, true);
                this.SetIsCollapsed(index, minimization);
                if (this.GetIsMaximized(index)) {
                    var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup();
                    var documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
                    this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
                } else {
                    var restoredWindowData = this.GetRestoredWindowData(index);
                    this.SetWindowSizeByIndex(index, restoredWindowData.width, restoredWindowData.height);
                }
                ASPx.GetControlCollection().AdjustControls(this.GetWindowElement(index));
            }
            this.UpdateHeaderButtonSelected(index, "GetWindowCollapseButton", minimization);
            this.EndCollapse();
            this.UpdateWindowsStateCookie();
        },
        ResetWindowHeight: function (index) {
            var element = this.GetWindowElement(index);
            if (element)
                element.style.height = "";
        },
        ShoulUpdatedRestoredWindowSizeOnCollapse: function (index) {
            return !this.GetIsMaximized(index);
        },
        OnCollapsed: function (index, value) {
            if (value)
                this.RaiseCollapsed(index);
            else
                this.RaiseExpanded(index);
            this.RaiseAfterResizing(index);
        },
        OnMaximizeButtonClick: function (index) {
            this.SetMaximizedCore(index, !this.GetIsMaximized(index));
        },
        SetMaximizedCore: function (index, maximization) {
            if (this.GetIsMaximized(index) == maximization) return;
            this.DoMaximize(index, maximization);
            this.OnMaximizedChanged(index, maximization);
        },
        GetMaximizedPosition: function (element, isX) {
            if (ASPx.Browser.WebKitTouchUI)
                return ASPx.PrepareClientPosForElement(0, element, isX);
            return ASPx.PrepareClientPosForElement(isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop(), element, isX);
        },
        PerformMaximaze: function (index, maximization, element) {
            if (this.hideBodyScrollWhenMaximized)
                ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
            if (this.GetIsCollapsed(index))
                this.DoCollapse(index, false);
            var cachedWidth = this.GetClientWindowWidth(index);
            var cachedHeight = this.GetClientWindowHeight(index);
            var restoredWindowData = this.GetInitRestoredWindowData(index);
            var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup();
            var documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
            var currentStyle = ASPx.GetCurrentStyle(element);
            var windowClientTable = this.GetWindowClientTable(index);
            var windowClientTableParent = windowClientTable.parentNode;
            childStyle = ASPx.GetCurrentStyle(windowClientTableParent);
            var left = this.GetMaximizedPosition(element, true);
            var top = this.GetMaximizedPosition(element, false);
            this.SetWindowPos(index, element, left, top);
            this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
            this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
            this.SetRestoredWindowData(index, restoredWindowData);
            this.SetIsMaximized(index, maximization);
        },
        PerformMinimize: function (index, maximization, element) {
            var restoredWindowData = this.GetRestoredWindowData(index);
            var width = restoredWindowData.width || this.GetMainWindowWidth(index);
            var height = restoredWindowData.height || this.GetMainWindowHeight(index);
            this.SetIsMaximized(index, maximization);
            var left = ASPx.PrepareClientPosForElement(restoredWindowData.left, element, true);
            var top = ASPx.PrepareClientPosForElement(restoredWindowData.top, element, false);
            this.SetWindowPos(index, element, left, top);
            this.SetWindowSizeByIndex(index, width, height);
            if (this.GetIsCollapsed(index)) {
                this.SetIsCollapsed(index, false);
                this.UpdateRestoredWindowSizeLock();
                this.DoCollapse(index, true);
                this.UpdateRestoredWindowSizeUnlock();
            }
            if (this.hideBodyScrollWhenMaximized)
                ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
        },
        DoMaximize: function (index, maximization) {
            if (this.GetIsMaximized(index) == maximization) return;
            var element = this.GetWindowElement(index);
            if (!element) return;
            this.StartMaximization();
            if (maximization)
                this.PerformMaximaze(index, maximization, element);
            else
                this.PerformMinimize(index, maximization, element);
            if (this.GetIsPinned(index))
                this.HoldPosition(index, true, element);
            this.UpdateHeaderButtonSelected(index, "GetWindowMaximizeButton", maximization);
            this.EndMaximization();
            this.UpdateWindowsStateCookie();
            this.CheckHeaderCursor(index);
        },
        OnMaximizedChanged: function (index, value) {
            if (value)
                this.RaiseMaximized(index);
            else
                this.RaiseRestoredAfterMaximized(index);
            this.RaiseAfterResizing(index);
        },
        GetInitRestoredWindowData: function (index) {
            var restoredWindowData = this.GetRestoredWindowData(index);
            restoredWindowData.left = this.GetCurrentLeft(index);
            restoredWindowData.top = this.GetCurrentTop(index);
            restoredWindowData.width = this.GetMainWindowWidth(index);
            restoredWindowData.height = this.GetMainWindowHeight(index);
            return restoredWindowData;
        },
        getDocumentDimensions: function (index) {
            if (ASPx.Browser.WebKitTouchUI)
                ASPx.Attr.ChangeStyleAttribute(this.GetWindowElement(index), "display", "none");
            var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup(),
                documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
            if (ASPx.Browser.WebKitTouchUI)
                ASPx.Attr.RestoreStyleAttribute(this.GetWindowElement(index), "display");
            return { width: documentClientWidth, height: documentClientHeight };
        },
        UpdateMaximizedWindowSizeOnResize: function (index) {
            this.StartUpdateMaximizedWindowSizeOnResize();
            var dimensions = this.getDocumentDimensions(index);
            if (this.GetIsCollapsed(index)) dimensions.height = 0;
            this.SetWindowSizeByIndex(index, dimensions.width, dimensions.height);
            if (this.GetIsCollapsed(index)) {
                this.CorrectCollapsedSize(index);
            }
            window.setTimeout(function () { this.SetMaximizedWindowSizeAfterOnResize(index); }.aspxBind(this), 0);
            this.EndUpdateMaximizedWindowSizeOnResize();
        },
        SetMaximizedWindowSizeAfterOnResize: function (index) {
            this.StartUpdateMaximizedWindowSizeOnResize();
            var dimensions = this.getDocumentDimensions(index);
            windowWidthCurrent = this.GetMainWindowWidth(index, true);
            windowHeightCurrent = this.GetMainWindowHeight(index, true);
            if (this.GetIsCollapsed(index))
                dimensions.height = 0;
            if (dimensions.width != windowWidthCurrent || dimensions.height != windowHeightCurrent) {
                this.SetWindowSizeByIndex(index, dimensions.width, dimensions.height);
                if (this.GetIsCollapsed(index)) {
                    this.CorrectCollapsedSize(index);
                }
            }
            this.EndUpdateMaximizedWindowSizeOnResize();
        },
        CorrectCollapsedSize: function (index) {
            var contentWrapper = this.GetWindowContentWrapperElement(index);
            if (contentWrapper && ASPx.IsElementVisible(contentWrapper))
                contentWrapper.style.display = 'none';
        },
        UpdateHeaderButtonSelected: function (index, methodGetWindowButton, flagSelected) {
            if (typeof (ASPx.GetStateController) != "undefined") {
                button = this[methodGetWindowButton](index);
                var method = flagSelected ? "SelectElementBySrcElement" : "DeselectElementBySrcElement";
                ASPx.GetStateController()[method](button);
            }
        },
        CheckHeaderCursor: function (index) {
            if (!this.allowDragging) return;
            var dragElement = this.GetDragElement(index);
            if (!dragElement) return;
            var styleCursor = dragElement.style.cursor;
            var isPinned = this.GetIsPinned(index);
            var isMaximized = this.GetIsMaximized(index);
            if ((isPinned || isMaximized) && styleCursor != "default")
                dragElement.style.cursor = "default";
            else if (!isPinned && !isMaximized && styleCursor != "move")
                dragElement.style.cursor = "move";
        },
        LockAnimation: function () {
            this.animationLockCount++;
        },
        UnlockAnimation: function () {
            this.animationLockCount--;
        },
        IsAnimationLocked: function () {
            return this.animationLockCount > 0;
        },
        IsAnimationAllowed: function () {
            return this.enableAnimation && !this.IsAnimationLocked();
        },
        StartCollapse: function () {
            this.collapseExecutingLockCount++;
        },
        EndCollapse: function () {
            this.collapseExecutingLockCount--;
        },
        CollapseExecuting: function () {
            return this.collapseExecutingLockCount > 0;
        },
        StartMaximization: function () {
            this.maximizationExecutingLockCount++;
        },
        EndMaximization: function () {
            this.maximizationExecutingLockCount--;
        },
        MaximizationExecuting: function () {
            return this.maximizationExecutingLockCount > 0;
        },
        StartUpdateMaximizedWindowSizeOnResize: function () {
            this.browserResizingForMaxWindowLockCount++;
        },
        EndUpdateMaximizedWindowSizeOnResize: function () {
            this.browserResizingForMaxWindowLockCount--;
        },
        ResizingForMaxWindowLocked: function () {
            return this.browserResizingForMaxWindowLockCount > 0;
        },
        UpdateRestoredWindowSizeLock: function () {
            this.updateRestoredWindowSizeLockCount++;
        },
        UpdateRestoredWindowSizeUnlock: function () {
            this.updateRestoredWindowSizeLockCount--;
        },
        UpdateRestoredWindowSizeLocked: function () {
            return this.updateRestoredWindowSizeLockCount > 0;
        },
        UpdateRestoredWindowSize: function (index, width, height) {
            if (!this.UpdateRestoredWindowSizeLocked()) {
                restoredMinWindowData = this.GetRestoredWindowData(index);
                restoredMinWindowData.width = width;
                restoredMinWindowData.height = height;
                this.SetRestoredWindowData(index, restoredMinWindowData);
            }
        },
        OnMouseDown: function (evt, index, isDraggingAllowed, pointOnScrollBar) {
            if (ASPx.Evt.IsLeftButtonPressed(evt)) {
                if ((this.allowResize || isDraggingAllowed) && !this.prohibitClearSelectionOnMouseDown)
                    ASPx.Selection.Clear();
                var isResizing = false;
                if (this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index)) {
                    var eventSourceControl = ASPx.Evt.GetEventSource(evt);
                    var eventFromPopupContainer = ASPx.ElementHasCssClass(eventSourceControl, PopupControlCssClasses.ContentCssClassName) ||
                        !ASPx.GetParentByClassName(eventSourceControl, PopupControlCssClasses.ContentCssClassName) ||
                        this.eventFromOwnPopupContent(eventSourceControl);
                    if (eventFromPopupContainer)
                        isResizing = this.OnResizeStart(evt, index);
                }
                if (isResizing && ASPx.Browser.WebKitTouchUI)
                    aspxGetPopupControlCollection().OverStop();
                var clickedOnScroll = pointOnScrollBar && this.GetEnableContentScrolling(index);
                if (isDraggingAllowed && !isResizing && !clickedOnScroll && !this.GetIsPinned(index) && !this.GetIsMaximized(index))
                    this.OnDragStart(evt, index);
            }
        },
        eventFromOwnPopupContent: function (element) {
            while (element != null) {
                if (element.tagName == "BODY")
                    return false;
                if (element.style.position == "absolute") {
                    var windowIndex = this.GetWindowIndex(element);
                    var isPopupWindow = !isNaN(windowIndex);
                    if (isPopupWindow) {
                        if (this.GetWindowElementId(windowIndex) == element.id)
                            return true;
                        return false;
                    } else {
                        var elementIsOtherPopup = element.style.zIndex >= this.GetPopupControlZIndex();
                        if (elementIsOtherPopup)
                            return false;
                    }
                }
                element = element.parentNode;
            }
            return false;
        },
        OnMouseMove: function (evt, index) {
            if (this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
                this.CreateResizeCursorInfo(evt, index);
        },
        SetShadowVisibility: function (visible, index) {
            var shadowTable = this.GetWindowShadowTable(index);
            if (shadowTable && shadowTable.rows.length > 1) {
                var shadowCol = shadowTable.rows[0].cells[1];
                var shadowRow = shadowTable.rows[1];
                ASPx.SetElementVisibility(shadowCol, visible);
                ASPx.SetElementVisibility(shadowRow, visible);
            }
        },
        StartFadeAnimation: function (element, index) {
            if (ASPx.Browser.IE && ASPx.Browser.MajorVersion < 9) {
                ASPx.SetElementVisibility(element, true);
                ASPx.AnimationHelper.setOpacity(element, 0);
                this.SetShadowVisibility(false, index);
            } else {
                ASPx.AnimationHelper.setOpacity(element, 0);
                ASPx.SetElementVisibility(element, true);
            }
            var callback = function () {
                if (ASPx.Browser.IE && ASPx.Browser.Version < 9 && element.style.filter) {
                    if (element.style.filter)
                        element.style.filter = "";
                    this.SetShadowVisibility(true, index);
                }
                this.OnAnimationStop(index);
            }.aspxBind(this);
            ASPx.AnimationHelper.fadeIn(element, callback, this.fadeAnimationDuration);
        },
        StartSlideAnimation: function (animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
            var element = this.GetWindowMainTable(animationDivElement);
            var clientX = horizontalPopupPosition.position;
            var clientY = verticalPopupPosition.position;
            var args = "(\"" + this.name + "\", " + index + ")";
            var onAnimStopCallString = "ASPx.PCAStop" + args;
            ASPx.PopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, onAnimStopCallString, true);
            var horizontalDirection = ASPx.PopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
            var verticalDirection = ASPx.PopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
            var xPos = horizontalDirection * animationDivElement.offsetWidth;
            var yPos = verticalDirection * animationDivElement.offsetHeight;
            neddToForceAnimation = xPos === 0 && yPos === 0;
            if (neddToForceAnimation)
                yPos = 1;
            ASPx.SetStyles(element, { left: xPos, top: yPos });
            ASPx.SetElementVisibility(animationDivElement, true);
            this.DoShowWindowIFrame(index, clientX, clientY, 0, 0);
            ASPx.PopupUtils.StartSlideAnimation(animationDivElement, element, this.GetWindowIFrame(index), this.slideAnimationDuration);
        },
        GetWindowsState: function () {
            var state = "";
            if (this.HasDefaultWindow()) {
                state += this.GetWindowState(-1);
            }
            for (var i = 0; i < this.GetWindowCountCore(); i++) {
                state += this.GetWindowState(i);
                if (i < this.GetWindowCountCore() - 1) state += ";";
            }
            return state;
        },
        GetWindowState: function (index) {
            var element = this.GetWindowElement(index);
            if (element != null) {
                var visibleFlag = (!this.InternalIsWindowVisible(index) || element.isHiding) ? "0" : "1";
                var isDraggedFlag = this.GetIsDragged(index) ? "1" : "0";
                var zIndex = this.GetCurrentZIndex(index);
                var isResized = this.GetIsResized(index);
                var isResizedFlag = isResized ? "1" : "0";
                var width = null, height = null;
                if (isResized) {
                    width = this.GetWindowWidthInternal(index);
                    height = this.GetIsCollapsed(index) ? this.GetWindowDimensionByIndex(index, false, true) : this.GetWindowHeightInternal(index);
                } else {
                    width = ASPx.InvalidDimension;
                    height = ASPx.InvalidDimension;
                }
                var contentWasLoaded = element.loaded ? "1" : "0";
                var left, top;
                var isMaximized = this.GetIsMaximized(index);
                if (isMaximized && !this.MaximizationExecuting()) {
                    var restoredWindowData = this.GetRestoredWindowData(index);
                    left = restoredWindowData.left;
                    top = restoredWindowData.top;
                } else {
                    left = this.GetCurrentLeft(index);
                    top = this.GetCurrentTop(index);
                }
                var isPinned = this.GetIsPinned(index);
                if (isPinned) {
                    left -= ASPx.GetDocumentScrollLeft();
                    top -= ASPx.GetDocumentScrollTop();
                }
                left = Math.ceil(left);
                top = Math.ceil(top);
                var pinFlag = isPinned ? "1" : "0";
                var minFlag = this.GetIsCollapsed(index) ? "1" : "0";
                var maxFlag = isMaximized || this.GetIsMaximizedInit(index) ? "1" : "0";
                return [visibleFlag, isDraggedFlag, zIndex, left, top, isResizedFlag, width, height, contentWasLoaded, pinFlag, minFlag, maxFlag].join(":");
            }
            return "";
        },
        UpdateWindowsStateCookie: function () {
            if (this.cookieName == "") return;
            ASPx.Cookie.DelCookie(this.cookieName);
            ASPx.Cookie.SetCookie(this.cookieName, this.GetWindowsState());
        },
        UpdateStateObject: function () {
            this.UpdateStateObjectWithObject({ windowsState: this.GetWindowsState() });
        },
        GetStateHiddenFieldOrigin: function () {
            return this.GetWindowElement(this.GetWindowCountCore() - 1);
        },
        OnIFrameLoad: function (index) {
            this.SetIframeLoading(index, false);
        },
        OnPWHBClickCore: function (evt, index, method) {
            this.OnActivate(index, evt);
            if (ASPx.TouchUIHelper.handleFastTapIfRequired(evt,
                function () { this[method](index); }.aspxBind(this), true)) {
                return;
            }
            if ((ASPx.Browser.IE && ASPx.Browser.Version < 9) || ASPx.Browser.Opera)
                ASPx.Evt.EmulateDocumentOnMouseDown(evt);
            this[method](index);
        },
        CreateWindows: function (windowsNames) {
            for (var i = 0; i < windowsNames.length; i++) {
                var window = new ASPxClientPopupWindow(this, i, windowsNames[i]);
                this.windows.push(window);
            }
        },
        RaiseCloseButtonClick: function (index) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.CloseButtonClick.IsEmpty()) {
                var args = new ASPxClientPopupWindowEventArgs(window);
                this.CloseButtonClick.FireEvent(this, args);
            }
        },
        RaiseClosing: function (index, closeReason) {
            var window = index < 0 ? null : this.GetWindow(index);
            var cancel = false;
            if (!this.Closing.IsEmpty()) {
                var args = new ASPxClientPopupWindowCancelEventArgs(window, closeReason);
                this.Closing.FireEvent(this, args);
                cancel = args.cancel;
            }
            return cancel;
        },
        RaiseCloseUp: function (index, closeReason) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.CloseUp.IsEmpty()) {
                var args = new ASPxClientPopupWindowCloseUpEventArgs(window, closeReason);
                this.CloseUp.FireEvent(this, args);
            }
        },
        RaisePopUp: function (index) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.PopUp.IsEmpty()) {
                var args = new ASPxClientPopupWindowEventArgs(window);
                this.PopUp.FireEvent(this, args);
            }
        },
        RaiseResize: function (index, resizeState) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.Resize.IsEmpty()) {
                if (!resizeState)
                    resizeState = ASPxClientPopupControlResizeState.Resized;
                var args = new ASPxClientPopupWindowResizeEventArgs(window, resizeState);
                this.Resize.FireEvent(this, args);
            }
        },
        RaiseBeforeResizing: function (index) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.BeforeResizing.IsEmpty()) {
                var args = new ASPxClientPopupWindowEventArgs(window);
                this.BeforeResizing.FireEvent(this, args);
            }
        },
        RaiseAfterResizing: function (index) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.AfterResizing.IsEmpty()) {
                var args = new ASPxClientPopupWindowEventArgs(window);
                this.AfterResizing.FireEvent(this, args);
            }
        },
        RaiseShown: function (index) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.Shown.IsEmpty()) {
                var args = new ASPxClientPopupWindowEventArgs(window);
                this.Shown.FireEvent(this, args);
            }
        },
        RaisePinnedChanged: function (index, pinned) {
            var window = index < 0 ? null : this.GetWindow(index);
            if (!this.PinnedChanged.IsEmpty()) {
                var args = new ASPxClientPopupWindowPinnedChangedEventArgs(window, pinned);
                this.PinnedChanged.FireEvent(this, args);
            }
        },
        RaiseCollapsed: function (index) {
            this.RaiseResize(index, ASPxClientPopupControlResizeState.Collapsed);
        },
        RaiseExpanded: function (index) {
            this.RaiseResize(index, ASPxClientPopupControlResizeState.Expanded);
        },
        RaiseMaximized: function (index) {
            this.RaiseResize(index, ASPxClientPopupControlResizeState.Maximized);
        },
        RaiseRestoredAfterMaximized: function (index) {
            this.RaiseResize(index, ASPxClientPopupControlResizeState.RestoredAfterMaximized);
        },
        AdjustSize: function () {
            if (this.enableContentScrolling)
                return;
            this.SetSize(0, 0);
        },
        GetHeight: function () {
            return this.GetWindowHeight(null);
        },
        GetWidth: function () {
            return this.GetWindowWidth(null);
        },
        GetContentWidth: function () {
            return this.GetWindowContentWidth(null);
        },
        GetContentHeight: function () {
            return this.GetWindowContentHeight(null);
        },
        SetSize: function (width, height) {
            this.SetWindowSize(null, width, height);
        },
        SetWidth: function (width) {
            var height = this.GetHeight();
            this.SetSize(width, height);
        },
        SetHeight: function (height) {
            var width = this.GetWidth();
            this.SetSize(width, height);
        },
        GetWindowDimensionByIndex: function (index, isWidth, forceFromCache) {
            var cachedSize = this.GetWindowCachedSize(index);
            var dimensionValue = null;
            if (forceFromCache == undefined && !this.GetWindowElement(index))
                forceFromCache = true;
            if (cachedSize && forceFromCache)
                dimensionValue = isWidth ? cachedSize.width : cachedSize.height;
            if (dimensionValue)
                return dimensionValue;
            else {
                var element = this.GetWindowElement(index);
                var sizeFromDOM = 0;
                if (this.GetIsCollapsed(index)) {
                    var headerCell = this.GetWindowHeaderElement(index);
                    sizeFromDOM = isWidth ? headerCell.offsetWidth : headerCell.offsetHeight;
                }
                else {
                    var mainCell = this.GetWindowMainCell(element);
                    sizeFromDOM = isWidth ? mainCell.offsetWidth : mainCell.offsetHeight;
                }
                if (sizeFromDOM === 0 && cachedSize)
                    sizeFromDOM = isWidth ? cachedSize.width : cachedSize.height;
                return sizeFromDOM;
            }
        },
        GetWindowDimension: function (window, isWidth, forceFromCache) {
            var index = (window != null) ? window.index : -1;
            return this.GetWindowDimensionByIndex(index, isWidth, forceFromCache);
        },
        GetWindowContentDimension: function (window, isWidth) {
            var index = (window != null) ? window.index : -1,
                dimension = 0,
                contentElem = this.GetWindowContentElement(index),
                dimensionHolder = contentElem.parentNode,
                paddingsHolder = contentElem;
            return isWidth ?
                (dimensionHolder.offsetWidth - this.getLeftRightBordersAndPaddingsSummaryValue(paddingsHolder)) :
                (dimensionHolder.offsetHeight - this.getTopBottomBordersAndPaddingsSummaryValue(paddingsHolder));
        },
        GetWindowContentWidth: function (window) {
            return this.GetWindowContentDimension(window, true);
        },
        GetWindowContentHeight: function (window) {
            return this.GetWindowContentDimension(window, false);
        },
        GetWindowHeight: function (window) {
            return this.GetWindowDimension(window, false);
        },
        GetWindowWidth: function (window) {
            return this.GetWindowDimension(window, true);
        },
        SetWindowSize: function (window, width, height) {
            var index = (window != null) ? window.index : -1;
            this.SetWindowSizeByIndex(index, width, height);
        },
        GetContentHTML: function () {
            return this.GetContentHtml();
        },
        SetContentHTML: function (html) {
            this.SetContentHtml(html);
        },
        GetContentHtml: function () {
            return this.GetWindowContentHtml(null);
        },
        SetContentHtml: function (html, useAnimation) {
            this.SetWindowContentHtml(null, html, useAnimation);
            if (html && this.accessibilityCompliant)
                ASPx.GetControlCollection().ControlsInitialized.AddHandler(this.OnControlsInitialized, this);
        },
        OnControlsInitialized: function () {
            this.InitializeAccessibleNavigationCore();
            setTimeout(function () {
                ASPx.GetControlCollection().ControlsInitialized.RemoveHandler(this.OnControlsInitialized, this);
            }.aspxBind(this), 0);
        },
        GetContentIFrame: function (window) {
            return this.GetWindowContentIFrame(null);
        },
        GetContentUrl: function () {
            return this.GetWindowContentUrl(null);
        },
        SetContentUrl: function (url) {
            this.SetWindowContentUrl(null, url);
        },
        RefreshContentUrl: function () {
            this.RefreshWindowContentUrl(null);
        },
        SetWindowPopupElementID: function (window, popupElementId) {
            var index = (window != null) ? window.index : -1;
            this.RemoveWindowAllPopupElements(index);
            this.SetPopupElementIDs(index, popupElementId.split(';'));
            if (aspxGetPopupControlCollection().IsDisappearTimerActive()) {
                aspxGetPopupControlCollection().ClearDisappearTimer();
                this.Hide(index);
            }
            this.PopulatePopupElements(index);
        },
        SetPopupElementID: function (popupElementId) {
            this.SetWindowPopupElementID(null, popupElementId);
        },
        GetCurrentPopupElementIndex: function () {
            return this.GetWindowCurrentPopupElementIndex(null);
        },
        GetWindowCurrentPopupElementIndex: function (window) {
            var popupElement = this.GetWindowCurrentPopupElement(window);
            return popupElement ? popupElement.DXPopupElementIndex : -1;
        },
        GetCurrentPopupElement: function () {
            return this.GetWindowCurrentPopupElement(null);
        },
        GetWindowCurrentPopupElement: function (window) {
            var index = (window != null) ? window.index : -1;
            return this.GetWindowCurrentPopupElementByIndex(index);
        },
        GetWindowCurrentPopupElementByIndex: function (index) {
            var popupElement = this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index));
            if (popupElement && popupElement.DXPopupElementControl)
                return popupElement;
            return null;
        },
        Show: function (popupElementIndex) {
            this.ShowWindow(null, popupElementIndex);
        },
        ShowAtElement: function (htmlElement) {
            this.ShowWindowAtElement(null, htmlElement);
        },
        ShowAtElementByID: function (id) {
            var htmlElement = document.getElementById(id);
            this.ShowWindowAtElement(null, htmlElement);
        },
        ShowAtPos: function (x, y) {
            this.ShowWindowAtPos(null, Math.round(x), Math.round(y));
        },
        BringToFront: function () {
            this.BringWindowToFront(null);
        },
        Hide: function () {
            this.HideWindow(null);
        },
        IsWindowVisible: function (window) {
            var index = (window != null) ? window.index : -1;
            return this.InternalIsWindowVisible(index);
        },
        IsVisible: function () {
            return this.InternalIsWindowVisible(-1);
        },
        GetWindow: function (index) {
            return (0 <= index && index < this.windows.length) ? this.windows[index] : null;
        },
        GetWindowByName: function (name) {
            for (var i = 0; i < this.windows.length; i++)
                if (this.windows[i].name == name) return this.windows[i];
            return null;
        },
        GetWindowCount: function () {
            return this.GetWindowCountCore();
        },
        ShowWindow: function (window, popupElementIndex) {
            if (!this.isInitialized)
                return;
            var index = (window != null) ? window.index : -1;
            if (popupElementIndex === undefined)
                popupElementIndex = this.GetLastShownPopupElementIndex(index);
            this.DoShowWindowAtPos(index, ASPx.InvalidPosition, ASPx.InvalidPosition, popupElementIndex, false, true);
        },
        ShowWindowAtElement: function (window, htmlElement) {
            var index = (window != null) ? window.index : -1;
            var lastIndexBackup = this.GetLastShownPopupElementIndex(index);
            this.ShowWindow(window, this.AddPopupElementInternal(index, htmlElement));
            this.RemovePopupElementInternal(index, htmlElement);
            this.SetLastShownPopupElementIndex(index, lastIndexBackup);
        },
        ShowWindowAtElementByID: function (window, id) {
            var htmlElement = document.getElementById(id);
            this.ShowWindowAtElement(window, htmlElement);
        },
        ShowWindowAtPos: function (window, x, y) {
            if (!this.isInitialized)
                return;
            var index = (window != null) ? window.index : -1;
            this.DoShowWindowAtPos(index, x, y, -1, false, true);
        },
        BringWindowToFront: function (window) {
            var index = (window != null) ? window.index : -1;
            var element = this.GetWindowElement(index);
            aspxGetPopupControlCollection().ActivateWindowElement(element, undefined, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
        },
        HideWindow: function (window) {
            var index = (window != null) ? window.index : -1;
            this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.API);
        },
        GetWindowContentHTML: function (window) {
            return this.GetWindowContentHtml(window);
        },
        SetWindowContentHTML: function (window, html) {
            this.SetWindowContentHtml(window, html);
        },
        GetWindowContentHtml: function (window) {
            var index = (window != null) ? window.index : -1;
            var element = this.GetContentContainer(index);
            return (element != null) ? element.innerHTML : "";
        },
        SetWindowContentHtml: function (window, html, useAnimation) {
            var index = (window != null) ? window.index : -1;
            this.SetWindowContentHtmlCore(index, html, useAnimation);
        },
        SetWindowContentHtmlCore: function (index, html, useAnimation) {
            var element = this.GetContentContainer(index);
            if (element != null) {
                ASPx.SetInnerHtml(element, html);
                this.AfterSetWindowContentHtml(index, element, useAnimation);
            }
        },
        SetWindowElementZIndex: function (element, zIndex) {
            element.style.zIndex = zIndex;
            var iFrame = element.overflowElement;
            if (iFrame)
                iFrame.style.zIndex = zIndex - 1;
            var modalElement = element.modalElement;
            if (modalElement)
                modalElement.style.zIndex = zIndex - 1;
            this.UpdateWindowsStateCookie();
            this.updateContentScrollIfNeeded(this.GetWindowIndex(element));
        },
        AfterSetWindowContentHtml: function (index, contentContainer, useAnimation) {
            this.RecalculateWindowSize(index);
            if (useAnimation && typeof (ASPx.AnimationHelper) != "undefined")
                ASPx.AnimationHelper.fadeIn(contentContainer, function () { this.ResizeWindowIFrame(index); }.aspxBind(this));
            else
                this.ResizeWindowIFrame(index);
            this.UpdateScrollbar(index);
        },
        RecalculateWindowSize: function (index) {
            var window = this.GetWindowElement(index);
            var displayAfterSetSize = window.style.display;
            this.SetClientWindowSizeCoreLite(index, this.GetWindowWidthInternal(index), this.GetWindowHeightInternal(index), this.GetIsCollapsed(index));
            window.style.display = displayAfterSetSize;
            if (this.HasAnyScrollBars(index))
                this.NormalizeWindowSize(index, this.GetIsMaximized(index));
        },
        GetWindowContentIFrame: function (window) {
            var index = (window != null) ? window.index : -1;
            return this.GetWindowContentIFrameElement(index);
        },
        GetWindowContentUrl: function (window) {
            var index = (window != null) ? window.index : -1;
            if (!this.IsWindowVisible(window))
                return this.GetWindowContentIFrameUrl(index);
            var element = this.GetWindowContentIFrameElement(index);
            return (element != null) ? element.src : "";
        },
        SetWindowContentUrl: function (window, url) {
            var index = (window != null) ? window.index : -1;
            this.SetWindowContentUrlInternal(index, url);
        },
        SetWindowContentUrlInternal: function (index, url) {
            var element = this.GetWindowContentIFrameElement(index);
            var windowVisible = this.InternalIsWindowVisible(index);
            if (windowVisible && element != null)
                this.SetIframeVisibleForDragging(index, true);
            this.SetWindowContentIFrameUrl(index, url);
            var src = !windowVisible ? ASPx.SSLSecureBlankUrl : url;
            if (element == null) {
                this.CreateWindowContentIFrameElement(index, src);
                if (ASPx.IsElementVisible(this.GetWindowElement(index), true)) {
                    var windowWidth = this.GetWindowDimensionByIndex(index, true, false);
                    var windowHeight = this.GetWindowDimensionByIndex(index, false, false);
                    this.SetClientWindowSizeCoreLite(index, windowWidth, windowHeight);
                }
            }
            else
                this.SetSrcToIframeElement(index, element, src);
        },
        GetPinned: function () {
            return this.GetIsPinned(-1);
        },
        SetPinned: function (value) {
            this.SetPinCore(-1, value);
        },
        GetWindowPinned: function (window) {
            var index = (window != null) ? window.index : -1;
            return this.GetIsPinned(index);
        },
        SetWindowPinned: function (window, value) {
            var index = (window != null) ? window.index : -1;
            this.SetPinCore(index, value);
        },
        GetMaximized: function () {
            return this.GetIsMaximized(-1);
        },
        SetMaximized: function (value) {
            this.SetMaximizedCore(-1, value);
        },
        GetWindowMaximized: function (window) {
            var index = (window != null) ? window.index : -1;
            return this.GetIsMaximized(index);
        },
        SetWindowMaximized: function (window, value) {
            var index = (window != null) ? window.index : -1;
            this.SetMaximizedCore(index, value);
        },
        GetCollapsed: function () {
            return this.GetIsCollapsed(-1);
        },
        SetCollapsed: function (value) {
            this.SetCollapsedCore(-1, value);
        },
        GetWindowCollapsed: function (window) {
            var index = (window != null) ? window.index : -1;
            return this.GetIsCollapsed(index);
        },
        SetWindowCollapsed: function (window, value) {
            var index = (window != null) ? window.index : -1;
            this.SetCollapsedCore(index, value);
        },
        RefreshWindowContentUrl: function (window) {
            var index = (window != null) ? window.index : -1;
            if (ASPx.Browser.IE)
                this.RefreshWindowContentUrlIE(index, window);
            else
                this.RefreshWindowContentUrlCommon(window);
        },
        RefreshWindowContentUrlIE: function (index, window) {
            var windowVisible = this.InternalIsWindowVisible(index);
            if (windowVisible)
                this.RefreshWindowContentUrlIECore(index, window);
            else {
                var iframe = this.GetWindowContentIFrameElement(index);
                if (iframe)
                    iframe.DXReloadAfterShowRequired = true;
            }
        },
        RefreshWindowContentUrlIECore: function (index, window) {
            try {
                if (!this.GetIframeLoading(index)) {
                    var iframe = this.GetWindowContentIFrameElement(index);
                    if (iframe)
                        iframe.contentWindow.location.reload();
                }
            } catch (e) {
                this.RefreshWindowContentUrlCommon(window);
            }
        },
        RefreshWindowContentUrlCommon: function (window) {
            this.SetWindowContentUrl(window, this.GetWindowContentUrl(window));
        },
        SetWindowContentVisible: function (index, visible) {
            var contentElement = this.GetWindowContentWrapperElement(index);
            if (contentElement)
                this.SetWindowPartVisibleCore(contentElement, "DXPopupWindowContentDisplay", visible);
        },
        SetWindowFooterVisible: function (index, visible) {
            var footerElement = this.GetWindowFooterElement(index);
            if (footerElement)
                this.SetWindowPartVisibleCore(footerElement, "DXPopupWindowFooterDisplay", visible);
        },
        SetWindowPartVisibleCore: function (partElement, displayCacheName, visible) {
            var nothingChanged = ASPx.IsElementVisible(partElement) && visible;
            if (nothingChanged) return;
            if (!(ASPx.IsExists(partElement[displayCacheName])))
                partElement[displayCacheName] = partElement.style.display;
            partElement.style.display = visible ? partElement[displayCacheName] : 'none';
        },
        UpdatePosition: function () {
            this.UpdatePositionAtElement(this.GetPopupElement(-1, this.GetLastShownPopupElementIndex(-1)));
        },
        UpdatePositionAtElement: function (popupElement) {
            this.UpdateWindowPositionAtElement(null, popupElement);
        },
        UpdateWindowPosition: function (window) {
            var index = (window != null) ? window.index : -1;
            this.UpdateWindowPositionAtElement(window, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
        },
        UpdateWindowPositionAtElement: function (window, popupElement) {
            var index = (window != null) ? window.index : -1;
            this.UpdateWindowPositionInternal(index, popupElement);
        },
        UpdateWindowPositionInternal: function (index, popupElement) {
            var element = this.GetWindowElement(index);
            if (this.InternalIsWindowVisible(index) && element != null) {
                var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, true, false);
                var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, false, false);
                this.SetWindowPos(index, element, horizontalPopupPosition.position, verticalPopupPosition.position);
            } else
                this.DoShowWindowAtPos(index, ASPx.InvalidDimension, ASPx.InvalidDimension, this.GetLastShownPopupElementIndex(index), false, false);
        },
        TryAutoUpdatePosition: function (index) {
            if (this.GetAutoUpdatePosition(index))
                this.UpdateWindowPositionInternal(index, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
            if (this.GetIsMaximized(index))
                this.UpdateMaximizedWindowSizeOnResize(index);
        },
        CreateWindowContentIFrameElement: function (index, src) {
            var content = this.GetContentContainer(index);
            var iframeParent = content;
            content.innerHTML = "";
            content.style.display = "block";
            var iframe = this.CreateContentIFrameElement(index, src);
            this.RequireIFrameHeightAdjusting(index, iframe);
            iframeParent.appendChild(iframe);
            this.InitIFrame(index);
            return iframe;
        },
        RequireIFrameHeightAdjusting: function (index, iframe) {
            if (this.InternalIsWindowVisible(index))
                this.AdjustIFrameHeight(index, iframe);
            else
                this.PostponeIframeAdjusting(index);
        },
        EnsureIFrameHeightAdjusted: function (index) {
            if (this.GetIframeAdjustingPostponed(index)) {
                var iframe = this.GetWindowContentIFrameElement(index);
                this.AdjustIFrameHeight(index, iframe);
            }
        },
        PostponeIframeAdjusting: function (index) {
            this.SetIframeAdjustingPostponed(index, true);
        },
        SetIframeAdjustingPostponed: function (index, value) {
            if (0 <= index && index < this.iframeAdjustingPostponedArray.length)
                this.iframeAdjustingPostponedArray[index] = value;
            else
                this.iframeAdjustingPostponed = value;
        },
        GetIframeAdjustingPostponed: function (index) {
            if (0 <= index && index < this.iframeAdjustingPostponedArray.length)
                return this.iframeAdjustingPostponedArray[index];
            return this.iframeAdjustingPostponed;
        },
        AdjustIFrameHeight: function (index, iframe) {
            if (!this.InternalIsWindowVisible(index) || !iframe) return;
            this.SetIframeAdjustingPostponed(index, false);
            var content = this.GetContentContainer(index);
            var contentWrapper = this.GetWindowContentWrapperElement(index);
            iframe.style.verticalAlign = "text-bottom";
            var iframeHeight = contentWrapper.offsetHeight - this.getTopBottomBordersAndPaddingsSummaryValue(content);
            if (iframeHeight >= 0)
                iframe.style.height = iframeHeight + "px";
        },
        CreateContentIFrameElement: function (index, src) {
            var iframe = document.createElement("IFRAME");
            iframe.id = this.GetWindowContentIFrameElementId(index);
            iframe.scrolling = "auto";
            iframe.frameBorder = 0;
            iframe.style.width = "100%";
            iframe.style.height = "100%";
            iframe.style.overflow = "auto";
            if (ASPx.Browser.Chrome) iframe.style.webkitBackfaceVisibility = "hidden";
            if (ASPx.Browser.IE || ASPx.Browser.Edge)
                iframe.style["-ms-user-select"] = "text";
            var titleText = this.GetWindowContentIFrameTitle(index);
            if (!!titleText)
                iframe.title = titleText;
            this.SetSrcToIframeElement(index, iframe, src);
            return iframe;
        },
        GetWindowHeaderTextCell: function (index) {
            return this.GetWindowChild(index, "_PWH" + index + "T");
        },
        GetWindowHeaderTextElement: function (index) {
            var element = this.GetWindowHeaderTextCell(index);
            if (element != null) {
                var link = ASPx.GetNodeByTagName(element, "A", 0);
                return link || element;
            }
            return null;
        },
        GetWindowHeaderLinkElement: function (index) {
            var element = this.GetWindowHeaderElement(index);
            return element ? ASPx.GetNodeByClassName(element, PopupControlCssClasses.LinkCssClassName) : null;
        },
        GetWindowHeaderImageCell: function (index) {
            return this.GetWindowChild(index, "_PWH" + index + "I");
        },
        GetWindowFooterTextCell: function (index) {
            return this.GetWindowChild(index, "_PWF" + index + "T");
        },
        GetWindowFooterTextElement: function (index) {
            var element = this.GetWindowFooterTextCell(index);
            if (element != null) {
                var link = ASPx.GetNodeByTagName(element, "A", 0);
                return link || element;
            }
            return null;
        },
        GetWindowFooterLinkElement: function (index) {
            var element = this.GetWindowFooterElement(index);
            return element ? ASPx.GetNodeByClassName(element, PopupControlCssClasses.LinkCssClassName) : null;
        },
        GetWindowFooterImageCell: function (index) {
            return this.GetWindowChild(index, "_PWF" + index + "I");
        },
        GetWindowHeaderImageUrl: function (index) {
            var element = this.GetWindowHeaderImageCell(index);
            return element ? element.src : "";
        },
        SetWindowHeaderImageUrl: function (index, url) {
            var element = this.GetWindowHeaderImageCell(index);
            if (element != null) {
                element.onload = function () { this.CorrectHeaderContentElementHeight(index); }.aspxBind(this);
                element.src = url;
            }
        },
        GetWindowFooterImageUrl: function (index) {
            var element = this.GetWindowFooterImageCell(index);
            return element ? element.src : "";
        },
        SetWindowFooterImageUrl: function (index, url) {
            var element = this.GetWindowFooterImageCell(index);
            if (element != null) {
                element.src = url;
                this.CorrectWindowSizeGripPositionLite(index);
            }
        },
        GetWindowHeaderNavigateUrl: function (index) {
            var link = this.GetWindowHeaderLinkElement(index);
            if (link)
                return link.href || ASPx.Attr.GetAttribute(linkEl, "savedhref");
            return "";
        },
        SetWindowHeaderNavigateUrl: function (index, url) {
            var link = this.GetWindowHeaderLinkElement(index);
            if (link) {
                if (ASPx.Attr.IsExistsAttribute(link, "savedhref"))
                    ASPx.Attr.SetAttribute(link, "savedhref", url);
                else if (ASPx.Attr.IsExistsAttribute(link, "href"))
                    link.href = url;
            }
        },
        GetWindowFooterNavigateUrl: function (index) {
            var link = this.GetWindowFooterLinkElement(index);
            if (link)
                return link.href || ASPx.Attr.GetAttribute(linkEl, "savedhref");
            return "";
        },
        SetWindowFooterNavigateUrl: function (index, url) {
            var link = this.GetWindowFooterLinkElement(index);
            if (link) {
                if (ASPx.Attr.IsExistsAttribute(link, "savedhref"))
                    ASPx.Attr.SetAttribute(link, "savedhref", url);
                else if (ASPx.Attr.IsExistsAttribute(link, "href"))
                    link.href = url;
            }
        },
        GetWindowHeaderText: function (index) {
            var element = this.GetWindowHeaderTextElement(index);
            if (element != null)
                return element.innerHTML;
            return "";
        },
        SetWindowHeaderText: function (index, text) {
            var element = this.GetWindowHeaderTextElement(index);
            if (element != null) {
                element.innerHTML = text;
                this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
            }
        },
        GetWindowFooterText: function (index) {
            var element = this.GetWindowFooterTextElement(index);
            if (element != null)
                return element.innerHTML;
            return "";
        },
        SetWindowFooterText: function (index, text) {
            var element = this.GetWindowFooterTextElement(index);
            if (element != null) {
                element.innerHTML = text;
                this.CorrectWindowSizeGripPositionLite(index);
            }
        },
        RefreshPopupElementConnection: function () {
            this.ClearPopupElementConnection();
            var index = this.HasDefaultWindow() ? -1 : 0;
            for (; index < this.GetWindowCount(); index++)
                this.PopulatePopupElements(index);
        },
        ClearPopupElementConnection: function () {
            var index = this.HasDefaultWindow() ? -1 : 0;
            for (; index < this.GetWindowCount(); index++)
                this.RemoveWindowAllPopupElements(index);
        },
        GetHeaderImageUrl: function () {
            return this.GetWindowHeaderImageUrl(-1);
        },
        SetHeaderImageUrl: function (value) {
            this.SetWindowHeaderImageUrl(-1, value);
        },
        GetFooterImageUrl: function () {
            return this.GetWindowFooterImageUrl(-1);
        },
        SetFooterImageUrl: function (value) {
            this.SetWindowFooterImageUrl(-1, value);
        },
        GetHeaderNavigateUrl: function () {
            return this.GetWindowHeaderNavigateUrl(-1);
        },
        SetHeaderNavigateUrl: function (value) {
            this.SetWindowHeaderNavigateUrl(-1, value);
        },
        GetFooterNavigateUrl: function () {
            return this.GetWindowFooterNavigateUrl(-1);
        },
        SetFooterNavigateUrl: function (value) {
            this.SetWindowFooterNavigateUrl(-1, value);
        },
        GetHeaderText: function () {
            return this.GetWindowHeaderText(-1);
        },
        SetHeaderText: function (value) {
            this.SetWindowHeaderText(-1, value);
        },
        GetFooterText: function () {
            return this.GetWindowFooterText(-1);
        },
        SetFooterText: function (value) {
            this.SetWindowFooterText(-1, value);
        },
        GetVisible: function () {
            return this.IsVisible();
        },
        SetVisible: function (visible) {
            if (visible && !this.IsVisible())
                this.Show();
            else if (!visible && this.IsVisible())
                this.Hide();
        },
        getLeftRightBordersAndPaddingsSummaryValue: function (element, currentStyle) {
            return ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
        },
        getTopBottomBordersAndPaddingsSummaryValue: function (element, currentStyle) {
            return ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
        }
    });
    ASPxClientPopupControl.Cast = ASPxClientControl.Cast;
    ASPxClientPopupControl.GetPopupControlCollection = function () {
        return aspxGetPopupControlCollection();
    };
    var ASPxClientPopupWindow = ASPx.CreateClass(null, {
        constructor: function (popupControl, index, name) {
            this.popupControl = popupControl;
            this.index = index;
            this.name = name;
        },
        GetHeaderImageUrl: function () {
            return this.popupControl.GetWindowHeaderImageUrl(this.index);
        },
        SetHeaderImageUrl: function (value) {
            this.popupControl.SetWindowHeaderImageUrl(this.index, value);
        },
        GetFooterImageUrl: function () {
            return this.popupControl.GetWindowFooterImageUrl(this.index);
        },
        SetFooterImageUrl: function (value) {
            this.popupControl.SetWindowFooterImageUrl(this.index, value);
        },
        GetHeaderNavigateUrl: function () {
            return this.popupControl.GetWindowHeaderNavigateUrl(this.index);
        },
        SetHeaderNavigateUrl: function (value) {
            this.popupControl.SetWindowHeaderNavigateUrl(this.index, value);
        },
        GetFooterNavigateUrl: function () {
            return this.popupControl.GetWindowFooterNavigateUrl(this.index);
        },
        SetFooterNavigateUrl: function (value) {
            this.popupControl.SetWindowFooterNavigateUrl(this.index, value);
        },
        GetHeaderText: function () {
            return this.popupControl.GetWindowHeaderText(this.index);
        },
        SetHeaderText: function (value) {
            this.popupControl.SetWindowHeaderText(this.index, value);
        },
        GetFooterText: function () {
            return this.popupControl.GetWindowFooterText(this.index);
        },
        SetFooterText: function (value) {
            this.popupControl.SetWindowFooterText(this.index, value);
        }
    });
    var ASPxClientPopupWindowEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
        constructor: function (window) {
            this.constructor.prototype.constructor.call(this);
            this.window = window;
        }
    });
    var ASPxClientPopupWindowCancelEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
        constructor: function (window, closeReason) {
            this.constructor.prototype.constructor.call(this);
            this.window = window;
            this.closeReason = closeReason;
        }
    });
    var ASPxClientPopupWindowCloseUpEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
        constructor: function (window, closeReason) {
            this.constructor.prototype.constructor.call(this, window);
            this.closeReason = closeReason;
        }
    });
    var ASPxClientPopupWindowResizeEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
        constructor: function (window, resizeState) {
            this.constructor.prototype.constructor.call(this, window);
            this.resizeState = resizeState;
        }
    });
    var ASPxClientPopupWindowPinnedChangedEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
        constructor: function (window, pinned) {
            this.constructor.prototype.constructor.call(this, window);
            this.pinned = pinned;
        }
    });
    var ASPxClientPopupControlCollection = ASPx.CreateClass(ASPxClientControlCollection, {
        constructor: function () {
            this.constructor.prototype.constructor.call(this);
            this.draggingControl = null;
            this.draggingWindowIndex = -1;
            this.gragXOffset = 0;
            this.gragYOffset = 0;
            this.visibleModalElements = [];
            this.visiblePopupWindowIds = [];
            this.windowResizeByBodyScrollVisibilityChangingLockCount = 0;
            this.savedBodyWidth = 0;
            this.savedBodyHeight = 0;
            this.overControl = null;
            this.overWindowIndex = -1;
            this.overXPos = ASPx.InvalidPosition;
            this.overYPos = ASPx.InvalidPosition;
            this.appearTimerID = -1;
            this.disappearTimerID = -1;
            this.scrollEventLockCount = 0;
            this.currentActiveWindowElement = null;
            this.resizeControl = null;
            this.resizeIndex = -2;
            this.resizeCursor = "";
            this.resizePanel = null;
            this.selectBanned = false;
            this.pcWindowsAreRestrictedByDocumentWindow = true;
            this.docScrollLeft = -1;
            this.docScrollTop = -1;
            this.EnsureSaveScrollState();
        },
        GetCollectionType: function () {
            return "Popup";
        },
        Remove: function (popupControl) {
            for (var i = this.visibleModalElements.length - 1; i >= 0; i--) {
                var modalElement = this.visibleModalElements[i];
                if (modalElement && modalElement.DXModalPopupControl === popupControl)
                    this.UnregisterVisibleModalElement(modalElement);
            }
            for (var j = this.visiblePopupWindowIds.length - 1; j >= 0; j--) {
                var id = this.visiblePopupWindowIds[j];
                if (!ASPx.IsExists(id)) continue;
                var popupWindow = this.GetPopupWindowFromID(id);
                if (popupWindow.popupControl === popupControl) {
                    var windowElement = popupControl.GetWindowElement(popupWindow.windowIndex);
                    if (windowElement)
                        this.UnregisterVisibleWindow(windowElement);
                    else
                        ASPx.Data.ArrayRemove(this.visiblePopupWindowIds, id);
                }
            }
            ASPxClientControlCollection.prototype.Remove.call(this, popupControl);
        },
        EnsureSaveScrollState: function () {
            if (ASPx.documentLoaded && this.docScrollLeft < 0 && this.docScrollTop < 0)
                this.SaveScrollState();
        },
        GetPopupWindowFromID: function (id) {
            var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
            var name = id.substring(0, pos);
            var index = id.substr(pos + ASPx.PCWIdSuffix.length);
            var popupControl = aspxGetPopupControlCollection().Get(name);
            return { popupControl: popupControl, windowIndex: index };
        },
        DoHideAllWindows: function (srcElement, excptId, applyToAll, closeReason) {
            for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
                var id = this.visiblePopupWindowIds[i];
                if (id == excptId) continue;
                if (srcElement != null && ASPx.GetParentById(srcElement, id) != null) continue;
                var popupWindow = this.GetPopupWindowFromID(id);
                var windowCloseAction = popupWindow.popupControl.GetWindowCloseAction(popupWindow.windowIndex);
                if (popupWindow.popupControl != null) {
                    var popupWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(popupWindow.popupControl.GetWindowElement(popupWindow.windowIndex));
                    var isPopupHigherSrcElement = ASPx.PopupUtils.IsHigher(popupWindowZIndexArray, ASPx.PopupUtils.GetElementZIndexArray(srcElement)) || !popupWindow.popupControl.HasDefaultWindow();
                    if ((windowCloseAction != "CloseButton" && windowCloseAction != "None") && isPopupHigherSrcElement || applyToAll)
                        popupWindow.popupControl.DoHideWindow(parseInt(popupWindow.windowIndex), false, closeReason);
                }
            }
        },
        DoShowAtCurrentPos: function (name, index, popupElementIndex, evtClone) {
            var pc = this.Get(name);
            if (pc != null && !pc.InternalIsWindowVisible(index))
                pc.DoShowWindowAtPos(index, this.overXPos, this.overYPos, popupElementIndex, true, true, evtClone, ASPxClientPopupControlCloseReason.MouseOut);
        },
        WindowZIndexWasInitialized: function (zIndex, pcZIndex) {
            return pcZIndex <= zIndex;
        },
        ActivateWindowElement: function (element, evt, popupType, defZIndex, zIndex) {
            var maxZIndex = this.GetMaxZIndex(popupType, defZIndex),
                topZIndex = this.WindowZIndexWasInitialized(maxZIndex, zIndex) ? parseInt(maxZIndex) : zIndex;
            if (this.WindowZIndexWasInitialized(element.style.zIndex, zIndex) && element.style.zIndex != topZIndex) {
                this.DeleteWindowFromZIndexOrder(element);
            }
            if (!this.WindowZIndexWasInitialized(element.style.zIndex, zIndex))
                topZIndex += 2;
            var popupWindow = this.GetPopupWindowFromID(element.id);
            popupWindow.popupControl.SetWindowElementZIndex(element, topZIndex);
            var pcWElementEventSource = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupWindowElement);
            if (!evt || (evt && pcWElementEventSource == element)) {
                if (this.GetCurrentActiveWindowElement() != element) {
                    this.RefreshTabIndexes(false);
                    this.SaveCurrentActiveWindowElement(element);
                }
            }
        },
        RefreshTabIndexes: function (forceRecalculate) {
            var topModalWindow = this.GetTopModalWindow();
            if (topModalWindow != null || forceRecalculate) {
                var topModalWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(topModalWindow);
                this.CalculateTabIndexes(topModalWindowZIndexArray);
            }
        },
        ElementHasTabIndex: function (element) {
            return ASPx.IsExists(ASPx.Attr.GetAttribute(element, "tabindex"));
        },
        IsElementCanBeActive: function (element) {
            return element.tagName === "INPUT" || element.tagName === "A" ||
                element.tagName === "BUTTON" || element.tagName === "TEXTAREA" ||
                element.tagName === "SELECT" || this.ElementHasTabIndex(element);
        },
        GetCanBeActiveElements: function () {
            var elements = document.getElementsByTagName("*"),
                canBeActiveElements = [];
            for (var i = 0; i < elements.length; i++) {
                if (this.IsElementCanBeActive(elements[i]))
                    canBeActiveElements.push(elements[i]);
            }
            return canBeActiveElements;
        },
        GetEditableDivs: function () {
            if (document.querySelectorAll)
                return document.querySelectorAll("div[contenteditable=true]");
            var editableDivs = [];
            var allDivs = document.getElementsByTagName("DIV");
            for (var i = 0; i < allDivs.length; i++) {
                var div = allDivs[i];
                if (div.getAttribute("contenteditable") == 'true')
                    editableDivs.push(div);
            }
            return editableDivs;
        },
        CalculateTabIndexes: function (topModalWindowZIndexArray) {
            var elements = this.GetCanBeActiveElements();
            for (var i = 0; i < elements.length; i++) {
                var currentElementZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(elements[i]);
                if (ASPx.PopupUtils.IsHigher(currentElementZIndexArray, topModalWindowZIndexArray))
                    ASPx.Attr.RestoreTabIndexAttribute(elements[i]);
                else
                    ASPx.Attr.ChangeTabIndexAttribute(elements[i]);
            }
        },
        PopupWindowIsModalByVisibleIndex: function (visiblePopupWindowIndex) {
            return this.PopupWindowIsModalByID(this.visiblePopupWindowIds[visiblePopupWindowIndex]);
        },
        PopupWindowIsModalByID: function (windowElementID) {
            var popupWindow = this.GetPopupWindowFromID(windowElementID);
            return popupWindow.popupControl.WindowIsModal(popupWindow.windowIndex);
        },
        SaveCurrentActiveWindowElement: function (windowElement) {
            this.currentActiveWindowElement = windowElement;
        },
        SkipCurrentActiveWindowElement: function (element) {
            if (element == this.GetCurrentActiveWindowElement())
                this.SaveCurrentActiveWindowElement(null);
        },
        GetCurrentActiveWindowElement: function () {
            return this.currentActiveWindowElement;
        },
        GetMaxZIndex: function (type, defaultZIndex) {
            var maxZIndex = defaultZIndex;
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var id = this.visiblePopupWindowIds[i];
                if (type !== undefined && this.GetPopupWindowFromID(id).popupControl.GetPopupType() !== type)
                    continue;
                var currentWindow = ASPx.GetElementById(id);
                if (!!currentWindow && ASPx.IsElementVisible(currentWindow) && currentWindow.style && currentWindow.style.zIndex > maxZIndex)
                    maxZIndex = currentWindow.style.zIndex;
            }
            return maxZIndex;
        },
        GetTopModalWindow: function () {
            return this.GetTopWindow(true);
        },
        GetTopWindow: function (onlyModal) {
            var topWindow = null;
            var topWindowZIndexArray = null;
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var currentWindow = ASPx.GetElementById(this.visiblePopupWindowIds[i]);
                if (onlyModal && !this.PopupWindowIsModalByVisibleIndex(i))
                    continue;
                if (ASPx.IsElementVisible(currentWindow)) {
                    var currentWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(currentWindow);
                    if (topWindow == null || ASPx.PopupUtils.IsHigher(currentWindowZIndexArray, topWindowZIndexArray)) {
                        topWindow = currentWindow;
                        topWindowZIndexArray = currentWindowZIndexArray;
                    }
                }
            }
            return topWindow;
        },
        DeleteWindowFromZIndexOrder: function (element) {
            for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
                var windowElement = ASPx.GetElementById(this.visiblePopupWindowIds[i]);
                if (!windowElement)
                    ASPx.Data.ArrayRemoveAt(this.visiblePopupWindowIds, i);
                else if (windowElement.style.zIndex > element.style.zIndex) {
                    var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
                    popupWindow.popupControl.SetWindowElementZIndex(windowElement, windowElement.style.zIndex - 2);
                }
            }
        },
        AdjustModalElementsBounds: function () {
            for (var i = 0; i < this.visibleModalElements.length; i++)
                this.AdjustModalElementBounds(this.visibleModalElements[i]);
        },
        AdjustModalElementBounds: function (element) {
            if (!ASPx.IsExistsElement(element)) return;
            var x = ASPx.PrepareClientPosForElement(0, element, true);
            var y = ASPx.PrepareClientPosForElement(0, element, false);
            ASPx.SetStyles(element, { left: x, top: y });
            if (ASPx.Browser.NetscapeFamily && !ASPx.Browser.Firefox)
                ASPx.SetStyles(element, { width: 1, height: 1 });
            ASPx.SetStyles(element, { width: ASPx.GetDocumentWidth(), height: ASPx.GetDocumentHeight() });
        },
        ClearAppearTimer: function () {
            this.appearTimerID = ASPx.Timer.ClearTimer(this.appearTimerID);
        },
        ClearDisappearTimer: function () {
            this.disappearTimerID = ASPx.Timer.ClearTimer(this.disappearTimerID);
        },
        IsAppearTimerActive: function () {
            return this.appearTimerID > -1;
        },
        IsDisappearTimerActive: function () {
            return this.disappearTimerID > -1;
        },
        SetAppearTimer: function (name, index, popupElementIndex, timeout, evt) {
            var evtClone = ASPx.CloneObject(evt);
            this.appearTimerID = window.setTimeout(function () {
                aspxGetPopupControlCollection().DoShowAtCurrentPos(name, index, popupElementIndex, evtClone);
            }, timeout);
        },
        SetDisappearTimer: function (name, index, timeout) {
            this.disappearTimerID = window.setTimeout(function () {
                aspxGetPopupControlCollection().OnPWDisappearTimer(name, index);
            }, timeout);
        },
        GetDocScrollDifference: function () {
            return new _aspxScrollDifference(ASPx.GetDocumentScrollLeft() - this.docScrollLeft, ASPx.GetDocumentScrollTop() - this.docScrollTop);
        },
        IsDocScrolled: function (scroll) {
            return scroll.horizontal != 0 || scroll.vertical != 0;
        },
        SaveScrollState: function () {
            this.docScrollLeft = ASPx.GetDocumentScrollLeft();
            this.docScrollTop = ASPx.GetDocumentScrollTop();
        },
        InitDragObject: function (control, index, x, y, xClientCorrection, yClientCorrection) {
            this.draggingControl = control;
            this.draggingWindowIndex = index;
            this.gragXOffset = x;
            this.gragYOffset = y;
            this.xClientCorrection = xClientCorrection;
            this.yClientCorrection = yClientCorrection;
            this.SetDocumentSelectionBan(true);
        },
        InitOverObject: function (control, index, evt) {
            this.overControl = control;
            this.overWindowIndex = index;
            if (evt)
                this.SaveCurrentMouseOverPos(evt);
        },
        InitResizeObject: function (control, index, cursor, resizePanel) {
            this.resizeControl = control;
            this.resizeIndex = index;
            this.resizeCursor = cursor;
            this.resizePanel = resizePanel;
            this.SetDocumentSelectionBan(true);
        },
        SetDocumentSelectionBan: function (value) {
            if (this.selectBanned === value)
                return;
            this.selectBanned = value;
            if (ASPx.Browser.WebKitFamily) {
                if (value) {
                    if (!this.webkitUserSelectBackup && document.body.style.webkitUserSelect)
                        this.webkitUserSelectBackup = document.body.style.webkitUserSelect;
                    document.body.style.webkitUserSelect = "none";
                } else {
                    if (this.webkitUserSelectBackup) {
                        document.body.style.webkitUserSelect = this.webkitUserSelectBackup;
                        delete this.webkitUserSelectBackup;
                    } else
                        document.body.style.webkitUserSelect = "auto";
                }
            }
        },
        IsResizeInint: function () {
            return this.resizeControl != null;
        },
        ClearDragObject: function () {
            this.draggingControl = null;
            this.draggingWindowIndex = -1;
            this.gragXOffset = 0;
            this.gragYOffset = 0;
            this.SetDocumentSelectionBan(this.resizeControl != null);
        },
        ClearResizeObject: function () {
            this.resizeControl = null;
            this.resizeIndex = -2;
            this.resizeCursor = "";
            this.SetDocumentSelectionBan(this.draggingControl != null);
            this.resizePanel.parentNode.removeChild(this.resizePanel);
        },
        Drag: function (evt) {
            if (ASPx.tableColumnResizing || ASPx.currentDragHelper || !ASPx.Evt.IsLeftButtonPressed(evt)) return;
            var x = ASPx.Evt.GetEventX(evt);
            var y = ASPx.Evt.GetEventY(evt);
            if (this.pcWindowsAreRestrictedByDocumentWindow && ASPx.PopupUtils.CoordinatesInDocumentRect(x, y)) {
                x += this.gragXOffset;
                y += this.gragYOffset;
                this.draggingControl.OnDrag(this.draggingWindowIndex, x, y, this.xClientCorrection, this.yClientCorrection, evt);
                if (ASPx.Browser.WebKitTouchUI)
                    evt.preventDefault();
            }
        },
        DragStop: function () {
            this.draggingControl.OnDragStop(this.draggingWindowIndex);
            this.ClearDragObject();
        },
        ResizeStop: function (evt) {
            this.resizeControl.OnResizeStop(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
            aspxGetPopupControlCollection().ClearResizeObject();
        },
        setIframesMouseMoveEnabled: function (enabled) {
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
                var popupControl = popupWindow.popupControl;
                if (popupControl) {
                    var iframe = popupControl.GetWindowContentIFrameElement(popupWindow.windowIndex);
                    if (iframe) {
                        iframe.style.pointerEvents = enabled ? "" : "none";
                        if (ASPx.Browser.IE && ASPx.Browser.MajorVersion < 11) {
                            if (enabled)
                                popupControl.RemoveIframeCoverDiv(iframe, popupWindow.windowIndex);
                            else
                                popupControl.CreateIframeCoverDiv(iframe, popupWindow.windowIndex);
                        }
                    }
                }
            }
        },
        OnPWMouseMove: function (evt, name, index) {
            if (this.draggingControl == null &&
                this.overControl == null &&
                this.resizeControl == null) {
                var pc = aspxGetPopupControlCollection().Get(name);
                if (pc != null) pc.OnMouseMove(evt, index);
            }
        },
        OnPWMouseOver: function (evt) {
            if (!this.overControl || this.draggingControl) return;
            if (this.IsOverPopupWindow(evt))
                this.ClearDisappearTimer();
        },
        IsOverPopupWindow: function (evt) {
            return ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement) != null;
        },
        OnDocumentKeyDown: function (evt) {
            var windowElement = this.GetTopWindow(false);
            if (windowElement) {
                var window = this.GetPopupWindowFromID(windowElement.id);
                if (window.popupControl);
                window.popupControl.OnDocumentKeyDown(evt, windowElement);
            }
        },
        OnDocumentMouseDown: function (evt) {
            var popupElement = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
            var excptId = popupElement == null ? "" :
                popupElement.DXPopupElementControl.GetWindowElementId(popupElement.DXPopupWindowIndex);
            this.OnMouseDownCore(evt, excptId);
        },
        OnMouseDown: function (evt) {
            this.OnMouseDownCore(evt, "");
        },
        OnMouseDownCore: function (evt, excptId) {
            var srcElement = ASPx.Evt.GetEventSource(evt);
            this.DoHideAllWindows(srcElement, excptId, false, ASPxClientPopupControlCloseReason.OuterMouseClick);
            aspxGetPopupControlCollection().ClearAppearTimer();
        },
        OnMouseMove: function (evt) {
            if (ASPx.Browser.WebKitTouchUI && ASPx.TouchUIHelper.isGesture)
                return;
            if (this.draggingControl != null) {
                this.Drag(evt);
            }
            else if (this.overControl != null) {
                this.OnMouseOver(evt);
            }
            else if (this.resizeControl != null) {
                if (ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(evt))
                    this.ResizeStop(evt);
                else
                    this.resizeControl.OnResize(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
            }
        },
        OnMouseOver: function (evt) {
            var element = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement);
            var curPopupElement = this.overControl.GetWindowCurrentPopupElementByIndex(this.overWindowIndex);
            var popup = element != null ? element.DXPopupElementControl : null;
            var isPopupActionMouseOver = popup && popup.GetWindowPopupAction(this.overWindowIndex) == 'MouseOver';
            var isCurPopupElement = element !== null && element === curPopupElement;
            var isCurPopupWindow = element != null && element.id === this.overControl.GetWindowElementId(this.overWindowIndex);
            var isCurPopupElementOrCurPopupWindow = isCurPopupElement || isCurPopupWindow || isPopupActionMouseOver;
            if (isCurPopupElementOrCurPopupWindow) {
                var clearTimer = true;
                popup = element.DXPopupElementControl;
                if (popup && popup.GetLastShownPopupElementIndex(element.DXPopupWindowIndex) != element.DXPopupElementIndex)
                    clearTimer = false;
                if (clearTimer)
                    this.ClearDisappearTimer();
                this.SaveCurrentMouseOverPos(evt);
                if (ASPx.Browser.TouchUI && !ASPx.TouchUIHelper.IsNativeScrolling())
                    return;
                return ASPx.Evt.CancelBubble(evt);
            }
            this.OnMouseOut();
        },
        OnMouseOut: function (evt) {
            if (!this.overControl || this.draggingControl) return;
            this.ClearAppearTimer();
            var windowCloseAction = this.overControl.GetWindowCloseAction(this.overWindowIndex);
            if (windowCloseAction == "MouseOut" && this.overControl.InternalIsWindowVisible(this.overWindowIndex)) {
                if (!this.IsDisappearTimerActive() && this.IsDisappearAllowedByMouseOut(evt))
                    this.SetDisappearTimer(this.overControl.name, this.overWindowIndex, this.overControl.disappearAfter);
            }
            else
                this.OverStop();
        },
        IsDisappearAllowedByMouseOut: function (evt) {
            return ASPx.Browser.Firefox ? !this.IsOverPopupWindow(evt) : true;
        },
        OnMouseUp: function (evt) {
            if (this.draggingControl != null)
                this.DragStop();
            if (this.resizeControl != null)
                this.ResizeStop(evt);
        },
        OnResize: function (evt) {
            this.AutoUpdateElementsPosition();
            this.AdjustModalElementsBounds();
        },
        OnScroll: function (evt) {
            if (this.scrollEventLockCount > 0)
                return;
            var scroll = this.GetDocScrollDifference();
            if (this.IsDocScrolled(scroll)) {
                this.CorrectPositionAtScroll(scroll);
                this.AdjustModalElementsBounds();
                this.SaveScrollState();
            }
            if (ASPx.Browser.IE && ASPx.Browser.Version <= 8) {
                this.CalculateDocumentDimensionsWithoutPinnedWindowsOldIE(function () {
                    this.FireScrollEventToWindowsOldIE(evt);
                }.aspxBind(this), evt);
            }
            else {
                this.CalculateDocumentDimensionsWithoutPinnedWindows(evt);
                this.FireScrollEventToWindows(evt);
            }
        },
        GetSavedBodyWidth: function () {
            if (this.savedBodyWidth == 0)
                this.CalculateDocumentDimensionsWithoutPinnedWindows();
            return this.savedBodyWidth;
        },
        GetSavedBodyHeight: function () {
            if (this.savedBodyHeight == 0)
                this.CalculateDocumentDimensionsWithoutPinnedWindows();
            return this.savedBodyHeight;
        },
        HidePinnedPopupsThatOutFromViewPort: function () {
            var popupsToRestoreVisible = [];
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
                var popupControl = popupWindow.popupControl;
                if (!popupControl.needToHidePinnedOutFromViewPort(popupWindow.windowIndex))
                    continue;
                var element = popupControl.GetWindowElement(popupWindow.windowIndex);
                if (!element) continue;
                var restoreData = {};
                restoreData.element = element;
                restoreData.display = element.style.display;
                element.style.display = "none";
                popupsToRestoreVisible.push(restoreData);
            }
            return popupsToRestoreVisible;
        },
        RestorePinnedPopupsThatOutFromViewPort: function (popupsToRestoreVisible) {
            if (popupsToRestoreVisible.length > 0) {
                for (var i = 0; i < popupsToRestoreVisible.length; i++) {
                    var restoreData = popupsToRestoreVisible[i];
                    restoreData.element.style.display = restoreData.display;
                }
            }
        },
        CalculateDocumentDimensionsWithoutPinnedWindows: function (evt) {
            var popupsToRestoreVisible = [];
            var needToHideRestorePopupsThatOutFromViewPort = !!evt && ASPx.Evt.GetEventSource(evt) == document;
            if (needToHideRestorePopupsThatOutFromViewPort)
                popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
            this.savedBodyWidth = ASPx.GetDocumentWidth();
            this.savedBodyHeight = ASPx.GetDocumentHeight();
            if (needToHideRestorePopupsThatOutFromViewPort)
                this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
        },
        FireScrollEventToWindows: function (evt) {
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
                var popupControl = popupWindow.popupControl;
                popupControl.OnScroll(evt, popupWindow.windowIndex);
            }
        },
        CalculateDocumentDimensionsWithoutPinnedWindowsOldIE: function (onCalculateFinished, evt) {
            var popupsToRestoreVisible = [];
            var needToHideRestorePopupsThatOutFromViewPort = !!evt && ASPx.Evt.GetEventSource(evt) == document;
            if (needToHideRestorePopupsThatOutFromViewPort)
                popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
            this.scrollEventLockCount++;
            window.setTimeout(function () {
                this.savedBodyWidth = ASPx.GetDocumentWidth();
                this.savedBodyHeight = ASPx.GetDocumentHeight();
                if (needToHideRestorePopupsThatOutFromViewPort)
                    this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
                if (onCalculateFinished)
                    window.setTimeout(function () { onCalculateFinished(); }.aspxBind(this), 0);
                this.scrollEventLockCount--;
            }.aspxBind(this), 0);
        },
        FireScrollEventToWindowsOldIE: function (evt) {
            this.scrollEventLockCount++;
            this.FireScrollEventToWindows(evt);
            this.scrollEventLockCount--;
        },
        LockScrollEvent: function () {
            this.scrollEventLockCount++;
        },
        UnlockScrollEvent: function () {
            this.scrollEventLockCount--;
        },
        CorrectPositionAtScroll: function (scroll) {
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
                var popupControl = popupWindow.popupControl;
                if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex)) {
                    if (popupControl.GetAutoUpdatePosition(popupWindow.windowIndex))
                        popupWindow.popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
                }
            }
        },
        OnSelectStart: function () {
            return !this.selectBanned;
        },
        OverStop: function () {
            this.overControl = null;
            this.overWindowIndex = -1;
        },
        OnPWDisappearTimer: function (name, index) {
            var pc = this.Get(name);
            if (pc != null) {
                if (!pc.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.MouseOut))
                    this.OverStop();
                this.ClearDisappearTimer();
            }
        },
        SaveCurrentMouseOverPos: function (evt) {
            this.overXPos = ASPx.Evt.GetEventX(evt);
            this.overYPos = ASPx.Evt.GetEventY(evt);
        },
        RegisterVisibleModalElement: function (element) {
            if (ASPx.Data.ArrayIndexOf(this.visibleModalElements, element) == -1)
                this.visibleModalElements.push(element);
        },
        UnregisterVisibleModalElement: function (element) {
            ASPx.Data.ArrayRemove(this.visibleModalElements, element);
        },
        RegisterVisibleWindow: function (element, popupControl, index) {
            if (ASPx.Data.ArrayIndexOf(this.visiblePopupWindowIds, element.id) == -1) {
                this.visiblePopupWindowIds.push(element.id);
                if (popupControl && popupControl.GetWindowCloseAction(index) == "MouseOut")
                    aspxGetPopupControlCollection().InitOverObject(popupControl, index, null);
                this.OnRegisteredVisibleWindow(element);
            }
        },
        OnRegisteredVisibleWindow: function (element) {
            var elementIndex = ASPx.Data.ArrayIndexOf(this.visiblePopupWindowIds, element.id);
            if (this.PopupWindowIsModalByVisibleIndex(elementIndex))
                ASPx.PopupUtils.RemoveFocus(element);
        },
        UnregisterVisibleWindow: function (element) {
            this.DeleteWindowFromZIndexOrder(element);
            ASPx.Data.ArrayRemove(this.visiblePopupWindowIds, element.id);
            var forceRecalculate = this.PopupWindowIsModalByID(element.id);
            this.RefreshTabIndexes(forceRecalculate);
            this.SkipCurrentActiveWindowElement(element);
        },
        UpdateWindowsStateCookie: function (id) {
            var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
            var name = id.substring(0, pos);
            var popupControl = aspxGetPopupControlCollection().Get(name);
            if (popupControl != null)
                popupControl.UpdateWindowsStateCookie(false);
        },
        AutoUpdateElementsPosition: function () {
            for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
                var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
                var popupControl = popupWindow.popupControl;
                if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex))
                    popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
            }
        },
        LockWindowResizeByBodyScrollVisibilityChanging: function () {
            this.windowResizeByBodyScrollVisibilityChangingLockCount++;
        },
        UnlockWindowResizeByBodyScrollVisibilityChanging: function () {
            this.windowResizeByBodyScrollVisibilityChangingLockCount--;
        },
        WindowResizeByBodyScrollVisibilityChangingLocked: function () {
            return this.windowResizeByBodyScrollVisibilityChangingLockCount > 0;
        },
        HideAllWindows: function () {
            this.DoHideAllWindows(null, "", true, ASPxClientPopupControlCloseReason.API);
        }
    });
    var ASPxClientPopupControlResizeState = {
        Resized: 0,
        Collapsed: 1,
        Expanded: 2,
        Maximized: 3,
        RestoredAfterMaximized: 4
    };
    var ASPxClientPopupControlCloseReason = {
        API: "API",
        CloseButton: "CloseButton",
        OuterMouseClick: "OuterMouseClick",
        MouseOut: "MouseOut",
        Escape: "Escape"
    };
    var popupControlCollection = null;
    function aspxGetPopupControlCollection() {
        if (popupControlCollection == null)
            popupControlCollection = new ASPxClientPopupControlCollection();
        return popupControlCollection;
    }
    function _aspxScrollDifference(horizontal, vertical) {
        this.horizontal = horizontal;
        this.vertical = vertical;
    }
    function aspxPWEMOver(evt) {
        aspxGetPopupControlCollection().OnPWMouseOver(evt);
    }
    ASPx.PWHMDown = function (evt) {
        return ASPx.Evt.CancelBubble(evt);
    };
    ASPx.PWCBClick = function (evt, name, index) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCloseButtonClick");
    };
    ASPx.PWPBClick = function (evt, name, index) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) pc.OnPWHBClickCore(evt, index, "OnPinButtonClick");
    };
    ASPx.PWRBClick = function (evt, name, index) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) pc.OnPWHBClickCore(evt, index, "OnRefreshButtonClick");
    };
    ASPx.PWMNBClick = function (evt, name, index) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCollapseButtonClick");
    };
    ASPx.PWMXBClick = function (evt, name, index) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) pc.OnPWHBClickCore(evt, index, "OnMaximizeButtonClick");
    };
    ASPx.PWDGMDown = function (evt, name, index) {
        return ASPx.PWMDown(evt, name, index, true);
    };
    ASPx.PWGripMDown = function (evt, name, index) {
        aspxPWMDownCore(evt, name, index, false);
        return ASPx.PWHMDown(evt);
    };
    ASPx.PWMMove = function (evt, name, index) {
        aspxGetPopupControlCollection().OnPWMouseMove(evt, name, index);
    };
    ASPx.PWMDown = function (evt, name, index, isWindowContentDraggingAllowed) {
        if (getComputedStyle(evt.target).cursor === "pointer")
            return;
        var pointOnScrollBar = false;
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc && pc.GetEnableContentScrolling(index)) {
            var rtl = pc.rtl && (ASPx.Browser.IE || ASPx.Browser.Firefox || ASPx.Browser.Opera);
            pointOnScrollBar = aspxPointOnElementScrollBar(pc.GetContentContainer(index), evt.clientX, evt.clientY, rtl);
        }
        aspxPWMDownCore(evt, name, index, isWindowContentDraggingAllowed, pointOnScrollBar);
        if (isWindowContentDraggingAllowed) {
            aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
            if (typeof (ASPx.GetDropDownCollection) == "function")
                ASPx.GetDropDownCollection().OnDocumentMouseDown(evt);
            if (!pointOnScrollBar) {
                if (!ASPx.Browser.WebKitTouchUI && ASPx.Evt.GetEventSource(evt).tagName == "IMG")
                    ASPx.Evt.PreventEvent(evt);
            }
        }
    };
    function aspxPWMDownCore(evt, name, index, isDraggingAllowed, pointOnScrollBar) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) {
            pc.OnActivateMouseDown(evt, index);
            pc.OnMouseDown(evt, index, isDraggingAllowed, pointOnScrollBar);
        }
    }
    function aspxPWMEMDown(evt) {
        var internalScrollableModalDiv = ASPx.Browser.AndroidDefaultBrowser ? ASPx.Evt.GetEventSource(evt) : null;
        var modalDiv = internalScrollableModalDiv ? internalScrollableModalDiv.parentNode : ASPx.Evt.GetEventSource(evt);
        if (modalDiv != null)
            modalDiv.DXModalPopupControl.OnMouseDownModalElement(evt, modalDiv.DXModalPopupWindowIndex);
    }
    function aspxPEMEvent(evt) {
        var element = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
        if (element != null) {
            var popupControl = element.DXPopupElementControl;
            var index = element.DXPopupWindowIndex;
            if (evt.type == "mousedown") {
                popupControl.SetIsPopuped(index, popupControl.InternalIsWindowVisible(index));
                aspxGetPopupControlCollection().OnMouseDown(evt);
            }
            else {
                var windowPopupAction = popupControl.GetWindowPopupAction(element.DXPopupWindowIndex);
                var leftMouseButtonAction = windowPopupAction == "LeftMouseClick" && ASPx.Evt.IsLeftButtonPressed(evt);
                var isAccessibleKeyboardAction = popupControl.accessibilityCompliant && ASPx.Evt.IsActionKeyPressed(evt);
                var rightMouseButtonAction = windowPopupAction == "RightMouseClick" && !ASPx.Evt.IsLeftButtonPressed(evt);
                if (leftMouseButtonAction || rightMouseButtonAction || isAccessibleKeyboardAction) {
                    if (rightMouseButtonAction)
                        ASPx.PopupUtils.PreventContextMenu(evt);
                    var windowCloseAction = popupControl.GetWindowCloseAction(index);
                    var isPopuped = popupControl.GetIsPopuped(index);
                    var isNewPopupElement = popupControl.GetLastShownPopupElementIndex(index) != element.DXPopupElementIndex;
                    if (isPopuped && isNewPopupElement) {
                        popupControl.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.OuterMouseClick);
                        aspxGetPopupControlCollection().ClearDisappearTimer();
                        isPopuped = false;
                    }
                    if (!(isPopuped && windowCloseAction == "OuterMouseClick")) {
                        popupControl.DoShowWindow(index, element.DXPopupElementIndex, evt);
                    }
                    if (windowCloseAction == "MouseOut")
                        aspxGetPopupControlCollection().InitOverObject(popupControl, element.DXPopupWindowIndex, evt);
                    return false;
                }
            }
        }
    }
    ASPx.PopupElementMouseEvent = aspxPEMEvent;
    function aspxPointOnElementScrollBar(element, x, y, rtl) {
        var scrollWidth = ASPx.GetVerticalScrollBarWidth();
        var hasHorizontalScroll = element.scrollWidth > element.clientWidth;
        var hasVerticalScroll = element.scrollHeight > element.clientHeight;
        var ceilX = rtl ? ASPx.GetAbsoluteX(element) + scrollWidth :
            ASPx.GetAbsoluteX(element) + (element.offsetWidth - ASPx.GetHorizontalBordersWidth(element));
        var ceilY = ASPx.GetAbsoluteY(element) + (element.offsetHeight - ASPx.GetVerticalBordersWidth(element));
        return (hasVerticalScroll && x >= ceilX - scrollWidth && x <= ceilX) ||
            (hasHorizontalScroll && y >= ceilY - scrollWidth && y <= ceilY);
    }
    ASPx.PCAStop = function (name, index) {
        var pc = aspxGetPopupControlCollection().Get(name);
        if (pc != null) pc.OnAnimationStop(index);
    };
    ASPx.PCIframeLoad = function (evt) {
        var srcElement = ASPx.Evt.GetEventSource(evt);
        if (srcElement) {
            var pcName = srcElement.popupControlName;
            var pcWndIndex = srcElement.pcWndIndex;
            if (pcName) {
                var pc = aspxGetPopupControlCollection().Get(pcName);
                if (pc) pc.OnIFrameLoad(pcWndIndex);
            }
        }
    };
    function aspxTestPopupWindowElement(element) {
        return !!element.DXPopupWindowElement;
    }
    function aspxTestPopupControlElement(element) {
        return element.DXPopupElementControl && ASPx.IsExists(element.DXPopupWindowIndex);
    }
    function aspxTestPopupControlOverElement(element) {
        var collection = aspxGetPopupControlCollection();
        var popupControl = collection.overControl;
        var index = collection.overWindowIndex;
        var windowId = popupControl.GetWindowElementId(index);
        if (element.id == windowId)
            return true;
        var popupElements = popupControl.GetPopupElementList(index);
        for (var i = 0; i < popupElements.length; i++)
            if (popupElements[i] == element)
                return true;
        return false;
    }
    ASPx.Evt.AttachEventToDocument("keydown", function (evt) {
        aspxGetPopupControlCollection().OnDocumentKeyDown(evt);
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function (evt) {
        aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function (evt) {
        return aspxGetPopupControlCollection().OnMouseUp(evt);
    });
    ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseMoveEventName, function (evt) {
        if (typeof (aspxGetPopupControlCollection) != "undefined")
            aspxGetPopupControlCollection().OnMouseMove(evt);
    });
    ASPx.Evt.AttachEventToDocument("mouseout", function (evt) {
        if (typeof (aspxGetPopupControlCollection) != "undefined")
            aspxGetPopupControlCollection().OnMouseOut(evt);
    });
    ASPx.Evt.AttachEventToElement(window, ASPx.Browser.MacOSMobilePlatform ? "orientationchange" : "resize", function (evt) {
        aspxGetPopupControlCollection().OnResize(evt);
    });
    ASPx.Evt.AttachEventToElement(window, "scroll", function (evt) {
        aspxGetPopupControlCollection().OnScroll(evt);
    });
    ASPx.Evt.AttachEventToDocument("selectstart", function (evt) {
        var ret = aspxGetPopupControlCollection().OnSelectStart(evt);
        if (!ret) return false;
    });
    var currViewPortSize = getViewPortSize();
    function getViewPortSize() {
        return {
            w: window.innerWidth,
            h: window.innerHeight,
            x: window.pageXOffset,
            y: window.pageYOffset
        };
    }
    var checkWindowIntervalId = setInterval(function () {
        var size = getViewPortSize();
        if (size.w != currViewPortSize.w || size.h != currViewPortSize.h || size.x != currViewPortSize.x || size.y != currViewPortSize.y) {
            currViewPortSize = size;
            var controlCollection = aspxGetPopupControlCollection();
            controlCollection.ForEachControl(function (popupControl) {
                if (popupControl.IsVisible() && popupControl.GetCanScrollViewPort(-1)) {
                    popupControl.updateContentScrollIfNeeded(-1);
                    popupControl.UpdatePosition();
                }
            });
        }
    }, 50);
    window.ASPxClientPopupControl = ASPxClientPopupControl;
    window.ASPxClientPopupWindow = ASPxClientPopupWindow;
    window.ASPxClientPopupWindowEventArgs = ASPxClientPopupWindowEventArgs;
    window.ASPxClientPopupWindowCancelEventArgs = ASPxClientPopupWindowCancelEventArgs;
    window.ASPxClientPopupWindowResizeEventArgs = ASPxClientPopupWindowResizeEventArgs;
    window.ASPxClientPopupWindowPinnedChangedEventArgs = ASPxClientPopupWindowPinnedChangedEventArgs;
    window.ASPxClientPopupControlCollection = ASPxClientPopupControlCollection;
    window.ASPxClientPopupControlResizeState = ASPxClientPopupControlResizeState;
    window.ASPxClientPopupControlCloseReason = ASPxClientPopupControlCloseReason;
    ASPx.GetPopupControlCollection = aspxGetPopupControlCollection;
    ASPx.PopupControlCssClasses = PopupControlCssClasses;
})();

(function () {
    var MVCxClientPopupControl = ASPx.CreateClass(ASPxClientPopupControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.callbackUrl = "";
            this.callbackCustomArgs = {};
        },
        PerformCallback: function (data, onSuccess) {
            ASPx.Data.MergeHashTables(this.callbackCustomArgs, data);
            ASPxClientPopupControl.prototype.PerformCallback.call(this, data, onSuccess);
        },
        PerformWindowCallback: function (window, data) {
            ASPx.Data.MergeHashTables(this.callbackCustomArgs, data);
            this.callbackCustomArgs["windowIndex"] = window ? window.index : -1;
            ASPxClientPopupControl.prototype.PerformWindowCallback.call(this, window, data);
        },
        InlineInitialize: function () {
            if (this.callbackUrl != "")
                this.callBack = function (arg) { MVCx.PerformControlCallback(this.name, this.callbackUrl, arg, null, this.callbackCustomArgs); };
            ASPxClientPopupControl.prototype.InlineInitialize.call(this);
        },
        RaiseBeginCallbackInternal: function (command) {
            var args = new MVCxClientBeginCallbackEventArgs(command);
            if (!this.BeginCallback.IsEmpty())
                this.BeginCallback.FireEvent(this, args);
            ASPx.Data.MergeHashTables(this.callbackCustomArgs, args.customArgs);
        },
        CreateCallbackByInfo: function (arg, command, callbackInfo) {
            this.CreateCallbackInternal(arg, command, true, callbackInfo);
        },
        CreateCallbackCore: function (arg, command, callbackID) {
            if (this.callbackCustomArgs != {})
                window.setTimeout(function () { this.callbackCustomArgs = {}; }.aspxBind(this), 0);
            ASPxClientPopupControl.prototype.CreateCallbackCore.call(this, arg, command, callbackID);
        },
        EvalCallbackResult: function (resultString) {
            var resultStringParts = resultString.split(MVCx.CallbackHtmlContentPrefix);
            if (resultStringParts.length == 2) {
                var resultObj = ASPxClientPopupControl.prototype.EvalCallbackResult.call(this, resultStringParts[0]);
                resultObj.result.html = resultStringParts[1];
                return resultObj;
            }
            return ASPxClientPopupControl.prototype.EvalCallbackResult.call(this, resultString);
        },
        OnCallbackGeneralError: function (errorMessage) {
            ASPxClientPopupControl.prototype.OnCallbackGeneralError.call(this, errorMessage);
            if (!this.serverExceptionOnLastCallback)
                MVCx.ThrowExceptionOnCallback();
        }
    });
    MVCxClientPopupControl.Cast = ASPxClientControl.Cast;
    window.MVCxClientPopupControl = MVCxClientPopupControl;
})();

(function () {
    var ASPxClientButton = ASPx.CreateClass(ASPxClientControl, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientButton = true;
            this.allowFocus = true;
            this.autoPostBackFunction = null;
            this.causesValidation = true;
            this.checked = false;
            this.clickLocked = false;
            this.groupName = "";
            this.focusElementSelected = false;
            this.pressed = false;
            this.useSubmitBehavior = true;
            this.validationGroup = "";
            this.validationContainerID = null;
            this.validateInvisibleEditors = false;
            this.originalWidth = null;
            this.originalHeight = null;
            this.needUpdateBounds = true;
            this.isTextEmpty = false;
            this.CheckedChanged = new ASPxClientEvent();
            this.GotFocus = new ASPxClientEvent();
            this.LostFocus = new ASPxClientEvent();
            this.Click = new ASPxClientEvent();
        },
        InlineInitialize: function () {
            var mainElement = this.GetMainElement();
            this.originalWidth = mainElement.style.width;
            this.originalHeight = mainElement.style.height;
            ASPxClientControl.prototype.InlineInitialize.call(this);
            this.InitializeElementIDs();
            this.InitializeEvents();
            this.InitializeEnabled();
            this.InitializeChecked();
            if (this.IsLink())
                this.InitializeLink();
            this.PreventButtonImageDragging();
            this.needUpdateBounds = ASPx.Browser.Safari || ASPx.GetCurrentStyle(mainElement).display.indexOf("table") === -1;
            if (this.needUpdateBounds)
                mainElement.className = mainElement.className.replace("dxbTSys", "");
            else {
                var contentElement = this.GetContentDiv();
                if (contentElement) contentElement.style.verticalAlign = mainElement.style.verticalAlign;
            }
        },
        InitializeElementIDs: function () {
            var mainElement = this.GetMainElement();
            var contentElement = ASPx.GetNodeByTagName(mainElement, "DIV", 0);
            if (contentElement) contentElement.id = this.name + "_CD";
            var imageElement = ASPx.GetNodeByTagName(mainElement, "IMG", 0);
            if (imageElement) imageElement.id = this.name + "Img";
        },
        InitializeEnabled: function () {
            this.SetEnabledInternal(this.clientEnabled, true);
        },
        InitializeChecked: function () {
            this.SetCheckedInternal(this.checked, true);
        },
        InitializeLink: function () {
            var mainElement = this.GetMainElement();
            if (this.enabled)
                mainElement.href = "javascript:;";
            if (!this.allowFocus)
                mainElement.style.outline = 0;
            if (!this.GetTextContainer())
                mainElement.style.fontSize = "0pt";
        },
        InitializeEvents: function () {
            if (!this.isNative && !this.IsLink()) {
                var element = this.GetInternalButton();
                if (element)
                    element.onfocus = null;
                var textControl = this.GetTextControl();
                if (textControl) {
                    if (ASPx.Browser.IE)
                        ASPx.Evt.AttachEventToElement(textControl, "mouseup", ASPx.Selection.Clear);
                    ASPx.Evt.PreventElementDragAndSelect(textControl, false);
                }
            }
            this.onClick = function (evt) {
                var processOnServer = ASPx.BClick(this.name, evt);
                if (!processOnServer)
                    ASPx.Evt.PreventEvent(evt);
                return processOnServer;
            }.aspxBind(this);
            this.onImageMoseDown = function () { var el = ASPx.GetFocusedElement(); if (el) el.blur(); };
            this.onGotFocus = function () { this.OnFocus(); }.aspxBind(this);
            this.onLostFocus = function () { this.OnLostFocus(); }.aspxBind(this);
            this.onKeyUp = function (evt) { this.OnKeyUp(evt); }.aspxBind(this);
            this.onKeyDown = function (evt) { this.OnKeyDown(evt); }.aspxBind(this);
            if (!this.isNative && !this.IsLink())
                this.InitializeNativeHandlers();
        },
        InitializeNativeHandlers: function () {
            this.AttachNativeHandlerToMainElement("focus", "SetFocus");
            this.AttachNativeHandlerToMainElement("click", "DoClick");
        },
        AdjustControlCore: function () {
            if (this.isNative || this.IsLink()) return;
            var buttonImage = this.GetButtonImage();
            if (buttonImage && buttonImage.offsetHeight === 0 && buttonImage.offsetWidth === 0)
                buttonImage.onload = function () { this.UpdateSize(); }.aspxBind(this);
            else
                this.UpdateSize();
        },
        UpdateSize: function () {
            if (this.needUpdateBounds) {
                this.UpdateWidth();
                this.UpdateHeight();
            }
            else
                this.CorrectWrappedText(this.GetContentDiv, "Text", true);
        },
        UpdateHeight: function () {
            if (this.isNative || this.IsLink() || this.originalHeight === null || ASPx.IsPercentageSize(this.originalHeight)) return;
            var height;
            var mainElement = this.GetMainElement();
            var contentDiv = this.GetContentDiv();
            var borderAndPadding = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainElement);
            var contentHasExcessiveHeight = contentDiv.offsetHeight > mainElement.offsetHeight - borderAndPadding;
            var needSetAutoHeight = !this.originalHeight || (ASPx.Browser.Safari && contentHasExcessiveHeight);
            if (needSetAutoHeight) {
                mainElement.style.height = "";
                height = mainElement.offsetHeight - borderAndPadding;
            }
            else
                height = (ASPx.PxToInt(this.originalHeight) - borderAndPadding);
            if (height) {
                mainElement.style.height = height + "px";
                if (contentDiv && contentDiv.offsetHeight > 0) {
                    var contentDivCurrentStyle = ASPx.GetCurrentStyle(contentDiv);
                    var paddingTop = parseInt(contentDivCurrentStyle.paddingTop) || 0;
                    var paddingBottom = parseInt(contentDivCurrentStyle.paddingBottom) || 0;
                    var clientHeightDiff = height - contentDiv.offsetHeight;
                    var verticalAlign = ASPx.GetCurrentStyle(mainElement).verticalAlign;
                    if (verticalAlign == "top")
                        paddingBottom = paddingBottom + clientHeightDiff;
                    else if (verticalAlign == "bottom")
                        paddingTop = paddingTop + clientHeightDiff;
                    else {
                        var halfClientHeightDiff = Math.floor(clientHeightDiff / 2);
                        paddingTop = paddingTop + halfClientHeightDiff;
                        paddingBottom = paddingBottom + (clientHeightDiff - halfClientHeightDiff);
                    }
                    contentDiv.style.paddingTop = (paddingTop > 0 ? paddingTop : 0) + "px";
                    contentDiv.style.paddingBottom = (paddingBottom > 0 ? paddingBottom : 0) + "px";
                }
            }
        },
        UpdateWidth: function () {
            if (this.isNative || this.IsLink() || this.originalWidth === null) return;
            if (!ASPx.IsPercentageSize(this.originalWidth)) {
                var mainElement = this.GetMainElement();
                var borderAndPadding = ASPx.GetLeftRightBordersAndPaddingsSummaryValue(mainElement);
                if (this.originalWidth && ASPx.IsTextWrapped(this.GetTextContainer()))
                    mainElement.style.width = (ASPx.PxToInt(this.originalWidth) - borderAndPadding) + "px";
                else
                    mainElement.style.width = "auto";
                var width = mainElement.offsetWidth - borderAndPadding;
                if (this.originalWidth && width < ASPx.PxToInt(this.originalWidth) - borderAndPadding)
                    width = ASPx.PxToInt(this.originalWidth) - borderAndPadding;
                if (width)
                    mainElement.style.width = (width > 0 ? width : 0) + "px";
            }
            this.CorrectWrappedText(this.GetContentDiv, "Text", true);
        },
        GetAdjustedSizes: function () {
            var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
            var image = this.GetButtonImage();
            if (image) {
                sizes.imageWidth = image.offsetWidth;
                sizes.imageHeight = image.offsetHeight;
            }
            return sizes;
        },
        PreventButtonImageDragging: function () {
            ASPx.Evt.PreventImageDragging(this.GetButtonImage());
        },
        AttachNativeHandlerToMainElement: function (handlerName, correspondingMethodName) {
            var mainElement = this.GetMainElement();
            if (!ASPx.IsExistsElement(mainElement))
                return;
            mainElement[handlerName] = function () { _aspxBCallButtonMethod(this.name, correspondingMethodName); }.aspxBind(this);
        },
        GetContentDiv: function () {
            return this.GetChildElement("CD");
        },
        GetButtonImage: function () {
            return ASPx.CacheHelper.GetCachedElement(this, "buttonImage",
                function () {
                    return ASPx.GetNodeByTagName(this.GetMainElement(), "IMG", 0);
                });
        },
        GetInternalButton: function () {
            return ASPx.CacheHelper.GetCachedElement(this, "internalButton",
                function () {
                    return this.isNative || this.IsLink() ? this.GetMainElement() : ASPx.GetNodeByTagName(this.GetMainElement(), "INPUT", 0);
                });
        },
        GetTextContainer: function () {
            return ASPx.CacheHelper.GetCachedElement(this, "textContainer",
                function () {
                    if (this.isNative)
                        return this.GetMainElement();
                    else {
                        var textElement = this.IsLink() ? this.GetMainElement() : this.GetContentDiv();
                        return ASPx.GetNodeByTagName(textElement, "SPAN", 0);
                    }
                });
        },
        GetTextControl: function () {
            return ASPx.CacheHelper.GetCachedElement(this, "textControl",
                function () {
                    var element = ASPx.GetParentByTagName(this.GetContentDiv(), "DIV");
                    if (!ASPx.IsExistsElement(element) || (element.id == this.name))
                        element = this.GetContentDiv();
                    return element;
                });
        },
        IsLink: function () {
            if (this.GetMainElement())
                return this.GetMainElement().tagName === "A";
            return false;
        },
        IsHovered: function () {
            var hoverElement = this.GetMainElement();
            return ASPx.GetStateController().currentHoverItemName == hoverElement.id;
        },
        SetEnabledInternal: function (enabled, initialization) {
            if (!this.enabled)
                return;
            if (!initialization || !enabled)
                this.ChangeEnabledStateItems(enabled);
            this.ChangeEnabledAttributes(enabled);
        },
        ChangeEnabledAttributes: function (enabled) {
            var element = this.GetInternalButton();
            if (element) {
                element.disabled = !enabled;
                if (this.IsLink()) {
                    var method = ASPx.Attr.ChangeAttributesMethod(enabled);
                    method(this.GetMainElement(), "href");
                }
            }
            this.ChangeEnabledEventsAttributes(ASPx.Attr.ChangeEventsMethod(enabled));
        },
        ChangeEnabledEventsAttributes: function (method) {
            var element = this.GetMainElement();
            method(element, "click", this.onClick);
            if (this.allowFocus) {
                if (!this.isNative && !this.IsLink())
                    element = this.GetInternalButton();
                if (element) {
                    method(element, "focus", this.onGotFocus);
                    method(element, "blur", this.onLostFocus);
                    if (!this.isNative && !this.IsLink()) {
                        method(element, "keyup", this.onKeyUp);
                        method(element, "blur", this.onKeyUp);
                        method(element, "keydown", this.onKeyDown);
                    }
                }
                if (ASPx.Browser.Firefox) {
                    var image = this.GetButtonImage();
                    if (image)
                        method(image, "mousedown", this.onImageMoseDown);
                }
            }
        },
        ChangeEnabledStateItems: function (enabled) {
            if (this.isNative) return;
            ASPx.GetStateController().SetElementEnabled(this.GetMainElement(), enabled);
            this.UpdateFocusedStyle();
        },
        RequiredPreventDoublePostback: function () {
            return ASPx.Browser.Firefox && !this.isNative;
        },
        OnFocus: function () {
            if (!this.allowFocus)
                return false;
            this.focused = true;
            if (this.isInitialized)
                this.RaiseFocus();
            this.UpdateFocusedStyle();
        },
        OnLostFocus: function () {
            if (!this.allowFocus)
                return false;
            this.focused = false;
            if (this.isInitialized)
                this.RaiseLostFocus();
            this.UpdateFocusedStyle();
        },
        CauseValidation: function () {
            if (this.causesValidation && ASPx.Ident.scripts.ASPxClientEdit)
                return this.validationContainerID != null ?
                    ASPxClientEdit.ValidateEditorsInContainerById(this.validationContainerID, this.validationGroup, this.validateInvisibleEditors) :
                    ASPxClientEdit.ValidateGroup(this.validationGroup, this.validateInvisibleEditors);
            else
                return true;
        },
        OnClick: function (evt) {
            if (this.clickLocked) return true;
            if (this.checked && this.groupName != "" && this.GetCheckedGroupList().length > 1) return;
            this.SetFocus();
            var isValid = this.CauseValidation();
            var processOnServer = this.autoPostBack;
            if (this.groupName != "") {
                if (this.GetCheckedGroupList().length == 1)
                    this.SetCheckedInternal(!this.checked, false);
                else {
                    this.SetCheckedInternal(true, false);
                    this.ClearButtonGroupChecked(true);
                }
                processOnServer = this.RaiseCheckedChanged();
                if (processOnServer && isValid)
                    this.SendPostBack("CheckedChanged");
            }
            var params = this.RaiseClick();
            if (evt && params.cancelEventAndBubble)
                ASPx.Evt.PreventEventAndBubble(evt);
            if (params.processOnServer && isValid) {
                var requiredPreventDoublePostback = this.RequiredPreventDoublePostback();
                var postponePostback = ASPx.Browser.AndroidMobilePlatform;
                if (requiredPreventDoublePostback || postponePostback)
                    window.setTimeout(function () { _aspxBCallButtonMethod(this.name, "SendPostBack", "Click"); }.aspxBind(this), 0);
                else
                    this.SendPostBack("Click");
                return !requiredPreventDoublePostback;
            }
            return false;
        },
        OnKeyUp: function (evt) {
            if (!this.pressed)
                return;
            this.pressed = false;
            ASPx.GetStateController().OnKeyUpOnElement(evt);
        },
        OnKeyDown: function (evt) {
            if (evt.keyCode == ASPx.Key.Enter || evt.keyCode == ASPx.Key.Space)
                this.SetPressed();
        },
        GetCheckedGroupList: function () {
            var result = [];
            ASPx.GetControlCollection().ForEachControl(function (control) {
                if (ASPx.Ident.IsASPxClientButton(control) && (control.groupName == this.groupName) && !control.IsDOMDisposed())
                    result.push(control);
            }, this);
            return result;
        },
        ClearButtonGroupChecked: function (raiseCheckedChanged) {
            var list = this.GetCheckedGroupList();
            for (var i = 0; i < list.length; i++) {
                if (list[i] != this && list[i].checked) {
                    list[i].SetCheckedInternal(false, false);
                    if (raiseCheckedChanged)
                        list[i].RaiseCheckedChanged();
                }
            }
        },
        ApplyCheckedStyle: function () {
            var stateController = ASPx.GetStateController();
            if (this.IsHovered())
                stateController.SetCurrentHoverElement(null);
            stateController.SelectElementBySrcElement(this.GetMainElement());
        },
        ApplyUncheckedStyle: function () {
            var stateController = ASPx.GetStateController();
            if (this.IsHovered())
                stateController.SetCurrentHoverElement(null);
            stateController.DeselectElementBySrcElement(this.GetMainElement());
        },
        SetCheckedInternal: function (checked, initialization) {
            if (initialization && checked || (this.checked != checked)) {
                this.checked = checked;
                if (checked)
                    this.ApplyCheckedStyle();
                else
                    this.ApplyUncheckedStyle();
            }
        },
        UpdateStateObject: function () {
            if (this.groupName != "")
                this.UpdateStateObjectWithObject({ checked: this.checked });
        },
        GetStateHiddenFieldName: function () {
            return this.uniqueID + "$State";
        },
        ApplyPressedStyle: function () {
            ASPx.GetStateController().OnMouseDownOnElement(this.GetMainElement());
        },
        ApplyUnpressedStyle: function () {
            ASPx.GetStateController().OnMouseUpOnElement(this.GetMainElement());
        },
        SetPressed: function () {
            this.pressed = true;
            this.ApplyPressedStyle();
        },
        SetUnpressed: function () {
            this.pressed = false;
            this.ApplyUnpressedStyle();
        },
        SetFocus: function () {
            if (!this.allowFocus || this.focused)
                return;
            var element = this.GetInternalButton();
            if (element) {
                var hiddenInternalButtonRequiresVisibilityToGetFocused = ASPx.Browser.WebKitFamily && !this.isNative && !this.IsLink();
                if (hiddenInternalButtonRequiresVisibilityToGetFocused)
                    ASPxClientButton.MakeHiddenElementFocusable(element);
                if (ASPx.IsFocusable(element) && ASPx.GetActiveElement() != element)
                    element.focus();
                if (hiddenInternalButtonRequiresVisibilityToGetFocused)
                    ASPxClientButton.RestoreHiddenElementAppearance(element);
            }
        },
        ApplyFocusedStyle: function () {
            if (this.focusElementSelected) return;
            if (typeof (ASPx.GetStateController) != "undefined")
                ASPx.GetStateController().SelectElementBySrcElement(this.GetContentDiv());
            this.focusElementSelected = true;
        },
        ApplyUnfocusedStyle: function () {
            if (!this.focusElementSelected) return;
            if (typeof (ASPx.GetStateController) != "undefined")
                ASPx.GetStateController().DeselectElementBySrcElement(this.GetContentDiv());
            this.focusElementSelected = false;
        },
        UpdateFocusedStyle: function () {
            if (this.isNative || this.IsLink()) return;
            if (this.enabled && this.clientEnabled && this.allowFocus && this.focused)
                this.ApplyFocusedStyle();
            else
                this.ApplyUnfocusedStyle();
        },
        SendPostBack: function (postBackArg) {
            if (!this.enabled || !this.clientEnabled)
                return;
            var arg = postBackArg || "";
            if (this.autoPostBackFunction)
                this.autoPostBackFunction(arg);
            else if (!this.useSubmitBehavior || this.IsLink())
                ASPxClientControl.prototype.SendPostBack.call(this, arg);
            if (this.useSubmitBehavior && !this.isNative)
                this.ClickInternalButton();
        },
        ClickInternalButton: function () {
            var element = this.GetInternalButton();
            if (element) {
                this.clickLocked = true;
                if (ASPx.Browser.NetscapeFamily)
                    this.CreateUniqueIDCarrier();
                var postHandler = ASPx.GetPostHandler();
                postHandler.SetLastSubmitElementName(element.name);
                ASPx.Evt.DoElementClick(element);
                postHandler.SetLastSubmitElementName(null);
                if (ASPx.Browser.NetscapeFamily)
                    this.RemoveUniqueIDCarrier();
                this.clickLocked = false;
            }
        },
        CreateUniqueIDCarrier: function () {
            var name = this.uniqueID;
            var id = this.GetUniqueIDCarrierID();
            var field = ASPx.CreateHiddenField(name, id);
            var form = this.GetParentForm();
            if (form) form.appendChild(field);
        },
        RemoveUniqueIDCarrier: function () {
            var field = document.getElementById(this.GetUniqueIDCarrierID());
            if (field)
                field.parentNode.removeChild(field);
        },
        GetUniqueIDCarrierID: function () {
            return this.uniqueID + "_UIDC";
        },
        DoClick: function () {
            if (!this.enabled || !this.clientEnabled)
                return;
            var button = (this.isNative || this.IsLink()) ? this.GetMainElement() : this.GetInternalButton();
            if (button)
                ASPx.Evt.DoElementClick(button);
            else
                this.OnClick();
        },
        GetChecked: function () {
            return this.checked;
        },
        SetChecked: function (checked) {
            this.SetCheckedInternal(checked, false);
            this.ClearButtonGroupChecked(false);
        },
        GetText: function () {
            if (!this.isTextEmpty)
                return this.isNative ? this.GetTextContainer().value : this.GetTextContainer().innerHTML;
            return "";
        },
        SetText: function (text) {
            this.isTextEmpty = (text == null || text == "");
            var textContainer = this.GetTextContainer();
            if (textContainer) {
                if (this.isNative)
                    textContainer.value = (text != null) ? text : "";
                else {
                    var value = this.isTextEmpty ? "&nbsp;" : text;
                    textContainer.innerHTML = value;
                    var element = this.GetInternalButton();
                    if (element)
                        element.value = value;
                    if (this.clientVisible && ASPx.Browser.IE && ASPx.Browser.Version >= 9)
                        ASPx.SetElementDisplay(this.GetMainElement(), true);
                }
                this.UpdateSize();
            }
        },
        GetImageUrl: function () {
            var img = this.GetButtonImage();
            return img ? img.src : "";
        },
        SetImageUrl: function (url) {
            var img = this.GetButtonImage();
            if (img) {
                img.src = url;
                this.UpdateSize();
            }
        },
        SetEnabled: function (enabled) {
            if (this.clientEnabled != enabled) {
                if (!enabled && this.focused)
                    this.OnLostFocus();
                this.clientEnabled = enabled;
                this.SetEnabledInternal(enabled, false);
            }
        },
        GetEnabled: function () {
            return this.enabled && this.clientEnabled;
        },
        Focus: function () {
            this.SetFocus();
        },
        RaiseCheckedChanged: function () {
            var processOnServer = this.autoPostBack || this.IsServerEventAssigned("CheckedChanged");
            if (!this.CheckedChanged.IsEmpty()) {
                var args = new ASPxClientProcessingModeEventArgs(processOnServer);
                this.CheckedChanged.FireEvent(this, args);
                processOnServer = args.processOnServer;
            }
            return processOnServer;
        },
        RaiseFocus: function () {
            if (!this.GotFocus.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.GotFocus.FireEvent(this, args);
            }
        },
        RaiseLostFocus: function () {
            if (!this.LostFocus.IsEmpty()) {
                var args = new ASPxClientEventArgs();
                this.LostFocus.FireEvent(this, args);
            }
        },
        RaiseClick: function () {
            var processOnServer = this.autoPostBack || this.IsServerEventAssigned("Click");
            var cancelEventAndBubble = false;
            if (!this.Click.IsEmpty()) {
                var args = new ASPxClientButtonClickEventArgs(processOnServer, cancelEventAndBubble);
                this.Click.FireEvent(this, args);
                cancelEventAndBubble = args.cancelEventAndBubble;
                processOnServer = args.processOnServer;
            }
            return {
                processOnServer: processOnServer,
                cancelEventAndBubble: cancelEventAndBubble
            };
        }
    });
    ASPxClientButton.Cast = ASPxClientControl.Cast;
    var ASPxClientButtonClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
        constructor: function (processOnServer, cancelEventAndBubble) {
            this.constructor.prototype.constructor.call(this, processOnServer);
            this.cancelEventAndBubble = cancelEventAndBubble;
        }
    });
    ASPxClientButton.MakeHiddenElementFocusable = function (element) {
        element.__dxHiddenElementState = {
            parentDisplay: element.parentNode.style.display,
            height: element.style.height,
            width: element.style.width
        };
        element.parentNode.style.display = "block";
        element.style.height = "1px";
        element.style.width = "1px";
    };
    ASPxClientButton.RestoreHiddenElementAppearance = function (element) {
        var state = element.__dxHiddenElementState;
        element.parentNode.style.display = state.parentDisplay;
        element.style.height = state.height;
        element.style.width = state.width;
        delete element.__dxHiddenElementState;
    };
    ASPx.Ident.IsASPxClientButton = function (obj) {
        return !!obj.isASPxClientButton;
    };
    function _aspxBCallButtonMethod(name, methodName, arg) {
        var button = ASPx.GetControlCollection().Get(name);
        if (button != null)
            button[methodName](arg);
    }
    ASPx.BClick = function (name, evt) {
        var button = ASPx.GetControlCollection().Get(name);
        if (button != null)
            return button.OnClick(evt);
    };
    window.ASPxClientButton = ASPxClientButton;
})();

(function () {
    var ASPxClientCheckBox = ASPx.CreateClass(ASPxClientEdit, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientCheckEdit = true;
            this.valueChecked = true;
            this.valueUnchecked = false;
            this.valueGrayed = null;
            this.allowGrayed = false;
            this.isNative = false;
            this.stateController = null;
            this.imageProperties = null;
            this.allowGrayedByClick = true;
            this.internalCheckBox = null;
            this.icbFocusedStyle = [];
            this.sizingConfig.allowSetWidth = false;
            this.sizingConfig.allowSetHeight = false;
            this.CheckedChanged = new ASPxClientEvent();
        },
        InlineInitialize: function () {
            this.isNative = !this.imageProperties;
            this.allowGrayed = this.IsGrayedAllowed();
            this.stateController = ASPx.CheckableElementStateController.Create(this.imageProperties, this.valueChecked, this.valueUnchecked, this.valueGrayed, this.allowGrayed);
            if (!this.isNative)
                this.CreateInternalCheckBox();
            ASPxClientEdit.prototype.InlineInitialize.call(this);
        },
        Initialize: function () {
            ASPxClientEdit.prototype.Initialize.call(this);
            if (!ASPx.IsExistsElement(this.GetMainElement()))
                return;
            if (!this.isNative) {
                this.previousValue = this.GetStateInput().value;
                if (this.GetValue() !== null)
                    this.UpdateInternalCheckState();
                this.SetValue(this.GetValue());
            }
            else
                this.previousValue = this.GetInputElement().checked;
        },
        UpdateInternalCheckState: function () {
            var stateInput = this.GetStateInput();
            stateInput.value = this.stateController.GetInputKeyByValue(true);
            stateInput.value = this.stateController.GetInputKeyByValue(false);
            var checkState = this.stateController.GetCheckStateByInputKey(this.previousValue);
            this.SetCheckState(checkState);
        },
        GetInputElement: function () {
            if (this.isNative)
                return ASPxClientEdit.prototype.GetInputElement.call(this);
            else
                return this.GetStateInput();
        },
        CreateInternalCheckBox: function () {
            var instance = this;
            this.internalCheckBox = new ASPx.CheckBoxInternal(this.GetStateInput(), this.stateController, this.allowGrayed, this.allowGrayedByClick,
                ASPx.CheckEditElementHelper.Instance, this.GetMainElement(), true, undefined, undefined, this.accessibilityCompliant);
            this.internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
            this.internalCheckBox.SetEnabled(this.GetEnabled());
            this.internalCheckBox.readOnly = this.readOnly;
            this.internalCheckBox.CheckedChanged.AddHandler(function (s, e) { instance.OnClick(e); });
            this.internalCheckBox.Focus.AddHandler(function () { instance.OnFocus(); });
            this.internalCheckBox.LostFocus.AddHandler(function () { instance.OnLostFocus(); });
            if (ASPx.Browser.WebKitFamily)
                ASPx.Evt.AttachEventToElement(this.internalCheckBox.mainElement.parentNode, "selectstart", ASPx.Evt.PreventEventAndBubble);
        },
        FindInputElement: function () {
            var element = this.GetMainElement();
            if (ASPx.IsExistsElement(element) && element.tagName != "INPUT")
                element = this.GetChildElement("I");
            return element;
        },
        GetFocusableInputElement: function () {
            return this.accessibilityCompliant ? this.GetICBMainElement() : this.GetInputElement();
        },
        IsGrayedAllowed: function () {
            for (var propertyKey in this.imageProperties)
                if (this.imageProperties[propertyKey].length === 3)
                    return true;
            return false;
        },
        RaiseValueChangedEvent: function () {
            var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
            processOnServer = this.RaiseCheckedChanged(processOnServer);
            return processOnServer;
        },
        OnClick: function () {
            if (this.ToogleCheckState() && !this.focused)
                this.SetFocus();
        },
        ToogleCheckState: function () {
            if (!this.GetEnabled() || this.readOnly)
                return false;
            var value = this.GetCorrectValue(this.previousValue);
            value = this.stateController.GetNextCheckBoxValue(value, this.allowGrayedByClick && this.allowGrayed);
            this.SetValue(value);
            this.OnValueChanged();
            return true;
        },
        IsElementBelongToInputElement: function (element) {
            return false;
        },
        ForceRefocusEditor: function () {
            if (this.isNative)
                ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
        },
        GetValue: function () {
            var value = this.stateController.GetValueByInputKey(this.GetStateInput().value);
            if (value === "" && this.convertEmptyStringToNull)
                value = null;
            return value;
        },
        SetValue: function (value) {
            this.previousValue = value;
            value = this.GetCorrectValue(value);
            if (this.isNative)
                this.GetInputElement().checked = (this.previousValue == this.valueChecked);
            else
                this.internalCheckBox.SetValue(value);
            this.GetStateInput().value = this.stateController.GetInputKeyByValue(value);
            if (this.accessibilityCompliant) {
                var state = this.GetCheckState();
                var mainElement = this.GetICBMainElement();
                var value = this.stateController.GetAriaCheckedValue(state);
                if (mainElement.attributes["aria-checked"] !== undefined)
                    mainElement.setAttribute("aria-checked", value);
                if (mainElement.attributes["aria-selected"] !== undefined)
                    mainElement.setAttribute("aria-selected", value);
            }
            this.OnValueSet();
        },
        GetICBMainElement: function () {
            return ASPx.CheckableElementHelper.Instance.GetICBMainElementByInput(this.GetStateInput());
        },
        GetLabelElement: function () {
            return ASPx.CheckEditElementHelper.Instance.GetLabelElement(this.GetMainElement());
        },
        GetStateInput: function () {
            return this.GetChildElement("S");
        },
        GetAccessibilityActiveElements: function () {
            return [this.GetFocusableInputElement()];
        },
        GetCorrectValue: function (value) {
            var stateIsExist = typeof (this.stateController.GetInputKeyByValue(value)) != "undefined";
            if (!stateIsExist)
                return this.allowGrayed ? this.valueGrayed : this.valueUnchecked;
            return value;
        },
        OnValueSet: function () { },
        RaiseCheckedChanged: function (processOnServer) {
            if (!this.CheckedChanged.IsEmpty()) {
                var args = new ASPxClientProcessingModeEventArgs(processOnServer);
                this.CheckedChanged.FireEvent(this, args);
                processOnServer = args.processOnServer;
            }
            return processOnServer;
        },
        SetEnabled: function (enabled) {
            ASPxClientEdit.prototype.SetEnabled.call(this, enabled);
            if (!this.isNative)
                this.internalCheckBox.SetEnabled(enabled);
        },
        GetChecked: function () {
            return this.stateController.GetCheckStateByInputKey(this.GetStateInput().value) == ASPx.CheckBoxCheckState.Checked;
        },
        SetChecked: function (isChecked) {
            this.SetCheckState(isChecked ? ASPx.CheckBoxCheckState.Checked : ASPx.CheckBoxCheckState.Unchecked);
        },
        GetText: function () {
            var labelElement = this.GetLabelElement();
            return (labelElement != null) ? labelElement.innerHTML : "";
        },
        GetCheckState: function () {
            var internalCheckeState = this.stateController.GetCheckStateByInputKey(this.GetStateInput().value);
            if (internalCheckeState != ASPx.CheckBoxCheckState.Indeterminate || this.allowGrayed)
                return internalCheckeState;
            else
                return ASPx.CheckBoxCheckState.Unchecked;
        },
        SetCheckState: function (checkState) {
            if (checkState != ASPx.CheckBoxCheckState.Indeterminate || this.allowGrayed) {
                var value = this.stateController.GetValueByCheckState(checkState);
                this.SetValue(value);
            }
        },
        SetText: function (text) {
            var labelElement = this.GetLabelElement();
            if (labelElement != null)
                ASPx.SetInnerHtml(labelElement, text);
        },
        ChangeEnabledAttributes: function (enabled) {
            if (this.isNative) {
                this.ChangeInputEnabledAttributes(this.GetInputElement(), ASPx.Attr.ChangeAttributesMethod(enabled));
                this.GetInputElement().disabled = !enabled;
            } else
                this.internalCheckBox.SetEnabled(enabled);
        },
        ChangeEnabledStateItems: function (enabled) {
            ASPx.GetStateController().SetElementEnabled(this.GetMainElement(), enabled);
            this.GetStateInput().disabled = !enabled;
        },
        ChangeInputEnabledAttributes: function (element, method) {
            method(element, "onclick");
        }
    });
    ASPxClientCheckBox.Cast = ASPxClientControl.Cast;
    var ASPxClientRadioButton = ASPx.CreateClass(ASPxClientCheckBox, {
        constructor: function (name) {
            this.constructor.prototype.constructor.call(this, name);
            this.isASPxClientRadioButton = true;
            this.groupName = "";
        },
        Initialize: function () {
            ASPxClientCheckBox.prototype.Initialize.call(this);
            if (this.accessibilityCompliant && this.groupName)
                this.setAccessibilityGroupAttributes();
        },
        setAccessibilityGroupAttributes: function () {
            var members = this.GetGroupMembers();
            var currentIndex = members.indexOf(this);
            var focusableElement = this.GetFocusableInputElement();
            ASPx.Attr.SetAttribute(focusableElement, "aria-setsize", members.length);
            ASPx.Attr.SetAttribute(focusableElement, "aria-posinset", currentIndex + 1);
        },
        OnValueSet: function () {
            if (this.previousValue === true)
                this.UncheckOtherGroupMembers(true);
        },
        OnClick: function () {
            if (!this.previousValue) {
                this.UncheckOtherGroupMembers();
                ASPxClientCheckBox.prototype.OnClick.call(this);
            } else {
                if (!this.focused)
                    this.SetFocus();
            }
        },
        CreateInternalCheckBox: function () {
            ASPxClientCheckBox.prototype.CreateInternalCheckBox.call(this);
            this.internalCheckBox.autoSwitchEnabled = false;
        },
        UncheckOtherGroupMembers: function (suppressEvents) {
            var members = this.GetGroupMembers();
            for (var i = 0; i < members.length; i++) {
                var radioButton = members[i];
                if (!ASPx.IsExistsElement(radioButton.GetMainElement()))
                    members[i] = null;
                else {
                    if (radioButton != this && radioButton.GetValue()) {
                        radioButton.SetValue(false);
                        if (!suppressEvents)
                            radioButton.RaiseValueChangedEvent();
                    }
                }
            }
        },
        OnReadonlyClick: function () {
            if (!this.previousValue) {
                var members = this.GetGroupMembers();
                for (var i = 0; i < members.length; i++) {
                    var radioButton = members[i];
                    radioButton.SetValue(radioButton.GetValue());
                }
            }
        },
        GetGroupName: function () {
            if (!this.isNative)
                return this.groupName;
            var inputElement = this.GetInputElement();
            if (!ASPx.IsExistsElement(inputElement))
                return null;
            var name = inputElement.name;
            if (!name.length)
                name = "";
            return name;
        },
        GetGroupMembers: function () {
            var result = [];
            var groupName = this.GetGroupName();
            if (groupName.length > 0) {
                ASPx.GetControlCollection().ForEachControl(function (control) {
                    if (ASPx.Ident.IsASPxClientRadioButton(control)) {
                        var controlGroupName = control.GetGroupName();
                        if (controlGroupName != null && controlGroupName == groupName)
                            result.push(control);
                    }
                });
            } else {
                result.push(this);
            }
            return result;
        },
        GetChecked: function () {
            return this.GetValue() == true;
        },
        SetChecked: function (isChecked) {
            this.SetValue(isChecked);
        }
    });
    ASPxClientRadioButton.Cast = ASPxClientControl.Cast;
    ASPx.Ident.IsASPxClientCheckEdit = function (obj) {
        return !!obj.isASPxClientCheckEdit;
    };
    ASPx.Ident.IsASPxClientRadioButton = function (obj) {
        return !!obj.isASPxClientRadioButton;
    };
    ASPx.Ident.IsASPxClientCheckBox = function (obj) {
        return ASPx.Ident.IsASPxClientCheckEdit(obj) && !ASPx.Ident.IsASPxClientRadioButton(obj);
    };
    ASPx.ChkOnClick = function (name) {
        var edit = ASPx.GetControlCollection().Get(name);
        if (edit)
            edit.OnClick();
    };
    ASPx.ERBOnReadonlyClick = function (name) {
        var rb = ASPx.GetControlCollection().Get(name);
        if (rb)
            rb.OnReadonlyClick();
    };
    window.ASPxClientCheckBox = ASPxClientCheckBox;
    window.ASPxClientRadioButton = ASPxClientRadioButton;
})();

