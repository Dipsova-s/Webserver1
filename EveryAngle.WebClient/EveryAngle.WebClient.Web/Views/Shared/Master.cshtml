@using StackExchange.Profiling;
@using System.Globalization;
@using System.Threading;
@using Newtonsoft.Json;

@{ Layout = null; }
<!DOCTYPE html>
<html class="no-js">
<head>
    <title>@ViewBag.Title</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="Description" content="Every Angle" />
    <meta name="Keywords" content="Every Angle" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    @RenderPage("~/Views/Shared/Top/ValidationRequestHeader.cshtml")
    <link rel="shortcut icon" href="@Url.Content("~/images/favicon.ico")" />
	<link rel="preload" as="font" href="@Url.Content("~/content/fonts/roboto-v19-latin-regular.woff2")" type="font/woff2" crossorigin="anonymous" />
	<link rel="preload" as="font" href="@Url.Content("~/content/fonts/roboto-v19-latin-regular.woff")" type="font/woff" crossorigin="anonymous" />
	<link rel="preload" as="font" href="@Url.Content("~/content/externalresource/webclientico.woff")" type="font/woff" crossorigin="anonymous" />

    <script src='@Url.Content("~/resources/index?lang=" + Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName)' type="text/javascript"></script>
    <script type="text/javascript">
        var webAPIUrl = '@EveryAngle.Shared.Helpers.UrlHelper.GetRequestUrl(EveryAngle.Shared.Helpers.URLType.NOA).ToLower()';
        var webLoginUrl = '@EveryAngle.Shared.Helpers.UrlHelper.GetRequestUrl(EveryAngle.Shared.Helpers.URLType.HBA).ToLower()';
        var domainImageFolders = '@EveryAngle.WebClient.Web.Helpers.ResouceExtension.GetDomainImageFolderList().ToLower()';
        var domainImageFiles = '@EveryAngle.WebClient.Web.Helpers.ResouceExtension.GetDomainImageList()';
        var webApiVersion = '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("WebApiVersion")';
        var ajaxTimeoutExpirationInSeconds = parseInt('@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("Ajax-Timeout-Expiration-In-Seconds")', 10);
        var dashboardRefreshIntervalTime = parseInt('@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("DashboardRefreshIntervalTime")', 10);
        var loginPageUrl = '@Url.Action("Login", "User").ToLower()';
        var logoutPageUrl = '@Url.Action("Logout", "User").ToLower()';
        var ClientVersion = '@EveryAngle.Shared.Helpers.AssemblyInfoHelper.GetFileVersion()';
        var videoRepoPath = '@Url.Content("~/Scripts/VideoPlayer/").ToLower()';
        var notificationsFeed = {
            dataUrl: '@Html.Raw(EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("NotificationsFeedDataUrl"))',
            viewAllUrl: '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("NotificationsFeedViewAllUrl")'
        };

        @{
            string webLanguage = Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName;
            string userCulture = Thread.CurrentThread.CurrentCulture.Name;

            string fieldCategoryPath = EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("FieldCategoryIconPath");
            if (!fieldCategoryPath.StartsWith("http"))
            {
                fieldCategoryPath = Url.Content("~/") + fieldCategoryPath;
            }
            string copyRightUrl = Url.Content("~/Data/Help/" + webLanguage + "/index.htm");
        }
        var webLanguage = '@webLanguage';
        var userCulture = '@userCulture';
        var searchPageUrl = '@Url.Action("SearchPage", "Search", new { language = webLanguage }).ToLower()';
        var anglePageUrl = '@Url.Action("AnglePage", "Angle", new { language = webLanguage }).ToLower()';
        var helptextPageUrl = '@Url.Action("Helptext", "SharedComponent", new { language = webLanguage }).ToLower()';
        var dashboardPageUrl = '@Url.Action("DashboardPage", "Dashboard", new { language = webLanguage }).ToLower()';
        var imageFolderPath = '@Url.Content("~/images/").ToLower()';
        var scriptFolderPath = '@Url.Content("~/scripts/").ToLower()';
        var rootWebsitePath = '@Url.Content("~/").ToLower()';
        var showAngleAndDisplayID = '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("ShowAngleAndDisplayID").ToLower()' === 'true';
        var fieldCategoryPath = '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("FieldCategoryIconPath").ToLower()';
        var kendoTheme = '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("KendoTheme").ToLower()';
        var seriesColors = ('@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("SeriesColor").ToLower()').split(",");
        var fieldCategoryIconPath = '@fieldCategoryPath.ToLower()';
        var showErrorSourceUri = '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("ShowErrorSourceUri").ToLower()' === 'true';
        var requireReload = false;
        var maxNumberOfMassChangeItems = parseInt('@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("MaxNumberOfMassChangeItems")');
        var maxNumberOfDashboard = parseInt('@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("MaxNumberOfDashboard")');
        var largePageSize = parseInt('@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("LargePageSize")');
        var enableGoToSAP = '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("EnableGoToSAP").ToLower()' === 'true';
        var textDays = Localization.Days;
        var requireUserNameAndPasword = Localization.PleaseEnterYourUsernameAndPassword;
        var editorStyleSheet = '@Styles.Url("~/content/css/main.css")';
        var copyRightUrl = '@copyRightUrl';
    </script>

    <!--[if lt IE 10]>
    @Styles.Render("~/content/kendoui/kendoui.common.css")
    @Styles.Render("~/content/kendoui/kendoui.default.css")
    <![endif]-->
    <!--[if gte IE 10]>
    @Styles.Render("~/content/kendoui/kendoui.css")
    <![endif]-->
    <!--[if !IE]> -->
    @Styles.Render("~/content/kendoui/kendoui.css")
    <!-- <![endif]-->

    @Styles.Render("~/content/css/main.css")

    @Scripts.Render("~/bundles/core_external", "~/resources/embedded/sharedjs", "~/bundles/core")

    @{
        // check kendo.messages.xx file
        string[] kendoMessageFile = Directory.GetFiles(Server.MapPath("~/scripts/kendoui/messages/"), "kendo.messages." + webLanguage + "-*.js", SearchOption.TopDirectoryOnly);
        string kendoMessageBundle;
        if (kendoMessageFile.Length > 0)
        {
            kendoMessageBundle = "~/bundles/kendoui_messages_" + webLanguage;
        }
        else
        {
            kendoMessageBundle = "~/bundles/kendoui_messages_en";
        }

        if (!BundleTable.EnableOptimizations)
        {
            @Styles.Render("~/content/externalresource/externalresource.css")

            <script src='@Scripts.Url("~/bundles/kendoui_core.js")' type="text/javascript"></script>
            <script src='@Scripts.Url("~/bundles/kendoui_cultures.js")' type="text/javascript"></script>
            <script src='@Scripts.Url(kendoMessageBundle)' type="text/javascript"></script>

            @Scripts.Render("~/bundles/login",
                "~/bundles/main",
                "~/resources/embedded/js")

            <script type="text/javascript">
                InitialKendo();
                SetUICuture(userCulture);
            </script>
        }
        else
        {
            <script>
                WC.Page.LoadCoreScripts(
                    [
                        '@Styles.Url("~/content/externalresource/externalresource.css")',
                        '@Scripts.Url("~/bundles/kendoui_core.js")'
                    ],
                    [
                        '@Scripts.Url("~/bundles/kendoui_cultures.js")',
                        '@Scripts.Url(kendoMessageBundle)'
                    ],
                    [
                        '@Scripts.Url("~/bundles/login")',
                        '@Scripts.Url("~/bundles/main")',
                        '@Scripts.Url("~/resources/embedded/js")'
                    ],
                    function () {
                        InitialKendo();
                        SetUICuture(userCulture);
                    }
                );
            </script>
        }
    }

    @RenderSection("scripts", required: false)
</head>
<body>
    <div id="MainContainer">
        @RenderSection("TopBar", required: false)
        <div id="ResultContainerWrapper">
            @RenderBody()
        </div>
    </div>
    <div id="popupNotification" style="display: none">
        <div class="notificationInner">
            <div class="notificationIcon alert"></div>
            <div class="notificationMessages"></div>
        </div>
    </div>

    <div id="LoaderContainer" class="loader-container popup-initialized">
        <div class="loader-wrapper">
            <div class="loader-inner">
                <div class="loader-spinner"></div>
                <h3 class="loader-percentage"></h3>
            </div>
            <div class="loader-button">
                <a class="btn btn-ghost loader-cancel-button">
                    <span>@EveryAngle.Shared.Globalization.Captions.Button_Cancel</span>
                </a>
            </div>
        </div>
    </div>

    <span id="ToastNotificationContainer"></span>
    <script id="ToastNotificationAlertTemplate" type="text/x-kendo-template">
        <article class="toast-notification #= type #">
            <div class="toast-notification__status-icon-wrapper">
                <div class="toast-notification__status-icon toast-notification__color toast-notification__border-color">
                    <i class="#= icon #"></i>
                </div>
            </div>
            <section class="toast-notification__info">
                <h1>#= title #</h1>
                <p>#: message #</p>
            </section>
            <button class="toast-notification__close-icon">
                <i class="icon icon-close"></i>
            </button>
            <div class="toast-notification__progress-bar toast-notification__bg-color" style="transition-duration: #= progressbarDuration #s;"></div>
        </article>
    </script>

    <div id="LoginModalPlaceHolder"></div>

    @RenderPage("~/Views/Shared/Top/SettingsPanel.cshtml")

    @if (Convert.ToBoolean(EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("EnableMiniprofiler")))
    {
        MiniProfiler.RenderIncludes();
    }

    @{
        string googleAnalyticsId = EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingByKey("GoogleAnalyticsId");
        if (!string.IsNullOrEmpty(googleAnalyticsId))
        {
            <script>
                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

                ga('create', '@googleAnalyticsId', 'auto');
                ga('send', 'pageview');
            </script>
        }
    }
</body>
</html>
