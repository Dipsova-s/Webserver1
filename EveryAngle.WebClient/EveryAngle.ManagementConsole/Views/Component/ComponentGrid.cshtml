@using EveryAngle.ManagementConsole.Models
@using EveryAngle.ManagementConsole.Helpers
@using EveryAngle.Shared.Globalization

@{
            List<PageToolbarButtonModel> buttons = new List<PageToolbarButtonModel>();
            buttons.Add(new PageToolbarButtonModel
            {
                Type = PageToolbarButtonType.GridEditDelete,
                Privilege = PrivilegeType.System,
                DisableTemplate = "",
                EnableTemplate = "# if(data.IsDeletable) { #"
                                    + "<a href=\"" + Url.Content("~/Component/DeleteComponent") + "\" onclick=\"MC.GlobalSettings.Components.DeleteComponent(event, this)\" class=\"btn btnDelete\" data-parameters='{\"registrationId\":\"#= data.RegistrationId #\"}' data-delete-template=\"" + Resource.MC_DeleteComponentConfirm + "\" data-delete-field-index=\"0\">" + Resource.Delete + "</a>"
                                    + "# } else { #"
                                    + "<a class='btn btnDelete disabled'>" + Resource.Delete + "</a>"
                                    + "# } #"
            });

            buttons.Add(new PageToolbarButtonModel
            {
                Type = PageToolbarButtonType.GridEditDelete,
                Privilege = PrivilegeType.None,
                EnableTemplate = "# if(data.IsDownloadMetadataEnabled) { #"
                            + "<a href=\"" + Url.Content("~/component/downloadmetadata") + "\" class=\"btn btnDownload\" onclick=\"MC.GlobalSettings.Components.DownloadModelServerMetaData(event, this)\" data-parameters='{\"MetadataName\":\"#= data.ModelServer.MetadataName #\",\"MetadataUri\":\"#= data.ModelServer.MetadataUri #\"}'>" + Resource.MC_DownloadMetadata + "</a>"
                            + "# } else { #"
                            + "<a class=\"btn btnDownload disabled\">" + Resource.MC_DownloadMetadata + "</a>"
                            + "# } #"
    });

    buttons.Add(new PageToolbarButtonModel
    {
        Type = PageToolbarButtonType.GridEditDelete,
        Privilege = PrivilegeType.None,
        EnableTemplate = "# if(data.IsInfoEnabled && data.ModelServer.Uri) { #"
                    + "<a data-target=\"\\#popupModelServer\" class=\"btn btnInfo\" onclick=\"MC.GlobalSettings.Components.ShowModelServerInfo(event, this)\" data-parameters='{\"modelServerUri\": \"#= data.ModelServer.Uri #\", \"isCurrentInstance\": #= data.ModelServer.IsCurrentInstance # }' data-title=\"#= data.TypeName #\" data-role=\"mcPopup\" data-width=\"80%\" data-min-width=\"760\" data-height=\"80%\">" + Resource.Info + "</a>"
                    + "# } else { #"
                    + "<a class=\"btn btnInfo disabled\">" + Resource.Info + "</a>"
                    + "# } #"
    });

    string gridButton = HttpUtility.HtmlDecode(Html.GetGridToolbar(buttons));
}

<h2>@Resource.MC_Components_GridTitle</h2>
<div class="gridContainer" id="ComponentsGridContainer">
    @(Html.Kendo().Grid<EveryAngle.Core.ViewModels.ComponentViewModel>()
        .Name("ComponentsGrid")
        .Columns(columns =>
        {
            columns.Bound(model => model.TypeName)
                .ClientTemplate("<label class='#= data.ModelServer.IsCurrentInstance ? 'currentInstance' : '' #'>#= data.TypeName #</label>")
                .Title(Resource.Name);
            columns.Bound(model => model.Version)
                .Title(Resource.MC_Version);
            columns.Bound(model => model.ModelId)
                .ClientTemplate("<span>#= data.ModelId || 'n/a' # </span>")
                .Title(Resource.MC_ModelID);
            columns.Bound(model => model.Uri)
                .Title(Resource.MC_Uri);
            columns.Bound(model => model.MachineName)
                .Title(Resource.Host);
            columns.Bound(model => model.RegisteredOn)
                .HeaderTemplate(Resource.MC_RegisteredOn)
                .ClientTemplate("<span data-role='localize'>#= data.RegisteredOn || 'n/a' # </span>")
                .Width(115);
            columns.Bound(model => model.RegistrationId)
                .Title(Resource.MC_RegistrationId);
            columns.Bound(model => model.Status.Available)
                .ClientTemplate("<span>#= data.Status.Available ? Localization.MC_Available : Localization.Not_Available #</span>")
                .Title(Resource.MC_Status);
            columns.Bound(model => model.Status.LastEvent)
                .ClientTemplate("<span>#= data.Status.LastEvent ? data.Status.LastEvent : 'n/a' #</span>")
                .Title(Resource.MC_LastEvent);
            columns.Bound(model => model.LastSuccessfulHeartbeat)
                .Title(Resource.MC_LastHeartbeat)
                .ClientTemplate("<span data-role='localize'>#= data.LastSuccessfulHeartbeat || 'n/a'  # </span>")
                .Width(115);

            columns.Bound(model => model.RegistrationId)
                .ClientTemplate(gridButton)
                .HeaderHtmlAttributes(new { @class = "gridColumnToolbar" })
                .HtmlAttributes(new { @class = "gridColumnToolbar" })
                .Width(75)
                .Title(Resource.MC_Action)
                .Sortable(false);
        })
        .Resizable(resize => resize.Columns(true))
        .Scrollable(scroll => scroll.Virtual(false).Height(460))
        .EnableCustomBinding(true)
        .AutoBind(false)
        .DataSource(dataSource => dataSource
            .Ajax().Events(e => e.RequestStart("onKendoGridPagingStart"))
            .Read(read => read.Action("GetComponents", "Component", new { modelId = ViewBag.ModelId }))
            .ServerOperation(false)
        ))
</div>

<div class="popup" id="popupModelServer" data-server-url="@Url.Action("GetAllModelServerReport", "ModelServers")" data-info-url="@Url.Action("GetAllModelServer", "ModelServers")" data-report-url="@Url.Action("GetModelServerReport", "ModelServers")">
    <div class="popupContent popupContentModelServer" id="ModelServerInfo">
    </div>
    <div class="popupToolbar">
        <a class="btn btnPrimary btnClose" data-role="popup-close" id="popupModelServerCloseButton">@Resource.Close</a>
    </div>
</div>
