@model EveryAngle.Core.ViewModels.Model.ModelServerSettings

@{
    var isFormatCollapsibleExpandable = true;
    var styleFormatCollapsibleExpandable = "padding-left: 20px;";
    if (ViewData["page"] != null)
    {
        isFormatCollapsibleExpandable = false;
        styleFormatCollapsibleExpandable = "";
    }
}

@foreach (var item in Model.SettingsGroup)
{
    <div class="contentSection contentSectionInfo @item.Id">
        @if (isFormatCollapsibleExpandable)
        {
            <h2 style="cursor: pointer;" onclick="MC.Models.ModelServer.CollapsibleExpandable(this);"><span class="k-icon k-i-expand"></span>@item.Name</h2>
        }
        else
        {
            <h2>@item.Name</h2>
        }

        @{
            if (isFormatCollapsibleExpandable)
            {
                @Html.Raw("<form id='" + item.Id + "' data-role='validator' autocomplete='off' style='display:none;'>");
            }
            else
            {
                @Html.Raw("<form id='" + item.Id + "' data-role='validator' autocomplete='off'>");
            }
        }

        @foreach (var settingId in item.Settings)
        {
            var ExcludeSettings = new string[] { "deltamerger_command", "tableindexer_command", "downloaddeterminer_command", "schemabuilder_command" };
            var styleFormatToHide = "";
            if (ExcludeSettings.Contains(settingId))
            {
                styleFormatToHide += "display:none;";
            }
            <div class="contentSectionInfoItem" id="row-@settingId" style="@(styleFormatCollapsibleExpandable+styleFormatToHide)">
                @{
                    var setting = Model.GetSettingById(settingId);
                    var subGroups = item.GetSettingGroupById(settingId);
                    if (subGroups != null && subGroups.Count > 0)
                    {
                        <h5 style="font-size: 14px">@setting.Name</h5>

                    }
                    if (setting != null)
                    {
                        switch (setting.Type.ToLower())
                        {

                            case "int":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/IntegerTemplate.cshtml", setting);
                                break;

                            case "date":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/DateTemplate.cshtml", setting);
                                break;

                            case "text":
                                if (setting.Name.ToLower().Contains("password"))
                                {
                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/PasswordTemplate.cshtml", setting);
                                }
                                else if (setting.Id.ToLower().Contains("email"))
                                {
                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/EmailTemplate.cshtml", setting);
                                }
                                else
                                {
                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/TextTemplate.cshtml", setting);
                                }
                                break;

                            case "password":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/PasswordTemplate.cshtml", setting);
                                break;

                            case "bool":
                            case "boolean":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/BooleanTemplate.cshtml", setting);
                                break;

                            case "double":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/DoubleTemplate.cshtml", setting);
                                break;

                            case "currency_symbol":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/CurrencyTemplate.cshtml", setting);
                                break;

                            case "enum":

                                string enableValue = string.Empty;
                                if (subGroups != null && subGroups.Count > 0 && !string.IsNullOrEmpty(subGroups[0].EnablerValue))
                                {
                                    enableValue = subGroups[0].EnablerValue;
                                }

                                Html.RenderPartial("~/Views/Shared/EditorTemplates/EnumTemplate.cshtml", setting, new ViewDataDictionary { { "enableValue", enableValue } });
                                break;

                            case "percentage":
                                Html.RenderPartial("~/Views/Shared/EditorTemplates/PercentageTemplate.cshtml", setting);
                                break;

                        }
                    }


                    if (subGroups != null)
                    {

                        foreach (var subGroup in subGroups)
                        {

                            <div class="contentSectionInfoSubItem @subGroup.EnablerValue @settingId">
                                @{
                                    foreach (var subGroupSettingId in subGroup.Settings)
                                    {

                                        var subGroupSetting = Model.GetSettingById(subGroupSettingId);
                                        var isVisible = true;
                                        if (!string.IsNullOrEmpty(subGroup.EnablerValue))
                                        {
                                            isVisible = subGroup.EnablerValue == subGroupSetting.Value;
                                        }

                                        if (subGroupSetting != null)
                                        {
                                            switch (subGroupSetting.Type.ToLower())
                                            {
                                                case "int":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/IntegerTemplate.cshtml", subGroupSetting);
                                                    break;

                                                case "date":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/DateTemplate.cshtml", subGroupSetting);
                                                    break;

                                                case "text":
                                                    if (subGroupSetting.Name != null)
                                                    {
                                                        if (subGroupSetting.Name.ToLower().Contains("password"))
                                                        {
                                                            Html.RenderPartial("~/Views/Shared/EditorTemplates/PasswordTemplate.cshtml", subGroupSetting);
                                                        }
                                                        else
                                                        {
                                                            Html.RenderPartial("~/Views/Shared/EditorTemplates/TextTemplate.cshtml", subGroupSetting);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Html.RenderPartial("~/Views/Shared/EditorTemplates/TextTemplate.cshtml", subGroupSetting);
                                                    }
                                                    break;

                                                case "password":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/PasswordTemplate.cshtml", subGroupSetting);
                                                    break;

                                                case "bool":
                                                case "boolean":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/BooleanTemplate.cshtml", subGroupSetting);
                                                    break;

                                                case "double":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/DoubleTemplate.cshtml", subGroupSetting);
                                                    break;

                                                case "enum":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/EnumTemplate.cshtml", subGroupSetting);
                                                    break;

                                                case "percentage":
                                                    Html.RenderPartial("~/Views/Shared/EditorTemplates/PercentageTemplate.cshtml", subGroupSetting);
                                                    break;

                                            }
                                        }

                                    }

                                }
                            </div>
                        }
                    }
                }
            </div>
        }
        @Html.Raw("</form>")
    </div>
    <hr />
}