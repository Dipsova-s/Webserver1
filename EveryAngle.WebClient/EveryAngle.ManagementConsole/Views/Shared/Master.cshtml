@using EveryAngle.Shared.Globalization
@using EveryAngle.WebClient.Service.Security;
@{
    Layout = null;
    var FileVersion = AssemblyInfoHelper.GetFileVersion();
    string configFilePath = EveryAngle.Shared.Helpers.WebConfigHelper.GetWebClientFilePathBy("web.config");
    if (!Request.PhysicalPath.Contains("EveryAngle.ManagementConsole"))
    {
        configFilePath = configFilePath.Replace(@"EveryAngle.WebClient.Web\", "");
    }

    EveryAngle.Core.ViewModels.Users.UserViewModel user = SessionHelper.Initialize().CurrentUser;
}
@using StackExchange.Profiling;
<!doctype html>
<html class="no-js">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="@Url.Content("~/Images/favicon.ico")" />
    <title>@Resource.ManagementConsoleSystem</title>

    @{
        @Styles.Render("~/content/default")
        @Scripts.Render("~/bundles/modernizr")
    }
</head>
<body>

    <div class="topWrapper" id="topWrapper">
        <header class="header" id="header">
            <div class="container headerInner">
                <a href="@Url.Content("~/")" class="brand">
                    <img id="logo" src="@Url.Content("~/Images/logo.svg")" />
                </a>

                @{

                    if (user != null)
                    {
                        <div class="topMenu" id="topMenu">

                            @{ Html.RenderAction("TopMenu", "Home");}


                        </div>
                        <!--/.topMenu-->

                        <div class="systemInfo" id="systemInfo">
                            <span class="systemInfoLastLogin">
                                @Resource.LastLogin <span data-role="localize">

                                @{
                                    string lastAuthenticated = string.Empty;
                                    if (user != null)
                                    {
                                        lastAuthenticated = user.Last_Logon.ToString();
                                    }
                                }
                                @lastAuthenticated

                            </span>
                        </span><span class="systemInfoVersion">Version @FileVersion</span>
                    </div>
                }
                }
            </div>
            <!--/.headerInner-->
        </header>
    </div>
    <div class="mainContainer" id="mainContainer">
        <div class="container contentInner">
            <div class="sideContent" id="sideContent">
                @{
                    user = SessionHelper.Initialize().CurrentUser;
                    if (user != null) { Html.RenderAction("SideMenu", "Home"); } }
            </div>

            <div class="breadcrumb" id="breadcrumb">
                <div class="breadcrumbInner">
                    <ul class="inline breadcrumbList" id="breadcrumbList"></ul>
                </div>
                <!--/.breadcrumbInner-->
            </div>
            <!--/.breadcrumb-->
            <!--/.sideContent-->
            <div class="mainContent" id="mainContent">
                @RenderBody()
            </div>
            <!--/.mainContent-->
        </div>
    </div>
    <!--/.mainContainer-->
    <input type="hidden" id="token" value="@ViewBag.Token" />

    <div id="loading" class="loading" style="display: block;">
        <div class="loadingOverlay"></div>
        <div class="loadingContent">
            <a href="#close" class="loadingClose"></a>
            <span class="loadingContentText"></span>
        </div>
    </div>

    <script src='@Url.Content("~/resources/index")' type="text/javascript"></script>
    <script type="text/javascript">
        var webAPIUrl = '@EveryAngle.Shared.Helpers.UrlHelper.GetRequestUrl(EveryAngle.Shared.Helpers.URLType.NOA)';
        var webLoginUrl = '@EveryAngle.Shared.Helpers.UrlHelper.GetRequestUrl(EveryAngle.Shared.Helpers.URLType.HBA)';
        var webApiVersion = '@System.Configuration.ConfigurationManager.AppSettings["WebApiVersion"]';
        var webGlobalSettingsDownloadUrl = '@Url.Action("GetSystemlogFile", "GlobalSettings")';
        var webModelServersDownloadUrl = '@Url.Action("GetModelServerMetaDataFile", "ModelServers")';
        var webModelClassReportUrl = '@Url.Action("ModelClassReport", "Model")';
        var saveUserSettingsUrl = '@Url.Action("SaveUserSettingViewMode", "Users")';
        var timezoneId = '@TimeZoneInfo.Local.Id';
        var timezoneName = '@TimeZoneInfo.Local.DisplayName';
        var timezoneNameWithDst = '@(TimeZone.CurrentTimeZone.IsDaylightSavingTime(DateTime.Now) ? TimeZone.CurrentTimeZone.DaylightName : TimeZone.CurrentTimeZone.StandardName)';
        var timezoneOffset = @(TimeZoneInfo.Local.BaseUtcOffset.TotalMinutes * -1);
        var timezoneOffsetWithDst = @(TimeZone.CurrentTimeZone.GetUtcOffset(DateTime.Now).TotalMinutes * -1);
        var currentTimestamp = @((int)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds);
        var modelColors = '@System.Configuration.ConfigurationManager.AppSettings["ModelColors"]';
        var notificationsFeed = {
            dataUrl: '@Html.Raw(EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingsValueFromWebConfig(configFilePath, "NotificationsFeedDataUrl"))',
            viewAllUrl: '@EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingsValueFromWebConfig(configFilePath, "NotificationsFeedViewAllUrl")'
        };
        var passwordPlaceHolder = '@System.Configuration.ConfigurationManager.AppSettings["PasswordPlaceHolder"]';

        setInterval(function() {
            currentTimestamp++;
        }, 1000);

        @{
            string userCurrency = "EUR";
            string userLanguage = "en";
            if (user != null && user.Settings != null)
            {
                if (!string.IsNullOrEmpty(user.Settings.default_currency))
                {
                    userCurrency = user.Settings.default_currency;
                }
                if (!string.IsNullOrEmpty(user.Settings.default_language))
                {
                    userLanguage = user.Settings.default_language;
                }
            }
        }
        var userCurrency = '@userCurrency';
        var userLanguage = '@userLanguage';
    </script>

    @{
        if (!BundleTable.EnableOptimizations)
        {
            @Styles.Render("~/content/kendoui/css",
                        "~/content/externalresource/css",
                        "~/content/base")

            @Scripts.Render("~/bundles/jquery",
                        "~/bundles/jqueryplugin.js",
                        "~/bundles/knockout",
                        "~/bundles/kendo.js",
                        EveryAngle.ManagementConsole.Localization.UserCulture.GetScriptCulture(),
                        "~/resources/embedded/sharedjs",
                        "~/bundles/master.js")

            if (Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["MCDisplayPopupJavascriptError"]))
            {
                @Scripts.Render("~/bundles/displayjavascripterror")
            }
        }
        else
        {
            @Styles.Render("~/content/kendoui/css",
                    "~/content/externalresource/css",
                    "~/content/base")

            @Scripts.Render("~/bundles/jquery", "~/bundles/jqueryplugin.js")

            <script>
                var bundlesMaster = ['@Scripts.Url("~/bundles/master.js")'];
                @if (Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["MCDisplayPopupJavascriptError"]))
                {
                    @:bundlesMaster.add('@Scripts.Url("~/bundles/displayjavascripterror")');
                }

                $LAB.script([
                    '@Scripts.Url("~/bundles/knockout")',
                    '@Scripts.Url("~/bundles/kendo.js")'
                ]).wait()
                .script([
                    '@Url.Content(EveryAngle.ManagementConsole.Localization.UserCulture.GetScriptCulture())',
                    '@Scripts.Url("~/resources/embedded/sharedjs")'
                ]).wait()
                .script(bundlesMaster);
            </script>
        }

        string googleAnalyticsId = EveryAngle.Shared.Helpers.WebConfigHelper.GetAppSettingsValueFromWebConfig(configFilePath, "GoogleAnalyticsId");
        if (!string.IsNullOrEmpty(googleAnalyticsId))
        {
            <script>
                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

                ga('create', '@googleAnalyticsId', 'auto');
                ga('send', 'pageview');
            </script>
        }
    }
</body>
</html>
