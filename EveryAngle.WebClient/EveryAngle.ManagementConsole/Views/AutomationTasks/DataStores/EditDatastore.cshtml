@using EveryAngle.ManagementConsole.Models
@using EveryAngle.ManagementConsole.Helpers
@using EveryAngle.Shared.Globalization
@model EveryAngle.Core.ViewModels.DataStore.DataStoresViewModel

<script>
    MC.util.loadScript({
        test: MC.AutomationTasks && MC.AutomationTasks.DataStores,
        url: '@Scripts.Url("~/bundles/automationtasks/datastores")',
        callback: function () {
            MC.AutomationTasks.DataStores.InitialDataStores({
                AllDataStoreUri: '@SiteMapHelper.ActionHash("AngleExports/DataStores")',
                SaveUri: '@Url.Action("SaveDatastore", "AutomationTasks")',
                EditDatastoreUri: '@SiteMapHelper.ActionHash("AngleExports/DataStores/EditDatastores")',
                DatastoreUri: '@ViewBag.DatastoreUri',
                SettingDatastoreUri: '@ViewBag.SettingDatastoreUri',
                TestConnectionUri: '@Url.Action("TestDataStoreConnection", "AutomationTasks")',
                PluginUri: '@ViewBag.PluginUri',
                PluginType: '@Model.datastore_plugin',
                DefaultDatastore:'@Model.is_default',
                DefaultDatastoreUri: '@Url.Action("EditDefaultDatastoreCallback", "AutomationTasks")',
                isSupportAutomateTask: '@ViewBag.isSupportAutomateTask',
                EditDefaultCsvDatastoreUri: '@SiteMapHelper.ActionHash("AngleExports/ExportDefault/ExportCsv")',
                EditDefaultExcelDatastoreUri:'@SiteMapHelper.ActionHash("AngleExports/ExportDefault/ExportExcel")'
            });
        }
    });
</script>

@{
    if (ViewBag.isSupportAutomateTask)
    {
        @Html.RenderPageToolbar(new List<PageToolbarButtonModel>
        {
            new PageToolbarButtonModel { Privilege=PrivilegeType.System, Type = PageToolbarButtonType.Save, OnClick = "MC.AutomationTasks.DataStores.SaveDatastore()" },
            new PageToolbarButtonModel { Type = PageToolbarButtonType.Cancel, Link = SiteMapHelper.ActionHash("AngleExports/DataStores") }
        })
    }
    else
    {
        @Html.RenderPageToolbar(new List<PageToolbarButtonModel>
       {
           new PageToolbarButtonModel { Privilege=PrivilegeType.System, Type = PageToolbarButtonType.Save, OnClick = "MC.AutomationTasks.DataStores.SaveDatastore()" },
       })
    }
}

<div class="content pageDatastore pageDatastoreEdit">
    <form id="formAddDatastore" data-role="validator" autocomplete="off" onsubmit="return false">
        <div class="contentSection contentSectionInfo">

            @{
                bool? isDefault = false;
                if (Model.id != null)
                {
                    isDefault = Model.is_default;
                    <h2>@Resource.Edit @Resource.MC_DataStore</h2>
                }
                else
                {
                    <h2>@Resource.MC_CreateNew @Resource.MC_DataStore</h2>
                }
            }
        <div class="contentSectionInfoItem">
            <input type="hidden" name="id" value="@Model.id" />
            <input type="hidden" name="datastore_plugin" value="@Model.datastore_plugin" />
            @{
                if (ViewBag.isSupportAutomateTask && Model.is_default && (Model.datastore_plugin.Equals("csv") || Model.datastore_plugin.Equals("msexcel")))
                {
                    <label>@Resource.MC_DefaultDatastoreName:</label>
                    <p id="row-default-datastore">
                        @(Html.Kendo().DropDownListFor(model => model.Uri)
                                                                                  .DataValueField("Uri")
                                                                                  .DataTextField("name")
                                                                                  .BindTo((System.Collections.IEnumerable)ViewData["DatastoreDetails"])
                                                                                  .Value(Model.Uri.ToString())
                                                                                  .Events(e => e.Change(@<text>
                                                                                    function(e) {
                                                                                    MC.AutomationTasks.DataStores.GetDatastoreSetting(e);
                                                                                    }
                                                                                </text>))
                            )

                        <span class="datastoreDefaultStatusInfo statusInfo">@Resource.MC_DataStoreCannotBeDefault</span>
                    </p>
                }
                else
                {
                    <label>@Resource.MC_DataStoreName:</label>
                    <p>@Html.TextBoxFor(model => model.name, new { @class = "required", @name = "name", maxlength = 25 })</p>
                    if (ViewBag.isSupportAutomateTask)
                    {
                        <div class="contentSectionInfoItem">
                            <label>@Resource.MC_DataStorePlugin:</label>
                            <p>@ViewBag.DatastorePlugin</p>
                        </div>
                    }
                }
            }
        </div>
        </div>
        <!--/.contentSectionInfo-->
        <hr />
    </form>
    @{
        if (Model.connection_settings != null)
        {
            <form id="formConnectionString" data-role="validator"> 
            <div class="connection_settings" id="CheckOutputFolder">
                @{Html.RenderPartial("~/Views/Shared/Plugins.cshtml", Model.connection_settings, new ViewDataDictionary { { "page", "DataStore" } });}
                <div class="contentSectionInfoItem" id="row-test-connection">
                    <label>&nbsp;</label>
                    <p>
                        <a id="btnTestConnection" class="btn" onclick="MC.AutomationTasks.DataStores.TestConnection()">@Resource.MC_TestConnection</a><br />
                        <span class="statusInfo"></span>
                    </p>
                </div>
                <hr class="last" />
            </div>
            </form>
        }
        if (Model.data_settings != null)
        {
            <div class="data_settings">
                @{Html.RenderPartial("~/Views/Shared/Plugins.cshtml", Model.data_settings, new ViewDataDictionary { { "page", "DataStore" } });}
            </div>

        }
        if (Model.connection_settings != null || Model.data_settings != null)
        {
            Html.RenderPartial("~/Views/Shared/PluginPopupDescriptionTemplate.cshtml");
        }
    }
</div>
<!--/.content-->
