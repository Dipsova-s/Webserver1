@using EveryAngle.Shared.Globalization
@using EveryAngle.Core.ViewModels.SystemLog
@model List<EveryAngle.Core.ViewModels.ModelServer.ModelServerViewModel>
@{
    string serverStatus = ViewBag.ModelStatus;
    string serverStatusClassName = (serverStatus != null) ? serverStatus.Replace(" ", ""): serverStatus;
    if (serverStatus.ToLower() == "initializing" || serverStatus.ToLower() == "loading"
        || serverStatus.ToLower() == "extract" || serverStatus.ToLower() == "restructure"
         || serverStatus.ToLower() == "importing")
    {
        serverStatusClassName = "Loading";
    }
   


    string modelOverviewItem = "modelOverviewItem" + serverStatusClassName;
    string modelInfoStatus = "modelInfoStatus" + serverStatusClassName;
    DateTime currentDate = DateTime.Now;
    
    
    // license
    string licenseStatus;
    string licenseDate = ViewBag.LicenseDate;
    if (licenseDate == null)
    {
        licenseStatus = "<strong class=\"noLicense\">" + Resource.MC_Unlicensed + "</strong>";
    }
    else
    {
        if (EveryAngle.Shared.Helpers.LicenseHelper.IsValidLicense(licenseDate))
        {
            licenseStatus = "<strong class=\"licensed\">" + Resource.MC_LicensedUntil + " <abbr data-role=\"localize\" data-type=\"date\">" + licenseDate + "</abbr></strong>";
        }
        else
        {
            licenseStatus = "<strong class=\"noLicense\"> " + Resource.MC_LicensedExpiredOn + " <abbr data-role=\"localize\" data-type=\"date\">" + licenseDate + "</abbr></strong>";
        }
    }
}               
@if(Model.Count > 0)
{
    <div class="modelOverviewItem @modelOverviewItem">
        <h2>@ViewBag.ModelName<span></span></h2>

        <div class="modelInfoStatusReport @modelInfoStatus">
            @{
                var currentModel = Model.Where(x => (x.type == "ModelServer" || x.type == "HanaServer")).FirstOrDefault();
                string modelServerName = (currentModel != null) ? currentModel.id + "_status" : "";
            }
            <strong class="@modelServerName">@ViewBag.ModelStatus</strong>
            @if (Model.Count() > 0)
            {
                var currentInstance = Model.Where(x => x.IsCurrentInstance == true).FirstOrDefault();
                if (currentInstance != null)
                {
                    DateTime startUnixTime = new DateTime(1970, 1, 1, 0, 0, 0, 0);
                    startUnixTime = startUnixTime.AddSeconds((long)currentInstance.timestamp).ToLocalTime();
                    System.TimeSpan modeldate = currentDate.Subtract(startUnixTime);
                    var day = modeldate.Days == 0 ? null : modeldate.Days + " days";
                    var hours = modeldate.Hours == 0 ? null : modeldate.Hours + " hr";
                    var minutes = modeldate.Minutes == 0 ? null : modeldate.Minutes + " mins";

                    string className = "hidden description " + currentInstance.id + "_time";
                    <div class="@className">for @day @hours @minutes</div>
                }
                else
                {
                    var modelserver = Model.Where(x => (x.type == "ModelServer" || x.type == "HanaServer")).FirstOrDefault();
                    if(modelserver != null){
                        DateTime startUnixTime = new DateTime(1970, 1, 1, 0, 0, 0, 0);
                        startUnixTime = startUnixTime.AddSeconds((long)modelserver.timestamp).ToLocalTime();
                        System.TimeSpan modeldate = currentDate.Subtract(startUnixTime);
                        var day = modeldate.Days == 0 ? null : modeldate.Days + " " + Resource.MC_Day;
                        var hours = modeldate.Hours == 0 ? null : modeldate.Hours + " " + Resource.MC_Hr;
                        var minutes = modeldate.Minutes == 0 ? null : modeldate.Minutes + " " + Resource.MC_Mins;
                        string className = "hidden description " + modelserver.id + "_time";
                        <div class="@className">for @day @hours @minutes</div>
                    }
                }
            }
                
        </div>

        <div class="modelOverviewItemDetail">
            <strong>@Resource.Instances</strong>
                @foreach (var item in Model)
                {
                    DateTime startUnixTime = new DateTime(1970, 1, 1, 0, 0, 0, 0);                       
                    startUnixTime = startUnixTime.AddSeconds((long)item.timestamp).ToLocalTime();

                    var modeldate = currentDate.Subtract(startUnixTime);
                    var day = modeldate.Days == 0 ? null : modeldate.Days + "d";
                    var hours = modeldate.Hours == 0 ? null : modeldate.Hours + "hr";
                    var minutes = modeldate.Minutes == 0 ? null : modeldate.Minutes + "m";

                    if (item.id != "EA4IT_Xtractor")
                    {
                        <div class="modelOverviewItemDetailItem">
                    @{
                        
                    string className = item.id + "_status";
                    string classtime = "alwaysHidden " + item.id + "_time";
                    }

                    @if(item.IsCurrentInstance)
                    {
                        <strong>
                            <label class="@className">@item.id: @item.status</label>
                            <span class="@classtime">@day @hours @minutes</span>
                        </strong>
                    }
                    else
                    {
                        <label class="@className">@item.id: @item.status</label>
                        <span class="@classtime">@day @hours @minutes</span>
                    }
                </div>
                    }
                }           
        </div>

        <div class="modelOverviewItemDetail">
            <strong>@Resource.ModelDate</strong>
            @{
            EveryAngle.Core.ViewModels.ModelServer.ModelServerViewModel CurrentInstance = Model.Where(x => x.IsCurrentInstance == true).FirstOrDefault();
            <p data-role="localize">@(CurrentInstance != null ? CurrentInstance.modeldata_timestamp.ToString() : "" )</p>
            <div class="modelOverviewItemDetailItem">@Resource.MC_Volume: @(CurrentInstance != null ? Math.Round(decimal.Parse(Model.Where(x => x.IsCurrentInstance == true).FirstOrDefault().size)/ (1024*1024*1024) , 2) : 0 ) GB</div>
            }
        </div>

            <div class="modelOverviewItemDetail">
                <strong>@Resource.MC_Users</strong>
                <div class="modelOverviewItemDetailItem">
                    <label>@Resource.Enabled:</label>
                    <span>@ViewBag.AuthorizedUsers</span>
                </div>
                <div class="modelOverviewItemDetailItem">
                    <label style="width:auto">@Resource.MC_Connected:</label>
                    <span style="width:100px">@ViewBag.ConnectedUser</span>
                </div>
                <div class="modelOverviewItemDetailItem">
                    <label style="width:auto">@Resource.MC_ActiveUsersThisWeek:</label>
                    <span style="width:100px">@ViewBag.ActiveUsersThisWeek</span>
                </div>
                <div class="modelOverviewItemDetailItem">
                    <label style="width:auto">@Resource.MC_ActiveUsersThisMonth:</label>
                    <span style="width:100px">@ViewBag.ActiveUsersThisMonth</span>
                </div>
                <div class="modelOverviewItemDetailItem">@Html.Raw(licenseStatus)</div>
            </div>
        @*M4-13792: Fixed 'Open model' button missing*@
        <a href="@SiteMapHelper.ActionHash("Models/" + @ViewBag.ModelId)" class="btn btnLarge btnNext btnOpenModel">@Resource.OpenModel</a>
        <a href="@SiteMapHelper.ActionHash("GlobalSettings/Systemlog/ModelServer")" onclick="MC.util.redirect(event, this)" data-parameters='{"target":"@SystemLogType.ModelServer","modelId":"@ViewBag.ModelId"}' class="btn btnLarge btnNext btnOpenLogs">@Captions.MC_Button_OpenErrorWarningLog</a>
    </div>             
}