@using EveryAngle.ManagementConsole.Models
@using EveryAngle.ManagementConsole.Helpers
@using EveryAngle.Shared.Globalization
@using EveryAngle.Core.ViewModels.SystemLog
@model List<EveryAngle.Core.ViewModels.ModelServer.ModelServerViewModel>
@{
    string ModelId = ViewBag.ModelId;
    string serverStatus = ViewBag.ModelStatus == "Ready" || ViewBag.ModelStatus == "Up" ? "Up" : "Down";

    if (Convert.ToString(ViewBag.ModelStatus) == "Importing Metadata")
    {
        serverStatus = "Loading";
    }

    string modelInfoStatus = "modelInfoStatus" + serverStatus;

    // license
    string licenseStatus;
    string settingStatusCssClass = "";
    string licenseDate = ViewBag.LicenseDate;
    if (licenseDate == null)
    {
        licenseStatus = "<span class=\"noLicense\">Unlicensed</span>";
        settingStatusCssClass = "settingStatusError";
    }
    else
    {
        if (EveryAngle.Shared.Helpers.LicenseHelper.IsValidLicense(licenseDate))
        {
            licenseStatus = "<span class=\"licensed\">Licensed until: <abbr data-role=\"localize\" data-type=\"date\">" + licenseDate + "</abbr></span>";
            settingStatusCssClass = "settingStatusOK";
        }
        else
        {
            licenseStatus = "<span class=\"noLicense\">Licensed expired on: <abbr data-role=\"localize\" data-type=\"date\">" + licenseDate + "</abbr></span>";
            settingStatusCssClass = "settingStatusError";
        }
    }

    //SiteMap
    var siteMapList = SiteMapHelper.GetSiteMap(true);
}

<script>
    MC.util.loadScript({
        test: MC.Models && MC.Models.Model,
        url: '@Scripts.Url("~/bundles/models/model")',
        callback: function () {
            MC.Models.Model.InitialMainModelPage({
                ModelServers: @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model))),
                UpdateModelInfoUri: '@Url.Action("UpdateModelInfo", "Model", new { modelUri = @ViewBag.ModelUri })',
                ReloadModelUri: '@Url.Action("ReloadHanaModel", "Model", new { agentUri = @ViewBag.AgentUri })',
                ModelGraphDataUri: '@Url.Action("GetModelServerGraphData", "Model")',
                IsOverviewPage: false

            });
        }
    });
</script>

@{
    @Html.RenderPageToolbar(new List<PageToolbarButtonModel>
    {
        new PageToolbarButtonModel { Type = PageToolbarButtonType.Reload }
    })
}
<div class="content pageModelInfo">

    <div class="modelInfoColumn modelInfoColumn1">
        <div class="modelInfo modelInfoStatus" id="modelInfoStatus">
            <h3>@ViewBag.ModelServerId @Resource.Status</h3>
            <div id="modelInfoStatusReport" class="modelInfoStatusReport @modelInfoStatus">
                <strong>@(ViewBag.ServerStatus == null ? Resource.MC_NoData : ViewBag.ModelStatus)</strong>
                <div class="description">
                    @Resource.Enabled: @ViewBag.AuthorizedUsers<br />
                    @Resource.MC_Connected: @ViewBag.ConnectedUser<br />
                    @Resource.MC_ActiveUsersThisWeek: @ViewBag.ActiveUsersThisWeek<br />
                    @Resource.MC_ActiveUsersThisMonth: @ViewBag.ActiveUsersThisMonth<br />
                    @Html.Raw(licenseStatus)
                </div>

            </div>

            <h3>@Resource.Status @Resource.History</h3>
            <div class="modelInfoStatusGraphContainer" id="graph" onclick="MC.Models.Model.ShowLogTable(event)" data-target="#popupEventsLogTable" title="Status history" data-width="700" data-height="528" data-role="mcPopup">
                @if (Model != null)
                {
                    foreach (var item in Model)
                    {
                    @Html.Action("GetModelServerGraph", "Model", new { modelServerId = item.id, item.IsCurrentInstance })
                    }
                    <div class="clearfix modelInfoStatusGraphScale" id="graphScale">
                        @{
                            <div class="scaleValue" data-role="localize" data-type="date">@ViewBag.DateYesterday</div>
                            <div class="scaleValue">&nbsp;</div>   
                            <div class="scaleValue" data-role="localize" data-type="date">@ViewBag.DateToday</div>
                        }
                    </div>
                    <!--/.modelInfoStatusGraphScale-->
                }

                <div class="modelInfoStatusGraphMeaning">
                    <div class="modelInfoStatusGraphMeaningItem">
                        <div class="modelStatus statusUp"></div>
                        @Resource.Up
                    </div>
                    <div class="modelInfoStatusGraphMeaningItem">
                        <div class="modelStatus statusLoading"></div>
                        @Resource.Loading
                    </div>
                    <div class="modelInfoStatusGraphMeaningItem">
                        <div class="modelStatus statusDown"></div>
                        @Resource.Down
                    </div>
                    <div class="modelInfoStatusGraphMeaningItem">
                        <div class="modelStatus statusExtract"></div>
                        @Resource.Extract
                    </div>
                    <div class="modelInfoStatusGraphMeaningItem">
                        <div class="modelStatus statusRestructure"></div>
                        @Resource.Restructure
                    </div>
                </div>
                <!--/.modelInfoStatusGraphMeaning-->
            </div>
            <!--/.modelInfoStatusGraphContainer-->
        </div>
        <!--/.modelInfoStatus-->
        @foreach (var item in Model)
        {
            if (item.id != "EA4IT_Xtractor")
            {
            <div class="modelInfo modelInfoInstance">
                <h3 title="@item.id">@item.id</h3>
                @if (item.type != "Extractor")
                {
                <div class="modelInfoItem">
                    @Html.LabelFor(model => item.instance_status, Resource.MC_InstanceStatus + ":")
                    <div class="value breakword">@item.instance_status</div>
                </div>
                }
                <div class="modelInfoItem">
                    <label>@(item.ModelServerName):</label>
                    <div class="value status"><span data-role='localize'>@item.status</span></div>
                </div>
                <div class="modelInfoItem">
                    <label>@Resource.Since:</label>
                    <div class="value"><span data-role='localize'>@item.timestamp</span></div>
                </div>
                @if (item.SupportModelDate)
                {
                <div class="modelInfoItem">
                    <label>@Resource.ModelDate:</label>
                    <div class="value"><span data-role='localize'>@item.modeldata_timestamp</span></div>
                </div>
                }
                <div class="modelInfoItem">
                @Html.LabelFor(model => item.application_version, Resource.MC_ServerVersion + ":")
                @if (item.application_version != null)
                {
                    <div class="value">@item.application_version</div>
                }
                else
                {
                    <div class="value">@Resource.MC_NoData</div>
                }
                </div>

                @if (item.SupportModelSize)
                {
                <div class="modelInfoItem">
                    @Html.LabelFor(model => item.size, Resource.MC_ModelSize + ":")
                    <div class="value">@item.FormattedSize</div>
                </div>
                }

                <div class="modelInfoItem modelInfoItemStatus">
                    <a href="@SiteMapHelper.ActionHash("GlobalSettings/Systemlog/ModelServer")" onclick="MC.util.redirect(event, this)" data-parameters='{"target":"@SystemLogType.ModelServer","category":"@item.id.Replace(ViewBag.ModelId + "_", "")","modelId":"@ViewBag.ModelId"}'>
                        <span class="modelStatus statusDown"></span>
                        @item.error_count @Resource.Errors
                    </a>
                    <a href="@SiteMapHelper.ActionHash("GlobalSettings/Systemlog/ModelServer")" onclick="MC.util.redirect(event, this)" data-parameters='{"target":"@SystemLogType.ModelServer","category":"@item.id.Replace(ViewBag.ModelId + "_", "")","modelId":"@ViewBag.ModelId"}'>
                        <span class="modelStatus statusLoading"></span>
                        @item.warning_count @Resource.Warnings
                    </a>
                </div>

                <div class="modelInfoItem modelInfoItemUri">
                    @Html.LabelFor(model => item.server_uri)
                    <div class="value" title="@item.server_uri">@item.server_uri</div>
                </div>

                @{
                    string infoButton = "<a data-target=\"#popupModelServer\" data-title=\"" + item.ModelServerName + "\" data-width='80%' data-min-width='760' " +
                                        " data-height='80%' data-role='mcPopup' class='btn btnInfo' onclick=\"MC.Models.Model.ShowModelServerInfo(event, this)\" data-callback=\"MC.Models.Model.ShowModelServerInfoCallback\" data-parameters='{\"modelServerUri\" : \"" + item.Uri + "\", \"isCurrentInstance\" : " + item.IsCurrentInstance.ToString().ToLower() + " }'>" + Resource.MC_StatusAndReport + "</a>";

                    List<PageToolbarButtonModel> buttons = new List<PageToolbarButtonModel>();

                    if (item.IsModelServer)
                    {
                        string text;
                        string updateStatus;
                        if (item.IsActiveServer)
                        {
                            text = Resource.StopServer;
                            updateStatus = "false";
                        }
                        else
                        {
                            text = Resource.StartServer;
                            updateStatus = "true";
                        }

                        buttons.Add(new PageToolbarButtonModel
                        {
                            ModelUri = ViewBag.ModelUri,
                            Privilege = PrivilegeType.Model,
                            Type = PageToolbarButtonType.Custom,
                            EnableTemplate = infoButton + "<a class=\"btn btnNext btnStartStopModelServer\" onclick=\"MC.Models.Model.UpdateInstance('" + item.ModelServerId + "'," + updateStatus + ",'" + item.id + "')\">" + text + "</a>",
                            DisableTemplate = "<a class=\"btn disabled\" >" + text + "</a>"
                        });
                    }
                    else if (item.IsHanaServer)
                    {
                        buttons.Add(new PageToolbarButtonModel
                        {
                            ModelUri = ViewBag.ModelUri,
                            Privilege = PrivilegeType.Model,
                            Type = PageToolbarButtonType.Custom,
                            EnableTemplate = infoButton + "<a class=\"btn btnNext btnStartStopModelServer\" onclick=\"MC.Models.Model.ReloadHanaModel()\">" + Resource.MC_Reload + "</a>",
                            DisableTemplate = "<a class=\"btn disabled\" >" + Resource.MC_Reload + "</a>"
                        });
                    }
                    else
                    {
                        buttons.Add(new PageToolbarButtonModel
                        {
                            ModelUri = ViewBag.ModelUri,
                            Privilege = PrivilegeType.Model,
                            Type = PageToolbarButtonType.Custom,
                            EnableTemplate = infoButton
                        });
                    }
                    @Html.RenderPageToolbarBottom(buttons)
                }
            </div>
            <!--/.modelInfoInstance-->
            }
        }
    </div>
    <!--/.modelInfoColumn1-->

    <div class="modelInfoColumn modelInfoColumn2">
        <div class="modelInfo modelInfoOptions" id="modelInfoOptions">
            <h3>Model options</h3>

            @{
                var siteMapModel = siteMapList.FirstOrDefault(x => x.Id == "Models").Childs.FirstOrDefault(x => x.Id == ViewBag.ModelId);
            }

            @if (siteMapModel != null)
            {
                var isHasGroupHead = false;
                var indexSiteMap = 1;
                var numberOfSiteMap = siteMapModel.Childs.Count();
                if(numberOfSiteMap > 0)
                {
                    foreach (var siteMapItem in siteMapModel.Childs)
                    {
                        if ((siteMapItem.IsText)&&(!isHasGroupHead))
                        {
                            //Render Group
                            isHasGroupHead = true;

                            if (indexSiteMap != 1)
                            {
                                @:</div>
                            }
                        
                            @:<div class="modelInfoOptionsGroup clearfix">
                            @:<h4>@siteMapItem.Name</h4>
                        }
                        else
                        {
                            //Render Menu
                            isHasGroupHead = false;
                            if (siteMapItem.Visible.Value)
                            {
                                @:<a href="@SiteMapHelper.ActionHash(@siteMapItem.HashPath)" class="modelInfoOptionsItem">@siteMapItem.Name.Trim()</a>
                            }
                        
                            if (numberOfSiteMap == indexSiteMap)
                            {
                                @:</div>
                            }
                        }

                        indexSiteMap++;
                    }
                }
            }
        </div>
        <!--/.modelInfoOptions-->

        <div class="modelInfo modelInfoSetup">
            <h3>@Resource.ModelSetup</h3>

            <div class="modelInfoItem">
                <label>@Resource.MC_ModelName:</label>
                <div class="value">@(ViewBag.ModelLongName != null ? ViewBag.ModelLongName : Resource.MC_NoData)</div>
            </div>

            <div class="modelInfoItem">
                <label>@Resource.MC_ModelEnvironment:</label>
                <div class="value">@(ViewBag.ModelEnvironment != null ? ViewBag.ModelEnvironment : Resource.MC_NoData)</div>
            </div>

            <div class="modelInfoItem">
                <label>@Resource.MC_ModelType:</label>
                <div class="value">@(ViewBag.ModelType != null ? ViewBag.ModelType : Resource.MC_NoData)</div>
            </div>

            <div class="modelInfoItem" style="display: none;">
                <label>@Resource.LastChanges:</label>
                <div class="value">@Resource.MC_NotImplemented</div>
            </div>

            <a href="@SiteMapHelper.ActionHash("Models/AllModels/EditModel")" onclick="MC.util.redirect(event, this)" class="btn" data-parameters='{"modelUri":"@ViewBag.ModelUri"}'>@Resource.ModifySetup</a>

        </div>
        <!--/.modelInfoSetup-->

        <div class="modelInfo modelInfoLicense">
            @Html.Action("GetModelLicense", "Model", new { modelId = ModelId, licenses = @ViewBag.LicensesData })
        </div>
        <!--/.modelInfoLicense-->
    </div>
    <!--/.modelInfoColumn2-->

</div>
<!--/.content-->

<div class="popup" id="popupEventsLogTable">
    <div class="popupContent">
        <div class="gridContainer"></div>
    </div>
</div>

<div class="popup" id="popupModelServer" data-server-url="@Url.Action("GetAllModelServerReport", "ModelServers")" data-info-url="@Url.Action("GetAllModelServer", "ModelServers")" data-report-url="@Url.Action("GetModelServerReport", "ModelServers")">
    <div class="popupContent popupContentModelServer" id="ModelServerInfo">
    </div>
    <div class="popupToolbar">
        <a class="btn btnPrimary btnClose" data-role="popup-close" id="popupModelServerCloseButton">@Resource.Close</a>
    </div>
</div>
