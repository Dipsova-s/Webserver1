@using EveryAngle.ManagementConsole.Models
@using EveryAngle.ManagementConsole.Helpers
@using EveryAngle.Shared.Globalization
@using EveryAngle.ManagementConsole.Models
<script>
    MC.util.loadScript({
        test: MC.Models && MC.Models.Modules,
        url: '@Scripts.Url("~/bundles/models/modules")',
        callback: function () {
            MC.Models.Modules.Initial({
                ValidateSaveUri: '@Url.Action("ValidateSaveModules", "Module")',
                SaveUri: '@Url.Action("SaveModules", "Module")',
                GetExtensionsDetailUri: '@Url.Action("GetModuleExtensionsDetail", "Module")',
                SaveExtensionsDetailUri: '@Url.Action("SaveModuleExtensionsDetail", "Module")',
                ModelUri: '@ViewBag.ModelUri',
                GetHelpTextsUri: '@Url.Action("GetHelpTexts", "Role")'
            });
        }
    });
</script>

@{
    @Html.RenderPageToolbar(new List<PageToolbarButtonModel>
    {
        new PageToolbarButtonModel { ModelUri = ViewBag.ModelUri, Privilege = PrivilegeType.Model, Type = PageToolbarButtonType.Save, OnClick = "MC.Models.Modules.ValidateSaveModules()" },
        new PageToolbarButtonModel { Type = PageToolbarButtonType.Reload }
    })
}

<div class="content pageModules">
    <div class="contentSection contentSectionGrid">
        <div class="gridToolbar gridToolbarTop">
            <div class="gridToolbarFilter">
                <input type="text" placeholder="@Resource.MC_FilterAtLeast2Characters" id="ModuleFilterBox" data-role="treelistfilter" data-method="local" data-type="highlight" data-min="2" data-target="#treelist" data-filter="td:eq(0)" data-callback="MC.Models.Modules.ModulesSearchCallback" /><span class="icon"></span>
            </div>
        </div>

        <h2>@Resource.AllModules</h2>

        <div class="gridContainer">

            @{
                IHtmlString popupAttributes = Html.Raw("data-title='#= name #' data-width='600' data-height='400' data-role='mcPopup'");
            }

            <script id="name-template" type="text/x-kendo-template">
                <div class='name #= (parentId === null ? "top" : "child") + (licensed === false ? " noLicense" : "") #' id='name-#= idString #'>
                # if (licensed !== false) { #
                    # if (parentId === null) { #
                    # } else if (configurable !== true) { #
                        <span class='iconChecked'></span>
                    # } else { #
                        <label>
                            <input type='checkbox' class='chk' value='#= idString #' onchange='MC.Models.Modules.EditModuleEnableValue(this)' #= (enabled ? "checked='checked'" : "") # />
                            <span class='label'></span>
                        </label>
                    # } #
                # } else { #
                    <span class='warning'>Not included in your current license</span>
                # } #
                #: name #
                </div>
            </script>

            <script id="longtext-template" type="text/x-kendo-template">
                <div class='longtext #= parentId === null ? "top" : "child" #' id='longtext-#= idString #'>
                # if (TotalLongText > 0) { #
                    <input type='hidden' value='#= LongTextUri #' />
                    <a onclick='MC.Models.Modules.ShowModuleEdit(this, MC.Models.Modules.MODULETYPE.LONGTEXT)' href='\\#popupModuleEdit' class='btn btnLongText' @popupAttributes>#= TotalLongText #</a>
                # } else if(ModuleExtensionLongText != null) { #
                    <input type='hidden' value='#= LongTextUri #' />
                    <a onclick='MC.Models.Modules.ShowModuleEdit(this, MC.Models.Modules.MODULETYPE.LONGTEXT)' href='\\#popupModuleEdit' class='btn btnPrimary btnAdd' @popupAttributes></a>
                # } #
                </div>
            </script>

            <script id="classification-template" type="text/x-kendo-template">
                <div class='classification #= parentId === null ? "top" : "child" #' id='classification-#= idString #'>
                # if (TotalClassification > 0 ) { #
                    <input type='hidden' value='#= ClassificationGenericUri #' />
                    <a onclick='MC.Models.Modules.ShowModuleEditPlaintext(this, MC.Models.Modules.MODULETYPE.CLASSIFICATION)' href='\\#popupModuleEditPlaintext' class='btn btnClassification' @popupAttributes>#= TotalClassification #</a>
                # } else if(ModuleExtensionClassifications != null) { #
                    <input type='hidden' value='#= ClassificationGenericUri #' />
                    <a onclick='MC.Models.Modules.ShowModuleEditPlaintext(this, MC.Models.Modules.MODULETYPE.CLASSIFICATION)' href='\\#popupModuleEditPlaintext' class='btn btnPrimary btnAdd' @popupAttributes></a>
                # } #
                </div>
            </script>

            <script id="partnerroles-template" type="text/x-kendo-template">
                <div class='partnerroles #= parentId === null ? "top" : "child" #' id='partnerroles-#= idString #'>
                # if (TotalPartnerRoles > 0 ) { #
                    <input type='hidden' value='#= PartnerRolesUri #' />
                    <a href='\\#popupModuleEdit' onclick='MC.Models.Modules.ShowModuleEdit(this, MC.Models.Modules.MODULETYPE.PARTNERROLES)' class='btn btnPartnerRoles' @popupAttributes>#= TotalPartnerRoles #</a>
                # } else if(ModuleExtensionPartnerRoles !== null) { #
                    <input type='hidden' value='#= PartnerRolesUri #' />
                    <a onclick='MC.Models.Modules.ShowModuleEdit(this, MC.Models.Modules.MODULETYPE.PARTNERROLES)' href='\\#popupModuleEdit' class='btn btnPrimary btnAdd' @popupAttributes></a>
                # } #
                </div>
            </script>

            <script id="status-template" type="text/x-kendo-template">
                <div class='status #= parentId === null ? "top" : "child" #' id='status-#= idString #'>
                # if (TotalStatus > 0 ) { #
                    <input type='hidden' value='#= StatusUri #' />
                    <a href='\\#popupModuleEditPlaintext' onclick='MC.Models.Modules.ShowModuleEditPlaintext(this, MC.Models.Modules.MODULETYPE.STATUS)' class='btn btnPartnerRoles' @popupAttributes>#= TotalStatus #</a>
                # } else if(ModuleExtensionStatus != null) { #
                    <input type='hidden' value='#= StatusUri #' />
                    <a onclick='MC.Models.Modules.ShowModuleEditPlaintext(this, MC.Models.Modules.MODULETYPE.STATUS)' href='\\#popupModuleEditPlaintext' class='btn btnPrimary btnAdd' @popupAttributes></a>
                # } #
                </div>
            </script>

            <script id="description-template" type="text/x-kendo-template">
                <div class='description #= parentId === null ? "top" : "child" #' id='description-#= idString #'>
                <textarea class='alwaysHidden'>
                    <p>Created on <b>#= created_on || "-" #</b> by <b>#= created_by || "-" #</b></p>
                    <p>Requires <b>#= requires ? requires.join(",") : "" #</b></p>
                    <pre>#= description || "" #</pre>
                </textarea>
                <a onclick='MC.Models.Modules.ShowModuleInfo(this)' href='\\#popupModulelInfo' data-title='#= name #' data-role='mcPopup' data-textid='#= textid #' class='btn btnInfo' />
                </div>
            </script>

        @(Html.Kendo().TreeList<EveryAngle.Core.ViewModels.Model.ModuleListViewModel>()
            .Name(@Resource.TreeList)
          
            .Columns(columns =>
            {
                columns.Add().Field(e => e.name)
                    .HtmlAttributes(new { @data_role = "tooltip" })
                    .Title(Resource.MC_Module_Column_Name)
                    .TemplateId("name-template");

                columns.Add().Field(e => e.LongTextUri)
                    .TemplateId("longtext-template")
                    .Title(Resource.LongText)
                    .HeaderAttributes(new { @class = "k-header columnBoolean" })
                    .Width(70);

                columns.Add().Field(e => e.ClassificationUri)
                    .TemplateId("classification-template")
                    .HeaderAttributes(new { @class = "k-header columnBoolean" })
                    .HeaderTemplate(Resource.Classif.Replace(" ", "<br/>"))
                    .Width(70);

                columns.Add().Field(e => e.PartnerRolesUri)
                    .TemplateId("partnerroles-template")
                    .HeaderAttributes(new { @class = "k-header columnBoolean" })
                    .HeaderTemplate(Resource.PartnerRoles.Replace(" ", "<br/>"))
                    .Width(70);
                
                columns.Add().Field(e => e.StatusUri)
                    .TemplateId("status-template")
                    .HeaderAttributes(new { @class = "k-header columnBoolean" })
                    .HeaderTemplate(Resource.Status)
                    .Width(70); 
            
                columns.Add().Field(e => e.description)
                    .TemplateId("description-template")
                    .Title(" ")
                    .Width(50);
        })
        .Filterable(false)
        .DataSource(dataSource => dataSource
            .Read(read => read.Action("ReadModules", "Module", new { modelUri = ViewBag.ModelUri }))
            .ServerOperation(false)
            .Sort(s =>
            {              
                s.Add(m => m.name);
            })
            .Model(m =>
            {
                m.Id(f => f.fakeId);
                m.ParentId(f => f.parentId);
                m.Field(f => f.name);
                m.Field(f => f.description);
                m.Field(f => f.parentId);
                
            })
        )
        .Height(640)
     )

    





        </div>
        @{

            var collpaseButton = "<a class='btn btnLarge btnPrimary btnCollapseAll' onclick='MC.Models.Modules.CollapseOrExpandAllModules(MC.Models.Modules.COLLAPSIBLE.COLLAPSE)'>" + Resource.MC_CollapseAll + "</a>";
            var expandButton = "<a class='btn btnLarge btnPrimary btnExpandAll' onclick='MC.Models.Modules.CollapseOrExpandAllModules(MC.Models.Modules.COLLAPSIBLE.EXPAND)'>" + Resource.MC_ExpandAll + "</a>";

                                   
            @Html.Raw(collpaseButton + expandButton);
        }
    </div>
    <!--/.contentSectionGrid-->

    <a class="hidden" id="btnConfirmSave" data-role="mcPopup" data-title="@Resource.MC_ModulesValidation" data-target="#popupConfirmSave" data-width="500" data-min-height="175"></a>
    <div class="popup popupWarning" id="popupConfirmSave">
        <div class="popupContent"></div>
        <div class="popupToolbar">
            <a class="btn" onclick="MC.Models.Modules.CheckDependRow()">@Resource.Ok</a>
            <a class="btn btnPrimary" onclick="MC.Models.Modules.CancelEnabledModule()">Cancel</a>
        </div>
    </div>
    <a class="hidden" id="btnCancelSave" data-role="mcPopup" data-title="@Resource.MC_ModulesValidation" data-target="#popupShowConflict" data-width="500" data-min-height="175"></a>
    <div class="popup popupError" id="popupShowConflict">
        <div class="popupContent"></div>
        <div class="popupToolbar">
            <a class="btn btnPrimary btnClose" data-role="popup-close">@Resource.Ok</a>
        </div>
    </div>
</div>
<div class="popup" id="popupModuleEdit">
    <div class="popupContent">
        <div class="contentSection contentSectionGrid">
            <div class="gridToolbar gridToolbarTop">
                <div class="gridToolbarFilter">
                    <input type="text" placeholder="@Resource.Filter" id="ModuleExtensionFilterBox" data-role="gridfilter" data-method="local" data-target="#ModuleExtensionInfoGrid" data-filter="1,2,3" /><span class="icon"></span>
                </div>
            </div>
            <h2>&nbsp;</h2>
            <div class="gridContainer">
                <div id="ModuleExtensionInfoGrid"></div>
            </div>
        </div>
    </div>
    <div class="popupToolbar">
          @{
              List<PageToolbarButtonModel> buttons = new List<PageToolbarButtonModel>();
                buttons.Add(new PageToolbarButtonModel
                {
                    ModelUri = ViewBag.ModelUri,
                    EnableTemplate = " <a class=\"btn btnPrimary btnUpdate alwaysHidden\" >" + Resource.Save + "</a>"
                                   + " <a class=\"btn btnClose\" data-role=\"popup-close\">" +Resource.Cancel + "</a>",
                    DisableTemplate = " <a class=\"btn btnPrimary disabled \" >" + Resource.Save + "</a>"
                                   + " <a class=\"btn btnClose\" data-role=\"popup-close\">" + Resource.Cancel + "</a>",
                    Type = PageToolbarButtonType.Custom,
                    Privilege = PrivilegeType.Model
                });
                @Html.RenderPageToolbarBottom(buttons)    
            }
    </div>
</div>

<div class="popup" id="popupModuleEditPlaintext">
     <div class="popupContent">
       <textarea id="plaintext" rows="3" name="plaintext"  maxlength="2500"></textarea>
    </div>
    <div class="popupToolbar">
    @{
        List<PageToolbarButtonModel> buttonsEditPlainText = new List<PageToolbarButtonModel>();
        buttonsEditPlainText.Add(new PageToolbarButtonModel
        {
            ModelUri = ViewBag.ModelUri,
            EnableTemplate = "  <a class=\"btn btnPrimary btnUpdate alwaysHidden\" >" + Resource.Save +"</a>"
                            + "  <a class=\"btn btnClose\" data-role=\"popup-close\">" +Resource. Close + "</a>",
            DisableTemplate = " <a class=\"btn btnPrimary disabled \" >" + Resource.Save + "</a>"
                            + " <a class=\"btn btnClose\" data-role=\"popup-close\">" + Resource.Close + "</a>",
            Type = PageToolbarButtonType.Custom,
            Privilege = PrivilegeType.Model
        });
        @Html.RenderPageToolbarBottom(buttons)    
    }
    </div>
</div>

<a class="hidden" id="btnShowModuleDescription" data-role="mcPopup" data-title="@Resource.MC_ModulesValidation" data-target="#popupModulelInfo" data-width="700" data-height="500" data-min-height="175"></a>
<div class="popup" id="popupModulelInfo">
    <div class="popupContent"></div>
    <div class="popupToolbar">
        <a  class="btn btnPrimary btnClose" data-role="popup-close">@Resource.Close</a>
    </div>
</div>
<!--/.content-->
